{
    "sourceFile": "servidor/routes/promocoes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1756571592717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756571629661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     }\r\n });\r\n \r\n // DESCRIÇÃO: Guarda a nova percentagem E aplica o desconto a todos os produtos.\r\n-router.post('/clube/desconto-global', async (req, res) => {\r\n+router.post('/clube/desconto-global', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n     const { percentage } = req.body;\r\n \r\n     if (typeof percentage !== 'number' || percentage < 0 || percentage > 100) {\r\n         return res.status(400).json({ message: 'A percentagem deve ser um número entre 0 e 100.' });\r\n@@ -68,9 +68,9 @@\n     }\r\n });\r\n \r\n // DESCRIÇÃO: Adiciona/atualiza a promoção de um produto específico.\r\n-router.post('/produtos/:id', async (req, res) => {\r\n+router.post('/produtos/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n     const { id } = req.params;\r\n     const { porcentagem } = req.body;\r\n \r\n     try {\r\n@@ -86,9 +86,9 @@\n     }\r\n });\r\n \r\n // DESCRIÇÃO: Remove a promoção de um produto.\r\n-router.delete('/produtos/:id', async (req, res) => {\r\n+router.delete('/produtos/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n     const { id } = req.params;\r\n     try {\r\n         const updatedProduct = await Product.findByIdAndUpdate(\r\n             id,\r\n@@ -114,9 +114,9 @@\n });\r\n \r\n // ROTA: POST /api/promocoes/condicional/:id\r\n // DESCRIÇÃO: Cria ou atualiza uma promoção condicional para um produto.\r\n-router.post('/condicional/:id', async (req, res) => {\r\n+router.post('/condicional/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n     const { id } = req.params;\r\n     const { tipo, leve, pague, quantidadeMinima, descontoPorcentagem } = req.body;\r\n \r\n     const updateData = {\r\n@@ -138,9 +138,9 @@\n });\r\n \r\n // ROTA: DELETE /api/promocoes/condicional/:id\r\n // DESCRIÇÃO: Desativa uma promoção condicional de um produto.\r\n-router.delete('/condicional/:id', async (req, res) => {\r\n+router.delete('/condicional/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n     const { id } = req.params;\r\n     try {\r\n         await Product.findByIdAndUpdate(id, { $set: { 'promocaoCondicional.ativa': false } });\r\n         res.json({ message: 'Promoção condicional removida.' });\r\n"
                },
                {
                    "date": 1756580230819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,152 +1,178 @@\n const express = require('express');\r\n const router = express.Router();\r\n const Product = require('../models/Product');\r\n-const Setting = require('../models/Setting'); // <-- ADICIONE ESTA LINHA\r\n+const Setting = require('../models/Setting');\r\n+const requireAuth = require('../middlewares/requireAuth');\r\n const authorizeRoles = require('../middlewares/authorizeRoles');\r\n \r\n-// DESCRIÇÃO: Busca a percentagem de desconto global guardada.\r\n+// GET /api/promocoes/clube/desconto-global (público)\r\n router.get('/clube/desconto-global', async (req, res) => {\r\n     try {\r\n         const discountSetting = await Setting.findOne({ key: 'descontoGlobalClube' });\r\n-        // Se a configuração existir, envia o valor. Senão, envia 0.\r\n         res.json({ percentage: discountSetting ? discountSetting.value : 0 });\r\n     } catch (error) {\r\n+        console.error(\"Erro ao buscar configuração de desconto:\", error);\r\n         res.status(500).json({ message: 'Erro ao buscar configuração de desconto.' });\r\n     }\r\n });\r\n \r\n-// DESCRIÇÃO: Guarda a nova percentagem E aplica o desconto a todos os produtos.\r\n-router.post('/clube/desconto-global', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n-    const { percentage } = req.body;\r\n+// POST /api/promocoes/clube/desconto-global (restrito)\r\n+router.post(\r\n+    '/clube/desconto-global',\r\n+    requireAuth,\r\n+    authorizeRoles('admin', 'admin_master'),\r\n+    async (req, res) => {\r\n+        const { percentage } = req.body;\r\n \r\n-    if (typeof percentage !== 'number' || percentage < 0 || percentage > 100) {\r\n-        return res.status(400).json({ message: 'A percentagem deve ser um número entre 0 e 100.' });\r\n-    }\r\n+        if (typeof percentage !== 'number' || percentage < 0 || percentage > 100) {\r\n+            return res.status(400).json({ message: 'A percentagem deve ser um número entre 0 e 100.' });\r\n+        }\r\n \r\n-    try {\r\n-        // 1. Guarda a nova percentagem na coleção de configurações\r\n-        await Setting.findOneAndUpdate(\r\n-            { key: 'descontoGlobalClube' },\r\n-            { value: percentage },\r\n-            { upsert: true } // Cria o documento se ele não existir\r\n-        );\r\n+        try {\r\n+            await Setting.findOneAndUpdate(\r\n+                { key: 'descontoGlobalClube' },\r\n+                { value: percentage },\r\n+                { upsert: true }\r\n+            );\r\n \r\n-        // 2. Continua com a lógica de aplicar o preço a todos os produtos\r\n-        if (percentage === 0) {\r\n-            await Product.updateMany({}, { $set: { precoClube: null } });\r\n-            return res.json({ message: 'Desconto do ClubEeoBicho removido de todos os produtos.' });\r\n-        }\r\n+            if (percentage === 0) {\r\n+                await Product.updateMany({}, { $set: { precoClube: null } });\r\n+                return res.json({ message: 'Desconto do Clube removido de todos os produtos.' });\r\n+            }\r\n \r\n-        const discountMultiplier = 1 - (percentage / 100);\r\n-        const products = await Product.find({});\r\n-        const bulkOps = products.map(product => ({\r\n-            updateOne: {\r\n-                filter: { _id: product._id },\r\n-                update: { $set: { precoClube: product.venda * discountMultiplier } }\r\n+            const discountMultiplier = 1 - (percentage / 100);\r\n+            const products = await Product.find({});\r\n+            const bulkOps = products.map(product => ({\r\n+                updateOne: {\r\n+                    filter: { _id: product._id },\r\n+                    update: { $set: { precoClube: product.venda * discountMultiplier } }\r\n+                }\r\n+            }));\r\n+\r\n+            if (bulkOps.length > 0) {\r\n+                await Product.bulkWrite(bulkOps);\r\n             }\r\n-        }));\r\n \r\n-        if (bulkOps.length > 0) {\r\n-            await Product.bulkWrite(bulkOps);\r\n+            res.json({ message: `Desconto de ${percentage}% aplicado a ${products.length} produtos.` });\r\n+        } catch (error) {\r\n+            console.error('Erro ao aplicar desconto global:', error);\r\n+            res.status(500).json({ message: 'Erro no servidor ao aplicar desconto.' });\r\n         }\r\n-\r\n-        res.json({ message: `Desconto de ${percentage}% aplicado a ${products.length} produtos com sucesso!` });\r\n-\r\n-    } catch (error) {\r\n-        console.error('Erro ao aplicar desconto global:', error);\r\n-        res.status(500).json({ message: 'Erro no servidor ao aplicar desconto.' });\r\n     }\r\n-});\r\n+);\r\n \r\n-// DESCRIÇÃO: Retorna uma lista de todos os produtos que estão com promoção ativa.\r\n+// GET /api/promocoes/produtos (público)\r\n router.get('/produtos', async (req, res) => {\r\n     try {\r\n         const promoProducts = await Product.find({ 'promocao.ativa': true });\r\n         res.json(promoProducts);\r\n     } catch (error) {\r\n+        console.error(\"Erro ao buscar produtos em promoção:\", error);\r\n         res.status(500).json({ message: 'Erro ao buscar produtos em promoção.' });\r\n     }\r\n });\r\n \r\n-// DESCRIÇÃO: Adiciona/atualiza a promoção de um produto específico.\r\n-router.post('/produtos/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { porcentagem } = req.body;\r\n+// POST /api/promocoes/produtos/:id (restrito)\r\n+router.post(\r\n+    '/produtos/:id',\r\n+    requireAuth,\r\n+    authorizeRoles('admin', 'admin_master'),\r\n+    async (req, res) => {\r\n+        const { id } = req.params;\r\n+        const { porcentagem } = req.body;\r\n \r\n-    try {\r\n-        const updatedProduct = await Product.findByIdAndUpdate(\r\n-            id,\r\n-            { $set: { 'promocao.ativa': true, 'promocao.porcentagem': porcentagem } },\r\n-            { new: true }\r\n-        );\r\n-        if (!updatedProduct) return res.status(404).json({ message: 'Produto não encontrado.' });\r\n-        res.json(updatedProduct);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: 'Erro ao atualizar a promoção do produto.' });\r\n+        try {\r\n+            const updatedProduct = await Product.findByIdAndUpdate(\r\n+                id,\r\n+                { $set: { 'promocao.ativa': true, 'promocao.porcentagem': porcentagem } },\r\n+                { new: true }\r\n+            );\r\n+            if (!updatedProduct) return res.status(404).json({ message: 'Produto não encontrado.' });\r\n+            res.json(updatedProduct);\r\n+        } catch (error) {\r\n+            console.error(\"Erro ao atualizar promoção:\", error);\r\n+            res.status(500).json({ message: 'Erro ao atualizar a promoção do produto.' });\r\n+        }\r\n     }\r\n-});\r\n+);\r\n \r\n-// DESCRIÇÃO: Remove a promoção de um produto.\r\n\\ No newline at end of file\n-router.delete('/produtos/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n-    const { id } = req.params;\r\n-    try {\r\n-        const updatedProduct = await Product.findByIdAndUpdate(\r\n-            id,\r\n-            { $set: { 'promocao.ativa': false, 'promocao.porcentagem': 0 } },\r\n-            { new: true }\r\n-        );\r\n-        if (!updatedProduct) return res.status(404).json({ message: 'Produto não encontrado.' });\r\n-        res.json({ message: 'Promoção removida com sucesso.' });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: 'Erro ao remover a promoção do produto.' });\r\n+// DELETE /api/promocoes/produtos/:id (restrito)\r\n+router.delete(\r\n+    '/produtos/:id',\r\n+    requireAuth,\r\n+    authorizeRoles('admin', 'admin_master'),\r\n+    async (req, res) => {\r\n+        const { id } = req.params;\r\n+        try {\r\n+            const updatedProduct = await Product.findByIdAndUpdate(\r\n+                id,\r\n+                { $set: { 'promocao.ativa': false, 'promocao.porcentagem': 0 } },\r\n+                { new: true }\r\n+            );\r\n+            if (!updatedProduct) return res.status(404).json({ message: 'Produto não encontrado.' });\r\n+            res.json({ message: 'Promoção removida com sucesso.' });\r\n+        } catch (error) {\r\n+            console.error(\"Erro ao remover promoção:\", error);\r\n+            res.status(500).json({ message: 'Erro ao remover a promoção do produto.' });\r\n+        }\r\n     }\r\n-});\r\n+);\r\n \r\n-// ROTA: GET /api/promocoes/condicional\r\n-// DESCRIÇÃO: Retorna todos os produtos com promoção condicional ativa.\r\n+// GET /api/promocoes/condicional (público)\r\n router.get('/condicional', async (req, res) => {\r\n     try {\r\n         const products = await Product.find({ 'promocaoCondicional.ativa': true });\r\n         res.json(products);\r\n     } catch (error) {\r\n+        console.error(\"Erro ao buscar promoções condicionais:\", error);\r\n         res.status(500).json({ message: 'Erro ao buscar promoções condicionais.' });\r\n     }\r\n });\r\n \r\n-// ROTA: POST /api/promocoes/condicional/:id\r\n-// DESCRIÇÃO: Cria ou atualiza uma promoção condicional para um produto.\r\n-router.post('/condicional/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { tipo, leve, pague, quantidadeMinima, descontoPorcentagem } = req.body;\r\n+// POST /api/promocoes/condicional/:id (restrito)\r\n+router.post(\r\n+    '/condicional/:id',\r\n+    requireAuth,\r\n+    authorizeRoles('admin', 'admin_master'),\r\n+    async (req, res) => {\r\n+        const { id } = req.params;\r\n+        const { tipo, leve, pague, quantidadeMinima, descontoPorcentagem } = req.body;\r\n \r\n-    const updateData = {\r\n-        'promocaoCondicional.ativa': true,\r\n-        'promocaoCondicional.tipo': tipo,\r\n-        'promocaoCondicional.leve': leve,\r\n-        'promocaoCondicional.pague': pague,\r\n-        'promocaoCondicional.quantidadeMinima': quantidadeMinima,\r\n-        'promocaoCondicional.descontoPorcentagem': descontoPorcentagem,\r\n-    };\r\n+        const updateData = {\r\n+            'promocaoCondicional.ativa': true,\r\n+            'promocaoCondicional.tipo': tipo,\r\n+            'promocaoCondicional.leve': leve,\r\n+            'promocaoCondicional.pague': pague,\r\n+            'promocaoCondicional.quantidadeMinima': quantidadeMinima,\r\n+            'promocaoCondicional.descontoPorcentagem': descontoPorcentagem,\r\n+        };\r\n \r\n-    try {\r\n-        const updatedProduct = await Product.findByIdAndUpdate(id, { $set: updateData }, { new: true });\r\n-        if (!updatedProduct) return res.status(404).json({ message: 'Produto não encontrado.' });\r\n-        res.json(updatedProduct);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: 'Erro ao salvar promoção condicional.' });\r\n+        try {\r\n+            const updatedProduct = await Product.findByIdAndUpdate(id, { $set: updateData }, { new: true });\r\n+            if (!updatedProduct) return res.status(404).json({ message: 'Produto não encontrado.' });\r\n+            res.json(updatedProduct);\r\n+        } catch (error) {\r\n+            console.error(\"Erro ao salvar promoção condicional:\", error);\r\n+            res.status(500).json({ message: 'Erro ao salvar promoção condicional.' });\r\n+        }\r\n     }\r\n-});\r\n+);\r\n \r\n-// ROTA: DELETE /api/promocoes/condicional/:id\r\n-// DESCRIÇÃO: Desativa uma promoção condicional de um produto.\r\n-router.delete('/condicional/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n-    const { id } = req.params;\r\n-    try {\r\n-        await Product.findByIdAndUpdate(id, { $set: { 'promocaoCondicional.ativa': false } });\r\n-        res.json({ message: 'Promoção condicional removida.' });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: 'Erro ao remover promoção condicional.' });\r\n+// DELETE /api/promocoes/condicional/:id (restrito)\r\n+router.delete(\r\n+    '/condicional/:id',\r\n+    requireAuth,\r\n+    authorizeRoles('admin', 'admin_master'),\r\n+    async (req, res) => {\r\n+        const { id } = req.params;\r\n+        try {\r\n+            await Product.findByIdAndUpdate(id, { $set: { 'promocaoCondicional.ativa': false } });\r\n+            res.json({ message: 'Promoção condicional removida.' });\r\n+        } catch (error) {\r\n+            console.error(\"Erro ao remover promoção condicional:\", error);\r\n+            res.status(500).json({ message: 'Erro ao remover promoção condicional.' });\r\n+        }\r\n     }\r\n-});\r\n+);\r\n \r\n-module.exports = router;\n+module.exports = router;\r\n"
                }
            ],
            "date": 1756571592717,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst Product = require('../models/Product');\r\nconst Setting = require('../models/Setting'); // <-- ADICIONE ESTA LINHA\r\nconst authorizeRoles = require('../middlewares/authorizeRoles');\r\n\r\n// DESCRIÇÃO: Busca a percentagem de desconto global guardada.\r\nrouter.get('/clube/desconto-global', async (req, res) => {\r\n    try {\r\n        const discountSetting = await Setting.findOne({ key: 'descontoGlobalClube' });\r\n        // Se a configuração existir, envia o valor. Senão, envia 0.\r\n        res.json({ percentage: discountSetting ? discountSetting.value : 0 });\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao buscar configuração de desconto.' });\r\n    }\r\n});\r\n\r\n// DESCRIÇÃO: Guarda a nova percentagem E aplica o desconto a todos os produtos.\r\nrouter.post('/clube/desconto-global', async (req, res) => {\r\n    const { percentage } = req.body;\r\n\r\n    if (typeof percentage !== 'number' || percentage < 0 || percentage > 100) {\r\n        return res.status(400).json({ message: 'A percentagem deve ser um número entre 0 e 100.' });\r\n    }\r\n\r\n    try {\r\n        // 1. Guarda a nova percentagem na coleção de configurações\r\n        await Setting.findOneAndUpdate(\r\n            { key: 'descontoGlobalClube' },\r\n            { value: percentage },\r\n            { upsert: true } // Cria o documento se ele não existir\r\n        );\r\n\r\n        // 2. Continua com a lógica de aplicar o preço a todos os produtos\r\n        if (percentage === 0) {\r\n            await Product.updateMany({}, { $set: { precoClube: null } });\r\n            return res.json({ message: 'Desconto do ClubEeoBicho removido de todos os produtos.' });\r\n        }\r\n\r\n        const discountMultiplier = 1 - (percentage / 100);\r\n        const products = await Product.find({});\r\n        const bulkOps = products.map(product => ({\r\n            updateOne: {\r\n                filter: { _id: product._id },\r\n                update: { $set: { precoClube: product.venda * discountMultiplier } }\r\n            }\r\n        }));\r\n\r\n        if (bulkOps.length > 0) {\r\n            await Product.bulkWrite(bulkOps);\r\n        }\r\n\r\n        res.json({ message: `Desconto de ${percentage}% aplicado a ${products.length} produtos com sucesso!` });\r\n\r\n    } catch (error) {\r\n        console.error('Erro ao aplicar desconto global:', error);\r\n        res.status(500).json({ message: 'Erro no servidor ao aplicar desconto.' });\r\n    }\r\n});\r\n\r\n// DESCRIÇÃO: Retorna uma lista de todos os produtos que estão com promoção ativa.\r\nrouter.get('/produtos', async (req, res) => {\r\n    try {\r\n        const promoProducts = await Product.find({ 'promocao.ativa': true });\r\n        res.json(promoProducts);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao buscar produtos em promoção.' });\r\n    }\r\n});\r\n\r\n// DESCRIÇÃO: Adiciona/atualiza a promoção de um produto específico.\r\nrouter.post('/produtos/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    const { porcentagem } = req.body;\r\n\r\n    try {\r\n        const updatedProduct = await Product.findByIdAndUpdate(\r\n            id,\r\n            { $set: { 'promocao.ativa': true, 'promocao.porcentagem': porcentagem } },\r\n            { new: true }\r\n        );\r\n        if (!updatedProduct) return res.status(404).json({ message: 'Produto não encontrado.' });\r\n        res.json(updatedProduct);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao atualizar a promoção do produto.' });\r\n    }\r\n});\r\n\r\n// DESCRIÇÃO: Remove a promoção de um produto.\r\nrouter.delete('/produtos/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    try {\r\n        const updatedProduct = await Product.findByIdAndUpdate(\r\n            id,\r\n            { $set: { 'promocao.ativa': false, 'promocao.porcentagem': 0 } },\r\n            { new: true }\r\n        );\r\n        if (!updatedProduct) return res.status(404).json({ message: 'Produto não encontrado.' });\r\n        res.json({ message: 'Promoção removida com sucesso.' });\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao remover a promoção do produto.' });\r\n    }\r\n});\r\n\r\n// ROTA: GET /api/promocoes/condicional\r\n// DESCRIÇÃO: Retorna todos os produtos com promoção condicional ativa.\r\nrouter.get('/condicional', async (req, res) => {\r\n    try {\r\n        const products = await Product.find({ 'promocaoCondicional.ativa': true });\r\n        res.json(products);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao buscar promoções condicionais.' });\r\n    }\r\n});\r\n\r\n// ROTA: POST /api/promocoes/condicional/:id\r\n// DESCRIÇÃO: Cria ou atualiza uma promoção condicional para um produto.\r\nrouter.post('/condicional/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    const { tipo, leve, pague, quantidadeMinima, descontoPorcentagem } = req.body;\r\n\r\n    const updateData = {\r\n        'promocaoCondicional.ativa': true,\r\n        'promocaoCondicional.tipo': tipo,\r\n        'promocaoCondicional.leve': leve,\r\n        'promocaoCondicional.pague': pague,\r\n        'promocaoCondicional.quantidadeMinima': quantidadeMinima,\r\n        'promocaoCondicional.descontoPorcentagem': descontoPorcentagem,\r\n    };\r\n\r\n    try {\r\n        const updatedProduct = await Product.findByIdAndUpdate(id, { $set: updateData }, { new: true });\r\n        if (!updatedProduct) return res.status(404).json({ message: 'Produto não encontrado.' });\r\n        res.json(updatedProduct);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao salvar promoção condicional.' });\r\n    }\r\n});\r\n\r\n// ROTA: DELETE /api/promocoes/condicional/:id\r\n// DESCRIÇÃO: Desativa uma promoção condicional de um produto.\r\nrouter.delete('/condicional/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    try {\r\n        await Product.findByIdAndUpdate(id, { $set: { 'promocaoCondicional.ativa': false } });\r\n        res.json({ message: 'Promoção condicional removida.' });\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao remover promoção condicional.' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"
        }
    ]
}