{
    "sourceFile": "servidor/routes/adminFuncionarios.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1756594906827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756594964144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // servidor/routes/adminFuncionarios.js\r\n const express = require('express');\r\n const router = express.Router();\r\n const User = require('../models/User'); // ajuste o caminho do seu model de usuário\r\n-const authMiddleware = require('../middleware/authMiddleware');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n \r\n // 🔒 Todas as rotas daqui exigem autenticação e cargo admin/admin_master\r\n function requireAdmin(req, res, next) {\r\n   if (req.user.role === 'admin' || req.user.role === 'admin_master') {\r\n"
                },
                {
                    "date": 1756595820307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,68 +1,255 @@\n-// servidor/routes/adminFuncionarios.js\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-const User = require('../models/User'); // ajuste o caminho do seu model de usuário\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n+// scripts/admin/admin-funcionarios.js\r\n+document.addEventListener('DOMContentLoaded', () => {\r\n+  // Containers/elementos da página\r\n+  const pageContainer = document.querySelector('.bg-white.rounded-lg.shadow.p-6');\r\n+  const listContainer = document.getElementById('funcionarios-container') || pageContainer;\r\n \r\n-// 🔒 Todas as rotas daqui exigem autenticação e cargo admin/admin_master\r\n-function requireAdmin(req, res, next) {\r\n-  if (req.user.role === 'admin' || req.user.role === 'admin_master') {\r\n-    return next();\r\n+  const btnAdd = document.getElementById('btn-add-funcionario');\r\n+\r\n+  // Modal e formulário\r\n+  const modal = document.getElementById('funcionario-modal');\r\n+  const modalTitle = document.getElementById('funcionario-modal-title');\r\n+  const form = document.getElementById('funcionario-form');\r\n+\r\n+  const inputId = document.getElementById('funcionario-id');\r\n+  const inputNome = document.getElementById('nome');\r\n+  const inputEmail = document.getElementById('email');\r\n+  const inputSenha = document.getElementById('senha');\r\n+  const selectRole = document.getElementById('role');\r\n+\r\n+  // Token do usuário logado\r\n+  const loggedInUser = (() => {\r\n+    try { return JSON.parse(localStorage.getItem('loggedInUser')); } catch { return null; }\r\n+  })();\r\n+  const token = loggedInUser?.token || '';\r\n+\r\n+  // Base correta da API (rota montada no servidor como /api/admin/funcionarios)\r\n+  const BASE = `${API_CONFIG.BASE_URL}/admin/funcionarios`;\r\n+\r\n+  // Helpers de UI\r\n+  function toastErro(msg = 'Ocorreu um erro') {\r\n+    console.error(msg);\r\n+    if (listContainer) listContainer.insertAdjacentHTML('afterbegin', `<p class=\"text-red-600 mb-3\">${msg}</p>`);\r\n+    alert(msg);\r\n   }\r\n-  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n-}\r\n \r\n-// 📌 Listar funcionários\r\n-router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const funcionarios = await User.find({ role: { $in: ['funcionario', 'admin'] } }).select('-password');\r\n-    res.json(funcionarios);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+  function openModal(modo = 'create', dados = null) {\r\n+    if (!modal) return;\r\n+    modal.classList.remove('hidden');\r\n+\r\n+    if (modo === 'create') {\r\n+      modalTitle.textContent = 'Adicionar Funcionário';\r\n+      inputId.value = '';\r\n+      inputNome.value = '';\r\n+      inputEmail.value = '';\r\n+      inputSenha.value = '';\r\n+      selectRole.value = 'funcionario';\r\n+    } else {\r\n+      modalTitle.textContent = 'Editar Funcionário';\r\n+      inputId.value = dados?._id || '';\r\n+      inputNome.value = dados?.nomeCompleto || '';\r\n+      inputEmail.value = dados?.email || '';\r\n+      inputSenha.value = ''; // senha só se o admin quiser redefinir\r\n+      selectRole.value = dados?.role || 'funcionario';\r\n+    }\r\n   }\r\n-});\r\n \r\n-// 📌 Criar funcionário\r\n-router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, email, senha, role } = req.body;\r\n+  function closeModal() {\r\n+    if (!modal) return;\r\n+    modal.classList.add('hidden');\r\n+  }\r\n \r\n-    const existente = await User.findOne({ email });\r\n-    if (existente) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+  // Fechar modal ao clicar fora\r\n+  if (modal) {\r\n+    modal.addEventListener('click', (ev) => {\r\n+      if (ev.target === modal) closeModal();\r\n+    });\r\n+  }\r\n \r\n-    const novo = new User({ nome, email, password: senha, role: role || 'funcionario' });\r\n-    await novo.save();\r\n+  // Chamada de API (com token)\r\n+  async function apiGet() {\r\n+    return fetch(BASE, { headers: { 'Authorization': `Bearer ${token}` } });\r\n+  }\r\n+  async function apiPost(body) {\r\n+    return fetch(BASE, {\r\n+      method: 'POST',\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'Authorization': `Bearer ${token}`\r\n+      },\r\n+      body: JSON.stringify(body)\r\n+    });\r\n+  }\r\n+  async function apiPut(id, body) {\r\n+    return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n+      method: 'PUT',\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'Authorization': `Bearer ${token}`\r\n+      },\r\n+      body: JSON.stringify(body)\r\n+    });\r\n+  }\r\n+  async function apiDelete(id) {\r\n+    return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n+      method: 'DELETE',\r\n+      headers: { 'Authorization': `Bearer ${token}` }\r\n+    });\r\n+  }\r\n \r\n-    res.json({ message: 'Funcionário criado com sucesso.' });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+  function renderTabela(funcionarios = []) {\r\n+    if (!Array.isArray(funcionarios)) funcionarios = [];\r\n+\r\n+    if (!funcionarios.length) {\r\n+      listContainer.innerHTML = `\r\n+        <div class=\"text-gray-600\">Nenhum funcionário encontrado.</div>\r\n+      `;\r\n+      return;\r\n+    }\r\n+\r\n+    const rows = funcionarios.map(f => {\r\n+      const nome = f.nomeCompleto || f.username || '(sem nome)';\r\n+      const email = f.email || '';\r\n+      const role = f.role || '-';\r\n+      const id = f._id || f.id || '';\r\n+      return `\r\n+        <tr class=\"border-b\">\r\n+          <td class=\"px-4 py-2 whitespace-nowrap font-medium\">${nome}</td>\r\n+          <td class=\"px-4 py-2\">${email}</td>\r\n+          <td class=\"px-4 py-2\">\r\n+            <span class=\"inline-block px-2 py-1 text-xs rounded bg-gray-100\">${role}</span>\r\n+          </td>\r\n+          <td class=\"px-4 py-2 text-right\">\r\n+            <button data-action=\"edit\" data-id=\"${id}\" class=\"text-blue-600 hover:underline mr-3\">Editar</button>\r\n+            <button data-action=\"delete\" data-id=\"${id}\" class=\"text-red-600 hover:underline\">Excluir</button>\r\n+          </td>\r\n+        </tr>\r\n+      `;\r\n+    }).join('');\r\n+\r\n+    listContainer.innerHTML = `\r\n+      <div class=\"overflow-x-auto\">\r\n+        <table class=\"min-w-full text-sm\">\r\n+          <thead>\r\n+            <tr class=\"text-left text-gray-500 border-b\">\r\n+              <th class=\"px-4 py-2\">Nome</th>\r\n+              <th class=\"px-4 py-2\">Email</th>\r\n+              <th class=\"px-4 py-2\">Cargo</th>\r\n+              <th class=\"px-4 py-2 text-right\">Ações</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>${rows}</tbody>\r\n+        </table>\r\n+      </div>\r\n+    `;\r\n   }\r\n-});\r\n \r\n-// 📌 Atualizar funcionário\r\n-router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, email, senha, role } = req.body;\r\n+  async function loadFuncionarios() {\r\n+    if (!token) {\r\n+      listContainer.innerHTML = `<p class=\"text-red-600\">Sessão expirada. Faça login novamente.</p>`;\r\n+      return;\r\n+    }\r\n \r\n-    const updateData = { nome, email, role };\r\n-    if (senha) updateData.password = senha;\r\n+    listContainer.innerHTML = `<p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n \r\n-    await User.findByIdAndUpdate(req.params.id, updateData);\r\n-    res.json({ message: 'Funcionário atualizado com sucesso.' });\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n+    try {\r\n+      const res = await apiGet();\r\n+      if (!res.ok) throw new Error('Erro ao carregar funcionários');\r\n+\r\n+      const data = await res.json();\r\n+      // Aceita tanto {items: [...]} quanto array direto\r\n+      const lista = Array.isArray(data) ? data : (data.items || data.funcionarios || data.users || []);\r\n+      renderTabela(lista);\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      listContainer.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n+    }\r\n   }\r\n-});\r\n \r\n-// 📌 Deletar funcionário\r\n-router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    await User.findByIdAndDelete(req.params.id);\r\n-    res.json({ message: 'Funcionário removido com sucesso.' });\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n+  // Delegação de eventos para botões Editar/Excluir da tabela\r\n+  listContainer.addEventListener('click', async (ev) => {\r\n+    const btn = ev.target.closest('button');\r\n+    if (!btn) return;\r\n+\r\n+    const action = btn.getAttribute('data-action');\r\n+    const id = btn.getAttribute('data-id');\r\n+\r\n+    if (action === 'edit') {\r\n+      // Tentamos pegar os dados da linha (para preencher o modal)\r\n+      const tr = btn.closest('tr');\r\n+      const tds = tr ? tr.querySelectorAll('td') : [];\r\n+      const dados = {\r\n+        _id: id,\r\n+        nomeCompleto: tds[0]?.textContent?.trim() || '',\r\n+        email: tds[1]?.textContent?.trim() || '',\r\n+        role: tds[2]?.innerText?.trim() || 'funcionario'\r\n+      };\r\n+      openModal('edit', dados);\r\n+    }\r\n+\r\n+    if (action === 'delete') {\r\n+      const ok = confirm('Tem certeza que deseja excluir este funcionário?');\r\n+      if (!ok) return;\r\n+      try {\r\n+        const res = await apiDelete(id);\r\n+        if (!res.ok) throw new Error('Erro ao excluir funcionário');\r\n+        alert('Funcionário excluído com sucesso!');\r\n+        await loadFuncionarios();\r\n+      } catch (err) {\r\n+        toastErro('Erro ao excluir funcionário.');\r\n+      }\r\n+    }\r\n+  });\r\n+\r\n+  // Botão \"Adicionar Funcionário\"\r\n+  if (btnAdd) {\r\n+    btnAdd.addEventListener('click', () => openModal('create'));\r\n   }\r\n+\r\n+  // Submit do formulário (criar/editar)\r\n+  if (form) {\r\n+    form.addEventListener('submit', async (ev) => {\r\n+      ev.preventDefault();\r\n+\r\n+      const id = inputId.value.trim();\r\n+      const payload = {\r\n+        nomeCompleto: inputNome.value.trim(),\r\n+        email: inputEmail.value.trim(),\r\n+        role: selectRole.value\r\n+      };\r\n+      // senha só vai se estiver preenchida (para criação ou redefinição)\r\n+      if (inputSenha.value.trim()) {\r\n+        payload.senha = inputSenha.value.trim();\r\n+      }\r\n+\r\n+      try {\r\n+        let res;\r\n+        if (id) {\r\n+          // Atualizar\r\n+          res = await apiPut(id, payload);\r\n+        } else {\r\n+          // Criar\r\n+          // Caso seu backend exija algum campo obrigatório extra (ex.: tipoConta),\r\n+          // defina aqui. Exemplo padrão:\r\n+          if (!payload.tipoConta) payload.tipoConta = 'pessoa_fisica';\r\n+          res = await apiPost(payload);\r\n+        }\r\n+\r\n+        if (!res.ok) {\r\n+          const errText = await res.text();\r\n+          throw new Error(errText || 'Erro ao salvar funcionário');\r\n+        }\r\n+\r\n+        closeModal();\r\n+        await loadFuncionarios();\r\n+        alert('Dados salvos com sucesso!');\r\n+      } catch (err) {\r\n+        console.error(err);\r\n+        toastErro('Não foi possível salvar os dados do funcionário.');\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Carrega na entrada\r\n+  loadFuncionarios();\r\n });\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1756595825989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,255 @@\n+// scripts/admin/admin-funcionarios.js\r\n+document.addEventListener('DOMContentLoaded', () => {\r\n+  // Containers/elementos da página\r\n+  const pageContainer = document.querySelector('.bg-white.rounded-lg.shadow.p-6');\r\n+  const listContainer = document.getElementById('funcionarios-container') || pageContainer;\r\n+\r\n+  const btnAdd = document.getElementById('btn-add-funcionario');\r\n+\r\n+  // Modal e formulário\r\n+  const modal = document.getElementById('funcionario-modal');\r\n+  const modalTitle = document.getElementById('funcionario-modal-title');\r\n+  const form = document.getElementById('funcionario-form');\r\n+\r\n+  const inputId = document.getElementById('funcionario-id');\r\n+  const inputNome = document.getElementById('nome');\r\n+  const inputEmail = document.getElementById('email');\r\n+  const inputSenha = document.getElementById('senha');\r\n+  const selectRole = document.getElementById('role');\r\n+\r\n+  // Token do usuário logado\r\n+  const loggedInUser = (() => {\r\n+    try { return JSON.parse(localStorage.getItem('loggedInUser')); } catch { return null; }\r\n+  })();\r\n+  const token = loggedInUser?.token || '';\r\n+\r\n+  // Base correta da API (rota montada no servidor como /api/admin/funcionarios)\r\n+  const BASE = `${API_CONFIG.BASE_URL}/admin/funcionarios`;\r\n+\r\n+  // Helpers de UI\r\n+  function toastErro(msg = 'Ocorreu um erro') {\r\n+    console.error(msg);\r\n+    if (listContainer) listContainer.insertAdjacentHTML('afterbegin', `<p class=\"text-red-600 mb-3\">${msg}</p>`);\r\n+    alert(msg);\r\n+  }\r\n+\r\n+  function openModal(modo = 'create', dados = null) {\r\n+    if (!modal) return;\r\n+    modal.classList.remove('hidden');\r\n+\r\n+    if (modo === 'create') {\r\n+      modalTitle.textContent = 'Adicionar Funcionário';\r\n+      inputId.value = '';\r\n+      inputNome.value = '';\r\n+      inputEmail.value = '';\r\n+      inputSenha.value = '';\r\n+      selectRole.value = 'funcionario';\r\n+    } else {\r\n+      modalTitle.textContent = 'Editar Funcionário';\r\n+      inputId.value = dados?._id || '';\r\n+      inputNome.value = dados?.nomeCompleto || '';\r\n+      inputEmail.value = dados?.email || '';\r\n+      inputSenha.value = ''; // senha só se o admin quiser redefinir\r\n+      selectRole.value = dados?.role || 'funcionario';\r\n+    }\r\n+  }\r\n+\r\n+  function closeModal() {\r\n+    if (!modal) return;\r\n+    modal.classList.add('hidden');\r\n+  }\r\n+\r\n+  // Fechar modal ao clicar fora\r\n+  if (modal) {\r\n+    modal.addEventListener('click', (ev) => {\r\n+      if (ev.target === modal) closeModal();\r\n+    });\r\n+  }\r\n+\r\n+  // Chamada de API (com token)\r\n+  async function apiGet() {\r\n+    return fetch(BASE, { headers: { 'Authorization': `Bearer ${token}` } });\r\n+  }\r\n+  async function apiPost(body) {\r\n+    return fetch(BASE, {\r\n+      method: 'POST',\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'Authorization': `Bearer ${token}`\r\n+      },\r\n+      body: JSON.stringify(body)\r\n+    });\r\n+  }\r\n+  async function apiPut(id, body) {\r\n+    return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n+      method: 'PUT',\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'Authorization': `Bearer ${token}`\r\n+      },\r\n+      body: JSON.stringify(body)\r\n+    });\r\n+  }\r\n+  async function apiDelete(id) {\r\n+    return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n+      method: 'DELETE',\r\n+      headers: { 'Authorization': `Bearer ${token}` }\r\n+    });\r\n+  }\r\n+\r\n+  function renderTabela(funcionarios = []) {\r\n+    if (!Array.isArray(funcionarios)) funcionarios = [];\r\n+\r\n+    if (!funcionarios.length) {\r\n+      listContainer.innerHTML = `\r\n+        <div class=\"text-gray-600\">Nenhum funcionário encontrado.</div>\r\n+      `;\r\n+      return;\r\n+    }\r\n+\r\n+    const rows = funcionarios.map(f => {\r\n+      const nome = f.nomeCompleto || f.username || '(sem nome)';\r\n+      const email = f.email || '';\r\n+      const role = f.role || '-';\r\n+      const id = f._id || f.id || '';\r\n+      return `\r\n+        <tr class=\"border-b\">\r\n+          <td class=\"px-4 py-2 whitespace-nowrap font-medium\">${nome}</td>\r\n+          <td class=\"px-4 py-2\">${email}</td>\r\n+          <td class=\"px-4 py-2\">\r\n+            <span class=\"inline-block px-2 py-1 text-xs rounded bg-gray-100\">${role}</span>\r\n+          </td>\r\n+          <td class=\"px-4 py-2 text-right\">\r\n+            <button data-action=\"edit\" data-id=\"${id}\" class=\"text-blue-600 hover:underline mr-3\">Editar</button>\r\n+            <button data-action=\"delete\" data-id=\"${id}\" class=\"text-red-600 hover:underline\">Excluir</button>\r\n+          </td>\r\n+        </tr>\r\n+      `;\r\n+    }).join('');\r\n+\r\n+    listContainer.innerHTML = `\r\n+      <div class=\"overflow-x-auto\">\r\n+        <table class=\"min-w-full text-sm\">\r\n+          <thead>\r\n+            <tr class=\"text-left text-gray-500 border-b\">\r\n+              <th class=\"px-4 py-2\">Nome</th>\r\n+              <th class=\"px-4 py-2\">Email</th>\r\n+              <th class=\"px-4 py-2\">Cargo</th>\r\n+              <th class=\"px-4 py-2 text-right\">Ações</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>${rows}</tbody>\r\n+        </table>\r\n+      </div>\r\n+    `;\r\n+  }\r\n+\r\n+  async function loadFuncionarios() {\r\n+    if (!token) {\r\n+      listContainer.innerHTML = `<p class=\"text-red-600\">Sessão expirada. Faça login novamente.</p>`;\r\n+      return;\r\n+    }\r\n+\r\n+    listContainer.innerHTML = `<p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n+\r\n+    try {\r\n+      const res = await apiGet();\r\n+      if (!res.ok) throw new Error('Erro ao carregar funcionários');\r\n+\r\n+      const data = await res.json();\r\n+      // Aceita tanto {items: [...]} quanto array direto\r\n+      const lista = Array.isArray(data) ? data : (data.items || data.funcionarios || data.users || []);\r\n+      renderTabela(lista);\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      listContainer.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n+    }\r\n+  }\r\n+\r\n+  // Delegação de eventos para botões Editar/Excluir da tabela\r\n+  listContainer.addEventListener('click', async (ev) => {\r\n+    const btn = ev.target.closest('button');\r\n+    if (!btn) return;\r\n+\r\n+    const action = btn.getAttribute('data-action');\r\n+    const id = btn.getAttribute('data-id');\r\n+\r\n+    if (action === 'edit') {\r\n+      // Tentamos pegar os dados da linha (para preencher o modal)\r\n+      const tr = btn.closest('tr');\r\n+      const tds = tr ? tr.querySelectorAll('td') : [];\r\n+      const dados = {\r\n+        _id: id,\r\n+        nomeCompleto: tds[0]?.textContent?.trim() || '',\r\n+        email: tds[1]?.textContent?.trim() || '',\r\n+        role: tds[2]?.innerText?.trim() || 'funcionario'\r\n+      };\r\n+      openModal('edit', dados);\r\n+    }\r\n+\r\n+    if (action === 'delete') {\r\n+      const ok = confirm('Tem certeza que deseja excluir este funcionário?');\r\n+      if (!ok) return;\r\n+      try {\r\n+        const res = await apiDelete(id);\r\n+        if (!res.ok) throw new Error('Erro ao excluir funcionário');\r\n+        alert('Funcionário excluído com sucesso!');\r\n+        await loadFuncionarios();\r\n+      } catch (err) {\r\n+        toastErro('Erro ao excluir funcionário.');\r\n+      }\r\n+    }\r\n+  });\r\n+\r\n+  // Botão \"Adicionar Funcionário\"\r\n+  if (btnAdd) {\r\n+    btnAdd.addEventListener('click', () => openModal('create'));\r\n+  }\r\n+\r\n+  // Submit do formulário (criar/editar)\r\n+  if (form) {\r\n+    form.addEventListener('submit', async (ev) => {\r\n+      ev.preventDefault();\r\n+\r\n+      const id = inputId.value.trim();\r\n+      const payload = {\r\n+        nomeCompleto: inputNome.value.trim(),\r\n+        email: inputEmail.value.trim(),\r\n+        role: selectRole.value\r\n+      };\r\n+      // senha só vai se estiver preenchida (para criação ou redefinição)\r\n+      if (inputSenha.value.trim()) {\r\n+        payload.senha = inputSenha.value.trim();\r\n+      }\r\n+\r\n+      try {\r\n+        let res;\r\n+        if (id) {\r\n+          // Atualizar\r\n+          res = await apiPut(id, payload);\r\n+        } else {\r\n+          // Criar\r\n+          // Caso seu backend exija algum campo obrigatório extra (ex.: tipoConta),\r\n+          // defina aqui. Exemplo padrão:\r\n+          if (!payload.tipoConta) payload.tipoConta = 'pessoa_fisica';\r\n+          res = await apiPost(payload);\r\n+        }\r\n+\r\n+        if (!res.ok) {\r\n+          const errText = await res.text();\r\n+          throw new Error(errText || 'Erro ao salvar funcionário');\r\n+        }\r\n+\r\n+        closeModal();\r\n+        await loadFuncionarios();\r\n+        alert('Dados salvos com sucesso!');\r\n+      } catch (err) {\r\n+        console.error(err);\r\n+        toastErro('Não foi possível salvar os dados do funcionário.');\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Carrega na entrada\r\n+  loadFuncionarios();\r\n+});\r\n"
                },
                {
                    "date": 1756596047542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,68 @@\n+// servidor/routes/adminFuncionarios.js\r\n+const express = require('express');\r\n+const router = express.Router();\r\n+const User = require('../models/User'); // ajuste o caminho do seu model de usuário\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+\r\n+// 🔒 Todas as rotas daqui exigem autenticação e cargo admin/admin_master\r\n+function requireAdmin(req, res, next) {\r\n+  if (req.user.role === 'admin' || req.user.role === 'admin_master') {\r\n+    return next();\r\n+  }\r\n+  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n+}\r\n+\r\n+// 📌 Listar funcionários\r\n+router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const funcionarios = await User.find({ role: { $in: ['funcionario', 'admin'] } }).select('-password');\r\n+    res.json(funcionarios);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+  }\r\n+});\r\n+\r\n+// 📌 Criar funcionário\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, email, senha, role } = req.body;\r\n+\r\n+    const existente = await User.findOne({ email });\r\n+    if (existente) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+\r\n+    const novo = new User({ nome, email, password: senha, role: role || 'funcionario' });\r\n+    await novo.save();\r\n+\r\n+    res.json({ message: 'Funcionário criado com sucesso.' });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// 📌 Atualizar funcionário\r\n+router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, email, senha, role } = req.body;\r\n+\r\n+    const updateData = { nome, email, role };\r\n+    if (senha) updateData.password = senha;\r\n+\r\n+    await User.findByIdAndUpdate(req.params.id, updateData);\r\n+    res.json({ message: 'Funcionário atualizado com sucesso.' });\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// 📌 Deletar funcionário\r\n+router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    await User.findByIdAndDelete(req.params.id);\r\n+    res.json({ message: 'Funcionário removido com sucesso.' });\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1756596065035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,68 @@\n+// servidor/routes/adminFuncionarios.js\r\n+const express = require('express');\r\n+const router = express.Router();\r\n+const User = require('../models/User'); // ajuste o caminho do seu model de usuário\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+\r\n+// 🔒 Todas as rotas daqui exigem autenticação e cargo admin/admin_master\r\n+function requireAdmin(req, res, next) {\r\n+  if (req.user.role === 'admin' || req.user.role === 'admin_master') {\r\n+    return next();\r\n+  }\r\n+  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n+}\r\n+\r\n+// 📌 Listar funcionários\r\n+router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const funcionarios = await User.find({ role: { $in: ['funcionario', 'admin'] } }).select('-password');\r\n+    res.json(funcionarios);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+  }\r\n+});\r\n+\r\n+// 📌 Criar funcionário\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, email, senha, role } = req.body;\r\n+\r\n+    const existente = await User.findOne({ email });\r\n+    if (existente) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+\r\n+    const novo = new User({ nome, email, password: senha, role: role || 'funcionario' });\r\n+    await novo.save();\r\n+\r\n+    res.json({ message: 'Funcionário criado com sucesso.' });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// 📌 Atualizar funcionário\r\n+router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, email, senha, role } = req.body;\r\n+\r\n+    const updateData = { nome, email, role };\r\n+    if (senha) updateData.password = senha;\r\n+\r\n+    await User.findByIdAndUpdate(req.params.id, updateData);\r\n+    res.json({ message: 'Funcionário atualizado com sucesso.' });\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// 📌 Deletar funcionário\r\n+router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    await User.findByIdAndDelete(req.params.id);\r\n+    res.json({ message: 'Funcionário removido com sucesso.' });\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1756598540219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,646 +1,152 @@\n // servidor/routes/adminFuncionarios.js\r\n const express = require('express');\r\n const router = express.Router();\r\n-const User = require('../models/User'); // ajuste o caminho do seu model de usuário\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n+const User = require('../models/User');\r\n+const requireAuth = require('../middlewares/requireAuth');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n \r\n-// 🔒 Todas as rotas daqui exigem autenticação e cargo admin/admin_master\r\n-function requireAdmin(req, res, next) {\r\n-  if (req.user.role === 'admin' || req.user.role === 'admin_master') {\r\n-    return next();\r\n-  }\r\n-  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n-}\r\n+/**\r\n+ * OBJETIVO\r\n+ * - Administradores podem GERIR funcionários.\r\n+ * - Funcionários são usuários com role === 'funcionario'.\r\n+ * - Funcionários continuam sendo clientes (mantêm a conta e podem comprar normalmente).\r\n+ *\r\n+ * ENDPOINTS\r\n+ * GET    /api/admin/funcionarios               -> lista funcionários\r\n+ * GET    /api/admin/funcionarios/candidatos    -> lista clientes elegíveis para promoção (q = termo de busca)\r\n+ * POST   /api/admin/funcionarios/promover      -> body: { userId }  -> define role='funcionario'\r\n+ * POST   /api/admin/funcionarios/:id/rebaixar  -> volta role='cliente' (remove do quadro de funcionários)\r\n+ * PUT    /api/admin/funcionarios/:id           -> atualiza campos básicos (nome/email) e garante role='funcionario'\r\n+ */\r\n \r\n-// 📌 Listar funcionários\r\n-router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+// --------- Helpers ---------\r\n+const onlyAdmin = [requireAuth, authorizeRoles('admin', 'admin_master')];\r\n+\r\n+// --------- Listar funcionários ---------\r\n+router.get('/', ...onlyAdmin, async (req, res) => {\r\n   try {\r\n-    const funcionarios = await User.find({ role: { $in: ['funcionario', 'admin'] } }).select('-password');\r\n+    const funcionarios = await User\r\n+      .find({ role: 'funcionario' })\r\n+      .select('nomeCompleto username email role createdAt updatedAt');\r\n     res.json(funcionarios);\r\n   } catch (err) {\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+    console.error('Erro ao listar funcionários:', err);\r\n+    res.status(500).json({ message: 'Erro ao listar funcionários' });\r\n   }\r\n });\r\n \r\n-// 📌 Criar funcionário\r\n-router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+// --------- Candidatos a funcionário (clientes) ---------\r\n+router.get('/candidatos', ...onlyAdmin, async (req, res) => {\r\n   try {\r\n-    const { nome, email, senha, role } = req.body;\r\n+    const q = (req.query.q || '').trim();\r\n+    const filter = { role: 'cliente' };\r\n \r\n-    const existente = await User.findOne({ email });\r\n-    if (existente) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+    if (q) {\r\n+      const rx = new RegExp(q.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\r\n+      filter.$or = [\r\n+        { nomeCompleto: rx },\r\n+        { username: rx },\r\n+        { email: rx },\r\n+      ];\r\n+    }\r\n \r\n-    const novo = new User({ nome, email, password: senha, role: role || 'funcionario' });\r\n-    await novo.save();\r\n+    const limit = Math.min(parseInt(req.query.limit, 10) || 20, 50);\r\n \r\n-    res.json({ message: 'Funcionário criado com sucesso.' });\r\n+    const candidatos = await User\r\n+      .find(filter)\r\n+      .select('nomeCompleto username email role createdAt')\r\n+      .limit(limit);\r\n+\r\n+    res.json(candidatos);\r\n   } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+    console.error('Erro ao listar candidatos:', err);\r\n+    res.status(500).json({ message: 'Erro ao listar candidatos' });\r\n   }\r\n });\r\n \r\n-// 📌 Atualizar funcionário\r\n-router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+// --------- Promover cliente a funcionário ---------\r\n+router.post('/promover', ...onlyAdmin, async (req, res) => {\r\n   try {\r\n-    const { nome, email, senha, role } = req.body;\r\n+    const { userId } = req.body || {};\r\n+    if (!userId) return res.status(400).json({ message: 'userId é obrigatório' });\r\n \r\n-    const updateData = { nome, email, role };\r\n-    if (senha) updateData.password = senha;\r\n+    const user = await User.findById(userId).select('role nomeCompleto email username');\r\n+    if (!user) return res.status(404).json({ message: 'Usuário não encontrado' });\r\n \r\n-    await User.findByIdAndUpdate(req.params.id, updateData);\r\n-    res.json({ message: 'Funcionário atualizado com sucesso.' });\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n-  }\r\n-});\r\n+    if (user.role === 'admin' || user.role === 'admin_master') {\r\n+      return res.status(400).json({ message: 'Não é possível promover administradores' });\r\n+    }\r\n \r\n-// 📌 Deletar funcionário\r\n-router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    await User.findByIdAndDelete(req.params.id);\r\n-    res.json({ message: 'Funcionário removido com sucesso.' });\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n-  }\r\n-});\r\n+    if (user.role === 'funcionario') {\r\n+      return res.status(200).json({ message: 'Usuário já é funcionário' });\r\n+    }\r\n \r\n-module.exports = router;\r\n-// servidor/routes/adminFuncionarios.js\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-const User = require('../models/User'); // ajuste o caminho do seu model de usuário\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n+    user.role = 'funcionario';\r\n+    await user.save();\r\n \r\n-// 🔒 Todas as rotas daqui exigem autenticação e cargo admin/admin_master\r\n-function requireAdmin(req, res, next) {\r\n-  if (req.user.role === 'admin' || req.user.role === 'admin_master') {\r\n-    return next();\r\n-  }\r\n-  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n-}\r\n-\r\n-// 📌 Listar funcionários\r\n-router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const funcionarios = await User.find({ role: { $in: ['funcionario', 'admin'] } }).select('-password');\r\n-    res.json(funcionarios);\r\n+    res.json({ message: 'Usuário promovido a funcionário com sucesso', user: {\r\n+      _id: user._id,\r\n+      nomeCompleto: user.nomeCompleto,\r\n+      email: user.email,\r\n+      username: user.username,\r\n+      role: user.role,\r\n+    }});\r\n   } catch (err) {\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+    console.error('Erro ao promover funcionário:', err);\r\n+    res.status(500).json({ message: 'Erro ao promover funcionário' });\r\n   }\r\n });\r\n \r\n-// 📌 Criar funcionário\r\n-router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+// --------- Rebaixar funcionário para cliente ---------\r\n+router.post('/:id/rebaixar', ...onlyAdmin, async (req, res) => {\r\n   try {\r\n-    const { nome, email, senha, role } = req.body;\r\n+    const id = req.params.id;\r\n+    const user = await User.findById(id).select('role nomeCompleto email username');\r\n+    if (!user) return res.status(404).json({ message: 'Usuário não encontrado' });\r\n \r\n-    const existente = await User.findOne({ email });\r\n-    if (existente) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+    if (user.role !== 'funcionario') {\r\n+      return res.status(400).json({ message: 'Usuário não é funcionário' });\r\n+    }\r\n \r\n-    const novo = new User({ nome, email, password: senha, role: role || 'funcionario' });\r\n-    await novo.save();\r\n+    user.role = 'cliente';\r\n+    await user.save();\r\n \r\n-    res.json({ message: 'Funcionário criado com sucesso.' });\r\n+    res.json({ message: 'Funcionário removido do quadro (agora cliente)', user: {\r\n+      _id: user._id,\r\n+      nomeCompleto: user.nomeCompleto,\r\n+      email: user.email,\r\n+      username: user.username,\r\n+      role: user.role,\r\n+    }});\r\n   } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+    console.error('Erro ao rebaixar funcionário:', err);\r\n+    res.status(500).json({ message: 'Erro ao rebaixar funcionário' });\r\n   }\r\n });\r\n \r\n-// 📌 Atualizar funcionário\r\n-router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+// --------- Atualizar dados básicos do funcionário ---------\r\n+router.put('/:id', ...onlyAdmin, async (req, res) => {\r\n   try {\r\n-    const { nome, email, senha, role } = req.body;\r\n+    const id = req.params.id;\r\n+    const { nomeCompleto, email } = req.body || {};\r\n \r\n-    const updateData = { nome, email, role };\r\n-    if (senha) updateData.password = senha;\r\n+    const updated = await User.findByIdAndUpdate(\r\n+      id,\r\n+      {\r\n+        ...(nomeCompleto ? { nomeCompleto } : {}),\r\n+        ...(email ? { email } : {}),\r\n+        role: 'funcionario' // garante que permanece funcionário\r\n+      },\r\n+      { new: true, runValidators: true }\r\n+    ).select('nomeCompleto username email role');\r\n \r\n-    await User.findByIdAndUpdate(req.params.id, updateData);\r\n-    res.json({ message: 'Funcionário atualizado com sucesso.' });\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n-  }\r\n-});\r\n+    if (!updated) return res.status(404).json({ message: 'Usuário não encontrado' });\r\n \r\n-// 📌 Deletar funcionário\r\n-router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    await User.findByIdAndDelete(req.params.id);\r\n-    res.json({ message: 'Funcionário removido com sucesso.' });\r\n+    res.json(updated);\r\n   } catch (err) {\r\n-    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n+    console.error('Erro ao atualizar funcionário:', err);\r\n+    res.status(500).json({ message: 'Erro ao atualizar funcionário' });\r\n   }\r\n });\r\n \r\n module.exports = router;\r\n-// scripts/admin/admin-funcionarios.js\r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-  // Containers/elementos da página\r\n-  const pageContainer = document.querySelector('.bg-white.rounded-lg.shadow.p-6');\r\n-  const listContainer = document.getElementById('funcionarios-container') || pageContainer;\r\n-\r\n-  const btnAdd = document.getElementById('btn-add-funcionario');\r\n-\r\n-  // Modal e formulário\r\n-  const modal = document.getElementById('funcionario-modal');\r\n-  const modalTitle = document.getElementById('funcionario-modal-title');\r\n-  const form = document.getElementById('funcionario-form');\r\n-\r\n-  const inputId = document.getElementById('funcionario-id');\r\n-  const inputNome = document.getElementById('nome');\r\n-  const inputEmail = document.getElementById('email');\r\n-  const inputSenha = document.getElementById('senha');\r\n-  const selectRole = document.getElementById('role');\r\n-\r\n-  // Token do usuário logado\r\n-  const loggedInUser = (() => {\r\n-    try { return JSON.parse(localStorage.getItem('loggedInUser')); } catch { return null; }\r\n-  })();\r\n-  const token = loggedInUser?.token || '';\r\n-\r\n-  // Base correta da API (rota montada no servidor como /api/admin/funcionarios)\r\n-  const BASE = `${API_CONFIG.BASE_URL}/admin/funcionarios`;\r\n-\r\n-  // Helpers de UI\r\n-  function toastErro(msg = 'Ocorreu um erro') {\r\n-    console.error(msg);\r\n-    if (listContainer) listContainer.insertAdjacentHTML('afterbegin', `<p class=\"text-red-600 mb-3\">${msg}</p>`);\r\n-    alert(msg);\r\n-  }\r\n-\r\n-  function openModal(modo = 'create', dados = null) {\r\n-    if (!modal) return;\r\n-    modal.classList.remove('hidden');\r\n-\r\n-    if (modo === 'create') {\r\n-      modalTitle.textContent = 'Adicionar Funcionário';\r\n-      inputId.value = '';\r\n-      inputNome.value = '';\r\n-      inputEmail.value = '';\r\n-      inputSenha.value = '';\r\n-      selectRole.value = 'funcionario';\r\n-    } else {\r\n-      modalTitle.textContent = 'Editar Funcionário';\r\n-      inputId.value = dados?._id || '';\r\n-      inputNome.value = dados?.nomeCompleto || '';\r\n-      inputEmail.value = dados?.email || '';\r\n-      inputSenha.value = ''; // senha só se o admin quiser redefinir\r\n-      selectRole.value = dados?.role || 'funcionario';\r\n-    }\r\n-  }\r\n-\r\n-  function closeModal() {\r\n-    if (!modal) return;\r\n-    modal.classList.add('hidden');\r\n-  }\r\n-\r\n-  // Fechar modal ao clicar fora\r\n-  if (modal) {\r\n-    modal.addEventListener('click', (ev) => {\r\n-      if (ev.target === modal) closeModal();\r\n-    });\r\n-  }\r\n-\r\n-  // Chamada de API (com token)\r\n-  async function apiGet() {\r\n-    return fetch(BASE, { headers: { 'Authorization': `Bearer ${token}` } });\r\n-  }\r\n-  async function apiPost(body) {\r\n-    return fetch(BASE, {\r\n-      method: 'POST',\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'Authorization': `Bearer ${token}`\r\n-      },\r\n-      body: JSON.stringify(body)\r\n-    });\r\n-  }\r\n-  async function apiPut(id, body) {\r\n-    return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n-      method: 'PUT',\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'Authorization': `Bearer ${token}`\r\n-      },\r\n-      body: JSON.stringify(body)\r\n-    });\r\n-  }\r\n-  async function apiDelete(id) {\r\n-    return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n-      method: 'DELETE',\r\n-      headers: { 'Authorization': `Bearer ${token}` }\r\n-    });\r\n-  }\r\n-\r\n-  function renderTabela(funcionarios = []) {\r\n-    if (!Array.isArray(funcionarios)) funcionarios = [];\r\n-\r\n-    if (!funcionarios.length) {\r\n-      listContainer.innerHTML = `\r\n-        <div class=\"text-gray-600\">Nenhum funcionário encontrado.</div>\r\n-      `;\r\n-      return;\r\n-    }\r\n-\r\n-    const rows = funcionarios.map(f => {\r\n-      const nome = f.nomeCompleto || f.username || '(sem nome)';\r\n-      const email = f.email || '';\r\n-      const role = f.role || '-';\r\n-      const id = f._id || f.id || '';\r\n-      return `\r\n-        <tr class=\"border-b\">\r\n-          <td class=\"px-4 py-2 whitespace-nowrap font-medium\">${nome}</td>\r\n-          <td class=\"px-4 py-2\">${email}</td>\r\n-          <td class=\"px-4 py-2\">\r\n-            <span class=\"inline-block px-2 py-1 text-xs rounded bg-gray-100\">${role}</span>\r\n-          </td>\r\n-          <td class=\"px-4 py-2 text-right\">\r\n-            <button data-action=\"edit\" data-id=\"${id}\" class=\"text-blue-600 hover:underline mr-3\">Editar</button>\r\n-            <button data-action=\"delete\" data-id=\"${id}\" class=\"text-red-600 hover:underline\">Excluir</button>\r\n-          </td>\r\n-        </tr>\r\n-      `;\r\n-    }).join('');\r\n-\r\n-    listContainer.innerHTML = `\r\n-      <div class=\"overflow-x-auto\">\r\n-        <table class=\"min-w-full text-sm\">\r\n-          <thead>\r\n-            <tr class=\"text-left text-gray-500 border-b\">\r\n-              <th class=\"px-4 py-2\">Nome</th>\r\n-              <th class=\"px-4 py-2\">Email</th>\r\n-              <th class=\"px-4 py-2\">Cargo</th>\r\n-              <th class=\"px-4 py-2 text-right\">Ações</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>${rows}</tbody>\r\n-        </table>\r\n-      </div>\r\n-    `;\r\n-  }\r\n-\r\n-  async function loadFuncionarios() {\r\n-    if (!token) {\r\n-      listContainer.innerHTML = `<p class=\"text-red-600\">Sessão expirada. Faça login novamente.</p>`;\r\n-      return;\r\n-    }\r\n-\r\n-    listContainer.innerHTML = `<p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n-\r\n-    try {\r\n-      const res = await apiGet();\r\n-      if (!res.ok) throw new Error('Erro ao carregar funcionários');\r\n-\r\n-      const data = await res.json();\r\n-      // Aceita tanto {items: [...]} quanto array direto\r\n-      const lista = Array.isArray(data) ? data : (data.items || data.funcionarios || data.users || []);\r\n-      renderTabela(lista);\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      listContainer.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n-    }\r\n-  }\r\n-\r\n-  // Delegação de eventos para botões Editar/Excluir da tabela\r\n-  listContainer.addEventListener('click', async (ev) => {\r\n-    const btn = ev.target.closest('button');\r\n-    if (!btn) return;\r\n-\r\n-    const action = btn.getAttribute('data-action');\r\n-    const id = btn.getAttribute('data-id');\r\n-\r\n-    if (action === 'edit') {\r\n-      // Tentamos pegar os dados da linha (para preencher o modal)\r\n-      const tr = btn.closest('tr');\r\n-      const tds = tr ? tr.querySelectorAll('td') : [];\r\n-      const dados = {\r\n-        _id: id,\r\n-        nomeCompleto: tds[0]?.textContent?.trim() || '',\r\n-        email: tds[1]?.textContent?.trim() || '',\r\n-        role: tds[2]?.innerText?.trim() || 'funcionario'\r\n-      };\r\n-      openModal('edit', dados);\r\n-    }\r\n-\r\n-    if (action === 'delete') {\r\n-      const ok = confirm('Tem certeza que deseja excluir este funcionário?');\r\n-      if (!ok) return;\r\n-      try {\r\n-        const res = await apiDelete(id);\r\n-        if (!res.ok) throw new Error('Erro ao excluir funcionário');\r\n-        alert('Funcionário excluído com sucesso!');\r\n-        await loadFuncionarios();\r\n-      } catch (err) {\r\n-        toastErro('Erro ao excluir funcionário.');\r\n-      }\r\n-    }\r\n-  });\r\n-\r\n-  // Botão \"Adicionar Funcionário\"\r\n-  if (btnAdd) {\r\n-    btnAdd.addEventListener('click', () => openModal('create'));\r\n-  }\r\n-\r\n-  // Submit do formulário (criar/editar)\r\n-  if (form) {\r\n-    form.addEventListener('submit', async (ev) => {\r\n-      ev.preventDefault();\r\n-\r\n-      const id = inputId.value.trim();\r\n-      const payload = {\r\n-        nomeCompleto: inputNome.value.trim(),\r\n-        email: inputEmail.value.trim(),\r\n-        role: selectRole.value\r\n-      };\r\n-      // senha só vai se estiver preenchida (para criação ou redefinição)\r\n-      if (inputSenha.value.trim()) {\r\n-        payload.senha = inputSenha.value.trim();\r\n-      }\r\n-\r\n-      try {\r\n-        let res;\r\n-        if (id) {\r\n-          // Atualizar\r\n-          res = await apiPut(id, payload);\r\n-        } else {\r\n-          // Criar\r\n-          // Caso seu backend exija algum campo obrigatório extra (ex.: tipoConta),\r\n-          // defina aqui. Exemplo padrão:\r\n-          if (!payload.tipoConta) payload.tipoConta = 'pessoa_fisica';\r\n-          res = await apiPost(payload);\r\n-        }\r\n-\r\n-        if (!res.ok) {\r\n-          const errText = await res.text();\r\n-          throw new Error(errText || 'Erro ao salvar funcionário');\r\n-        }\r\n-\r\n-        closeModal();\r\n-        await loadFuncionarios();\r\n-        alert('Dados salvos com sucesso!');\r\n-      } catch (err) {\r\n-        console.error(err);\r\n-        toastErro('Não foi possível salvar os dados do funcionário.');\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  // Carrega na entrada\r\n-  loadFuncionarios();\r\n-});\r\n-// scripts/admin/admin-funcionarios.js\r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-  // Containers/elementos da página\r\n-  const pageContainer = document.querySelector('.bg-white.rounded-lg.shadow.p-6');\r\n-  const listContainer = document.getElementById('funcionarios-container') || pageContainer;\r\n-\r\n-  const btnAdd = document.getElementById('btn-add-funcionario');\r\n-\r\n-  // Modal e formulário\r\n-  const modal = document.getElementById('funcionario-modal');\r\n-  const modalTitle = document.getElementById('funcionario-modal-title');\r\n-  const form = document.getElementById('funcionario-form');\r\n-\r\n-  const inputId = document.getElementById('funcionario-id');\r\n-  const inputNome = document.getElementById('nome');\r\n-  const inputEmail = document.getElementById('email');\r\n-  const inputSenha = document.getElementById('senha');\r\n-  const selectRole = document.getElementById('role');\r\n-\r\n-  // Token do usuário logado\r\n-  const loggedInUser = (() => {\r\n-    try { return JSON.parse(localStorage.getItem('loggedInUser')); } catch { return null; }\r\n-  })();\r\n-  const token = loggedInUser?.token || '';\r\n-\r\n-  // Base correta da API (rota montada no servidor como /api/admin/funcionarios)\r\n-  const BASE = `${API_CONFIG.BASE_URL}/admin/funcionarios`;\r\n-\r\n-  // Helpers de UI\r\n-  function toastErro(msg = 'Ocorreu um erro') {\r\n-    console.error(msg);\r\n-    if (listContainer) listContainer.insertAdjacentHTML('afterbegin', `<p class=\"text-red-600 mb-3\">${msg}</p>`);\r\n-    alert(msg);\r\n-  }\r\n-\r\n-  function openModal(modo = 'create', dados = null) {\r\n-    if (!modal) return;\r\n-    modal.classList.remove('hidden');\r\n-\r\n-    if (modo === 'create') {\r\n-      modalTitle.textContent = 'Adicionar Funcionário';\r\n-      inputId.value = '';\r\n-      inputNome.value = '';\r\n-      inputEmail.value = '';\r\n-      inputSenha.value = '';\r\n-      selectRole.value = 'funcionario';\r\n-    } else {\r\n-      modalTitle.textContent = 'Editar Funcionário';\r\n-      inputId.value = dados?._id || '';\r\n-      inputNome.value = dados?.nomeCompleto || '';\r\n-      inputEmail.value = dados?.email || '';\r\n-      inputSenha.value = ''; // senha só se o admin quiser redefinir\r\n-      selectRole.value = dados?.role || 'funcionario';\r\n-    }\r\n-  }\r\n-\r\n-  function closeModal() {\r\n-    if (!modal) return;\r\n-    modal.classList.add('hidden');\r\n-  }\r\n-\r\n-  // Fechar modal ao clicar fora\r\n-  if (modal) {\r\n-    modal.addEventListener('click', (ev) => {\r\n-      if (ev.target === modal) closeModal();\r\n-    });\r\n-  }\r\n-\r\n-  // Chamada de API (com token)\r\n-  async function apiGet() {\r\n-    return fetch(BASE, { headers: { 'Authorization': `Bearer ${token}` } });\r\n-  }\r\n-  async function apiPost(body) {\r\n-    return fetch(BASE, {\r\n-      method: 'POST',\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'Authorization': `Bearer ${token}`\r\n-      },\r\n-      body: JSON.stringify(body)\r\n-    });\r\n-  }\r\n-  async function apiPut(id, body) {\r\n-    return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n-      method: 'PUT',\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'Authorization': `Bearer ${token}`\r\n-      },\r\n-      body: JSON.stringify(body)\r\n-    });\r\n-  }\r\n-  async function apiDelete(id) {\r\n-    return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n-      method: 'DELETE',\r\n-      headers: { 'Authorization': `Bearer ${token}` }\r\n-    });\r\n-  }\r\n-\r\n-  function renderTabela(funcionarios = []) {\r\n-    if (!Array.isArray(funcionarios)) funcionarios = [];\r\n-\r\n-    if (!funcionarios.length) {\r\n-      listContainer.innerHTML = `\r\n-        <div class=\"text-gray-600\">Nenhum funcionário encontrado.</div>\r\n-      `;\r\n-      return;\r\n-    }\r\n-\r\n-    const rows = funcionarios.map(f => {\r\n-      const nome = f.nomeCompleto || f.username || '(sem nome)';\r\n-      const email = f.email || '';\r\n-      const role = f.role || '-';\r\n-      const id = f._id || f.id || '';\r\n-      return `\r\n-        <tr class=\"border-b\">\r\n-          <td class=\"px-4 py-2 whitespace-nowrap font-medium\">${nome}</td>\r\n-          <td class=\"px-4 py-2\">${email}</td>\r\n-          <td class=\"px-4 py-2\">\r\n-            <span class=\"inline-block px-2 py-1 text-xs rounded bg-gray-100\">${role}</span>\r\n-          </td>\r\n-          <td class=\"px-4 py-2 text-right\">\r\n-            <button data-action=\"edit\" data-id=\"${id}\" class=\"text-blue-600 hover:underline mr-3\">Editar</button>\r\n-            <button data-action=\"delete\" data-id=\"${id}\" class=\"text-red-600 hover:underline\">Excluir</button>\r\n-          </td>\r\n-        </tr>\r\n-      `;\r\n-    }).join('');\r\n-\r\n-    listContainer.innerHTML = `\r\n-      <div class=\"overflow-x-auto\">\r\n-        <table class=\"min-w-full text-sm\">\r\n-          <thead>\r\n-            <tr class=\"text-left text-gray-500 border-b\">\r\n-              <th class=\"px-4 py-2\">Nome</th>\r\n-              <th class=\"px-4 py-2\">Email</th>\r\n-              <th class=\"px-4 py-2\">Cargo</th>\r\n-              <th class=\"px-4 py-2 text-right\">Ações</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>${rows}</tbody>\r\n-        </table>\r\n-      </div>\r\n-    `;\r\n-  }\r\n-\r\n-  async function loadFuncionarios() {\r\n-    if (!token) {\r\n-      listContainer.innerHTML = `<p class=\"text-red-600\">Sessão expirada. Faça login novamente.</p>`;\r\n-      return;\r\n-    }\r\n-\r\n-    listContainer.innerHTML = `<p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n-\r\n-    try {\r\n-      const res = await apiGet();\r\n-      if (!res.ok) throw new Error('Erro ao carregar funcionários');\r\n-\r\n-      const data = await res.json();\r\n-      // Aceita tanto {items: [...]} quanto array direto\r\n-      const lista = Array.isArray(data) ? data : (data.items || data.funcionarios || data.users || []);\r\n-      renderTabela(lista);\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      listContainer.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n-    }\r\n-  }\r\n-\r\n-  // Delegação de eventos para botões Editar/Excluir da tabela\r\n-  listContainer.addEventListener('click', async (ev) => {\r\n-    const btn = ev.target.closest('button');\r\n-    if (!btn) return;\r\n-\r\n-    const action = btn.getAttribute('data-action');\r\n-    const id = btn.getAttribute('data-id');\r\n-\r\n-    if (action === 'edit') {\r\n-      // Tentamos pegar os dados da linha (para preencher o modal)\r\n-      const tr = btn.closest('tr');\r\n-      const tds = tr ? tr.querySelectorAll('td') : [];\r\n-      const dados = {\r\n-        _id: id,\r\n-        nomeCompleto: tds[0]?.textContent?.trim() || '',\r\n-        email: tds[1]?.textContent?.trim() || '',\r\n-        role: tds[2]?.innerText?.trim() || 'funcionario'\r\n-      };\r\n-      openModal('edit', dados);\r\n-    }\r\n-\r\n-    if (action === 'delete') {\r\n-      const ok = confirm('Tem certeza que deseja excluir este funcionário?');\r\n-      if (!ok) return;\r\n-      try {\r\n-        const res = await apiDelete(id);\r\n-        if (!res.ok) throw new Error('Erro ao excluir funcionário');\r\n-        alert('Funcionário excluído com sucesso!');\r\n-        await loadFuncionarios();\r\n-      } catch (err) {\r\n-        toastErro('Erro ao excluir funcionário.');\r\n-      }\r\n-    }\r\n-  });\r\n-\r\n-  // Botão \"Adicionar Funcionário\"\r\n-  if (btnAdd) {\r\n-    btnAdd.addEventListener('click', () => openModal('create'));\r\n-  }\r\n-\r\n-  // Submit do formulário (criar/editar)\r\n-  if (form) {\r\n-    form.addEventListener('submit', async (ev) => {\r\n-      ev.preventDefault();\r\n-\r\n-      const id = inputId.value.trim();\r\n-      const payload = {\r\n-        nomeCompleto: inputNome.value.trim(),\r\n-        email: inputEmail.value.trim(),\r\n-        role: selectRole.value\r\n-      };\r\n-      // senha só vai se estiver preenchida (para criação ou redefinição)\r\n-      if (inputSenha.value.trim()) {\r\n-        payload.senha = inputSenha.value.trim();\r\n-      }\r\n-\r\n-      try {\r\n-        let res;\r\n-        if (id) {\r\n-          // Atualizar\r\n-          res = await apiPut(id, payload);\r\n-        } else {\r\n-          // Criar\r\n-          // Caso seu backend exija algum campo obrigatório extra (ex.: tipoConta),\r\n-          // defina aqui. Exemplo padrão:\r\n-          if (!payload.tipoConta) payload.tipoConta = 'pessoa_fisica';\r\n-          res = await apiPost(payload);\r\n-        }\r\n-\r\n-        if (!res.ok) {\r\n-          const errText = await res.text();\r\n-          throw new Error(errText || 'Erro ao salvar funcionário');\r\n-        }\r\n-\r\n-        closeModal();\r\n-        await loadFuncionarios();\r\n-        alert('Dados salvos com sucesso!');\r\n-      } catch (err) {\r\n-        console.error(err);\r\n-        toastErro('Não foi possível salvar os dados do funcionário.');\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  // Carrega na entrada\r\n-  loadFuncionarios();\r\n-});\r\n"
                },
                {
                    "date": 1756600295222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // servidor/routes/adminFuncionarios.js\r\n const express = require('express');\r\n const router = express.Router();\r\n+const bcrypt = require('bcrypt'); // npm i bcrypt\r\n const User = require('../models/User');\r\n const requireAuth = require('../middlewares/requireAuth');\r\n const authorizeRoles = require('../middlewares/authorizeRoles');\r\n \r\n@@ -15,14 +16,17 @@\n  * GET    /api/admin/funcionarios               -> lista funcionários\r\n  * GET    /api/admin/funcionarios/candidatos    -> lista clientes elegíveis para promoção (q = termo de busca)\r\n  * POST   /api/admin/funcionarios/promover      -> body: { userId }  -> define role='funcionario'\r\n  * POST   /api/admin/funcionarios/:id/rebaixar  -> volta role='cliente' (remove do quadro de funcionários)\r\n- * PUT    /api/admin/funcionarios/:id           -> atualiza campos básicos (nome/email) e garante role='funcionario'\r\n+ * PUT    /api/admin/funcionarios/:id           -> atualiza nome/email e, OPCIONALMENTE, a senha (com validação)\r\n  */\r\n \r\n // --------- Helpers ---------\r\n const onlyAdmin = [requireAuth, authorizeRoles('admin', 'admin_master')];\r\n \r\n+// Validação de senha: mín. 8, letra + número + símbolo\r\n+const PWD_REGEX = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[^A-Za-z0-9]).{8,}$/;\r\n+\r\n // --------- Listar funcionários ---------\r\n router.get('/', ...onlyAdmin, async (req, res) => {\r\n   try {\r\n     const funcionarios = await User\r\n@@ -123,26 +127,45 @@\n     res.status(500).json({ message: 'Erro ao rebaixar funcionário' });\r\n   }\r\n });\r\n \r\n-// --------- Atualizar dados básicos do funcionário ---------\r\n+// --------- Atualizar dados do funcionário (nome/email e SENHA OPCIONAL) ---------\r\n router.put('/:id', ...onlyAdmin, async (req, res) => {\r\n   try {\r\n     const id = req.params.id;\r\n-    const { nomeCompleto, email } = req.body || {};\r\n+    const { nomeCompleto, email, senha } = req.body || {};\r\n \r\n+    // Monta update dinâmico\r\n+    const update = {};\r\n+    if (nomeCompleto) update.nomeCompleto = nomeCompleto;\r\n+    if (email) update.email = email;\r\n+\r\n+    // Se vier senha, valida e faz hash\r\n+    if (typeof senha === 'string' && senha.trim()) {\r\n+      if (!PWD_REGEX.test(senha.trim())) {\r\n+        return res.status(400).json({ message: 'Senha fraca: mínimo 8 caracteres com letra, número e símbolo.' });\r\n+      }\r\n+      const hash = await bcrypt.hash(senha.trim(), 10);\r\n+\r\n+      // >>> AJUSTE AQUI CONFORME SEU SCHEMA <<<\r\n+      // Use o campo de senha do seu modelo (passwordHash, senhaHash, password, etc.)\r\n+      // Abaixo usei \"passwordHash\" por padrão. Troque se necessário.\r\n+      update.passwordHash = hash;\r\n+\r\n+      // opcional: marca data de troca\r\n+      update.passwordChangedAt = new Date();\r\n+    }\r\n+\r\n+    // Garante que continua com role 'funcionario'\r\n+    update.role = 'funcionario';\r\n+\r\n     const updated = await User.findByIdAndUpdate(\r\n       id,\r\n-      {\r\n-        ...(nomeCompleto ? { nomeCompleto } : {}),\r\n-        ...(email ? { email } : {}),\r\n-        role: 'funcionario' // garante que permanece funcionário\r\n-      },\r\n+      update,\r\n       { new: true, runValidators: true }\r\n     ).select('nomeCompleto username email role');\r\n \r\n     if (!updated) return res.status(404).json({ message: 'Usuário não encontrado' });\r\n-\r\n     res.json(updated);\r\n   } catch (err) {\r\n     console.error('Erro ao atualizar funcionário:', err);\r\n     res.status(500).json({ message: 'Erro ao atualizar funcionário' });\r\n"
                },
                {
                    "date": 1756600474139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,23 @@\n // servidor/routes/adminFuncionarios.js\r\n const express = require('express');\r\n const router = express.Router();\r\n-const bcrypt = require('bcrypt'); // npm i bcrypt\r\n+const bcrypt = require('bcryptjs'); // <- bcryptjs para evitar build nativo no Windows/Node 22\r\n const User = require('../models/User');\r\n const requireAuth = require('../middlewares/requireAuth');\r\n const authorizeRoles = require('../middlewares/authorizeRoles');\r\n \r\n-/**\r\n- * OBJETIVO\r\n- * - Administradores podem GERIR funcionários.\r\n- * - Funcionários são usuários com role === 'funcionario'.\r\n- * - Funcionários continuam sendo clientes (mantêm a conta e podem comprar normalmente).\r\n- *\r\n- * ENDPOINTS\r\n- * GET    /api/admin/funcionarios               -> lista funcionários\r\n- * GET    /api/admin/funcionarios/candidatos    -> lista clientes elegíveis para promoção (q = termo de busca)\r\n- * POST   /api/admin/funcionarios/promover      -> body: { userId }  -> define role='funcionario'\r\n- * POST   /api/admin/funcionarios/:id/rebaixar  -> volta role='cliente' (remove do quadro de funcionários)\r\n- * PUT    /api/admin/funcionarios/:id           -> atualiza nome/email e, OPCIONALMENTE, a senha (com validação)\r\n- */\r\n-\r\n-// --------- Helpers ---------\r\n+// Somente admin e admin_master gerem funcionários\r\n const onlyAdmin = [requireAuth, authorizeRoles('admin', 'admin_master')];\r\n \r\n-// Validação de senha: mín. 8, letra + número + símbolo\r\n+// Regra de senha: mín. 8, com letra + número + símbolo\r\n const PWD_REGEX = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[^A-Za-z0-9]).{8,}$/;\r\n \r\n-// --------- Listar funcionários ---------\r\n-router.get('/', ...onlyAdmin, async (req, res) => {\r\n+/**\r\n+ * GET /api/admin/funcionarios\r\n+ * Lista funcionários\r\n+ */\r\n+router.get('/', ...onlyAdmin, async (_req, res) => {\r\n   try {\r\n     const funcionarios = await User\r\n       .find({ role: 'funcionario' })\r\n       .select('nomeCompleto username email role createdAt updatedAt');\r\n@@ -38,21 +27,20 @@\n     res.status(500).json({ message: 'Erro ao listar funcionários' });\r\n   }\r\n });\r\n \r\n-// --------- Candidatos a funcionário (clientes) ---------\r\n+/**\r\n+ * GET /api/admin/funcionarios/candidatos?q=termo&limit=20\r\n+ * Lista clientes elegíveis para promoção\r\n+ */\r\n router.get('/candidatos', ...onlyAdmin, async (req, res) => {\r\n   try {\r\n     const q = (req.query.q || '').trim();\r\n     const filter = { role: 'cliente' };\r\n \r\n     if (q) {\r\n       const rx = new RegExp(q.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\r\n-      filter.$or = [\r\n-        { nomeCompleto: rx },\r\n-        { username: rx },\r\n-        { email: rx },\r\n-      ];\r\n+      filter.$or = [{ nomeCompleto: rx }, { username: rx }, { email: rx }];\r\n     }\r\n \r\n     const limit = Math.min(parseInt(req.query.limit, 10) || 20, 50);\r\n \r\n@@ -67,18 +55,22 @@\n     res.status(500).json({ message: 'Erro ao listar candidatos' });\r\n   }\r\n });\r\n \r\n-// --------- Promover cliente a funcionário ---------\r\n+/**\r\n+ * POST /api/admin/funcionarios/promover\r\n+ * body: { userId }\r\n+ * Promove cliente -> funcionário (sem virar admin)\r\n+ */\r\n router.post('/promover', ...onlyAdmin, async (req, res) => {\r\n   try {\r\n     const { userId } = req.body || {};\r\n     if (!userId) return res.status(400).json({ message: 'userId é obrigatório' });\r\n \r\n     const user = await User.findById(userId).select('role nomeCompleto email username');\r\n     if (!user) return res.status(404).json({ message: 'Usuário não encontrado' });\r\n \r\n-    if (user.role === 'admin' || user.role === 'admin_master') {\r\n+    if (['admin', 'admin_master'].includes(user.role)) {\r\n       return res.status(400).json({ message: 'Não é possível promover administradores' });\r\n     }\r\n \r\n     if (user.role === 'funcionario') {\r\n@@ -87,22 +79,24 @@\n \r\n     user.role = 'funcionario';\r\n     await user.save();\r\n \r\n-    res.json({ message: 'Usuário promovido a funcionário com sucesso', user: {\r\n-      _id: user._id,\r\n-      nomeCompleto: user.nomeCompleto,\r\n-      email: user.email,\r\n-      username: user.username,\r\n-      role: user.role,\r\n-    }});\r\n+    res.json({\r\n+      message: 'Usuário promovido a funcionário com sucesso',\r\n+      user: {\r\n+        _id: user._id, nomeCompleto: user.nomeCompleto, email: user.email, username: user.username, role: user.role\r\n+      }\r\n+    });\r\n   } catch (err) {\r\n     console.error('Erro ao promover funcionário:', err);\r\n     res.status(500).json({ message: 'Erro ao promover funcionário' });\r\n   }\r\n });\r\n \r\n-// --------- Rebaixar funcionário para cliente ---------\r\n+/**\r\n+ * POST /api/admin/funcionarios/:id/rebaixar\r\n+ * Rebaixa funcionário -> cliente (não apaga conta)\r\n+ */\r\n router.post('/:id/rebaixar', ...onlyAdmin, async (req, res) => {\r\n   try {\r\n     const id = req.params.id;\r\n     const user = await User.findById(id).select('role nomeCompleto email username');\r\n@@ -114,56 +108,59 @@\n \r\n     user.role = 'cliente';\r\n     await user.save();\r\n \r\n-    res.json({ message: 'Funcionário removido do quadro (agora cliente)', user: {\r\n-      _id: user._id,\r\n-      nomeCompleto: user.nomeCompleto,\r\n-      email: user.email,\r\n-      username: user.username,\r\n-      role: user.role,\r\n-    }});\r\n+    res.json({\r\n+      message: 'Funcionário removido do quadro (agora cliente)',\r\n+      user: {\r\n+        _id: user._id, nomeCompleto: user.nomeCompleto, email: user.email, username: user.username, role: user.role\r\n+      }\r\n+    });\r\n   } catch (err) {\r\n     console.error('Erro ao rebaixar funcionário:', err);\r\n     res.status(500).json({ message: 'Erro ao rebaixar funcionário' });\r\n   }\r\n });\r\n \r\n-// --------- Atualizar dados do funcionário (nome/email e SENHA OPCIONAL) ---------\r\n+/**\r\n+ * PUT /api/admin/funcionarios/:id\r\n+ * Atualiza nome/email e, OPCIONALMENTE, a senha (com validação e hash).\r\n+ * Mantém/garante role='funcionario'.\r\n+ */\r\n router.put('/:id', ...onlyAdmin, async (req, res) => {\r\n   try {\r\n     const id = req.params.id;\r\n     const { nomeCompleto, email, senha } = req.body || {};\r\n \r\n-    // Monta update dinâmico\r\n     const update = {};\r\n     if (nomeCompleto) update.nomeCompleto = nomeCompleto;\r\n     if (email) update.email = email;\r\n \r\n-    // Se vier senha, valida e faz hash\r\n+    // Se vier senha preenchida, valida e faz hash\r\n     if (typeof senha === 'string' && senha.trim()) {\r\n       if (!PWD_REGEX.test(senha.trim())) {\r\n         return res.status(400).json({ message: 'Senha fraca: mínimo 8 caracteres com letra, número e símbolo.' });\r\n       }\r\n       const hash = await bcrypt.hash(senha.trim(), 10);\r\n \r\n-      // >>> AJUSTE AQUI CONFORME SEU SCHEMA <<<\r\n-      // Use o campo de senha do seu modelo (passwordHash, senhaHash, password, etc.)\r\n-      // Abaixo usei \"passwordHash\" por padrão. Troque se necessário.\r\n-      update.passwordHash = hash;\r\n+      // Detecta automaticamente o campo de senha do seu schema\r\n+      if (User.schema.path('passwordHash')) update.passwordHash = hash;\r\n+      else if (User.schema.path('senhaHash')) update.senhaHash = hash;\r\n+      else if (User.schema.path('password')) update.password = hash;\r\n+      else if (User.schema.path('senha')) update.senha = hash;\r\n+      else {\r\n+        // Se não houver campo detectável, retornamos erro explícito\r\n+        return res.status(500).json({ message: 'Campo de senha não encontrado no schema do usuário.' });\r\n+      }\r\n \r\n-      // opcional: marca data de troca\r\n       update.passwordChangedAt = new Date();\r\n     }\r\n \r\n-    // Garante que continua com role 'funcionario'\r\n+    // Garante que continua funcionário\r\n     update.role = 'funcionario';\r\n \r\n-    const updated = await User.findByIdAndUpdate(\r\n-      id,\r\n-      update,\r\n-      { new: true, runValidators: true }\r\n-    ).select('nomeCompleto username email role');\r\n+    const updated = await User.findByIdAndUpdate(id, update, { new: true, runValidators: true })\r\n+                              .select('nomeCompleto username email role');\r\n \r\n     if (!updated) return res.status(404).json({ message: 'Usuário não encontrado' });\r\n     res.json(updated);\r\n   } catch (err) {\r\n"
                },
                {
                    "date": 1756744861713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,119 @@\n+// servidor/routes/adminFuncionarios.js\r\n+const express = require('express');\r\n+const bcrypt = require('bcrypt'); // npm i bcrypt\r\n+const router = express.Router();\r\n+\r\n+const User = require('../models/User');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+\r\n+// Somente administradores podem usar essas rotas\r\n+function requireAdmin(req, res, next) {\r\n+  try {\r\n+    const role = req.user?.role;\r\n+    if (role === 'admin' || role === 'admin_master') return next();\r\n+    return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n+  } catch (e) {\r\n+    return res.status(401).json({ message: 'Não autenticado.' });\r\n+  }\r\n+}\r\n+\r\n+// GET /api/admin/funcionarios -> lista admin + funcionarios\r\n+router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const funcionarios = await User.find({ role: { $in: ['admin', 'funcionario'] } })\r\n+      .select('-password');\r\n+    res.json(funcionarios);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+  }\r\n+});\r\n+\r\n+// GET /api/admin/funcionarios/:id -> 1 funcionário\r\n+router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const f = await User.findById(req.params.id).select('-password');\r\n+    if (!f) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    res.json(f);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// POST /api/admin/funcionarios -> cria funcionário\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, email, senha, role } = req.body;\r\n+\r\n+    if (!nome || !email || !senha) {\r\n+      return res.status(400).json({ message: 'Nome, email e senha são obrigatórios.' });\r\n+    }\r\n+    if (!['admin', 'funcionario'].includes(role || 'funcionario')) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const existente = await User.findOne({ email });\r\n+    if (existente) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+\r\n+    const hash = await bcrypt.hash(senha, 10);\r\n+    const novo = new User({\r\n+      nome,\r\n+      email,\r\n+      password: hash,\r\n+      role: role || 'funcionario',\r\n+      tipoConta: 'pessoa_fisica' // ajusta se seu modelo exigir\r\n+    });\r\n+\r\n+    await novo.save();\r\n+    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// PUT /api/admin/funcionarios/:id -> atualiza funcionário\r\n+router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, email, senha, role } = req.body;\r\n+\r\n+    const update = {};\r\n+    if (nome) update.nome = nome;\r\n+    if (email) update.email = email;\r\n+    if (role) {\r\n+      if (!['admin', 'funcionario'].includes(role)) {\r\n+        return res.status(400).json({ message: 'Cargo inválido.' });\r\n+      }\r\n+      update.role = role;\r\n+    }\r\n+    if (senha && senha.length >= 8) {\r\n+      update.password = await bcrypt.hash(senha, 10);\r\n+    }\r\n+\r\n+    const updated = await User.findByIdAndUpdate(req.params.id, update, {\r\n+      new: true,\r\n+      runValidators: true,\r\n+    }).select('-password');\r\n+\r\n+    if (!updated) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: updated });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// DELETE /api/admin/funcionarios/:id -> remove funcionário\r\n+router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const deleted = await User.findByIdAndDelete(req.params.id);\r\n+    if (!deleted) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    res.json({ message: 'Funcionário removido com sucesso.' });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1756745392103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,166 @@\n+// servidor/routes/adminFuncionarios.js\r\n+const express = require('express');\r\n+const bcrypt = require('bcrypt'); // npm i bcrypt\r\n+const router = express.Router();\r\n+\r\n+const User = require('../models/User');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+\r\n+// Apenas administradores\r\n+function requireAdmin(req, res, next) {\r\n+  try {\r\n+    const role = req.user?.role;\r\n+    if (role === 'admin' || role === 'admin_master') return next();\r\n+    return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n+  } catch {\r\n+    return res.status(401).json({ message: 'Não autenticado.' });\r\n+  }\r\n+}\r\n+\r\n+// Helper: normaliza um documento de usuário para o DTO usado no front\r\n+function userToDTO(u) {\r\n+  const nomeNorm =\r\n+    u.nomeCompleto?.trim() ||\r\n+    u.nomeContato?.trim() ||\r\n+    u.razaoSocial?.trim() ||\r\n+    '';\r\n+\r\n+  return {\r\n+    _id: u._id,\r\n+    email: u.email,\r\n+    role: u.role,\r\n+    tipoConta: u.tipoConta,\r\n+    celular: u.celular,\r\n+    nome: nomeNorm,\r\n+  };\r\n+}\r\n+\r\n+// GET /api/admin/funcionarios  -> lista admins e funcionários\r\n+router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const users = await User.find(\r\n+      { role: { $in: ['admin', 'funcionario'] } },\r\n+      // nunca retornar senha\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular'\r\n+    ).lean();\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+  }\r\n+});\r\n+\r\n+// GET /api/admin/funcionarios/:id  -> um funcionário\r\n+router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const u = await User.findById(\r\n+      req.params.id,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular'\r\n+    ).lean();\r\n+    if (!u) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    res.json(userToDTO(u));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// POST /api/admin/funcionarios  -> cria funcionário\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n+\r\n+    if (!email || !senha || !celular) {\r\n+      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n+    }\r\n+    const cargo = role || 'funcionario';\r\n+    if (!['admin', 'funcionario'].includes(cargo)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const existe = await User.findOne({ email });\r\n+    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+\r\n+    const hash = await bcrypt.hash(senha, 10);\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n+\r\n+    // Monta objeto respeitando o schema atual\r\n+    const doc = {\r\n+      tipoConta: conta,\r\n+      email,\r\n+      senha: hash,\r\n+      celular,\r\n+      role: cargo,\r\n+    };\r\n+\r\n+    if (conta === 'pessoa_fisica') {\r\n+      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n+    } else {\r\n+      // PJ: você pode optar por usar nomeContato ou razaoSocial\r\n+      doc.nomeContato = (nomeContato || nome || '').trim();\r\n+      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n+    }\r\n+\r\n+    const novo = await User.create(doc);\r\n+    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// PUT /api/admin/funcionarios/:id  -> atualiza funcionário\r\n+router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n+\r\n+    const update = {};\r\n+    if (email) update.email = email;\r\n+    if (celular) update.celular = celular;\r\n+    if (role) {\r\n+      if (!['admin', 'funcionario'].includes(role)) {\r\n+        return res.status(400).json({ message: 'Cargo inválido.' });\r\n+      }\r\n+      update.role = role;\r\n+    }\r\n+    // Ajusta nome conforme tipo de conta\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n+    if (conta === 'pessoa_juridica') {\r\n+      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n+      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n+    }\r\n+\r\n+    if (senha && senha.length >= 8) {\r\n+      update.senha = await bcrypt.hash(senha, 10);\r\n+    }\r\n+\r\n+    const updated = await User.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      update,\r\n+      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular' }\r\n+    ).lean();\r\n+\r\n+    if (!updated) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// DELETE /api/admin/funcionarios/:id\r\n+router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const deleted = await User.findByIdAndDelete(req.params.id);\r\n+    if (!deleted) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    res.json({ message: 'Funcionário removido com sucesso.' });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1756746305587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,246 @@\n+// servidor/routes/adminFuncionarios.js\r\n+const express = require('express');\r\n+const bcrypt = require('bcrypt'); // npm i bcrypt\r\n+const router = express.Router();\r\n+\r\n+const User = require('../models/User');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+\r\n+// Gate admin\r\n+function requireAdmin(req, res, next) {\r\n+  try {\r\n+    const role = req.user?.role;\r\n+    if (role === 'admin' || role === 'admin_master') return next();\r\n+    return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n+  } catch {\r\n+    return res.status(401).json({ message: 'Não autenticado.' });\r\n+  }\r\n+}\r\n+\r\n+// DTO\r\n+function userToDTO(u) {\r\n+  const nomeNorm =\r\n+    (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n+    (u.nomeContato && String(u.nomeContato).trim()) ||\r\n+    (u.razaoSocial && String(u.razaoSocial).trim()) ||\r\n+    '';\r\n+  return {\r\n+    _id: u._id,\r\n+    email: u.email,\r\n+    role: u.role,\r\n+    tipoConta: u.tipoConta,\r\n+    celular: u.celular,\r\n+    cpf: u.cpf,\r\n+    cnpj: u.cnpj,\r\n+    nome: nomeNorm,\r\n+  };\r\n+}\r\n+\r\n+/**\r\n+ * LISTA FUNCIONÁRIOS (admin/funcionario)\r\n+ * GET /api/admin/funcionarios\r\n+ */\r\n+router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const users = await User.find(\r\n+      { role: { $in: ['admin', 'funcionario'] } },\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n+    ).lean();\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+  }\r\n+});\r\n+\r\n+/**\r\n+ * OBTÉM UM FUNCIONÁRIO\r\n+ * GET /api/admin/funcionarios/:id\r\n+ */\r\n+router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const u = await User.findById(\r\n+      req.params.id,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n+    ).lean();\r\n+    if (!u || !['admin', 'funcionario'].includes(u.role)) {\r\n+      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    }\r\n+    res.json(userToDTO(u));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+/**\r\n+ * CRIA FUNCIONÁRIO (novo usuário)\r\n+ * POST /api/admin/funcionarios\r\n+ */\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n+\r\n+    if (!email || !senha || !celular) {\r\n+      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n+    }\r\n+    const cargo = role || 'funcionario';\r\n+    if (!['admin', 'funcionario'].includes(cargo)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const existe = await User.findOne({ email });\r\n+    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+\r\n+    const hash = await bcrypt.hash(senha, 10);\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n+\r\n+    const doc = {\r\n+      tipoConta: conta,\r\n+      email,\r\n+      senha: hash,\r\n+      celular,\r\n+      role: cargo,\r\n+    };\r\n+\r\n+    if (conta === 'pessoa_juridica') {\r\n+      doc.nomeContato = (nomeContato || nome || '').trim();\r\n+      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n+    }\r\n+\r\n+    const novo = await User.create(doc);\r\n+    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+/**\r\n+ * ATUALIZA FUNCIONÁRIO\r\n+ * PUT /api/admin/funcionarios/:id\r\n+ */\r\n+router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n+\r\n+    const update = {};\r\n+    if (email) update.email = email;\r\n+    if (celular) update.celular = celular;\r\n+    if (role) {\r\n+      if (!['admin', 'funcionario'].includes(role)) {\r\n+        return res.status(400).json({ message: 'Cargo inválido.' });\r\n+      }\r\n+      update.role = role;\r\n+    }\r\n+\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n+    if (conta === 'pessoa_juridica') {\r\n+      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n+      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n+    }\r\n+\r\n+    if (senha && senha.length >= 8) {\r\n+      update.senha = await bcrypt.hash(senha, 10);\r\n+    }\r\n+\r\n+    const updated = await User.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      update,\r\n+      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj' }\r\n+    ).lean();\r\n+\r\n+    if (!updated || !['admin', 'funcionario'].includes(updated.role)) {\r\n+      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    }\r\n+    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+/**\r\n+ * REMOVER FUNCIONÁRIO\r\n+ * DELETE /api/admin/funcionarios/:id\r\n+ */\r\n+router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const deleted = await User.findByIdAndUpdate(req.params.id, { role: 'cliente' }, { new: true });\r\n+    if (!deleted) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    res.json({ message: 'Funcionário removido com sucesso.' });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+/**\r\n+ * BUSCAR USUÁRIOS (até 5) POR NOME/CPF/CNPJ\r\n+ * GET /api/admin/funcionarios/buscar-usuarios?q=...&limit=5\r\n+ */\r\n+router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { q = '', limit = 5 } = req.query;\r\n+    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n+\r\n+    const safe = String(q || '');\r\n+    const regex = safe ? new RegExp(safe.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i') : null;\r\n+    const digits = safe.replace(/\\D/g, '');\r\n+\r\n+    const or = [];\r\n+    if (regex) {\r\n+      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n+    }\r\n+    if (digits.length >= 3) {\r\n+      or.push({ cpf: new RegExp(digits) }, { cnpj: new RegExp(digits) });\r\n+    }\r\n+\r\n+    const filter = or.length ? { $or: or } : {};\r\n+    const users = await User.find(\r\n+      filter,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n+    )\r\n+      .sort({ createdAt: -1 })\r\n+      .limit(lim)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n+  }\r\n+});\r\n+\r\n+/**\r\n+ * TRANSFORMAR USUÁRIO EM FUNCIONÁRIO/ADMIN\r\n+ * POST /api/admin/funcionarios/transformar\r\n+ * body: { userId, role }  (role: 'funcionario' | 'admin')\r\n+ */\r\n+router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { userId, role = 'funcionario' } = req.body;\r\n+    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n+    if (!['admin', 'funcionario'].includes(role)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const updated = await User.findByIdAndUpdate(\r\n+      userId,\r\n+      { role },\r\n+      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj' }\r\n+    ).lean();\r\n+\r\n+    if (!updated) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n+    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(updated) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1756746318527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,461 +243,4 @@\n   }\r\n });\r\n \r\n module.exports = router;\r\n-// servidor/routes/adminFuncionarios.js\r\n-const express = require('express');\r\n-const bcrypt = require('bcrypt'); // npm i bcrypt\r\n-const router = express.Router();\r\n-\r\n-const User = require('../models/User');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-\r\n-// Apenas administradores\r\n-function requireAdmin(req, res, next) {\r\n-  try {\r\n-    const role = req.user?.role;\r\n-    if (role === 'admin' || role === 'admin_master') return next();\r\n-    return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n-  } catch {\r\n-    return res.status(401).json({ message: 'Não autenticado.' });\r\n-  }\r\n-}\r\n-\r\n-// Helper: normaliza um documento de usuário para o DTO usado no front\r\n-function userToDTO(u) {\r\n-  const nomeNorm =\r\n-    u.nomeCompleto?.trim() ||\r\n-    u.nomeContato?.trim() ||\r\n-    u.razaoSocial?.trim() ||\r\n-    '';\r\n-\r\n-  return {\r\n-    _id: u._id,\r\n-    email: u.email,\r\n-    role: u.role,\r\n-    tipoConta: u.tipoConta,\r\n-    celular: u.celular,\r\n-    nome: nomeNorm,\r\n-  };\r\n-}\r\n-\r\n-// GET /api/admin/funcionarios  -> lista admins e funcionários\r\n-router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const users = await User.find(\r\n-      { role: { $in: ['admin', 'funcionario'] } },\r\n-      // nunca retornar senha\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular'\r\n-    ).lean();\r\n-\r\n-    res.json(users.map(userToDTO));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n-  }\r\n-});\r\n-\r\n-// GET /api/admin/funcionarios/:id  -> um funcionário\r\n-router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const u = await User.findById(\r\n-      req.params.id,\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular'\r\n-    ).lean();\r\n-    if (!u) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-    res.json(userToDTO(u));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// POST /api/admin/funcionarios  -> cria funcionário\r\n-router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n-\r\n-    if (!email || !senha || !celular) {\r\n-      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n-    }\r\n-    const cargo = role || 'funcionario';\r\n-    if (!['admin', 'funcionario'].includes(cargo)) {\r\n-      return res.status(400).json({ message: 'Cargo inválido.' });\r\n-    }\r\n-\r\n-    const existe = await User.findOne({ email });\r\n-    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n-\r\n-    const hash = await bcrypt.hash(senha, 10);\r\n-    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n-\r\n-    // Monta objeto respeitando o schema atual\r\n-    const doc = {\r\n-      tipoConta: conta,\r\n-      email,\r\n-      senha: hash,\r\n-      celular,\r\n-      role: cargo,\r\n-    };\r\n-\r\n-    if (conta === 'pessoa_fisica') {\r\n-      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n-    } else {\r\n-      // PJ: você pode optar por usar nomeContato ou razaoSocial\r\n-      doc.nomeContato = (nomeContato || nome || '').trim();\r\n-      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n-    }\r\n-\r\n-    const novo = await User.create(doc);\r\n-    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// PUT /api/admin/funcionarios/:id  -> atualiza funcionário\r\n-router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n-\r\n-    const update = {};\r\n-    if (email) update.email = email;\r\n-    if (celular) update.celular = celular;\r\n-    if (role) {\r\n-      if (!['admin', 'funcionario'].includes(role)) {\r\n-        return res.status(400).json({ message: 'Cargo inválido.' });\r\n-      }\r\n-      update.role = role;\r\n-    }\r\n-    // Ajusta nome conforme tipo de conta\r\n-    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n-    if (conta === 'pessoa_juridica') {\r\n-      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n-      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n-    } else {\r\n-      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n-    }\r\n-\r\n-    if (senha && senha.length >= 8) {\r\n-      update.senha = await bcrypt.hash(senha, 10);\r\n-    }\r\n-\r\n-    const updated = await User.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      update,\r\n-      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular' }\r\n-    ).lean();\r\n-\r\n-    if (!updated) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// DELETE /api/admin/funcionarios/:id\r\n-router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const deleted = await User.findByIdAndDelete(req.params.id);\r\n-    if (!deleted) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-    res.json({ message: 'Funcionário removido com sucesso.' });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-// servidor/routes/adminFuncionarios.js\r\n-const express = require('express');\r\n-const bcrypt = require('bcrypt'); // npm i bcrypt\r\n-const router = express.Router();\r\n-\r\n-const User = require('../models/User');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-\r\n-// Somente administradores podem usar essas rotas\r\n-function requireAdmin(req, res, next) {\r\n-  try {\r\n-    const role = req.user?.role;\r\n-    if (role === 'admin' || role === 'admin_master') return next();\r\n-    return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n-  } catch (e) {\r\n-    return res.status(401).json({ message: 'Não autenticado.' });\r\n-  }\r\n-}\r\n-\r\n-// GET /api/admin/funcionarios -> lista admin + funcionarios\r\n-router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const funcionarios = await User.find({ role: { $in: ['admin', 'funcionario'] } })\r\n-      .select('-password');\r\n-    res.json(funcionarios);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n-  }\r\n-});\r\n-\r\n-// GET /api/admin/funcionarios/:id -> 1 funcionário\r\n-router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const f = await User.findById(req.params.id).select('-password');\r\n-    if (!f) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-    res.json(f);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// POST /api/admin/funcionarios -> cria funcionário\r\n-router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, email, senha, role } = req.body;\r\n-\r\n-    if (!nome || !email || !senha) {\r\n-      return res.status(400).json({ message: 'Nome, email e senha são obrigatórios.' });\r\n-    }\r\n-    if (!['admin', 'funcionario'].includes(role || 'funcionario')) {\r\n-      return res.status(400).json({ message: 'Cargo inválido.' });\r\n-    }\r\n-\r\n-    const existente = await User.findOne({ email });\r\n-    if (existente) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n-\r\n-    const hash = await bcrypt.hash(senha, 10);\r\n-    const novo = new User({\r\n-      nome,\r\n-      email,\r\n-      password: hash,\r\n-      role: role || 'funcionario',\r\n-      tipoConta: 'pessoa_fisica' // ajusta se seu modelo exigir\r\n-    });\r\n-\r\n-    await novo.save();\r\n-    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// PUT /api/admin/funcionarios/:id -> atualiza funcionário\r\n-router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, email, senha, role } = req.body;\r\n-\r\n-    const update = {};\r\n-    if (nome) update.nome = nome;\r\n-    if (email) update.email = email;\r\n-    if (role) {\r\n-      if (!['admin', 'funcionario'].includes(role)) {\r\n-        return res.status(400).json({ message: 'Cargo inválido.' });\r\n-      }\r\n-      update.role = role;\r\n-    }\r\n-    if (senha && senha.length >= 8) {\r\n-      update.password = await bcrypt.hash(senha, 10);\r\n-    }\r\n-\r\n-    const updated = await User.findByIdAndUpdate(req.params.id, update, {\r\n-      new: true,\r\n-      runValidators: true,\r\n-    }).select('-password');\r\n-\r\n-    if (!updated) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: updated });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// DELETE /api/admin/funcionarios/:id -> remove funcionário\r\n-router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const deleted = await User.findByIdAndDelete(req.params.id);\r\n-    if (!deleted) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-    res.json({ message: 'Funcionário removido com sucesso.' });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-// servidor/routes/adminFuncionarios.js\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-const bcrypt = require('bcryptjs'); // <- bcryptjs para evitar build nativo no Windows/Node 22\r\n-const User = require('../models/User');\r\n-const requireAuth = require('../middlewares/requireAuth');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-// Somente admin e admin_master gerem funcionários\r\n-const onlyAdmin = [requireAuth, authorizeRoles('admin', 'admin_master')];\r\n-\r\n-// Regra de senha: mín. 8, com letra + número + símbolo\r\n-const PWD_REGEX = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[^A-Za-z0-9]).{8,}$/;\r\n-\r\n-/**\r\n- * GET /api/admin/funcionarios\r\n- * Lista funcionários\r\n- */\r\n-router.get('/', ...onlyAdmin, async (_req, res) => {\r\n-  try {\r\n-    const funcionarios = await User\r\n-      .find({ role: 'funcionario' })\r\n-      .select('nomeCompleto username email role createdAt updatedAt');\r\n-    res.json(funcionarios);\r\n-  } catch (err) {\r\n-    console.error('Erro ao listar funcionários:', err);\r\n-    res.status(500).json({ message: 'Erro ao listar funcionários' });\r\n-  }\r\n-});\r\n-\r\n-/**\r\n- * GET /api/admin/funcionarios/candidatos?q=termo&limit=20\r\n- * Lista clientes elegíveis para promoção\r\n- */\r\n-router.get('/candidatos', ...onlyAdmin, async (req, res) => {\r\n-  try {\r\n-    const q = (req.query.q || '').trim();\r\n-    const filter = { role: 'cliente' };\r\n-\r\n-    if (q) {\r\n-      const rx = new RegExp(q.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\r\n-      filter.$or = [{ nomeCompleto: rx }, { username: rx }, { email: rx }];\r\n-    }\r\n-\r\n-    const limit = Math.min(parseInt(req.query.limit, 10) || 20, 50);\r\n-\r\n-    const candidatos = await User\r\n-      .find(filter)\r\n-      .select('nomeCompleto username email role createdAt')\r\n-      .limit(limit);\r\n-\r\n-    res.json(candidatos);\r\n-  } catch (err) {\r\n-    console.error('Erro ao listar candidatos:', err);\r\n-    res.status(500).json({ message: 'Erro ao listar candidatos' });\r\n-  }\r\n-});\r\n-\r\n-/**\r\n- * POST /api/admin/funcionarios/promover\r\n- * body: { userId }\r\n- * Promove cliente -> funcionário (sem virar admin)\r\n- */\r\n-router.post('/promover', ...onlyAdmin, async (req, res) => {\r\n-  try {\r\n-    const { userId } = req.body || {};\r\n-    if (!userId) return res.status(400).json({ message: 'userId é obrigatório' });\r\n-\r\n-    const user = await User.findById(userId).select('role nomeCompleto email username');\r\n-    if (!user) return res.status(404).json({ message: 'Usuário não encontrado' });\r\n-\r\n-    if (['admin', 'admin_master'].includes(user.role)) {\r\n-      return res.status(400).json({ message: 'Não é possível promover administradores' });\r\n-    }\r\n-\r\n-    if (user.role === 'funcionario') {\r\n-      return res.status(200).json({ message: 'Usuário já é funcionário' });\r\n-    }\r\n-\r\n-    user.role = 'funcionario';\r\n-    await user.save();\r\n-\r\n-    res.json({\r\n-      message: 'Usuário promovido a funcionário com sucesso',\r\n-      user: {\r\n-        _id: user._id, nomeCompleto: user.nomeCompleto, email: user.email, username: user.username, role: user.role\r\n-      }\r\n-    });\r\n-  } catch (err) {\r\n-    console.error('Erro ao promover funcionário:', err);\r\n-    res.status(500).json({ message: 'Erro ao promover funcionário' });\r\n-  }\r\n-});\r\n-\r\n-/**\r\n- * POST /api/admin/funcionarios/:id/rebaixar\r\n- * Rebaixa funcionário -> cliente (não apaga conta)\r\n- */\r\n-router.post('/:id/rebaixar', ...onlyAdmin, async (req, res) => {\r\n-  try {\r\n-    const id = req.params.id;\r\n-    const user = await User.findById(id).select('role nomeCompleto email username');\r\n-    if (!user) return res.status(404).json({ message: 'Usuário não encontrado' });\r\n-\r\n-    if (user.role !== 'funcionario') {\r\n-      return res.status(400).json({ message: 'Usuário não é funcionário' });\r\n-    }\r\n-\r\n-    user.role = 'cliente';\r\n-    await user.save();\r\n-\r\n-    res.json({\r\n-      message: 'Funcionário removido do quadro (agora cliente)',\r\n-      user: {\r\n-        _id: user._id, nomeCompleto: user.nomeCompleto, email: user.email, username: user.username, role: user.role\r\n-      }\r\n-    });\r\n-  } catch (err) {\r\n-    console.error('Erro ao rebaixar funcionário:', err);\r\n-    res.status(500).json({ message: 'Erro ao rebaixar funcionário' });\r\n-  }\r\n-});\r\n-\r\n-/**\r\n- * PUT /api/admin/funcionarios/:id\r\n- * Atualiza nome/email e, OPCIONALMENTE, a senha (com validação e hash).\r\n- * Mantém/garante role='funcionario'.\r\n- */\r\n-router.put('/:id', ...onlyAdmin, async (req, res) => {\r\n-  try {\r\n-    const id = req.params.id;\r\n-    const { nomeCompleto, email, senha } = req.body || {};\r\n-\r\n-    const update = {};\r\n-    if (nomeCompleto) update.nomeCompleto = nomeCompleto;\r\n-    if (email) update.email = email;\r\n-\r\n-    // Se vier senha preenchida, valida e faz hash\r\n-    if (typeof senha === 'string' && senha.trim()) {\r\n-      if (!PWD_REGEX.test(senha.trim())) {\r\n-        return res.status(400).json({ message: 'Senha fraca: mínimo 8 caracteres com letra, número e símbolo.' });\r\n-      }\r\n-      const hash = await bcrypt.hash(senha.trim(), 10);\r\n-\r\n-      // Detecta automaticamente o campo de senha do seu schema\r\n-      if (User.schema.path('passwordHash')) update.passwordHash = hash;\r\n-      else if (User.schema.path('senhaHash')) update.senhaHash = hash;\r\n-      else if (User.schema.path('password')) update.password = hash;\r\n-      else if (User.schema.path('senha')) update.senha = hash;\r\n-      else {\r\n-        // Se não houver campo detectável, retornamos erro explícito\r\n-        return res.status(500).json({ message: 'Campo de senha não encontrado no schema do usuário.' });\r\n-      }\r\n-\r\n-      update.passwordChangedAt = new Date();\r\n-    }\r\n-\r\n-    // Garante que continua funcionário\r\n-    update.role = 'funcionario';\r\n-\r\n-    const updated = await User.findByIdAndUpdate(id, update, { new: true, runValidators: true })\r\n-                              .select('nomeCompleto username email role');\r\n-\r\n-    if (!updated) return res.status(404).json({ message: 'Usuário não encontrado' });\r\n-    res.json(updated);\r\n-  } catch (err) {\r\n-    console.error('Erro ao atualizar funcionário:', err);\r\n-    res.status(500).json({ message: 'Erro ao atualizar funcionário' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1756746352046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,5 +242,5 @@\n     res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n   }\r\n });\r\n \r\n-module.exports = router;\r\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756746655543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n-// servidor/routes/adminFuncionarios.js\r\n const express = require('express');\r\n const bcrypt = require('bcrypt'); // npm i bcrypt\r\n const router = express.Router();\r\n \r\n const User = require('../models/User');\r\n const authMiddleware = require('../middlewares/authMiddleware');\r\n \r\n-// Gate admin\r\n+// --- middlewares ---\r\n function requireAdmin(req, res, next) {\r\n   try {\r\n     const role = req.user?.role;\r\n     if (role === 'admin' || role === 'admin_master') return next();\r\n@@ -16,9 +15,9 @@\n     return res.status(401).json({ message: 'Não autenticado.' });\r\n   }\r\n }\r\n \r\n-// DTO\r\n+// --- helpers ---\r\n function userToDTO(u) {\r\n   const nomeNorm =\r\n     (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n     (u.nomeContato && String(u.nomeContato).trim()) ||\r\n@@ -35,12 +34,15 @@\n     nome: nomeNorm,\r\n   };\r\n }\r\n \r\n-/**\r\n- * LISTA FUNCIONÁRIOS (admin/funcionario)\r\n- * GET /api/admin/funcionarios\r\n- */\r\n+function escapeRegex(s) {\r\n+  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n+}\r\n+\r\n+// ================== ROTAS ==================\r\n+\r\n+// LISTAR funcionários (admin/funcionario)\r\n router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     const users = await User.find(\r\n       { role: { $in: ['admin', 'funcionario'] } },\r\n@@ -52,12 +54,72 @@\n     res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n   }\r\n });\r\n \r\n-/**\r\n- * OBTÉM UM FUNCIONÁRIO\r\n- * GET /api/admin/funcionarios/:id\r\n- */\r\n+// ------- ATENÇÃO: rotas específicas ANTES de \"/:id\" -------\r\n+\r\n+// BUSCAR usuários por Nome/CPF/CNPJ (máx 10, default 5)\r\n+router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { q = '', limit = 5 } = req.query;\r\n+    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n+\r\n+    const safe = String(q || '');\r\n+    const regex = safe ? new RegExp(escapeRegex(safe), 'i') : null;\r\n+    const digits = safe.replace(/\\D/g, '');\r\n+\r\n+    const or = [];\r\n+    if (regex) {\r\n+      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n+    }\r\n+    if (digits.length >= 3) {\r\n+      const dRe = new RegExp(digits); // busca parcial por sequência numérica\r\n+      or.push({ cpf: dRe }, { cnpj: dRe });\r\n+    }\r\n+\r\n+    const filter = or.length ? { $or: or } : {};\r\n+    const users = await User.find(\r\n+      filter,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n+    )\r\n+      .sort({ createdAt: -1 })\r\n+      .limit(lim)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n+  }\r\n+});\r\n+\r\n+// TRANSFORMAR usuário em funcionário/admin\r\n+// body: { userId, role: 'funcionario' | 'admin' }\r\n+router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { userId, role = 'funcionario' } = req.body;\r\n+    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n+    if (!['admin', 'funcionario'].includes(role)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const updated = await User.findByIdAndUpdate(\r\n+      userId,\r\n+      { role },\r\n+      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj' }\r\n+    ).lean();\r\n+\r\n+    if (!updated) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n+    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(updated) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas com parâmetro DEPOIS das específicas -------\r\n+\r\n+// OBTÉM um funcionário\r\n router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     const u = await User.findById(\r\n       req.params.id,\r\n@@ -72,12 +134,9 @@\n     res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n   }\r\n });\r\n \r\n-/**\r\n- * CRIA FUNCIONÁRIO (novo usuário)\r\n- * POST /api/admin/funcionarios\r\n- */\r\n+// CRIA funcionário (novo usuário)\r\n router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n \r\n@@ -117,12 +176,9 @@\n     res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n   }\r\n });\r\n \r\n-/**\r\n- * ATUALIZA FUNCIONÁRIO\r\n- * PUT /api/admin/funcionarios/:id\r\n- */\r\n+// ATUALIZA funcionário\r\n router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n \r\n@@ -163,12 +219,9 @@\n     res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n   }\r\n });\r\n \r\n-/**\r\n- * REMOVER FUNCIONÁRIO\r\n- * DELETE /api/admin/funcionarios/:id\r\n- */\r\n+// REMOVER do quadro (rebaixa para cliente)\r\n router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     const deleted = await User.findByIdAndUpdate(req.params.id, { role: 'cliente' }, { new: true });\r\n     if (!deleted) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n@@ -178,69 +231,5 @@\n     res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n   }\r\n });\r\n \r\n-/**\r\n- * BUSCAR USUÁRIOS (até 5) POR NOME/CPF/CNPJ\r\n- * GET /api/admin/funcionarios/buscar-usuarios?q=...&limit=5\r\n- */\r\n-router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { q = '', limit = 5 } = req.query;\r\n-    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n-\r\n-    const safe = String(q || '');\r\n-    const regex = safe ? new RegExp(safe.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i') : null;\r\n-    const digits = safe.replace(/\\D/g, '');\r\n-\r\n-    const or = [];\r\n-    if (regex) {\r\n-      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n-    }\r\n-    if (digits.length >= 3) {\r\n-      or.push({ cpf: new RegExp(digits) }, { cnpj: new RegExp(digits) });\r\n-    }\r\n-\r\n-    const filter = or.length ? { $or: or } : {};\r\n-    const users = await User.find(\r\n-      filter,\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n-    )\r\n-      .sort({ createdAt: -1 })\r\n-      .limit(lim)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(userToDTO));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n-  }\r\n-});\r\n-\r\n-/**\r\n- * TRANSFORMAR USUÁRIO EM FUNCIONÁRIO/ADMIN\r\n- * POST /api/admin/funcionarios/transformar\r\n- * body: { userId, role }  (role: 'funcionario' | 'admin')\r\n- */\r\n-router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { userId, role = 'funcionario' } = req.body;\r\n-    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n-    if (!['admin', 'funcionario'].includes(role)) {\r\n-      return res.status(400).json({ message: 'Cargo inválido.' });\r\n-    }\r\n-\r\n-    const updated = await User.findByIdAndUpdate(\r\n-      userId,\r\n-      { role },\r\n-      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj' }\r\n-    ).lean();\r\n-\r\n-    if (!updated) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n-    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(updated) });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\n\\ No newline at end of file\n+module.exports = router;\r\n"
                },
                {
                    "date": 1756762462447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,20 +4,15 @@\n \r\n const User = require('../models/User');\r\n const authMiddleware = require('../middlewares/authMiddleware');\r\n \r\n-// --- middlewares ---\r\n-function requireAdmin(req, res, next) {\r\n-  try {\r\n-    const role = req.user?.role;\r\n-    if (role === 'admin' || role === 'admin_master') return next();\r\n-    return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n-  } catch {\r\n-    return res.status(401).json({ message: 'Não autenticado.' });\r\n-  }\r\n+// ----- helpers / policies -----\r\n+const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n+\r\n+function escapeRegex(s) {\r\n+  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n }\r\n \r\n-// --- helpers ---\r\n function userToDTO(u) {\r\n   const nomeNorm =\r\n     (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n     (u.nomeContato && String(u.nomeContato).trim()) ||\r\n@@ -34,12 +29,30 @@\n     nome: nomeNorm,\r\n   };\r\n }\r\n \r\n-function escapeRegex(s) {\r\n-  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n+function requireAdmin(req, res, next) {\r\n+  const role = req.user?.role;\r\n+  if (role === 'admin' || role === 'admin_master') return next();\r\n+  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n }\r\n \r\n+function canChangeRole(actorRole, targetRole, desiredRole) {\r\n+  const a = roleRank[actorRole] ?? -1;\r\n+  const t = roleRank[targetRole] ?? -1;\r\n+  const d = roleRank[desiredRole] ?? -1;\r\n+\r\n+  // admin_master: pode tudo\r\n+  if (actorRole === 'admin_master') return true;\r\n+\r\n+  // admin só mexe em quem está abaixo dele e só pode definir cargo abaixo dele (funcionario)\r\n+  if (actorRole === 'admin') {\r\n+    return t < roleRank.admin && d < roleRank.admin; // mexe só em cliente/funcionario e define só funcionario\r\n+  }\r\n+\r\n+  return false;\r\n+}\r\n+\r\n // ================== ROTAS ==================\r\n \r\n // LISTAR funcionários (admin/funcionario)\r\n router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n@@ -54,9 +67,9 @@\n     res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n   }\r\n });\r\n \r\n-// ------- ATENÇÃO: rotas específicas ANTES de \"/:id\" -------\r\n+// ------- rotas específicas ANTES de \"/:id\" -------\r\n \r\n // BUSCAR usuários por Nome/CPF/CNPJ (máx 10, default 5)\r\n router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n@@ -69,11 +82,12 @@\n \r\n     const or = [];\r\n     if (regex) {\r\n       or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n+      or.push({ email: regex });\r\n     }\r\n     if (digits.length >= 3) {\r\n-      const dRe = new RegExp(digits); // busca parcial por sequência numérica\r\n+      const dRe = new RegExp(digits);\r\n       or.push({ cpf: dRe }, { cnpj: dRe });\r\n     }\r\n \r\n     const filter = or.length ? { $or: or } : {};\r\n@@ -91,26 +105,33 @@\n     res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n   }\r\n });\r\n \r\n-// TRANSFORMAR usuário em funcionário/admin\r\n-// body: { userId, role: 'funcionario' | 'admin' }\r\n+// TRANSFORMAR usuário em funcionario/admin/admin_master (policy aplicada)\r\n router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     const { userId, role = 'funcionario' } = req.body;\r\n     if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n-    if (!['admin', 'funcionario'].includes(role)) {\r\n+    if (!['funcionario', 'admin', 'admin_master'].includes(role)) {\r\n       return res.status(400).json({ message: 'Cargo inválido.' });\r\n     }\r\n \r\n-    const updated = await User.findByIdAndUpdate(\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(userId, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n+\r\n+    if (!canChangeRole(actorRole, target.role, role)) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+    }\r\n+\r\n+    target.role = role;\r\n+    await target.save();\r\n+\r\n+    const ret = await User.findById(\r\n       userId,\r\n-      { role },\r\n-      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj' }\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n     ).lean();\r\n-\r\n-    if (!updated) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n-    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(updated) });\r\n+    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(ret) });\r\n   } catch (err) {\r\n     console.error(err);\r\n     res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n   }\r\n@@ -176,20 +197,27 @@\n     res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n   }\r\n });\r\n \r\n-// ATUALIZA funcionário\r\n+// ATUALIZA funcionário (aplica policy se mudar role)\r\n router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n \r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n     const update = {};\r\n     if (email) update.email = email;\r\n     if (celular) update.celular = celular;\r\n+\r\n     if (role) {\r\n-      if (!['admin', 'funcionario'].includes(role)) {\r\n+      if (!['admin', 'funcionario', 'admin_master'].includes(role)) {\r\n         return res.status(400).json({ message: 'Cargo inválido.' });\r\n       }\r\n+      if (!canChangeRole(req.user?.role, target.role, role)) {\r\n+        return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+      }\r\n       update.role = role;\r\n     }\r\n \r\n     const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n@@ -209,23 +237,29 @@\n       update,\r\n       { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj' }\r\n     ).lean();\r\n \r\n-    if (!updated || !['admin', 'funcionario'].includes(updated.role)) {\r\n-      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-    }\r\n     res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n   } catch (err) {\r\n     console.error(err);\r\n     res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n   }\r\n });\r\n \r\n-// REMOVER do quadro (rebaixa para cliente)\r\n+// REMOVER do quadro (rebaixa para cliente) com policy\r\n router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n-    const deleted = await User.findByIdAndUpdate(req.params.id, { role: 'cliente' }, { new: true });\r\n-    if (!deleted) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    // só pode remover quem está abaixo\r\n+    if (!(actorRole === 'admin_master' || (actorRole === 'admin' && roleRank[target.role] < roleRank.admin))) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para remover este usuário do quadro.' });\r\n+    }\r\n+\r\n+    target.role = 'cliente';\r\n+    await target.save();\r\n     res.json({ message: 'Funcionário removido com sucesso.' });\r\n   } catch (err) {\r\n     console.error(err);\r\n     res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n"
                },
                {
                    "date": 1756762905709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,276 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt'); // npm i bcrypt\r\n+const router = express.Router();\r\n+\r\n+const User = require('../models/User');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+\r\n+// ----- helpers / policies -----\r\n+const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n+\r\n+function escapeRegex(s) {\r\n+  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n+}\r\n+\r\n+function normName(u) {\r\n+  return (\r\n+    (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n+    (u.nomeContato && String(u.nomeContato).trim()) ||\r\n+    (u.razaoSocial && String(u.razaoSocial).trim()) ||\r\n+    ''\r\n+  );\r\n+}\r\n+\r\n+function userToDTO(u) {\r\n+  return {\r\n+    _id: u._id,\r\n+    email: u.email,\r\n+    role: u.role,\r\n+    tipoConta: u.tipoConta,\r\n+    celular: u.celular,\r\n+    cpf: u.cpf,\r\n+    cnpj: u.cnpj,\r\n+    nome: normName(u),\r\n+  };\r\n+}\r\n+\r\n+function requireAdmin(req, res, next) {\r\n+  const role = req.user?.role;\r\n+  if (role === 'admin' || role === 'admin_master') return next();\r\n+  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n+}\r\n+\r\n+function canChangeRole(actorRole, targetRole, desiredRole) {\r\n+  const a = roleRank[actorRole] ?? -1;\r\n+  const t = roleRank[targetRole] ?? -1;\r\n+  const d = roleRank[desiredRole] ?? -1;\r\n+  if (actorRole === 'admin_master') return true;\r\n+  if (actorRole === 'admin') {\r\n+    // admin só mexe em quem está abaixo e só pode definir \"funcionario\"\r\n+    return t < roleRank.admin && d < roleRank.admin;\r\n+  }\r\n+  return false;\r\n+}\r\n+\r\n+// ================== ROTAS ==================\r\n+\r\n+// LISTAR quadro (inclui admin_master, admin e funcionário) com ordenação\r\n+router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const users = await User\r\n+      .find(\r\n+        { role: { $in: ['admin_master', 'admin', 'funcionario'] } },\r\n+        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n+      )\r\n+      .lean();\r\n+\r\n+    // Ordenar: Admin Master > Admin > Funcionário; depois por nome\r\n+    users.sort((a, b) => {\r\n+      const r = (roleRank[b.role] ?? -1) - (roleRank[a.role] ?? -1);\r\n+      if (r !== 0) return r;\r\n+      const an = normName(a).toLocaleLowerCase('pt-BR');\r\n+      const bn = normName(b).toLocaleLowerCase('pt-BR');\r\n+      return an.localeCompare(bn);\r\n+    });\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas específicas ANTES de \"/:id\" -------\r\n+\r\n+// BUSCAR usuários (exclui quem já está no quadro)\r\n+// GET /api/admin/funcionarios/buscar-usuarios?q=...&limit=5\r\n+router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { q = '', limit = 5 } = req.query;\r\n+    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n+\r\n+    const safe = String(q || '');\r\n+    const regex = safe ? new RegExp(escapeRegex(safe), 'i') : null;\r\n+    const digits = safe.replace(/\\D/g, '');\r\n+\r\n+    const or = [];\r\n+    if (regex) {\r\n+      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n+      or.push({ email: regex });\r\n+    }\r\n+    if (digits.length >= 3) {\r\n+      const dRe = new RegExp(digits);\r\n+      or.push({ cpf: dRe }, { cnpj: dRe });\r\n+    }\r\n+\r\n+    // base: NÃO trazer quem já está no quadro (funcionario, admin, admin_master)\r\n+    const base = { role: { $nin: ['funcionario', 'admin', 'admin_master'] } };\r\n+    const filter = or.length ? { ...base, $or: or } : base;\r\n+\r\n+    const users = await User\r\n+      .find(\r\n+        filter,\r\n+        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n+      )\r\n+      .sort({ createdAt: -1 })\r\n+      .limit(lim)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n+  }\r\n+});\r\n+\r\n+// TRANSFORMAR usuário (policy aplicada)\r\n+router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { userId, role = 'funcionario' } = req.body;\r\n+    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n+    if (!['funcionario', 'admin', 'admin_master'].includes(role)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(userId, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n+\r\n+    if (!canChangeRole(actorRole, target.role, role)) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+    }\r\n+\r\n+    target.role = role;\r\n+    await target.save();\r\n+\r\n+    const ret = await User.findById(\r\n+      userId,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n+    ).lean();\r\n+    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(ret) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas com parâmetro DEPOIS das específicas -------\r\n+\r\n+// OBTÉM um funcionário\r\n+router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const u = await User.findById(\r\n+      req.params.id,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n+    ).lean();\r\n+    if (!u || !['admin_master', 'admin', 'funcionario'].includes(u.role)) {\r\n+      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    }\r\n+    res.json(userToDTO(u));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// CRIA funcionário (novo usuário)\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n+\r\n+    if (!email || !senha || !celular) {\r\n+      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n+    }\r\n+    const cargo = role || 'funcionario';\r\n+    if (!['admin', 'funcionario'].includes(cargo)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const existe = await User.findOne({ email });\r\n+    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+\r\n+    const hash = await bcrypt.hash(senha, 10);\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n+\r\n+    const doc = { tipoConta: conta, email, senha: hash, celular, role: cargo };\r\n+    if (conta === 'pessoa_juridica') {\r\n+      doc.nomeContato = (nomeContato || nome || '').trim();\r\n+      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n+    }\r\n+\r\n+    const novo = await User.create(doc);\r\n+    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// ATUALIZA funcionário (policy aplicada para mudar role)\r\n+router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n+\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    const update = {};\r\n+    if (email) update.email = email;\r\n+    if (celular) update.celular = celular;\r\n+\r\n+    if (role) {\r\n+      if (!['admin', 'funcionario', 'admin_master'].includes(role)) {\r\n+        return res.status(400).json({ message: 'Cargo inválido.' });\r\n+      }\r\n+      if (!canChangeRole(req.user?.role, target.role, role)) {\r\n+        return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+      }\r\n+      update.role = role;\r\n+    }\r\n+\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n+    if (conta === 'pessoa_juridica') {\r\n+      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n+      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n+    }\r\n+\r\n+    if (senha && senha.length >= 8) update.senha = await bcrypt.hash(senha, 10);\r\n+\r\n+    const updated = await User.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      update,\r\n+      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj' }\r\n+    ).lean();\r\n+\r\n+    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// REMOVER do quadro (rebaixa para cliente) com policy\r\n+router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    if (!(actorRole === 'admin_master' || (actorRole === 'admin' && roleRank[target.role] < roleRank.admin))) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para remover este usuário do quadro.' });\r\n+    }\r\n+\r\n+    target.role = 'cliente';\r\n+    await target.save();\r\n+    res.json({ message: 'Funcionário removido com sucesso.' });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757178531718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n     celular: u.celular,\r\n     cpf: u.cpf,\r\n     cnpj: u.cnpj,\r\n     nome: normName(u),\r\n+    grupos: Array.isArray(u.grupos) ? u.grupos : [],\r\n   };\r\n }\r\n \r\n function requireAdmin(req, res, next) {\r\n@@ -273,273 +274,4 @@\n   }\r\n });\r\n \r\n module.exports = router;\r\n-const express = require('express');\r\n-const bcrypt = require('bcrypt'); // npm i bcrypt\r\n-const router = express.Router();\r\n-\r\n-const User = require('../models/User');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-\r\n-// ----- helpers / policies -----\r\n-const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n-\r\n-function escapeRegex(s) {\r\n-  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n-}\r\n-\r\n-function userToDTO(u) {\r\n-  const nomeNorm =\r\n-    (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n-    (u.nomeContato && String(u.nomeContato).trim()) ||\r\n-    (u.razaoSocial && String(u.razaoSocial).trim()) ||\r\n-    '';\r\n-  return {\r\n-    _id: u._id,\r\n-    email: u.email,\r\n-    role: u.role,\r\n-    tipoConta: u.tipoConta,\r\n-    celular: u.celular,\r\n-    cpf: u.cpf,\r\n-    cnpj: u.cnpj,\r\n-    nome: nomeNorm,\r\n-  };\r\n-}\r\n-\r\n-function requireAdmin(req, res, next) {\r\n-  const role = req.user?.role;\r\n-  if (role === 'admin' || role === 'admin_master') return next();\r\n-  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n-}\r\n-\r\n-function canChangeRole(actorRole, targetRole, desiredRole) {\r\n-  const a = roleRank[actorRole] ?? -1;\r\n-  const t = roleRank[targetRole] ?? -1;\r\n-  const d = roleRank[desiredRole] ?? -1;\r\n-\r\n-  // admin_master: pode tudo\r\n-  if (actorRole === 'admin_master') return true;\r\n-\r\n-  // admin só mexe em quem está abaixo dele e só pode definir cargo abaixo dele (funcionario)\r\n-  if (actorRole === 'admin') {\r\n-    return t < roleRank.admin && d < roleRank.admin; // mexe só em cliente/funcionario e define só funcionario\r\n-  }\r\n-\r\n-  return false;\r\n-}\r\n-\r\n-// ================== ROTAS ==================\r\n-\r\n-// LISTAR funcionários (admin/funcionario)\r\n-router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const users = await User.find(\r\n-      { role: { $in: ['admin', 'funcionario'] } },\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n-    ).lean();\r\n-    res.json(users.map(userToDTO));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n-  }\r\n-});\r\n-\r\n-// ------- rotas específicas ANTES de \"/:id\" -------\r\n-\r\n-// BUSCAR usuários por Nome/CPF/CNPJ (máx 10, default 5)\r\n-router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { q = '', limit = 5 } = req.query;\r\n-    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n-\r\n-    const safe = String(q || '');\r\n-    const regex = safe ? new RegExp(escapeRegex(safe), 'i') : null;\r\n-    const digits = safe.replace(/\\D/g, '');\r\n-\r\n-    const or = [];\r\n-    if (regex) {\r\n-      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n-      or.push({ email: regex });\r\n-    }\r\n-    if (digits.length >= 3) {\r\n-      const dRe = new RegExp(digits);\r\n-      or.push({ cpf: dRe }, { cnpj: dRe });\r\n-    }\r\n-\r\n-    const filter = or.length ? { $or: or } : {};\r\n-    const users = await User.find(\r\n-      filter,\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n-    )\r\n-      .sort({ createdAt: -1 })\r\n-      .limit(lim)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(userToDTO));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n-  }\r\n-});\r\n-\r\n-// TRANSFORMAR usuário em funcionario/admin/admin_master (policy aplicada)\r\n-router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { userId, role = 'funcionario' } = req.body;\r\n-    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n-    if (!['funcionario', 'admin', 'admin_master'].includes(role)) {\r\n-      return res.status(400).json({ message: 'Cargo inválido.' });\r\n-    }\r\n-\r\n-    const actorRole = req.user?.role;\r\n-    const target = await User.findById(userId, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n-\r\n-    if (!canChangeRole(actorRole, target.role, role)) {\r\n-      return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n-    }\r\n-\r\n-    target.role = role;\r\n-    await target.save();\r\n-\r\n-    const ret = await User.findById(\r\n-      userId,\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n-    ).lean();\r\n-    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(ret) });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n-  }\r\n-});\r\n-\r\n-// ------- rotas com parâmetro DEPOIS das específicas -------\r\n-\r\n-// OBTÉM um funcionário\r\n-router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const u = await User.findById(\r\n-      req.params.id,\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n-    ).lean();\r\n-    if (!u || !['admin', 'funcionario'].includes(u.role)) {\r\n-      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-    }\r\n-    res.json(userToDTO(u));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// CRIA funcionário (novo usuário)\r\n-router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n-\r\n-    if (!email || !senha || !celular) {\r\n-      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n-    }\r\n-    const cargo = role || 'funcionario';\r\n-    if (!['admin', 'funcionario'].includes(cargo)) {\r\n-      return res.status(400).json({ message: 'Cargo inválido.' });\r\n-    }\r\n-\r\n-    const existe = await User.findOne({ email });\r\n-    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n-\r\n-    const hash = await bcrypt.hash(senha, 10);\r\n-    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n-\r\n-    const doc = {\r\n-      tipoConta: conta,\r\n-      email,\r\n-      senha: hash,\r\n-      celular,\r\n-      role: cargo,\r\n-    };\r\n-\r\n-    if (conta === 'pessoa_juridica') {\r\n-      doc.nomeContato = (nomeContato || nome || '').trim();\r\n-      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n-    } else {\r\n-      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n-    }\r\n-\r\n-    const novo = await User.create(doc);\r\n-    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// ATUALIZA funcionário (aplica policy se mudar role)\r\n-router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n-\r\n-    const target = await User.findById(req.params.id, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-\r\n-    const update = {};\r\n-    if (email) update.email = email;\r\n-    if (celular) update.celular = celular;\r\n-\r\n-    if (role) {\r\n-      if (!['admin', 'funcionario', 'admin_master'].includes(role)) {\r\n-        return res.status(400).json({ message: 'Cargo inválido.' });\r\n-      }\r\n-      if (!canChangeRole(req.user?.role, target.role, role)) {\r\n-        return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n-      }\r\n-      update.role = role;\r\n-    }\r\n-\r\n-    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n-    if (conta === 'pessoa_juridica') {\r\n-      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n-      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n-    } else {\r\n-      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n-    }\r\n-\r\n-    if (senha && senha.length >= 8) {\r\n-      update.senha = await bcrypt.hash(senha, 10);\r\n-    }\r\n-\r\n-    const updated = await User.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      update,\r\n-      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj' }\r\n-    ).lean();\r\n-\r\n-    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// REMOVER do quadro (rebaixa para cliente) com policy\r\n-router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const actorRole = req.user?.role;\r\n-    const target = await User.findById(req.params.id, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-\r\n-    // só pode remover quem está abaixo\r\n-    if (!(actorRole === 'admin_master' || (actorRole === 'admin' && roleRank[target.role] < roleRank.admin))) {\r\n-      return res.status(403).json({ message: 'Você não tem permissão para remover este usuário do quadro.' });\r\n-    }\r\n-\r\n-    target.role = 'cliente';\r\n-    await target.save();\r\n-    res.json({ message: 'Funcionário removido com sucesso.' });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1757178659772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,277 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt'); // npm i bcrypt\r\n+const router = express.Router();\r\n+\r\n+const User = require('../models/User');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+\r\n+// ----- helpers / policies -----\r\n+const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n+\r\n+function escapeRegex(s) {\r\n+  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n+}\r\n+\r\n+function normName(u) {\r\n+  return (\r\n+    (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n+    (u.nomeContato && String(u.nomeContato).trim()) ||\r\n+    (u.razaoSocial && String(u.razaoSocial).trim()) ||\r\n+    ''\r\n+  );\r\n+}\r\n+\r\n+function userToDTO(u) {\r\n+  return {\r\n+    _id: u._id,\r\n+    email: u.email,\r\n+    role: u.role,\r\n+    tipoConta: u.tipoConta,\r\n+    celular: u.celular,\r\n+    cpf: u.cpf,\r\n+    cnpj: u.cnpj,\r\n+    nome: normName(u),\r\n+    grupos: Array.isArray(u.grupos) ? u.grupos : [],\r\n+  };\r\n+}\r\n+\r\n+function requireAdmin(req, res, next) {\r\n+  const role = req.user?.role;\r\n+  if (role === 'admin' || role === 'admin_master') return next();\r\n+  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n+}\r\n+\r\n+function canChangeRole(actorRole, targetRole, desiredRole) {\r\n+  const a = roleRank[actorRole] ?? -1;\r\n+  const t = roleRank[targetRole] ?? -1;\r\n+  const d = roleRank[desiredRole] ?? -1;\r\n+  if (actorRole === 'admin_master') return true;\r\n+  if (actorRole === 'admin') {\r\n+    // admin só mexe em quem está abaixo e só pode definir \"funcionario\"\r\n+    return t < roleRank.admin && d < roleRank.admin;\r\n+  }\r\n+  return false;\r\n+}\r\n+\r\n+// ================== ROTAS ==================\r\n+\r\n+// LISTAR quadro (inclui admin_master, admin e funcionário) com ordenação\r\n+router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const users = await User\r\n+      .find(\r\n+        { role: { $in: ['admin_master', 'admin', 'funcionario'] } },\r\n+        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+      )\r\n+      .lean();\r\n+\r\n+    // Ordenar: Admin Master > Admin > Funcionário; depois por nome\r\n+    users.sort((a, b) => {\r\n+      const r = (roleRank[b.role] ?? -1) - (roleRank[a.role] ?? -1);\r\n+      if (r !== 0) return r;\r\n+      const an = normName(a).toLocaleLowerCase('pt-BR');\r\n+      const bn = normName(b).toLocaleLowerCase('pt-BR');\r\n+      return an.localeCompare(bn);\r\n+    });\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas específicas ANTES de \"/:id\" -------\r\n+\r\n+// BUSCAR usuários (exclui quem já está no quadro)\r\n+// GET /api/admin/funcionarios/buscar-usuarios?q=...&limit=5\r\n+router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { q = '', limit = 5 } = req.query;\r\n+    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n+\r\n+    const safe = String(q || '');\r\n+    const regex = safe ? new RegExp(escapeRegex(safe), 'i') : null;\r\n+    const digits = safe.replace(/\\D/g, '');\r\n+\r\n+    const or = [];\r\n+    if (regex) {\r\n+      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n+      or.push({ email: regex });\r\n+    }\r\n+    if (digits.length >= 3) {\r\n+      const dRe = new RegExp(digits);\r\n+      or.push({ cpf: dRe }, { cnpj: dRe });\r\n+    }\r\n+\r\n+    // base: NÃO trazer quem já está no quadro (funcionario, admin, admin_master)\r\n+    const base = { role: { $nin: ['funcionario', 'admin', 'admin_master'] } };\r\n+    const filter = or.length ? { ...base, $or: or } : base;\r\n+\r\n+    const users = await User\r\n+      .find(\r\n+        filter,\r\n+        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+      )\r\n+      .sort({ createdAt: -1 })\r\n+      .limit(lim)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n+  }\r\n+});\r\n+\r\n+// TRANSFORMAR usuário (policy aplicada)\r\n+router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { userId, role = 'funcionario' } = req.body;\r\n+    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n+    if (!['funcionario', 'admin', 'admin_master'].includes(role)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(userId, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n+\r\n+    if (!canChangeRole(actorRole, target.role, role)) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+    }\r\n+\r\n+    target.role = role;\r\n+    await target.save();\r\n+\r\n+    const ret = await User.findById(\r\n+      userId,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+    ).lean();\r\n+    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(ret) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas com parâmetro DEPOIS das específicas -------\r\n+\r\n+// OBTÉM um funcionário\r\n+router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const u = await User.findById(\r\n+      req.params.id,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+    ).lean();\r\n+    if (!u || !['admin_master', 'admin', 'funcionario'].includes(u.role)) {\r\n+      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    }\r\n+    res.json(userToDTO(u));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// CRIA funcionário (novo usuário)\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n+\r\n+    if (!email || !senha || !celular) {\r\n+      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n+    }\r\n+    const cargo = role || 'funcionario';\r\n+    if (!['admin', 'funcionario'].includes(cargo)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const existe = await User.findOne({ email });\r\n+    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+\r\n+    const hash = await bcrypt.hash(senha, 10);\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n+\r\n+    const doc = { tipoConta: conta, email, senha: hash, celular, role: cargo };\r\n+    if (conta === 'pessoa_juridica') {\r\n+      doc.nomeContato = (nomeContato || nome || '').trim();\r\n+      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n+    }\r\n+\r\n+    const novo = await User.create(doc);\r\n+    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// ATUALIZA funcionário (policy aplicada para mudar role)\r\n+router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n+\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    const update = {};\r\n+    if (email) update.email = email;\r\n+    if (celular) update.celular = celular;\r\n+\r\n+    if (role) {\r\n+      if (!['admin', 'funcionario', 'admin_master'].includes(role)) {\r\n+        return res.status(400).json({ message: 'Cargo inválido.' });\r\n+      }\r\n+      if (!canChangeRole(req.user?.role, target.role, role)) {\r\n+        return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+      }\r\n+      update.role = role;\r\n+    }\r\n+\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n+    if (conta === 'pessoa_juridica') {\r\n+      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n+      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n+    }\r\n+\r\n+    if (senha && senha.length >= 8) update.senha = await bcrypt.hash(senha, 10);\r\n+\r\n+    const updated = await User.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      update,\r\n+      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos' }\r\n+    ).lean();\r\n+\r\n+    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// REMOVER do quadro (rebaixa para cliente) com policy\r\n+router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    if (!(actorRole === 'admin_master' || (actorRole === 'admin' && roleRank[target.role] < roleRank.admin))) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para remover este usuário do quadro.' });\r\n+    }\r\n+\r\n+    target.role = 'cliente';\r\n+    await target.save();\r\n+    res.json({ message: 'Funcionário removido com sucesso.' });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757178789731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,284 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt'); // npm i bcrypt\r\n+const router = express.Router();\r\n+\r\n+const User = require('../models/User');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+\r\n+// ----- helpers / policies -----\r\n+const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n+\r\n+function escapeRegex(s) {\r\n+  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n+}\r\n+\r\n+function normName(u) {\r\n+  return (\r\n+    (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n+    (u.nomeContato && String(u.nomeContato).trim()) ||\r\n+    (u.razaoSocial && String(u.razaoSocial).trim()) ||\r\n+    ''\r\n+  );\r\n+}\r\n+\r\n+function userToDTO(u) {\r\n+  return {\r\n+    _id: u._id,\r\n+    email: u.email,\r\n+    role: u.role,\r\n+    tipoConta: u.tipoConta,\r\n+    celular: u.celular,\r\n+    cpf: u.cpf,\r\n+    cnpj: u.cnpj,\r\n+    nome: normName(u),\r\n+    grupos: Array.isArray(u.grupos) ? u.grupos : [],\r\n+  };\r\n+}\r\n+\r\n+function requireAdmin(req, res, next) {\r\n+  const role = req.user?.role;\r\n+  if (role === 'admin' || role === 'admin_master') return next();\r\n+  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n+}\r\n+\r\n+function canChangeRole(actorRole, targetRole, desiredRole) {\r\n+  const a = roleRank[actorRole] ?? -1;\r\n+  const t = roleRank[targetRole] ?? -1;\r\n+  const d = roleRank[desiredRole] ?? -1;\r\n+  if (actorRole === 'admin_master') return true;\r\n+  if (actorRole === 'admin') {\r\n+    // admin só mexe em quem está abaixo e só pode definir \"funcionario\"\r\n+    return t < roleRank.admin && d < roleRank.admin;\r\n+  }\r\n+  return false;\r\n+}\r\n+\r\n+// ================== ROTAS ==================\r\n+\r\n+// LISTAR quadro (inclui admin_master, admin e funcionário) com ordenação\r\n+router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const users = await User\r\n+      .find(\r\n+        { role: { $in: ['admin_master', 'admin', 'funcionario'] } },\r\n+        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+      )\r\n+      .lean();\r\n+\r\n+    // Ordenar: Admin Master > Admin > Funcionário; depois por nome\r\n+    users.sort((a, b) => {\r\n+      const r = (roleRank[b.role] ?? -1) - (roleRank[a.role] ?? -1);\r\n+      if (r !== 0) return r;\r\n+      const an = normName(a).toLocaleLowerCase('pt-BR');\r\n+      const bn = normName(b).toLocaleLowerCase('pt-BR');\r\n+      return an.localeCompare(bn);\r\n+    });\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas específicas ANTES de \"/:id\" -------\r\n+\r\n+// BUSCAR usuários (exclui quem já está no quadro)\r\n+// GET /api/admin/funcionarios/buscar-usuarios?q=...&limit=5\r\n+router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { q = '', limit = 5 } = req.query;\r\n+    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n+\r\n+    const safe = String(q || '');\r\n+    const regex = safe ? new RegExp(escapeRegex(safe), 'i') : null;\r\n+    const digits = safe.replace(/\\D/g, '');\r\n+\r\n+    const or = [];\r\n+    if (regex) {\r\n+      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n+      or.push({ email: regex });\r\n+    }\r\n+    if (digits.length >= 3) {\r\n+      const dRe = new RegExp(digits);\r\n+      or.push({ cpf: dRe }, { cnpj: dRe });\r\n+    }\r\n+\r\n+    // base: NÃO trazer quem já está no quadro (funcionario, admin, admin_master)\r\n+    const base = { role: { $nin: ['funcionario', 'admin', 'admin_master'] } };\r\n+    const filter = or.length ? { ...base, $or: or } : base;\r\n+\r\n+    const users = await User\r\n+      .find(\r\n+        filter,\r\n+        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+      )\r\n+      .sort({ createdAt: -1 })\r\n+      .limit(lim)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n+  }\r\n+});\r\n+\r\n+// TRANSFORMAR usuário (policy aplicada)\r\n+router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { userId, role = 'funcionario' } = req.body;\r\n+    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n+    if (!['funcionario', 'admin', 'admin_master'].includes(role)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(userId, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n+\r\n+    if (!canChangeRole(actorRole, target.role, role)) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+    }\r\n+\r\n+    target.role = role;\r\n+    await target.save();\r\n+\r\n+    const ret = await User.findById(\r\n+      userId,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+    ).lean();\r\n+    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(ret) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas com parâmetro DEPOIS das específicas -------\r\n+\r\n+// OBTÉM um funcionário\r\n+router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const u = await User.findById(\r\n+      req.params.id,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+    ).lean();\r\n+    if (!u || !['admin_master', 'admin', 'funcionario'].includes(u.role)) {\r\n+      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    }\r\n+    res.json(userToDTO(u));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// CRIA funcionário (novo usuário)\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular, grupos } = req.body;\r\n+\r\n+    if (!email || !senha || !celular) {\r\n+      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n+    }\r\n+    const cargo = role || 'funcionario';\r\n+    if (!['admin', 'funcionario'].includes(cargo)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const existe = await User.findOne({ email });\r\n+    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+\r\n+    const hash = await bcrypt.hash(senha, 10);\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n+\r\n+    const doc = { tipoConta: conta, email, senha: hash, celular, role: cargo };\r\n+    if (conta === 'pessoa_juridica') {\r\n+      doc.nomeContato = (nomeContato || nome || '').trim();\r\n+      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n+    }\r\n+\r\n+    const ALLOWED_GROUPS = ['gerente','vendedor','esteticista','veterinario'];\r\n+    let gruposArr = [];\r\n+    if (Array.isArray(grupos)) gruposArr = grupos;\r\n+    else if (typeof grupos === 'string' && grupos) gruposArr = [grupos];\r\n+    gruposArr = [...new Set(gruposArr.filter(g => ALLOWED_GROUPS.includes(g)))];\r\n+    doc.grupos = gruposArr;\r\n+\r\n+    const novo = await User.create(doc);\r\n+    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// ATUALIZA funcionário (policy aplicada para mudar role)\r\n+router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n+\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    const update = {};\r\n+    if (email) update.email = email;\r\n+    if (celular) update.celular = celular;\r\n+\r\n+    if (role) {\r\n+      if (!['admin', 'funcionario', 'admin_master'].includes(role)) {\r\n+        return res.status(400).json({ message: 'Cargo inválido.' });\r\n+      }\r\n+      if (!canChangeRole(req.user?.role, target.role, role)) {\r\n+        return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+      }\r\n+      update.role = role;\r\n+    }\r\n+\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n+    if (conta === 'pessoa_juridica') {\r\n+      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n+      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n+    }\r\n+\r\n+    if (senha && senha.length >= 8) update.senha = await bcrypt.hash(senha, 10);\r\n+\r\n+    const updated = await User.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      update,\r\n+      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos' }\r\n+    ).lean();\r\n+\r\n+    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// REMOVER do quadro (rebaixa para cliente) com policy\r\n+router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    if (!(actorRole === 'admin_master' || (actorRole === 'admin' && roleRank[target.role] < roleRank.admin))) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para remover este usuário do quadro.' });\r\n+    }\r\n+\r\n+    target.role = 'cliente';\r\n+    await target.save();\r\n+    res.json({ message: 'Funcionário removido com sucesso.' });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757178872089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,293 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt'); // npm i bcrypt\r\n+const router = express.Router();\r\n+\r\n+const User = require('../models/User');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+\r\n+// ----- helpers / policies -----\r\n+const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n+\r\n+function escapeRegex(s) {\r\n+  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n+}\r\n+\r\n+function normName(u) {\r\n+  return (\r\n+    (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n+    (u.nomeContato && String(u.nomeContato).trim()) ||\r\n+    (u.razaoSocial && String(u.razaoSocial).trim()) ||\r\n+    ''\r\n+  );\r\n+}\r\n+\r\n+function userToDTO(u) {\r\n+  return {\r\n+    _id: u._id,\r\n+    email: u.email,\r\n+    role: u.role,\r\n+    tipoConta: u.tipoConta,\r\n+    celular: u.celular,\r\n+    cpf: u.cpf,\r\n+    cnpj: u.cnpj,\r\n+    nome: normName(u),\r\n+    grupos: Array.isArray(u.grupos) ? u.grupos : [],\r\n+  };\r\n+}\r\n+\r\n+function requireAdmin(req, res, next) {\r\n+  const role = req.user?.role;\r\n+  if (role === 'admin' || role === 'admin_master') return next();\r\n+  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n+}\r\n+\r\n+function canChangeRole(actorRole, targetRole, desiredRole) {\r\n+  const a = roleRank[actorRole] ?? -1;\r\n+  const t = roleRank[targetRole] ?? -1;\r\n+  const d = roleRank[desiredRole] ?? -1;\r\n+  if (actorRole === 'admin_master') return true;\r\n+  if (actorRole === 'admin') {\r\n+    // admin só mexe em quem está abaixo e só pode definir \"funcionario\"\r\n+    return t < roleRank.admin && d < roleRank.admin;\r\n+  }\r\n+  return false;\r\n+}\r\n+\r\n+// ================== ROTAS ==================\r\n+\r\n+// LISTAR quadro (inclui admin_master, admin e funcionário) com ordenação\r\n+router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const users = await User\r\n+      .find(\r\n+        { role: { $in: ['admin_master', 'admin', 'funcionario'] } },\r\n+        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+      )\r\n+      .lean();\r\n+\r\n+    // Ordenar: Admin Master > Admin > Funcionário; depois por nome\r\n+    users.sort((a, b) => {\r\n+      const r = (roleRank[b.role] ?? -1) - (roleRank[a.role] ?? -1);\r\n+      if (r !== 0) return r;\r\n+      const an = normName(a).toLocaleLowerCase('pt-BR');\r\n+      const bn = normName(b).toLocaleLowerCase('pt-BR');\r\n+      return an.localeCompare(bn);\r\n+    });\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas específicas ANTES de \"/:id\" -------\r\n+\r\n+// BUSCAR usuários (exclui quem já está no quadro)\r\n+// GET /api/admin/funcionarios/buscar-usuarios?q=...&limit=5\r\n+router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { q = '', limit = 5 } = req.query;\r\n+    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n+\r\n+    const safe = String(q || '');\r\n+    const regex = safe ? new RegExp(escapeRegex(safe), 'i') : null;\r\n+    const digits = safe.replace(/\\D/g, '');\r\n+\r\n+    const or = [];\r\n+    if (regex) {\r\n+      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n+      or.push({ email: regex });\r\n+    }\r\n+    if (digits.length >= 3) {\r\n+      const dRe = new RegExp(digits);\r\n+      or.push({ cpf: dRe }, { cnpj: dRe });\r\n+    }\r\n+\r\n+    // base: NÃO trazer quem já está no quadro (funcionario, admin, admin_master)\r\n+    const base = { role: { $nin: ['funcionario', 'admin', 'admin_master'] } };\r\n+    const filter = or.length ? { ...base, $or: or } : base;\r\n+\r\n+    const users = await User\r\n+      .find(\r\n+        filter,\r\n+        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+      )\r\n+      .sort({ createdAt: -1 })\r\n+      .limit(lim)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n+  }\r\n+});\r\n+\r\n+// TRANSFORMAR usuário (policy aplicada)\r\n+router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { userId, role = 'funcionario' } = req.body;\r\n+    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n+    if (!['funcionario', 'admin', 'admin_master'].includes(role)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(userId, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n+\r\n+    if (!canChangeRole(actorRole, target.role, role)) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+    }\r\n+\r\n+    target.role = role;\r\n+    await target.save();\r\n+\r\n+    const ret = await User.findById(\r\n+      userId,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+    ).lean();\r\n+    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(ret) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas com parâmetro DEPOIS das específicas -------\r\n+\r\n+// OBTÉM um funcionário\r\n+router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const u = await User.findById(\r\n+      req.params.id,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+    ).lean();\r\n+    if (!u || !['admin_master', 'admin', 'funcionario'].includes(u.role)) {\r\n+      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    }\r\n+    res.json(userToDTO(u));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// CRIA funcionário (novo usuário)\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular, grupos } = req.body;\r\n+\r\n+    if (!email || !senha || !celular) {\r\n+      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n+    }\r\n+    const cargo = role || 'funcionario';\r\n+    if (!['admin', 'funcionario'].includes(cargo)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const existe = await User.findOne({ email });\r\n+    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+\r\n+    const hash = await bcrypt.hash(senha, 10);\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n+\r\n+    const doc = { tipoConta: conta, email, senha: hash, celular, role: cargo };\r\n+    if (conta === 'pessoa_juridica') {\r\n+      doc.nomeContato = (nomeContato || nome || '').trim();\r\n+      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n+    }\r\n+\r\n+    const ALLOWED_GROUPS = ['gerente','vendedor','esteticista','veterinario'];\r\n+    let gruposArr = [];\r\n+    if (Array.isArray(grupos)) gruposArr = grupos;\r\n+    else if (typeof grupos === 'string' && grupos) gruposArr = [grupos];\r\n+    gruposArr = [...new Set(gruposArr.filter(g => ALLOWED_GROUPS.includes(g)))];\r\n+    doc.grupos = gruposArr;\r\n+\r\n+    const novo = await User.create(doc);\r\n+    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// ATUALIZA funcionário (policy aplicada para mudar role)\r\n+router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular, grupos } = req.body;\r\n+\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    const update = {};\r\n+    if (email) update.email = email;\r\n+    if (celular) update.celular = celular;\r\n+\r\n+    if (role) {\r\n+      if (!['admin', 'funcionario', 'admin_master'].includes(role)) {\r\n+        return res.status(400).json({ message: 'Cargo inválido.' });\r\n+      }\r\n+      if (!canChangeRole(req.user?.role, target.role, role)) {\r\n+        return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+      }\r\n+      update.role = role;\r\n+    }\r\n+\r\n+    if (typeof grupos !== 'undefined') {\r\n+      const ALLOWED_GROUPS = ['gerente','vendedor','esteticista','veterinario'];\r\n+      let arr = [];\r\n+      if (Array.isArray(grupos)) arr = grupos;\r\n+      else if (typeof grupos === 'string' && grupos) arr = [grupos];\r\n+      arr = [...new Set(arr.filter(g => ALLOWED_GROUPS.includes(g)))];\r\n+      update.grupos = arr;\r\n+    }\r\n+\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n+    if (conta === 'pessoa_juridica') {\r\n+      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n+      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n+    }\r\n+\r\n+    if (senha && senha.length >= 8) update.senha = await bcrypt.hash(senha, 10);\r\n+\r\n+    const updated = await User.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      update,\r\n+      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos' }\r\n+    ).lean();\r\n+\r\n+    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// REMOVER do quadro (rebaixa para cliente) com policy\r\n+router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    if (!(actorRole === 'admin_master' || (actorRole === 'admin' && roleRank[target.role] < roleRank.admin))) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para remover este usuário do quadro.' });\r\n+    }\r\n+\r\n+    target.role = 'cliente';\r\n+    await target.save();\r\n+    res.json({ message: 'Funcionário removido com sucesso.' });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757179295088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,293 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt'); // npm i bcrypt\r\n+const router = express.Router();\r\n+\r\n+const User = require('../models/User');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+\r\n+// ----- helpers / policies -----\r\n+const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n+\r\n+function escapeRegex(s) {\r\n+  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n+}\r\n+\r\n+function normName(u) {\r\n+  return (\r\n+    (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n+    (u.nomeContato && String(u.nomeContato).trim()) ||\r\n+    (u.razaoSocial && String(u.razaoSocial).trim()) ||\r\n+    ''\r\n+  );\r\n+}\r\n+\r\n+function userToDTO(u) {\r\n+  return {\r\n+    _id: u._id,\r\n+    email: u.email,\r\n+    role: u.role,\r\n+    tipoConta: u.tipoConta,\r\n+    celular: u.celular,\r\n+    cpf: u.cpf,\r\n+    cnpj: u.cnpj,\r\n+    nome: normName(u),\r\n+    grupos: Array.isArray(u.grupos) ? u.grupos : [],\r\n+  };\r\n+}\r\n+\r\n+function requireAdmin(req, res, next) {\r\n+  const role = req.user?.role;\r\n+  if (role === 'admin' || role === 'admin_master') return next();\r\n+  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n+}\r\n+\r\n+function canChangeRole(actorRole, targetRole, desiredRole) {\r\n+  const a = roleRank[actorRole] ?? -1;\r\n+  const t = roleRank[targetRole] ?? -1;\r\n+  const d = roleRank[desiredRole] ?? -1;\r\n+  if (actorRole === 'admin_master') return true;\r\n+  if (actorRole === 'admin') {\r\n+    // admin só mexe em quem está abaixo e só pode definir \"funcionario\"\r\n+    return t < roleRank.admin && d < roleRank.admin;\r\n+  }\r\n+  return false;\r\n+}\r\n+\r\n+// ================== ROTAS ==================\r\n+\r\n+// LISTAR quadro (inclui admin_master, admin e funcionário) com ordenação\r\n+router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const users = await User\r\n+      .find(\r\n+        { role: { $in: ['admin_master', 'admin', 'funcionario'] } },\r\n+        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+      )\r\n+      .lean();\r\n+\r\n+    // Ordenar: Admin Master > Admin > Funcionário; depois por nome\r\n+    users.sort((a, b) => {\r\n+      const r = (roleRank[b.role] ?? -1) - (roleRank[a.role] ?? -1);\r\n+      if (r !== 0) return r;\r\n+      const an = normName(a).toLocaleLowerCase('pt-BR');\r\n+      const bn = normName(b).toLocaleLowerCase('pt-BR');\r\n+      return an.localeCompare(bn);\r\n+    });\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas específicas ANTES de \"/:id\" -------\r\n+\r\n+// BUSCAR usuários (exclui quem já está no quadro)\r\n+// GET /api/admin/funcionarios/buscar-usuarios?q=...&limit=5\r\n+router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { q = '', limit = 5 } = req.query;\r\n+    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n+\r\n+    const safe = String(q || '');\r\n+    const regex = safe ? new RegExp(escapeRegex(safe), 'i') : null;\r\n+    const digits = safe.replace(/\\D/g, '');\r\n+\r\n+    const or = [];\r\n+    if (regex) {\r\n+      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n+      or.push({ email: regex });\r\n+    }\r\n+    if (digits.length >= 3) {\r\n+      const dRe = new RegExp(digits);\r\n+      or.push({ cpf: dRe }, { cnpj: dRe });\r\n+    }\r\n+\r\n+    // base: NÃO trazer quem já está no quadro (funcionario, admin, admin_master)\r\n+    const base = { role: { $nin: ['funcionario', 'admin', 'admin_master'] } };\r\n+    const filter = or.length ? { ...base, $or: or } : base;\r\n+\r\n+    const users = await User\r\n+      .find(\r\n+        filter,\r\n+        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+      )\r\n+      .sort({ createdAt: -1 })\r\n+      .limit(lim)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n+  }\r\n+});\r\n+\r\n+// TRANSFORMAR usuário (policy aplicada)\r\n+router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { userId, role = 'funcionario' } = req.body;\r\n+    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n+    if (!['funcionario', 'admin', 'admin_master'].includes(role)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(userId, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n+\r\n+    if (!canChangeRole(actorRole, target.role, role)) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+    }\r\n+\r\n+    target.role = role;\r\n+    await target.save();\r\n+\r\n+    const ret = await User.findById(\r\n+      userId,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos' // +grupos\r\n+    ).lean();\r\n+    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(ret) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas com parâmetro DEPOIS das específicas -------\r\n+\r\n+// OBTÉM um funcionário\r\n+router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const u = await User.findById(\r\n+      req.params.id,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+    ).lean();\r\n+    if (!u || !['admin_master', 'admin', 'funcionario'].includes(u.role)) {\r\n+      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    }\r\n+    res.json(userToDTO(u));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// CRIA funcionário (novo usuário)\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular, grupos } = req.body;\r\n+\r\n+    if (!email || !senha || !celular) {\r\n+      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n+    }\r\n+    const cargo = role || 'funcionario';\r\n+    if (!['admin', 'funcionario'].includes(cargo)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const existe = await User.findOne({ email });\r\n+    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+\r\n+    const hash = await bcrypt.hash(senha, 10);\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n+\r\n+    const doc = { tipoConta: conta, email, senha: hash, celular, role: cargo };\r\n+    if (conta === 'pessoa_juridica') {\r\n+      doc.nomeContato = (nomeContato || nome || '').trim();\r\n+      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n+    }\r\n+\r\n+    const ALLOWED_GROUPS = ['gerente','vendedor','esteticista','veterinario'];\r\n+    let gruposArr = [];\r\n+    if (Array.isArray(grupos)) gruposArr = grupos;\r\n+    else if (typeof grupos === 'string' && grupos) gruposArr = [grupos];\r\n+    gruposArr = [...new Set(gruposArr.filter(g => ALLOWED_GROUPS.includes(g)))];\r\n+    doc.grupos = gruposArr;\r\n+\r\n+    const novo = await User.create(doc);\r\n+    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// ATUALIZA funcionário (policy aplicada para mudar role)\r\n+router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular, grupos } = req.body;\r\n+\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    const update = {};\r\n+    if (email) update.email = email;\r\n+    if (celular) update.celular = celular;\r\n+\r\n+    if (role) {\r\n+      if (!['admin', 'funcionario', 'admin_master'].includes(role)) {\r\n+        return res.status(400).json({ message: 'Cargo inválido.' });\r\n+      }\r\n+      if (!canChangeRole(req.user?.role, target.role, role)) {\r\n+        return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+      }\r\n+      update.role = role;\r\n+    }\r\n+\r\n+    if (typeof grupos !== 'undefined') {\r\n+      const ALLOWED_GROUPS = ['gerente','vendedor','esteticista','veterinario'];\r\n+      let arr = [];\r\n+      if (Array.isArray(grupos)) arr = grupos;\r\n+      else if (typeof grupos === 'string' && grupos) arr = [grupos];\r\n+      arr = [...new Set(arr.filter(g => ALLOWED_GROUPS.includes(g)))];\r\n+      update.grupos = arr;\r\n+    }\r\n+\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n+    if (conta === 'pessoa_juridica') {\r\n+      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n+      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n+    }\r\n+\r\n+    if (senha && senha.length >= 8) update.senha = await bcrypt.hash(senha, 10);\r\n+\r\n+    const updated = await User.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      update,\r\n+      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos' }\r\n+    ).lean();\r\n+\r\n+    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// REMOVER do quadro (rebaixa para cliente) com policy\r\n+router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    if (!(actorRole === 'admin_master' || (actorRole === 'admin' && roleRank[target.role] < roleRank.admin))) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para remover este usuário do quadro.' });\r\n+    }\r\n+\r\n+    target.role = 'cliente';\r\n+    await target.save();\r\n+    res.json({ message: 'Funcionário removido com sucesso.' });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757197494062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n const router = express.Router();\r\n \r\n const User = require('../models/User');\r\n const authMiddleware = require('../middlewares/authMiddleware');\r\n+const mongoose = require('mongoose');\r\n+const Store = require('../models/Store');\r\n \r\n // ----- helpers / policies -----\r\n const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n \r\n@@ -290,1135 +292,4 @@\n   }\r\n });\r\n \r\n module.exports = router;\r\n-const express = require('express');\r\n-const bcrypt = require('bcrypt'); // npm i bcrypt\r\n-const router = express.Router();\r\n-\r\n-const User = require('../models/User');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-\r\n-// ----- helpers / policies -----\r\n-const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n-\r\n-function escapeRegex(s) {\r\n-  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n-}\r\n-\r\n-function normName(u) {\r\n-  return (\r\n-    (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n-    (u.nomeContato && String(u.nomeContato).trim()) ||\r\n-    (u.razaoSocial && String(u.razaoSocial).trim()) ||\r\n-    ''\r\n-  );\r\n-}\r\n-\r\n-function userToDTO(u) {\r\n-  return {\r\n-    _id: u._id,\r\n-    email: u.email,\r\n-    role: u.role,\r\n-    tipoConta: u.tipoConta,\r\n-    celular: u.celular,\r\n-    cpf: u.cpf,\r\n-    cnpj: u.cnpj,\r\n-    nome: normName(u),\r\n-    grupos: Array.isArray(u.grupos) ? u.grupos : [],\r\n-  };\r\n-}\r\n-\r\n-function requireAdmin(req, res, next) {\r\n-  const role = req.user?.role;\r\n-  if (role === 'admin' || role === 'admin_master') return next();\r\n-  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n-}\r\n-\r\n-function canChangeRole(actorRole, targetRole, desiredRole) {\r\n-  const a = roleRank[actorRole] ?? -1;\r\n-  const t = roleRank[targetRole] ?? -1;\r\n-  const d = roleRank[desiredRole] ?? -1;\r\n-  if (actorRole === 'admin_master') return true;\r\n-  if (actorRole === 'admin') {\r\n-    // admin só mexe em quem está abaixo e só pode definir \"funcionario\"\r\n-    return t < roleRank.admin && d < roleRank.admin;\r\n-  }\r\n-  return false;\r\n-}\r\n-\r\n-// ================== ROTAS ==================\r\n-\r\n-// LISTAR quadro (inclui admin_master, admin e funcionário) com ordenação\r\n-router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const users = await User\r\n-      .find(\r\n-        { role: { $in: ['admin_master', 'admin', 'funcionario'] } },\r\n-        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n-      )\r\n-      .lean();\r\n-\r\n-    // Ordenar: Admin Master > Admin > Funcionário; depois por nome\r\n-    users.sort((a, b) => {\r\n-      const r = (roleRank[b.role] ?? -1) - (roleRank[a.role] ?? -1);\r\n-      if (r !== 0) return r;\r\n-      const an = normName(a).toLocaleLowerCase('pt-BR');\r\n-      const bn = normName(b).toLocaleLowerCase('pt-BR');\r\n-      return an.localeCompare(bn);\r\n-    });\r\n-\r\n-    res.json(users.map(userToDTO));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n-  }\r\n-});\r\n-\r\n-// ------- rotas específicas ANTES de \"/:id\" -------\r\n-\r\n-// BUSCAR usuários (exclui quem já está no quadro)\r\n-// GET /api/admin/funcionarios/buscar-usuarios?q=...&limit=5\r\n-router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { q = '', limit = 5 } = req.query;\r\n-    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n-\r\n-    const safe = String(q || '');\r\n-    const regex = safe ? new RegExp(escapeRegex(safe), 'i') : null;\r\n-    const digits = safe.replace(/\\D/g, '');\r\n-\r\n-    const or = [];\r\n-    if (regex) {\r\n-      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n-      or.push({ email: regex });\r\n-    }\r\n-    if (digits.length >= 3) {\r\n-      const dRe = new RegExp(digits);\r\n-      or.push({ cpf: dRe }, { cnpj: dRe });\r\n-    }\r\n-\r\n-    // base: NÃO trazer quem já está no quadro (funcionario, admin, admin_master)\r\n-    const base = { role: { $nin: ['funcionario', 'admin', 'admin_master'] } };\r\n-    const filter = or.length ? { ...base, $or: or } : base;\r\n-\r\n-    const users = await User\r\n-      .find(\r\n-        filter,\r\n-        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n-      )\r\n-      .sort({ createdAt: -1 })\r\n-      .limit(lim)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(userToDTO));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n-  }\r\n-});\r\n-\r\n-// TRANSFORMAR usuário (policy aplicada)\r\n-router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { userId, role = 'funcionario' } = req.body;\r\n-    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n-    if (!['funcionario', 'admin', 'admin_master'].includes(role)) {\r\n-      return res.status(400).json({ message: 'Cargo inválido.' });\r\n-    }\r\n-\r\n-    const actorRole = req.user?.role;\r\n-    const target = await User.findById(userId, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n-\r\n-    if (!canChangeRole(actorRole, target.role, role)) {\r\n-      return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n-    }\r\n-\r\n-    target.role = role;\r\n-    await target.save();\r\n-\r\n-    const ret = await User.findById(\r\n-      userId,\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n-    ).lean();\r\n-    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(ret) });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n-  }\r\n-});\r\n-\r\n-// ------- rotas com parâmetro DEPOIS das específicas -------\r\n-\r\n-// OBTÉM um funcionário\r\n-router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const u = await User.findById(\r\n-      req.params.id,\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n-    ).lean();\r\n-    if (!u || !['admin_master', 'admin', 'funcionario'].includes(u.role)) {\r\n-      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-    }\r\n-    res.json(userToDTO(u));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// CRIA funcionário (novo usuário)\r\n-router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular, grupos } = req.body;\r\n-\r\n-    if (!email || !senha || !celular) {\r\n-      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n-    }\r\n-    const cargo = role || 'funcionario';\r\n-    if (!['admin', 'funcionario'].includes(cargo)) {\r\n-      return res.status(400).json({ message: 'Cargo inválido.' });\r\n-    }\r\n-\r\n-    const existe = await User.findOne({ email });\r\n-    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n-\r\n-    const hash = await bcrypt.hash(senha, 10);\r\n-    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n-\r\n-    const doc = { tipoConta: conta, email, senha: hash, celular, role: cargo };\r\n-    if (conta === 'pessoa_juridica') {\r\n-      doc.nomeContato = (nomeContato || nome || '').trim();\r\n-      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n-    } else {\r\n-      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n-    }\r\n-\r\n-    const ALLOWED_GROUPS = ['gerente','vendedor','esteticista','veterinario'];\r\n-    let gruposArr = [];\r\n-    if (Array.isArray(grupos)) gruposArr = grupos;\r\n-    else if (typeof grupos === 'string' && grupos) gruposArr = [grupos];\r\n-    gruposArr = [...new Set(gruposArr.filter(g => ALLOWED_GROUPS.includes(g)))];\r\n-    doc.grupos = gruposArr;\r\n-\r\n-    const novo = await User.create(doc);\r\n-    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// ATUALIZA funcionário (policy aplicada para mudar role)\r\n-router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular, grupos } = req.body;\r\n-\r\n-    const target = await User.findById(req.params.id, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-\r\n-    const update = {};\r\n-    if (email) update.email = email;\r\n-    if (celular) update.celular = celular;\r\n-\r\n-    if (role) {\r\n-      if (!['admin', 'funcionario', 'admin_master'].includes(role)) {\r\n-        return res.status(400).json({ message: 'Cargo inválido.' });\r\n-      }\r\n-      if (!canChangeRole(req.user?.role, target.role, role)) {\r\n-        return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n-      }\r\n-      update.role = role;\r\n-    }\r\n-\r\n-    if (typeof grupos !== 'undefined') {\r\n-      const ALLOWED_GROUPS = ['gerente','vendedor','esteticista','veterinario'];\r\n-      let arr = [];\r\n-      if (Array.isArray(grupos)) arr = grupos;\r\n-      else if (typeof grupos === 'string' && grupos) arr = [grupos];\r\n-      arr = [...new Set(arr.filter(g => ALLOWED_GROUPS.includes(g)))];\r\n-      update.grupos = arr;\r\n-    }\r\n-\r\n-    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n-    if (conta === 'pessoa_juridica') {\r\n-      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n-      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n-    } else {\r\n-      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n-    }\r\n-\r\n-    if (senha && senha.length >= 8) update.senha = await bcrypt.hash(senha, 10);\r\n-\r\n-    const updated = await User.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      update,\r\n-      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos' }\r\n-    ).lean();\r\n-\r\n-    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// REMOVER do quadro (rebaixa para cliente) com policy\r\n-router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const actorRole = req.user?.role;\r\n-    const target = await User.findById(req.params.id, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-\r\n-    if (!(actorRole === 'admin_master' || (actorRole === 'admin' && roleRank[target.role] < roleRank.admin))) {\r\n-      return res.status(403).json({ message: 'Você não tem permissão para remover este usuário do quadro.' });\r\n-    }\r\n-\r\n-    target.role = 'cliente';\r\n-    await target.save();\r\n-    res.json({ message: 'Funcionário removido com sucesso.' });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const bcrypt = require('bcrypt'); // npm i bcrypt\r\n-const router = express.Router();\r\n-\r\n-const User = require('../models/User');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-\r\n-// ----- helpers / policies -----\r\n-const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n-\r\n-function escapeRegex(s) {\r\n-  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n-}\r\n-\r\n-function normName(u) {\r\n-  return (\r\n-    (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n-    (u.nomeContato && String(u.nomeContato).trim()) ||\r\n-    (u.razaoSocial && String(u.razaoSocial).trim()) ||\r\n-    ''\r\n-  );\r\n-}\r\n-\r\n-function userToDTO(u) {\r\n-  return {\r\n-    _id: u._id,\r\n-    email: u.email,\r\n-    role: u.role,\r\n-    tipoConta: u.tipoConta,\r\n-    celular: u.celular,\r\n-    cpf: u.cpf,\r\n-    cnpj: u.cnpj,\r\n-    nome: normName(u),\r\n-    grupos: Array.isArray(u.grupos) ? u.grupos : [],\r\n-  };\r\n-}\r\n-\r\n-function requireAdmin(req, res, next) {\r\n-  const role = req.user?.role;\r\n-  if (role === 'admin' || role === 'admin_master') return next();\r\n-  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n-}\r\n-\r\n-function canChangeRole(actorRole, targetRole, desiredRole) {\r\n-  const a = roleRank[actorRole] ?? -1;\r\n-  const t = roleRank[targetRole] ?? -1;\r\n-  const d = roleRank[desiredRole] ?? -1;\r\n-  if (actorRole === 'admin_master') return true;\r\n-  if (actorRole === 'admin') {\r\n-    // admin só mexe em quem está abaixo e só pode definir \"funcionario\"\r\n-    return t < roleRank.admin && d < roleRank.admin;\r\n-  }\r\n-  return false;\r\n-}\r\n-\r\n-// ================== ROTAS ==================\r\n-\r\n-// LISTAR quadro (inclui admin_master, admin e funcionário) com ordenação\r\n-router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const users = await User\r\n-      .find(\r\n-        { role: { $in: ['admin_master', 'admin', 'funcionario'] } },\r\n-        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n-      )\r\n-      .lean();\r\n-\r\n-    // Ordenar: Admin Master > Admin > Funcionário; depois por nome\r\n-    users.sort((a, b) => {\r\n-      const r = (roleRank[b.role] ?? -1) - (roleRank[a.role] ?? -1);\r\n-      if (r !== 0) return r;\r\n-      const an = normName(a).toLocaleLowerCase('pt-BR');\r\n-      const bn = normName(b).toLocaleLowerCase('pt-BR');\r\n-      return an.localeCompare(bn);\r\n-    });\r\n-\r\n-    res.json(users.map(userToDTO));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n-  }\r\n-});\r\n-\r\n-// ------- rotas específicas ANTES de \"/:id\" -------\r\n-\r\n-// BUSCAR usuários (exclui quem já está no quadro)\r\n-// GET /api/admin/funcionarios/buscar-usuarios?q=...&limit=5\r\n-router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { q = '', limit = 5 } = req.query;\r\n-    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n-\r\n-    const safe = String(q || '');\r\n-    const regex = safe ? new RegExp(escapeRegex(safe), 'i') : null;\r\n-    const digits = safe.replace(/\\D/g, '');\r\n-\r\n-    const or = [];\r\n-    if (regex) {\r\n-      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n-      or.push({ email: regex });\r\n-    }\r\n-    if (digits.length >= 3) {\r\n-      const dRe = new RegExp(digits);\r\n-      or.push({ cpf: dRe }, { cnpj: dRe });\r\n-    }\r\n-\r\n-    // base: NÃO trazer quem já está no quadro (funcionario, admin, admin_master)\r\n-    const base = { role: { $nin: ['funcionario', 'admin', 'admin_master'] } };\r\n-    const filter = or.length ? { ...base, $or: or } : base;\r\n-\r\n-    const users = await User\r\n-      .find(\r\n-        filter,\r\n-        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n-      )\r\n-      .sort({ createdAt: -1 })\r\n-      .limit(lim)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(userToDTO));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n-  }\r\n-});\r\n-\r\n-// TRANSFORMAR usuário (policy aplicada)\r\n-router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { userId, role = 'funcionario' } = req.body;\r\n-    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n-    if (!['funcionario', 'admin', 'admin_master'].includes(role)) {\r\n-      return res.status(400).json({ message: 'Cargo inválido.' });\r\n-    }\r\n-\r\n-    const actorRole = req.user?.role;\r\n-    const target = await User.findById(userId, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n-\r\n-    if (!canChangeRole(actorRole, target.role, role)) {\r\n-      return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n-    }\r\n-\r\n-    target.role = role;\r\n-    await target.save();\r\n-\r\n-    const ret = await User.findById(\r\n-      userId,\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n-    ).lean();\r\n-    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(ret) });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n-  }\r\n-});\r\n-\r\n-// ------- rotas com parâmetro DEPOIS das específicas -------\r\n-\r\n-// OBTÉM um funcionário\r\n-router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const u = await User.findById(\r\n-      req.params.id,\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n-    ).lean();\r\n-    if (!u || !['admin_master', 'admin', 'funcionario'].includes(u.role)) {\r\n-      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-    }\r\n-    res.json(userToDTO(u));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// CRIA funcionário (novo usuário)\r\n-router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular, grupos } = req.body;\r\n-\r\n-    if (!email || !senha || !celular) {\r\n-      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n-    }\r\n-    const cargo = role || 'funcionario';\r\n-    if (!['admin', 'funcionario'].includes(cargo)) {\r\n-      return res.status(400).json({ message: 'Cargo inválido.' });\r\n-    }\r\n-\r\n-    const existe = await User.findOne({ email });\r\n-    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n-\r\n-    const hash = await bcrypt.hash(senha, 10);\r\n-    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n-\r\n-    const doc = { tipoConta: conta, email, senha: hash, celular, role: cargo };\r\n-    if (conta === 'pessoa_juridica') {\r\n-      doc.nomeContato = (nomeContato || nome || '').trim();\r\n-      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n-    } else {\r\n-      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n-    }\r\n-\r\n-    const ALLOWED_GROUPS = ['gerente','vendedor','esteticista','veterinario'];\r\n-    let gruposArr = [];\r\n-    if (Array.isArray(grupos)) gruposArr = grupos;\r\n-    else if (typeof grupos === 'string' && grupos) gruposArr = [grupos];\r\n-    gruposArr = [...new Set(gruposArr.filter(g => ALLOWED_GROUPS.includes(g)))];\r\n-    doc.grupos = gruposArr;\r\n-\r\n-    const novo = await User.create(doc);\r\n-    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// ATUALIZA funcionário (policy aplicada para mudar role)\r\n-router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n-\r\n-    const target = await User.findById(req.params.id, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-\r\n-    const update = {};\r\n-    if (email) update.email = email;\r\n-    if (celular) update.celular = celular;\r\n-\r\n-    if (role) {\r\n-      if (!['admin', 'funcionario', 'admin_master'].includes(role)) {\r\n-        return res.status(400).json({ message: 'Cargo inválido.' });\r\n-      }\r\n-      if (!canChangeRole(req.user?.role, target.role, role)) {\r\n-        return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n-      }\r\n-      update.role = role;\r\n-    }\r\n-\r\n-    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n-    if (conta === 'pessoa_juridica') {\r\n-      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n-      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n-    } else {\r\n-      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n-    }\r\n-\r\n-    if (senha && senha.length >= 8) update.senha = await bcrypt.hash(senha, 10);\r\n-\r\n-    const updated = await User.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      update,\r\n-      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos' }\r\n-    ).lean();\r\n-\r\n-    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// REMOVER do quadro (rebaixa para cliente) com policy\r\n-router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const actorRole = req.user?.role;\r\n-    const target = await User.findById(req.params.id, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-\r\n-    if (!(actorRole === 'admin_master' || (actorRole === 'admin' && roleRank[target.role] < roleRank.admin))) {\r\n-      return res.status(403).json({ message: 'Você não tem permissão para remover este usuário do quadro.' });\r\n-    }\r\n-\r\n-    target.role = 'cliente';\r\n-    await target.save();\r\n-    res.json({ message: 'Funcionário removido com sucesso.' });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const bcrypt = require('bcrypt'); // npm i bcrypt\r\n-const router = express.Router();\r\n-\r\n-const User = require('../models/User');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-\r\n-// ----- helpers / policies -----\r\n-const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n-\r\n-function escapeRegex(s) {\r\n-  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n-}\r\n-\r\n-function normName(u) {\r\n-  return (\r\n-    (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n-    (u.nomeContato && String(u.nomeContato).trim()) ||\r\n-    (u.razaoSocial && String(u.razaoSocial).trim()) ||\r\n-    ''\r\n-  );\r\n-}\r\n-\r\n-function userToDTO(u) {\r\n-  return {\r\n-    _id: u._id,\r\n-    email: u.email,\r\n-    role: u.role,\r\n-    tipoConta: u.tipoConta,\r\n-    celular: u.celular,\r\n-    cpf: u.cpf,\r\n-    cnpj: u.cnpj,\r\n-    nome: normName(u),\r\n-    grupos: Array.isArray(u.grupos) ? u.grupos : [],\r\n-  };\r\n-}\r\n-\r\n-function requireAdmin(req, res, next) {\r\n-  const role = req.user?.role;\r\n-  if (role === 'admin' || role === 'admin_master') return next();\r\n-  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n-}\r\n-\r\n-function canChangeRole(actorRole, targetRole, desiredRole) {\r\n-  const a = roleRank[actorRole] ?? -1;\r\n-  const t = roleRank[targetRole] ?? -1;\r\n-  const d = roleRank[desiredRole] ?? -1;\r\n-  if (actorRole === 'admin_master') return true;\r\n-  if (actorRole === 'admin') {\r\n-    // admin só mexe em quem está abaixo e só pode definir \"funcionario\"\r\n-    return t < roleRank.admin && d < roleRank.admin;\r\n-  }\r\n-  return false;\r\n-}\r\n-\r\n-// ================== ROTAS ==================\r\n-\r\n-// LISTAR quadro (inclui admin_master, admin e funcionário) com ordenação\r\n-router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const users = await User\r\n-      .find(\r\n-        { role: { $in: ['admin_master', 'admin', 'funcionario'] } },\r\n-        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n-      )\r\n-      .lean();\r\n-\r\n-    // Ordenar: Admin Master > Admin > Funcionário; depois por nome\r\n-    users.sort((a, b) => {\r\n-      const r = (roleRank[b.role] ?? -1) - (roleRank[a.role] ?? -1);\r\n-      if (r !== 0) return r;\r\n-      const an = normName(a).toLocaleLowerCase('pt-BR');\r\n-      const bn = normName(b).toLocaleLowerCase('pt-BR');\r\n-      return an.localeCompare(bn);\r\n-    });\r\n-\r\n-    res.json(users.map(userToDTO));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n-  }\r\n-});\r\n-\r\n-// ------- rotas específicas ANTES de \"/:id\" -------\r\n-\r\n-// BUSCAR usuários (exclui quem já está no quadro)\r\n-// GET /api/admin/funcionarios/buscar-usuarios?q=...&limit=5\r\n-router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { q = '', limit = 5 } = req.query;\r\n-    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n-\r\n-    const safe = String(q || '');\r\n-    const regex = safe ? new RegExp(escapeRegex(safe), 'i') : null;\r\n-    const digits = safe.replace(/\\D/g, '');\r\n-\r\n-    const or = [];\r\n-    if (regex) {\r\n-      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n-      or.push({ email: regex });\r\n-    }\r\n-    if (digits.length >= 3) {\r\n-      const dRe = new RegExp(digits);\r\n-      or.push({ cpf: dRe }, { cnpj: dRe });\r\n-    }\r\n-\r\n-    // base: NÃO trazer quem já está no quadro (funcionario, admin, admin_master)\r\n-    const base = { role: { $nin: ['funcionario', 'admin', 'admin_master'] } };\r\n-    const filter = or.length ? { ...base, $or: or } : base;\r\n-\r\n-    const users = await User\r\n-      .find(\r\n-        filter,\r\n-        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n-      )\r\n-      .sort({ createdAt: -1 })\r\n-      .limit(lim)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(userToDTO));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n-  }\r\n-});\r\n-\r\n-// TRANSFORMAR usuário (policy aplicada)\r\n-router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { userId, role = 'funcionario' } = req.body;\r\n-    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n-    if (!['funcionario', 'admin', 'admin_master'].includes(role)) {\r\n-      return res.status(400).json({ message: 'Cargo inválido.' });\r\n-    }\r\n-\r\n-    const actorRole = req.user?.role;\r\n-    const target = await User.findById(userId, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n-\r\n-    if (!canChangeRole(actorRole, target.role, role)) {\r\n-      return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n-    }\r\n-\r\n-    target.role = role;\r\n-    await target.save();\r\n-\r\n-    const ret = await User.findById(\r\n-      userId,\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n-    ).lean();\r\n-    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(ret) });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n-  }\r\n-});\r\n-\r\n-// ------- rotas com parâmetro DEPOIS das específicas -------\r\n-\r\n-// OBTÉM um funcionário\r\n-router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const u = await User.findById(\r\n-      req.params.id,\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n-    ).lean();\r\n-    if (!u || !['admin_master', 'admin', 'funcionario'].includes(u.role)) {\r\n-      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-    }\r\n-    res.json(userToDTO(u));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// CRIA funcionário (novo usuário)\r\n-router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n-\r\n-    if (!email || !senha || !celular) {\r\n-      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n-    }\r\n-    const cargo = role || 'funcionario';\r\n-    if (!['admin', 'funcionario'].includes(cargo)) {\r\n-      return res.status(400).json({ message: 'Cargo inválido.' });\r\n-    }\r\n-\r\n-    const existe = await User.findOne({ email });\r\n-    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n-\r\n-    const hash = await bcrypt.hash(senha, 10);\r\n-    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n-\r\n-    const doc = { tipoConta: conta, email, senha: hash, celular, role: cargo };\r\n-    if (conta === 'pessoa_juridica') {\r\n-      doc.nomeContato = (nomeContato || nome || '').trim();\r\n-      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n-    } else {\r\n-      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n-    }\r\n-\r\n-    const novo = await User.create(doc);\r\n-    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// ATUALIZA funcionário (policy aplicada para mudar role)\r\n-router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n-\r\n-    const target = await User.findById(req.params.id, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-\r\n-    const update = {};\r\n-    if (email) update.email = email;\r\n-    if (celular) update.celular = celular;\r\n-\r\n-    if (role) {\r\n-      if (!['admin', 'funcionario', 'admin_master'].includes(role)) {\r\n-        return res.status(400).json({ message: 'Cargo inválido.' });\r\n-      }\r\n-      if (!canChangeRole(req.user?.role, target.role, role)) {\r\n-        return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n-      }\r\n-      update.role = role;\r\n-    }\r\n-\r\n-    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n-    if (conta === 'pessoa_juridica') {\r\n-      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n-      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n-    } else {\r\n-      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n-    }\r\n-\r\n-    if (senha && senha.length >= 8) update.senha = await bcrypt.hash(senha, 10);\r\n-\r\n-    const updated = await User.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      update,\r\n-      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos' }\r\n-    ).lean();\r\n-\r\n-    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// REMOVER do quadro (rebaixa para cliente) com policy\r\n-router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const actorRole = req.user?.role;\r\n-    const target = await User.findById(req.params.id, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-\r\n-    if (!(actorRole === 'admin_master' || (actorRole === 'admin' && roleRank[target.role] < roleRank.admin))) {\r\n-      return res.status(403).json({ message: 'Você não tem permissão para remover este usuário do quadro.' });\r\n-    }\r\n-\r\n-    target.role = 'cliente';\r\n-    await target.save();\r\n-    res.json({ message: 'Funcionário removido com sucesso.' });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const bcrypt = require('bcrypt'); // npm i bcrypt\r\n-const router = express.Router();\r\n-\r\n-const User = require('../models/User');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-\r\n-// ----- helpers / policies -----\r\n-const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n-\r\n-function escapeRegex(s) {\r\n-  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n-}\r\n-\r\n-function normName(u) {\r\n-  return (\r\n-    (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n-    (u.nomeContato && String(u.nomeContato).trim()) ||\r\n-    (u.razaoSocial && String(u.razaoSocial).trim()) ||\r\n-    ''\r\n-  );\r\n-}\r\n-\r\n-function userToDTO(u) {\r\n-  return {\r\n-    _id: u._id,\r\n-    email: u.email,\r\n-    role: u.role,\r\n-    tipoConta: u.tipoConta,\r\n-    celular: u.celular,\r\n-    cpf: u.cpf,\r\n-    cnpj: u.cnpj,\r\n-    nome: normName(u),\r\n-    grupos: Array.isArray(u.grupos) ? u.grupos : [],\r\n-  };\r\n-}\r\n-\r\n-function requireAdmin(req, res, next) {\r\n-  const role = req.user?.role;\r\n-  if (role === 'admin' || role === 'admin_master') return next();\r\n-  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n-}\r\n-\r\n-function canChangeRole(actorRole, targetRole, desiredRole) {\r\n-  const a = roleRank[actorRole] ?? -1;\r\n-  const t = roleRank[targetRole] ?? -1;\r\n-  const d = roleRank[desiredRole] ?? -1;\r\n-  if (actorRole === 'admin_master') return true;\r\n-  if (actorRole === 'admin') {\r\n-    // admin só mexe em quem está abaixo e só pode definir \"funcionario\"\r\n-    return t < roleRank.admin && d < roleRank.admin;\r\n-  }\r\n-  return false;\r\n-}\r\n-\r\n-// ================== ROTAS ==================\r\n-\r\n-// LISTAR quadro (inclui admin_master, admin e funcionário) com ordenação\r\n-router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const users = await User\r\n-      .find(\r\n-        { role: { $in: ['admin_master', 'admin', 'funcionario'] } },\r\n-        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n-      )\r\n-      .lean();\r\n-\r\n-    // Ordenar: Admin Master > Admin > Funcionário; depois por nome\r\n-    users.sort((a, b) => {\r\n-      const r = (roleRank[b.role] ?? -1) - (roleRank[a.role] ?? -1);\r\n-      if (r !== 0) return r;\r\n-      const an = normName(a).toLocaleLowerCase('pt-BR');\r\n-      const bn = normName(b).toLocaleLowerCase('pt-BR');\r\n-      return an.localeCompare(bn);\r\n-    });\r\n-\r\n-    res.json(users.map(userToDTO));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n-  }\r\n-});\r\n-\r\n-// ------- rotas específicas ANTES de \"/:id\" -------\r\n-\r\n-// BUSCAR usuários (exclui quem já está no quadro)\r\n-// GET /api/admin/funcionarios/buscar-usuarios?q=...&limit=5\r\n-router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { q = '', limit = 5 } = req.query;\r\n-    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n-\r\n-    const safe = String(q || '');\r\n-    const regex = safe ? new RegExp(escapeRegex(safe), 'i') : null;\r\n-    const digits = safe.replace(/\\D/g, '');\r\n-\r\n-    const or = [];\r\n-    if (regex) {\r\n-      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n-      or.push({ email: regex });\r\n-    }\r\n-    if (digits.length >= 3) {\r\n-      const dRe = new RegExp(digits);\r\n-      or.push({ cpf: dRe }, { cnpj: dRe });\r\n-    }\r\n-\r\n-    // base: NÃO trazer quem já está no quadro (funcionario, admin, admin_master)\r\n-    const base = { role: { $nin: ['funcionario', 'admin', 'admin_master'] } };\r\n-    const filter = or.length ? { ...base, $or: or } : base;\r\n-\r\n-    const users = await User\r\n-      .find(\r\n-        filter,\r\n-        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n-      )\r\n-      .sort({ createdAt: -1 })\r\n-      .limit(lim)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(userToDTO));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n-  }\r\n-});\r\n-\r\n-// TRANSFORMAR usuário (policy aplicada)\r\n-router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { userId, role = 'funcionario' } = req.body;\r\n-    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n-    if (!['funcionario', 'admin', 'admin_master'].includes(role)) {\r\n-      return res.status(400).json({ message: 'Cargo inválido.' });\r\n-    }\r\n-\r\n-    const actorRole = req.user?.role;\r\n-    const target = await User.findById(userId, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n-\r\n-    if (!canChangeRole(actorRole, target.role, role)) {\r\n-      return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n-    }\r\n-\r\n-    target.role = role;\r\n-    await target.save();\r\n-\r\n-    const ret = await User.findById(\r\n-      userId,\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n-    ).lean();\r\n-    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(ret) });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n-  }\r\n-});\r\n-\r\n-// ------- rotas com parâmetro DEPOIS das específicas -------\r\n-\r\n-// OBTÉM um funcionário\r\n-router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const u = await User.findById(\r\n-      req.params.id,\r\n-      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj'\r\n-    ).lean();\r\n-    if (!u || !['admin_master', 'admin', 'funcionario'].includes(u.role)) {\r\n-      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-    }\r\n-    res.json(userToDTO(u));\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// CRIA funcionário (novo usuário)\r\n-router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n-\r\n-    if (!email || !senha || !celular) {\r\n-      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n-    }\r\n-    const cargo = role || 'funcionario';\r\n-    if (!['admin', 'funcionario'].includes(cargo)) {\r\n-      return res.status(400).json({ message: 'Cargo inválido.' });\r\n-    }\r\n-\r\n-    const existe = await User.findOne({ email });\r\n-    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n-\r\n-    const hash = await bcrypt.hash(senha, 10);\r\n-    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n-\r\n-    const doc = { tipoConta: conta, email, senha: hash, celular, role: cargo };\r\n-    if (conta === 'pessoa_juridica') {\r\n-      doc.nomeContato = (nomeContato || nome || '').trim();\r\n-      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n-    } else {\r\n-      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n-    }\r\n-\r\n-    const novo = await User.create(doc);\r\n-    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// ATUALIZA funcionário (policy aplicada para mudar role)\r\n-router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular } = req.body;\r\n-\r\n-    const target = await User.findById(req.params.id, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-\r\n-    const update = {};\r\n-    if (email) update.email = email;\r\n-    if (celular) update.celular = celular;\r\n-\r\n-    if (role) {\r\n-      if (!['admin', 'funcionario', 'admin_master'].includes(role)) {\r\n-        return res.status(400).json({ message: 'Cargo inválido.' });\r\n-      }\r\n-      if (!canChangeRole(req.user?.role, target.role, role)) {\r\n-        return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n-      }\r\n-      update.role = role;\r\n-    }\r\n-\r\n-    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n-    if (conta === 'pessoa_juridica') {\r\n-      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n-      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n-    } else {\r\n-      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n-    }\r\n-\r\n-    if (senha && senha.length >= 8) update.senha = await bcrypt.hash(senha, 10);\r\n-\r\n-    const updated = await User.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      update,\r\n-      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj' }\r\n-    ).lean();\r\n-\r\n-    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-// REMOVER do quadro (rebaixa para cliente) com policy\r\n-router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    const actorRole = req.user?.role;\r\n-    const target = await User.findById(req.params.id, 'role');\r\n-    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n-\r\n-    if (!(actorRole === 'admin_master' || (actorRole === 'admin' && roleRank[target.role] < roleRank.admin))) {\r\n-      return res.status(403).json({ message: 'Você não tem permissão para remover este usuário do quadro.' });\r\n-    }\r\n-\r\n-    target.role = 'cliente';\r\n-    await target.save();\r\n-    res.json({ message: 'Funcionário removido com sucesso.' });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1757197510528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n     cpf: u.cpf,\r\n     cnpj: u.cnpj,\r\n     nome: normName(u),\r\n     grupos: Array.isArray(u.grupos) ? u.grupos : [],\r\n+    empresas: Array.isArray(u.empresas) ? u.empresas : [],\r\n   };\r\n }\r\n \r\n function requireAdmin(req, res, next) {\r\n"
                },
                {
                    "date": 1757197645334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,296 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt'); // npm i bcrypt\r\n+const router = express.Router();\r\n+\r\n+const User = require('../models/User');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const mongoose = require('mongoose');\r\n+const Store = require('../models/Store');\r\n+\r\n+// ----- helpers / policies -----\r\n+const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n+\r\n+function escapeRegex(s) {\r\n+  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n+}\r\n+\r\n+function normName(u) {\r\n+  return (\r\n+    (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n+    (u.nomeContato && String(u.nomeContato).trim()) ||\r\n+    (u.razaoSocial && String(u.razaoSocial).trim()) ||\r\n+    ''\r\n+  );\r\n+}\r\n+\r\n+function userToDTO(u) {\r\n+  return {\r\n+    _id: u._id,\r\n+    email: u.email,\r\n+    role: u.role,\r\n+    tipoConta: u.tipoConta,\r\n+    celular: u.celular,\r\n+    cpf: u.cpf,\r\n+    cnpj: u.cnpj,\r\n+    nome: normName(u),\r\n+    grupos: Array.isArray(u.grupos) ? u.grupos : [],\r\n+    empresas: Array.isArray(u.empresas) ? u.empresas : [],\r\n+  };\r\n+}\r\n+\r\n+function requireAdmin(req, res, next) {\r\n+  const role = req.user?.role;\r\n+  if (role === 'admin' || role === 'admin_master') return next();\r\n+  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n+}\r\n+\r\n+function canChangeRole(actorRole, targetRole, desiredRole) {\r\n+  const a = roleRank[actorRole] ?? -1;\r\n+  const t = roleRank[targetRole] ?? -1;\r\n+  const d = roleRank[desiredRole] ?? -1;\r\n+  if (actorRole === 'admin_master') return true;\r\n+  if (actorRole === 'admin') {\r\n+    // admin só mexe em quem está abaixo e só pode definir \"funcionario\"\r\n+    return t < roleRank.admin && d < roleRank.admin;\r\n+  }\r\n+  return false;\r\n+}\r\n+\r\n+// ================== ROTAS ==================\r\n+\r\n+// LISTAR quadro (inclui admin_master, admin e funcionário) com ordenação\r\n+router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const users = await User\r\n+      .find(\r\n+        { role: { $in: ['admin_master', 'admin', 'funcionario'] } },\r\n+        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos empresas'\r\n+      )\r\n+      .lean();\r\n+\r\n+    // Ordenar: Admin Master > Admin > Funcionário; depois por nome\r\n+    users.sort((a, b) => {\r\n+      const r = (roleRank[b.role] ?? -1) - (roleRank[a.role] ?? -1);\r\n+      if (r !== 0) return r;\r\n+      const an = normName(a).toLocaleLowerCase('pt-BR');\r\n+      const bn = normName(b).toLocaleLowerCase('pt-BR');\r\n+      return an.localeCompare(bn);\r\n+    });\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas específicas ANTES de \"/:id\" -------\r\n+\r\n+// BUSCAR usuários (exclui quem já está no quadro)\r\n+// GET /api/admin/funcionarios/buscar-usuarios?q=...&limit=5\r\n+router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { q = '', limit = 5 } = req.query;\r\n+    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n+\r\n+    const safe = String(q || '');\r\n+    const regex = safe ? new RegExp(escapeRegex(safe), 'i') : null;\r\n+    const digits = safe.replace(/\\D/g, '');\r\n+\r\n+    const or = [];\r\n+    if (regex) {\r\n+      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n+      or.push({ email: regex });\r\n+    }\r\n+    if (digits.length >= 3) {\r\n+      const dRe = new RegExp(digits);\r\n+      or.push({ cpf: dRe }, { cnpj: dRe });\r\n+    }\r\n+\r\n+    // base: NÃO trazer quem já está no quadro (funcionario, admin, admin_master)\r\n+    const base = { role: { $nin: ['funcionario', 'admin', 'admin_master'] } };\r\n+    const filter = or.length ? { ...base, $or: or } : base;\r\n+\r\n+    const users = await User\r\n+      .find(\r\n+        filter,\r\n+        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+      )\r\n+      .sort({ createdAt: -1 })\r\n+      .limit(lim)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n+  }\r\n+});\r\n+\r\n+// TRANSFORMAR usuário (policy aplicada)\r\n+router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { userId, role = 'funcionario' } = req.body;\r\n+    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n+    if (!['funcionario', 'admin', 'admin_master'].includes(role)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(userId, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n+\r\n+    if (!canChangeRole(actorRole, target.role, role)) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+    }\r\n+\r\n+    target.role = role;\r\n+    await target.save();\r\n+\r\n+    const ret = await User.findById(\r\n+      userId,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos' // +grupos\r\n+    ).lean();\r\n+    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(ret) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas com parâmetro DEPOIS das específicas -------\r\n+\r\n+// OBTÉM um funcionário\r\n+router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const u = await User.findById(\r\n+      req.params.id,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos empresas'\r\n+    ).lean();\r\n+    if (!u || !['admin_master', 'admin', 'funcionario'].includes(u.role)) {\r\n+      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    }\r\n+    res.json(userToDTO(u));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// CRIA funcionário (novo usuário)\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular, grupos } = req.body;\r\n+\r\n+    if (!email || !senha || !celular) {\r\n+      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n+    }\r\n+    const cargo = role || 'funcionario';\r\n+    if (!['admin', 'funcionario'].includes(cargo)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const existe = await User.findOne({ email });\r\n+    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+\r\n+    const hash = await bcrypt.hash(senha, 10);\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n+\r\n+    const doc = { tipoConta: conta, email, senha: hash, celular, role: cargo };\r\n+    if (conta === 'pessoa_juridica') {\r\n+      doc.nomeContato = (nomeContato || nome || '').trim();\r\n+      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n+    }\r\n+\r\n+    const ALLOWED_GROUPS = ['gerente','vendedor','esteticista','veterinario'];\r\n+    let gruposArr = [];\r\n+    if (Array.isArray(grupos)) gruposArr = grupos;\r\n+    else if (typeof grupos === 'string' && grupos) gruposArr = [grupos];\r\n+    gruposArr = [...new Set(gruposArr.filter(g => ALLOWED_GROUPS.includes(g)))];\r\n+    doc.grupos = gruposArr;\r\n+\r\n+    const novo = await User.create(doc);\r\n+    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// ATUALIZA funcionário (policy aplicada para mudar role)\r\n+router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular, grupos } = req.body;\r\n+\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    const update = {};\r\n+    if (email) update.email = email;\r\n+    if (celular) update.celular = celular;\r\n+\r\n+    if (role) {\r\n+      if (!['admin', 'funcionario', 'admin_master'].includes(role)) {\r\n+        return res.status(400).json({ message: 'Cargo inválido.' });\r\n+      }\r\n+      if (!canChangeRole(req.user?.role, target.role, role)) {\r\n+        return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+      }\r\n+      update.role = role;\r\n+    }\r\n+\r\n+    if (typeof grupos !== 'undefined') {\r\n+      const ALLOWED_GROUPS = ['gerente','vendedor','esteticista','veterinario'];\r\n+      let arr = [];\r\n+      if (Array.isArray(grupos)) arr = grupos;\r\n+      else if (typeof grupos === 'string' && grupos) arr = [grupos];\r\n+      arr = [...new Set(arr.filter(g => ALLOWED_GROUPS.includes(g)))];\r\n+      update.grupos = arr;\r\n+    }\r\n+\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n+    if (conta === 'pessoa_juridica') {\r\n+      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n+      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n+    }\r\n+\r\n+    if (senha && senha.length >= 8) update.senha = await bcrypt.hash(senha, 10);\r\n+\r\n+    const updated = await User.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      update,\r\n+      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos' }\r\n+    ).lean();\r\n+\r\n+    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// REMOVER do quadro (rebaixa para cliente) com policy\r\n+router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    if (!(actorRole === 'admin_master' || (actorRole === 'admin' && roleRank[target.role] < roleRank.admin))) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para remover este usuário do quadro.' });\r\n+    }\r\n+\r\n+    target.role = 'cliente';\r\n+    await target.save();\r\n+    res.json({ message: 'Funcionário removido com sucesso.' });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757197710764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,321 @@\n+const express = require('express');\r\n+const bcrypt = require('bcrypt'); // npm i bcrypt\r\n+const router = express.Router();\r\n+\r\n+const User = require('../models/User');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const mongoose = require('mongoose');\r\n+const Store = require('../models/Store');\r\n+\r\n+// ----- helpers / policies -----\r\n+const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n+\r\n+function escapeRegex(s) {\r\n+  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n+}\r\n+\r\n+function normName(u) {\r\n+  return (\r\n+    (u.nomeCompleto && String(u.nomeCompleto).trim()) ||\r\n+    (u.nomeContato && String(u.nomeContato).trim()) ||\r\n+    (u.razaoSocial && String(u.razaoSocial).trim()) ||\r\n+    ''\r\n+  );\r\n+}\r\n+\r\n+function userToDTO(u) {\r\n+  return {\r\n+    _id: u._id,\r\n+    email: u.email,\r\n+    role: u.role,\r\n+    tipoConta: u.tipoConta,\r\n+    celular: u.celular,\r\n+    cpf: u.cpf,\r\n+    cnpj: u.cnpj,\r\n+    nome: normName(u),\r\n+    grupos: Array.isArray(u.grupos) ? u.grupos : [],\r\n+    empresas: Array.isArray(u.empresas) ? u.empresas : [],\r\n+  };\r\n+}\r\n+\r\n+function requireAdmin(req, res, next) {\r\n+  const role = req.user?.role;\r\n+  if (role === 'admin' || role === 'admin_master') return next();\r\n+  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n+}\r\n+\r\n+function canChangeRole(actorRole, targetRole, desiredRole) {\r\n+  const a = roleRank[actorRole] ?? -1;\r\n+  const t = roleRank[targetRole] ?? -1;\r\n+  const d = roleRank[desiredRole] ?? -1;\r\n+  if (actorRole === 'admin_master') return true;\r\n+  if (actorRole === 'admin') {\r\n+    // admin só mexe em quem está abaixo e só pode definir \"funcionario\"\r\n+    return t < roleRank.admin && d < roleRank.admin;\r\n+  }\r\n+  return false;\r\n+}\r\n+\r\n+// ================== ROTAS ==================\r\n+\r\n+// LISTAR quadro (inclui admin_master, admin e funcionário) com ordenação\r\n+router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const users = await User\r\n+      .find(\r\n+        { role: { $in: ['admin_master', 'admin', 'funcionario'] } },\r\n+        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos empresas'\r\n+      )\r\n+      .lean();\r\n+\r\n+    // Ordenar: Admin Master > Admin > Funcionário; depois por nome\r\n+    users.sort((a, b) => {\r\n+      const r = (roleRank[b.role] ?? -1) - (roleRank[a.role] ?? -1);\r\n+      if (r !== 0) return r;\r\n+      const an = normName(a).toLocaleLowerCase('pt-BR');\r\n+      const bn = normName(b).toLocaleLowerCase('pt-BR');\r\n+      return an.localeCompare(bn);\r\n+    });\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas específicas ANTES de \"/:id\" -------\r\n+\r\n+// BUSCAR usuários (exclui quem já está no quadro)\r\n+// GET /api/admin/funcionarios/buscar-usuarios?q=...&limit=5\r\n+router.get('/buscar-usuarios', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { q = '', limit = 5 } = req.query;\r\n+    const lim = Math.min(parseInt(limit, 10) || 5, 10);\r\n+\r\n+    const safe = String(q || '');\r\n+    const regex = safe ? new RegExp(escapeRegex(safe), 'i') : null;\r\n+    const digits = safe.replace(/\\D/g, '');\r\n+\r\n+    const or = [];\r\n+    if (regex) {\r\n+      or.push({ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex });\r\n+      or.push({ email: regex });\r\n+    }\r\n+    if (digits.length >= 3) {\r\n+      const dRe = new RegExp(digits);\r\n+      or.push({ cpf: dRe }, { cnpj: dRe });\r\n+    }\r\n+\r\n+    // base: NÃO trazer quem já está no quadro (funcionario, admin, admin_master)\r\n+    const base = { role: { $nin: ['funcionario', 'admin', 'admin_master'] } };\r\n+    const filter = or.length ? { ...base, $or: or } : base;\r\n+\r\n+    const users = await User\r\n+      .find(\r\n+        filter,\r\n+        'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos'\r\n+      )\r\n+      .sort({ createdAt: -1 })\r\n+      .limit(lim)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(userToDTO));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro na busca de usuários.' });\r\n+  }\r\n+});\r\n+\r\n+// TRANSFORMAR usuário (policy aplicada)\r\n+router.post('/transformar', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { userId, role = 'funcionario' } = req.body;\r\n+    if (!userId) return res.status(400).json({ message: 'userId é obrigatório.' });\r\n+    if (!['funcionario', 'admin', 'admin_master'].includes(role)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(userId, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Usuário não encontrado.' });\r\n+\r\n+    if (!canChangeRole(actorRole, target.role, role)) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+    }\r\n+\r\n+    target.role = role;\r\n+    await target.save();\r\n+\r\n+    const ret = await User.findById(\r\n+      userId,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos' // +grupos\r\n+    ).lean();\r\n+    res.json({ message: 'Usuário transformado com sucesso.', funcionario: userToDTO(ret) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao transformar usuário.' });\r\n+  }\r\n+});\r\n+\r\n+// ------- rotas com parâmetro DEPOIS das específicas -------\r\n+\r\n+// OBTÉM um funcionário\r\n+router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const u = await User.findById(\r\n+      req.params.id,\r\n+      'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos empresas'\r\n+    ).lean();\r\n+    if (!u || !['admin_master', 'admin', 'funcionario'].includes(u.role)) {\r\n+      return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+    }\r\n+    res.json(userToDTO(u));\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// CRIA funcionário (novo usuário)\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular, grupos } = req.body;\r\n+\r\n+    if (!email || !senha || !celular) {\r\n+      return res.status(400).json({ message: 'Email, senha e celular são obrigatórios.' });\r\n+    }\r\n+    const cargo = role || 'funcionario';\r\n+    if (!['admin', 'funcionario'].includes(cargo)) {\r\n+      return res.status(400).json({ message: 'Cargo inválido.' });\r\n+    }\r\n+\r\n+    const existe = await User.findOne({ email });\r\n+    if (existe) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+\r\n+    const hash = await bcrypt.hash(senha, 10);\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : 'pessoa_fisica';\r\n+\r\n+    const doc = { tipoConta: conta, email, senha: hash, celular, role: cargo };\r\n+    if (conta === 'pessoa_juridica') {\r\n+      doc.nomeContato = (nomeContato || nome || '').trim();\r\n+      if (razaoSocial) doc.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      doc.nomeCompleto = (nomeCompleto || nome || '').trim();\r\n+    }\r\n+\r\n+    const ALLOWED_GROUPS = ['gerente','vendedor','esteticista','veterinario'];\r\n+    let gruposArr = [];\r\n+    if (Array.isArray(grupos)) gruposArr = grupos;\r\n+    else if (typeof grupos === 'string' && grupos) gruposArr = [grupos];\r\n+    gruposArr = [...new Set(gruposArr.filter(g => ALLOWED_GROUPS.includes(g)))];\r\n+    doc.grupos = gruposArr;\r\n+\r\n+    // Empresas (lojas): aceita array/string de IDs; valida ObjectId e existência\r\n+    let empresasArr = [];\r\n+    if (Array.isArray(req.body.empresas)) empresasArr = req.body.empresas;\r\n+    else if (typeof req.body.empresas === 'string' && req.body.empresas) empresasArr = [req.body.empresas];\r\n+    empresasArr = [...new Set(empresasArr)].filter(id => mongoose.Types.ObjectId.isValid(id));\r\n+    if (empresasArr.length) {\r\n+      const exists = await Store.find({ _id: { $in: empresasArr } }).select('_id').lean();\r\n+      const foundIds = new Set(exists.map(e => String(e._id)));\r\n+      empresasArr = empresasArr.filter(id => foundIds.has(String(id)));\r\n+    }\r\n+    doc.empresas = empresasArr;\r\n+\r\n+    const novo = await User.create(doc);\r\n+    res.status(201).json({ message: 'Funcionário criado com sucesso.', id: novo._id });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// ATUALIZA funcionário (policy aplicada para mudar role)\r\n+router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const { nome, nomeCompleto, nomeContato, razaoSocial, email, senha, role, tipoConta, celular, grupos } = req.body;\r\n+\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    const update = {};\r\n+    if (email) update.email = email;\r\n+    if (celular) update.celular = celular;\r\n+\r\n+    if (role) {\r\n+      if (!['admin', 'funcionario', 'admin_master'].includes(role)) {\r\n+        return res.status(400).json({ message: 'Cargo inválido.' });\r\n+      }\r\n+      if (!canChangeRole(req.user?.role, target.role, role)) {\r\n+        return res.status(403).json({ message: 'Você não tem permissão para alterar este cargo.' });\r\n+      }\r\n+      update.role = role;\r\n+    }\r\n+\r\n+    if (typeof grupos !== 'undefined') {\r\n+      const ALLOWED_GROUPS = ['gerente','vendedor','esteticista','veterinario'];\r\n+      let arr = [];\r\n+      if (Array.isArray(grupos)) arr = grupos;\r\n+      else if (typeof grupos === 'string' && grupos) arr = [grupos];\r\n+      arr = [...new Set(arr.filter(g => ALLOWED_GROUPS.includes(g)))];\r\n+      update.grupos = arr;\r\n+\r\n+      if (typeof req.body.empresas !== 'undefined') {\r\n+        let arr = [];\r\n+        if (Array.isArray(req.body.empresas)) arr = req.body.empresas;\r\n+        else if (typeof req.body.empresas === 'string' && req.body.empresas) arr = [req.body.empresas];\r\n+        arr = [...new Set(arr)].filter(id => mongoose.Types.ObjectId.isValid(id));\r\n+        if (arr.length) {\r\n+          const exists = await Store.find({ _id: { $in: arr } }).select('_id').lean();\r\n+          const foundIds = new Set(exists.map(e => String(e._id)));\r\n+          arr = arr.filter(id => foundIds.has(String(id)));\r\n+        }\r\n+        update.empresas = arr;\r\n+      }\r\n+    }\r\n+\r\n+    const conta = (tipoConta === 'pessoa_juridica') ? 'pessoa_juridica' : undefined;\r\n+    if (conta === 'pessoa_juridica') {\r\n+      if (nomeContato || nome) update.nomeContato = (nomeContato || nome).trim();\r\n+      if (razaoSocial) update.razaoSocial = razaoSocial.trim();\r\n+    } else {\r\n+      if (nomeCompleto || nome) update.nomeCompleto = (nomeCompleto || nome).trim();\r\n+    }\r\n+\r\n+    if (senha && senha.length >= 8) update.senha = await bcrypt.hash(senha, 10);\r\n+\r\n+    const updated = await User.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      update,\r\n+      { new: true, runValidators: true, fields: 'nomeCompleto nomeContato razaoSocial email role tipoConta celular cpf cnpj grupos' }\r\n+    ).lean();\r\n+\r\n+    res.json({ message: 'Funcionário atualizado com sucesso.', funcionario: userToDTO(updated) });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+// REMOVER do quadro (rebaixa para cliente) com policy\r\n+router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const actorRole = req.user?.role;\r\n+    const target = await User.findById(req.params.id, 'role');\r\n+    if (!target) return res.status(404).json({ message: 'Funcionário não encontrado.' });\r\n+\r\n+    if (!(actorRole === 'admin_master' || (actorRole === 'admin' && roleRank[target.role] < roleRank.admin))) {\r\n+      return res.status(403).json({ message: 'Você não tem permissão para remover este usuário do quadro.' });\r\n+    }\r\n+\r\n+    target.role = 'cliente';\r\n+    await target.save();\r\n+    res.json({ message: 'Funcionário removido com sucesso.' });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                }
            ],
            "date": 1756594906827,
            "name": "Commit-0",
            "content": "// servidor/routes/adminFuncionarios.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst User = require('../models/User'); // ajuste o caminho do seu model de usuário\r\nconst authMiddleware = require('../middleware/authMiddleware');\r\n\r\n// 🔒 Todas as rotas daqui exigem autenticação e cargo admin/admin_master\r\nfunction requireAdmin(req, res, next) {\r\n  if (req.user.role === 'admin' || req.user.role === 'admin_master') {\r\n    return next();\r\n  }\r\n  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n}\r\n\r\n// 📌 Listar funcionários\r\nrouter.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n  try {\r\n    const funcionarios = await User.find({ role: { $in: ['funcionario', 'admin'] } }).select('-password');\r\n    res.json(funcionarios);\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n  }\r\n});\r\n\r\n// 📌 Criar funcionário\r\nrouter.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n  try {\r\n    const { nome, email, senha, role } = req.body;\r\n\r\n    const existente = await User.findOne({ email });\r\n    if (existente) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n\r\n    const novo = new User({ nome, email, password: senha, role: role || 'funcionario' });\r\n    await novo.save();\r\n\r\n    res.json({ message: 'Funcionário criado com sucesso.' });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n  }\r\n});\r\n\r\n// 📌 Atualizar funcionário\r\nrouter.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n  try {\r\n    const { nome, email, senha, role } = req.body;\r\n\r\n    const updateData = { nome, email, role };\r\n    if (senha) updateData.password = senha;\r\n\r\n    await User.findByIdAndUpdate(req.params.id, updateData);\r\n    res.json({ message: 'Funcionário atualizado com sucesso.' });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n  }\r\n});\r\n\r\n// 📌 Deletar funcionário\r\nrouter.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n  try {\r\n    await User.findByIdAndDelete(req.params.id);\r\n    res.json({ message: 'Funcionário removido com sucesso.' });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}