{
    "sourceFile": "servidor/routes/addresses.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1756579109650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756580690155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+const mongoose = require('mongoose');\r\n+const UserAddress = require('../models/UserAddress');\r\n+const requireAuth = require('../middlewares/requireAuth');\r\n+\r\n+// GET /api/addresses/:userId -> lista endereços do usuário\r\n+router.get('/:userId', requireAuth, async (req, res) => {\r\n+  try {\r\n+    const { userId } = req.params;\r\n+\r\n+    if (!mongoose.isValidObjectId(userId)) {\r\n+      return res.status(400).json({ message: 'userId inválido' });\r\n+    }\r\n+\r\n+    // só o próprio usuário ou admin_master pode acessar\r\n+    if (req.user.id !== userId && req.user.role !== 'admin_master') {\r\n+      return res.status(403).json({ message: 'Acesso negado' });\r\n+    }\r\n+\r\n+    const addresses = await UserAddress.find({ user: userId }).sort({ isDefault: -1, updatedAt: -1 });\r\n+    res.json(addresses);\r\n+  } catch (err) {\r\n+    console.error('Erro ao buscar endereços:', err);\r\n+    res.status(500).json({ message: 'Erro no servidor' });\r\n+  }\r\n+});\r\n+\r\n+// POST /api/addresses -> cria endereço (com deduplicação básica)\r\n+router.post('/', requireAuth, async (req, res) => {\r\n+  try {\r\n+    const { userId, apelido, cep, logradouro, numero, complemento, bairro, cidade, uf, ibge, isDefault } = req.body;\r\n+\r\n+    if (!userId || !cep) {\r\n+      return res.status(400).json({ message: 'userId e cep são obrigatórios' });\r\n+    }\r\n+    if (!mongoose.isValidObjectId(userId)) {\r\n+      return res.status(400).json({ message: 'userId inválido' });\r\n+    }\r\n+\r\n+    // só o próprio usuário ou admin_master pode criar\r\n+    if (req.user.id !== userId && req.user.role !== 'admin_master') {\r\n+      return res.status(403).json({ message: 'Acesso negado' });\r\n+    }\r\n+\r\n+    // Deduplicação: mesmo user + mesmo endereço (campos-chave)\r\n+    const existing = await UserAddress.findOne({\r\n+      user: userId,\r\n+      cep,\r\n+      logradouro,\r\n+      numero,\r\n+      complemento: complemento || '',\r\n+      bairro,\r\n+      cidade,\r\n+      uf\r\n+    });\r\n+\r\n+    if (existing) {\r\n+      if (isDefault) {\r\n+        await UserAddress.updateMany({ user: userId, isDefault: true }, { $set: { isDefault: false } });\r\n+        if (!existing.isDefault) {\r\n+          existing.isDefault = true;\r\n+          await existing.save();\r\n+        }\r\n+      }\r\n+      return res.status(200).json(existing);\r\n+    }\r\n+\r\n+    if (isDefault) {\r\n+      await UserAddress.updateMany({ user: userId, isDefault: true }, { $set: { isDefault: false } });\r\n+    }\r\n+\r\n+    const addr = await UserAddress.create({\r\n+      user: userId,\r\n+      apelido: apelido || 'Principal',\r\n+      cep,\r\n+      logradouro: logradouro || '',\r\n+      numero: numero || '',\r\n+      complemento: complemento || '',\r\n+      bairro: bairro || '',\r\n+      cidade: cidade || '',\r\n+      uf: uf || '',\r\n+      ibge: ibge || '',\r\n+      isDefault: isDefault !== false\r\n+    });\r\n+\r\n+    res.status(201).json(addr);\r\n+  } catch (err) {\r\n+    console.error('Erro ao criar endereço:', err);\r\n+    res.status(500).json({ message: 'Erro no servidor' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                }
            ],
            "date": 1756579109650,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst mongoose = require('mongoose');\r\nconst UserAddress = require('../models/UserAddress');\r\nconst requireAuth = require('../middlewares/requireAuth');\r\n\r\n// GET /api/addresses/:userId -> lista endereços do usuário\r\nrouter.get('/:userId', requireAuth, async (req, res) => {\r\n  try {\r\n    const { userId } = req.params;\r\n    if (!mongoose.isValidObjectId(userId)) {\r\n      return res.status(400).json({ message: 'userId inválido' });\r\n    }\r\n\r\n    // só o próprio usuário ou admin_master pode acessar\r\n    if (req.user.id !== userId && req.user.role !== 'admin_master') {\r\n      return res.status(403).json({ message: 'Acesso negado' });\r\n    }\r\n\r\n    const addresses = await UserAddress.find({ user: userId }).sort({ isDefault: -1, updatedAt: -1 });\r\n    return res.json(addresses);\r\n  } catch (err) {\r\n    console.error('Erro ao buscar endereços:', err);\r\n    return res.status(500).json({ message: 'Erro no servidor' });\r\n  }\r\n});\r\n\r\n// POST /api/addresses -> cria endereço (com deduplicação básica)\r\nrouter.post('/', requireAuth, async (req, res) => {\r\n  try {\r\n    const { userId, apelido, cep, logradouro, numero, complemento, bairro, cidade, uf, ibge, isDefault } = req.body;\r\n\r\n    if (!userId || !cep) {\r\n      return res.status(400).json({ message: 'userId e cep são obrigatórios' });\r\n    }\r\n    if (!mongoose.isValidObjectId(userId)) {\r\n      return res.status(400).json({ message: 'userId inválido' });\r\n    }\r\n\r\n    // só o próprio usuário ou admin_master pode criar\r\n    if (req.user.id !== userId && req.user.role !== 'admin_master') {\r\n      return res.status(403).json({ message: 'Acesso negado' });\r\n    }\r\n\r\n    // Deduplicação: mesmo user + mesmo endereço (campos-chave)\r\n    const existing = await UserAddress.findOne({\r\n      user: userId,\r\n      cep,\r\n      logradouro,\r\n      numero,\r\n      complemento: complemento || '',\r\n      bairro,\r\n      cidade,\r\n      uf\r\n    });\r\n\r\n    if (existing) {\r\n      if (isDefault) {\r\n        await UserAddress.updateMany({ user: userId, isDefault: true }, { $set: { isDefault: false } });\r\n        if (!existing.isDefault) {\r\n          existing.isDefault = true;\r\n          await existing.save();\r\n        }\r\n      }\r\n      return res.status(200).json(existing);\r\n    }\r\n\r\n    if (isDefault) {\r\n      await UserAddress.updateMany({ user: userId, isDefault: true }, { $set: { isDefault: false } });\r\n    }\r\n\r\n    const addr = await UserAddress.create({\r\n      user: userId,\r\n      apelido: apelido || 'Principal',\r\n      cep,\r\n      logradouro: logradouro || '',\r\n      numero: numero || '',\r\n      complemento: complemento || '',\r\n      bairro: bairro || '',\r\n      cidade: cidade || '',\r\n      uf: uf || '',\r\n      ibge: ibge || '',\r\n      isDefault: isDefault !== false\r\n    });\r\n\r\n    return res.status(201).json(addr);\r\n  } catch (err) {\r\n    console.error('Erro ao criar endereço:', err);\r\n    return res.status(500).json({ message: 'Erro no servidor' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}