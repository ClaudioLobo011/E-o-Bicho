{
    "sourceFile": "servidor/routes/funcAgenda.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 41,
            "patches": [
                {
                    "date": 1757347212717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757349959310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,35 +7,25 @@\n \r\n const User = require('../models/User');\r\n const Pet = require('../models/Pet');\r\n const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n \r\n-// Somente funcionários e admins\r\n const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n \r\n-function escapeRegex(s) {\r\n-  return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n-}\r\n-function userDisplayName(u) {\r\n-  return u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email;\r\n-}\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email; }\r\n \r\n-// GET /api/func/clientes/buscar?q=...&limit=8\r\n+// ---------- BUSCA CLIENTES ----------\r\n router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n     const q = String(req.query.q || '').trim();\r\n     const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n     if (!q) return res.json([]);\r\n-\r\n     const regex = new RegExp(escapeRegex(q), 'i');\r\n     const onlyDigits = q.replace(/\\D/g, '');\r\n \r\n-    const or = [\r\n-      { nomeCompleto: regex },\r\n-      { nomeContato: regex },\r\n-      { razaoSocial: regex },\r\n-      { email: regex },\r\n-    ];\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n     if (onlyDigits.length >= 4) {\r\n       or.push({ cpf: new RegExp(onlyDigits) });\r\n       or.push({ cnpj: new RegExp(onlyDigits) });\r\n       or.push({ celular: new RegExp(onlyDigits) });\r\n@@ -59,9 +49,9 @@\n     res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n   }\r\n });\r\n \r\n-// GET /api/func/clientes/:id/pets\r\n+// ---------- PETS DO CLIENTE ----------\r\n router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n     const { id } = req.params;\r\n     if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido' });\r\n@@ -75,9 +65,9 @@\n     res.status(500).json({ message: 'Erro ao buscar pets' });\r\n   }\r\n });\r\n \r\n-// GET /api/func/servicos/buscar?q=...&limit=8\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n     const q = String(req.query.q || '').trim();\r\n     const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n@@ -101,19 +91,18 @@\n     res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n   }\r\n });\r\n \r\n-// GET /api/func/profissionais/esteticistas?storeId=<id>\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n     const { storeId } = req.query;\r\n     const filter = {\r\n       role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n       grupos: 'esteticista'\r\n     };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      filter.empresas = storeId;\r\n-    }\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.empresas = storeId;\r\n+\r\n     const users = await User.find(filter)\r\n       .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n       .sort({ nomeCompleto: 1 })\r\n       .lean();\r\n@@ -124,5 +113,102 @@\n     res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n   }\r\n });\r\n \r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+    const { start, end } = getDayRange(date);\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = list.map(a => ({\r\n+      _id: a._id,\r\n+      h: new Date(a.scheduledAt).toISOString(),\r\n+      valor: a.valor,\r\n+      pago: !!a.pago,\r\n+      pet: a.pet ? a.pet.nome : '—',\r\n+      servico: a.servico ? a.servico.nome : '—',\r\n+      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : '—'\r\n+    }));\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar\r\n+// POST /api/func/agendamentos\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const {\r\n+      storeId, clienteId, petId, servicoId, profissionalId,\r\n+      scheduledAt, pago\r\n+    } = req.body || {};\r\n+\r\n+    const ids = { storeId, clienteId, petId, servicoId, profissionalId };\r\n+    for (const [k, v] of Object.entries(ids)) {\r\n+      if (!v || !mongoose.Types.ObjectId.isValid(v)) {\r\n+        return res.status(400).json({ message: `Parâmetro inválido: ${k}` });\r\n+      }\r\n+    }\r\n+    if (!scheduledAt) return res.status(400).json({ message: 'Parâmetro \"scheduledAt\" é obrigatório.' });\r\n+\r\n+    // Valor SEMPRE do serviço (não confiar no front)\r\n+    const serv = await Service.findById(servicoId).select('_id valor');\r\n+    if (!serv) return res.status(400).json({ message: 'Serviço inexistente.' });\r\n+\r\n+    const doc = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: servicoId,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: Number(serv.valor || 0),\r\n+      pago: !!pago,\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(doc._id)\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—'\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n+  }\r\n+});\r\n+\r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757352308886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+SiteEoBichoTW/servidor/routes/funcAgenda.js\r\n const express = require('express');\r\n const router = express.Router();\r\n \r\n const mongoose = require('mongoose');\r\n@@ -12,9 +13,9 @@\n \r\n const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n \r\n function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email; }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n \r\n // ---------- BUSCA CLIENTES ----------\r\n router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n@@ -39,11 +40,10 @@\n     res.json(users.map(u => ({\r\n       _id: u._id,\r\n       nome: userDisplayName(u),\r\n       email: u.email,\r\n-      cpf: u.cpf,\r\n-      cnpj: u.cnpj,\r\n-      tipoConta: u.tipoConta,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n     })));\r\n   } catch (e) {\r\n     console.error('GET /func/clientes/buscar', e);\r\n     res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n@@ -52,14 +52,11 @@\n \r\n // ---------- PETS DO CLIENTE ----------\r\n router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido' });\r\n-    const pets = await Pet.find({ owner: id })\r\n-      .select('_id nome tipo raca porte sexo')\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n     res.json(pets);\r\n   } catch (e) {\r\n     console.error('GET /func/clientes/:id/pets', e);\r\n     res.status(500).json({ message: 'Erro ao buscar pets' });\r\n@@ -99,9 +96,12 @@\n     const filter = {\r\n       role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n       grupos: 'esteticista'\r\n     };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.empresas = storeId;\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n \r\n     const users = await User.find(filter)\r\n       .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n       .sort({ nomeCompleto: 1 })\r\n@@ -128,8 +128,9 @@\n router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n     const { date, storeId } = req.query;\r\n     if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n     const { start, end } = getDayRange(date);\r\n     const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n     if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n \r\n@@ -147,51 +148,54 @@\n       valor: a.valor,\r\n       pago: !!a.pago,\r\n       pet: a.pet ? a.pet.nome : '—',\r\n       servico: a.servico ? a.servico.nome : '—',\r\n-      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : '—'\r\n+      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : '—',\r\n+      profissionalId: a.profissional?._id || null\r\n     }));\r\n     res.json(map);\r\n   } catch (e) {\r\n     console.error('GET /func/agendamentos', e);\r\n     res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n   }\r\n });\r\n \r\n-// Criar\r\n-// POST /api/func/agendamentos\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n-    const {\r\n-      storeId, clienteId, petId, servicoId, profissionalId,\r\n-      scheduledAt, pago\r\n-    } = req.body || {};\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n+    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n \r\n-    const ids = { storeId, clienteId, petId, servicoId, profissionalId };\r\n-    for (const [k, v] of Object.entries(ids)) {\r\n-      if (!v || !mongoose.Types.ObjectId.isValid(v)) {\r\n-        return res.status(400).json({ message: `Parâmetro inválido: ${k}` });\r\n-      }\r\n+    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n+    if (!valorFinal) {\r\n+      const s = await Service.findById(servicoId).select('valor').lean();\r\n+      valorFinal = s?.valor || 0;\r\n     }\r\n-    if (!scheduledAt) return res.status(400).json({ message: 'Parâmetro \"scheduledAt\" é obrigatório.' });\r\n \r\n-    // Valor SEMPRE do serviço (não confiar no front)\r\n-    const serv = await Service.findById(servicoId).select('_id valor');\r\n-    if (!serv) return res.status(400).json({ message: 'Serviço inexistente.' });\r\n-\r\n-    const doc = await Appointment.create({\r\n+    const appt = await Appointment.create({\r\n       store: storeId,\r\n       cliente: clienteId,\r\n       pet: petId,\r\n       servico: servicoId,\r\n       profissional: profissionalId,\r\n       scheduledAt: new Date(scheduledAt),\r\n-      valor: Number(serv.valor || 0),\r\n+      valor: valorFinal,\r\n       pago: !!pago,\r\n       createdBy: req.user?._id\r\n     });\r\n \r\n-    const full = await Appointment.findById(doc._id)\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n       .populate('pet', 'nome')\r\n       .populate('servico', 'nome')\r\n       .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n       .lean();\r\n@@ -202,13 +206,14 @@\n       valor: full.valor,\r\n       pago: !!full.pago,\r\n       pet: full.pet ? full.pet.nome : '—',\r\n       servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—'\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n     });\r\n   } catch (e) {\r\n     console.error('POST /func/agendamentos', e);\r\n     res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n   }\r\n });\r\n\\ No newline at end of file\n \r\n-module.exports = router;\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757352738368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-SiteEoBichoTW/servidor/routes/funcAgenda.js\r\n const express = require('express');\r\n const router = express.Router();\r\n \r\n const mongoose = require('mongoose');\r\n@@ -215,5 +214,5 @@\n     res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n   }\r\n });\r\n \r\n-module.exports = router;\n\\ No newline at end of file\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757352793728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,218 +1,323 @@\n-const express = require('express');\r\n-const router = express.Router();\r\n+(function () {\r\n+  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n+  function api(url, opts={}) {\r\n+    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n+      ...opts,\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        ...(opts.headers || {}),\r\n+        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n+      }\r\n+    });\r\n+  }\r\n \r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+  // Elements\r\n+  const agendaList = document.getElementById('agenda-list');\r\n+  const dateInput = document.getElementById('agenda-date');\r\n+  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n+  const addBtn = document.getElementById('add-service-btn');\r\n+  const storeSelect = document.getElementById('agenda-store');\r\n+  const storeLabelVisible  = document.getElementById('agenda-store-label-visible');\r\n \r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n+  // Modal elements\r\n+  const modal = document.getElementById('modal-add-servico');\r\n+  const modalClose = document.getElementById('modal-add-close');\r\n+  const modalCancel = document.getElementById('modal-add-cancel');\r\n+  const modalSave = document.getElementById('modal-add-save');\r\n \r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+  const cliInput = document.getElementById('add-cli-input');\r\n+  const cliSug = document.getElementById('add-cli-sug');\r\n+  const petSelect = document.getElementById('add-pet-select');\r\n+  const servInput = document.getElementById('add-serv-input');\r\n+  const servSug = document.getElementById('add-serv-sug');\r\n+  const valorInput = document.getElementById('add-valor');\r\n+  const horaInput = document.getElementById('add-hora');\r\n+  const profSelect = document.getElementById('add-prof-select');\r\n \r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+  // State\r\n+  const state = {\r\n+    stores: [],\r\n+    profissionais: [],\r\n+    agendamentos: [],\r\n+    selectedStoreId: null,\r\n+    selectedCliente: null,\r\n+    selectedServico: null\r\n+  };\r\n \r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n+  // Helpers\r\n+  function todayStr() {\r\n+    const tz = new Date();\r\n+    return tz.toISOString().slice(0, 10);\r\n+  }\r\n+  function pad(n){ return n<10? '0'+n : ''+n; }\r\n+  function parseTimeToDate(dateISO, hhmm) {\r\n+    const [h,m] = (hhmm || '00:00').split(':').map(x=>parseInt(x,10));\r\n+    const d = new Date(dateISO);\r\n+    d.setHours(h, m, 0, 0);\r\n+    return d;\r\n+  }\r\n+  function money(v){ return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n+  function byId(id){ return document.getElementById(id); }\r\n+  function clearChildren(el){ while(el && el.firstChild) el.removeChild(el.firstChild); }\r\n+  function debounce(fn, delay=250){ let t; return (...args)=>{ clearTimeout(t); t=setTimeout(()=>fn(...args), delay); }; }\r\n \r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n+  // Load stores\r\n+  async function loadStores() {\r\n+    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+    const list = await resp.json();\r\n+    state.stores = Array.isArray(list) ? list : [];\r\n+    storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+    if (!state.selectedStoreId && state.stores[0]) {\r\n+      state.selectedStoreId = state.stores[0]._id;\r\n+      storeSelect.value = state.selectedStoreId;\r\n     }\r\n+    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n+    storeLabelVisible.textContent = s ? s.nome : '—';\r\n+  }\r\n \r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  // Load professionals (esteticistas) limited to the selected store\r\n+  async function loadProfissionais() {\r\n+    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n+    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n+    const list = await resp.json();\r\n+    state.profissionais = list || [];\r\n+    // Fill modal select\r\n+    profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n   }\r\n-});\r\n \r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  // Load appointments for the day/store\r\n+  async function loadAgendamentos() {\r\n+    const date = dateInput.value || todayStr();\r\n+    const resp = await api(`/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`);\r\n+    state.agendamentos = await resp.json();\r\n   }\r\n-});\r\n \r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n+  // Render grid with columns per professional\r\n+  function renderGrid() {\r\n+    const date = dateInput.value || todayStr();\r\n+    dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+    const store = state.stores.find(s => s._id === state.selectedStoreId);\r\n+    storeLabelVisible.textContent = store ? store.nome : '—';\r\n \r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n+    // Hours rows (07:00 - 20:00)\r\n+    const hours = [];\r\n+    for (let h = 7; h <= 20; h++) hours.push(`${pad(h)}:00`);\r\n \r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n+    // Build header (first empty cell + professional names)\r\n+    const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n+    const colCount = cols.length;\r\n \r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n+    // Grid container\r\n+    clearChildren(agendaList);\r\n \r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n+    const header = document.createElement('div');\r\n+    header.className = `grid sticky top-0 bg-white z-10 border-b text-sm font-medium`\r\n+      + ` grid-cols-${Math.min(colCount, 12)}`;\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n+    cols.forEach((label, idx) => {\r\n+      const cell = document.createElement('div');\r\n+      cell.className = 'px-3 py-2 ' + (idx===0 ? 'text-gray-600' : 'text-gray-800');\r\n+      cell.textContent = label;\r\n+      header.appendChild(cell);\r\n+    });\r\n+    agendaList.appendChild(header);\r\n \r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n+    // Body\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n+    agendaList.appendChild(body);\r\n \r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+    hours.forEach(hh => {\r\n+      // Time column\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n+      timeCell.textContent = hh;\r\n+      body.appendChild(timeCell);\r\n \r\n-    const { start, end } = getDayRange(date);\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+      // One cell per professional\r\n+      state.profissionais.forEach(p => {\r\n+        const col = document.createElement('div');\r\n+        col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n+        col.dataset.profissionalId = p._id;\r\n+        col.dataset.hh = hh;\r\n+        body.appendChild(col);\r\n+      });\r\n+    });\r\n \r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n+    // Place cards\r\n+    for (const a of state.agendamentos) {\r\n+      const d = new Date(a.h);\r\n+      const hh = `${pad(d.getHours())}:00`;\r\n+      const col = body.querySelector(`div[data-profissional-id=\"${a.profissionalId}\"][data-hh=\"${hh}\"]`);\r\n+      if (!col) continue;\r\n \r\n-    const map = list.map(a => ({\r\n-      _id: a._id,\r\n-      h: new Date(a.scheduledAt).toISOString(),\r\n-      valor: a.valor,\r\n-      pago: !!a.pago,\r\n-      pet: a.pet ? a.pet.nome : '—',\r\n-      servico: a.servico ? a.servico.nome : '—',\r\n-      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : '—',\r\n-      profissionalId: a.profissional?._id || null\r\n-    }));\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n+      const card = document.createElement('div');\r\n+      card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2';\r\n+      const left = document.createElement('div');\r\n+      left.innerHTML = `<div class=\"font-medium text-gray-900\">${a.pet}</div>\r\n+                        <div class=\"text-gray-600\">${a.servico}</div>\r\n+                        <div class=\"text-gray-600\">${money(a.valor)}</div>`;\r\n+      const right = document.createElement('div');\r\n+      right.className = 'text-lg';\r\n+      const dollar = document.createElement('span');\r\n+      dollar.textContent = '$';\r\n+      if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n+      right.appendChild(dollar);\r\n \r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n-    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+      card.appendChild(left);\r\n+      card.appendChild(right);\r\n+      col.appendChild(card);\r\n     }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n+  }\r\n \r\n-    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n-    if (!valorFinal) {\r\n-      const s = await Service.findById(servicoId).select('valor').lean();\r\n-      valorFinal = s?.valor || 0;\r\n-    }\r\n+  // Modal behavior\r\n+  function openAddModal() {\r\n+    // Reset\r\n+    state.selectedCliente = null;\r\n+    state.selectedServico = null;\r\n+    cliInput.value = '';\r\n+    cliSug.innerHTML = '';\r\n+    cliSug.classList.add('hidden');\r\n+    petSelect.innerHTML = '';\r\n+    servInput.value = '';\r\n+    servSug.innerHTML = '';\r\n+    servSug.classList.add('hidden');\r\n+    valorInput.value = '';\r\n+    horaInput.value = new Date().toTimeString().slice(0,5);\r\n \r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: servicoId,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: valorFinal,\r\n-      pago: !!pago,\r\n-      createdBy: req.user?._id\r\n-    });\r\n+    // Load professionals (already loaded globally, but ensure select is filled)\r\n+    profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n \r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n+    cliInput.focus();\r\n+  }\r\n+  function closeAddModal() {\r\n+    modal.classList.add('hidden');\r\n+    modal.classList.remove('flex');\r\n+  }\r\n \r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n+  // Cliente search\r\n+  async function searchClientes(term) {\r\n+    if (!term || term.length < 2) { cliSug.innerHTML=''; cliSug.classList.add('hidden'); return; }\r\n+    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json();\r\n+    cliSug.innerHTML = list.map(u => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n+        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n+      </li>`).join('');\r\n+    cliSug.classList.remove('hidden');\r\n+    cliSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', async () => {\r\n+        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n+        cliInput.value = li.dataset.nome;\r\n+        cliSug.classList.add('hidden');\r\n+        // Auto load pets for this client\r\n+        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n+        const pets = await resp.json();\r\n+        petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+      });\r\n     });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n   }\r\n-});\r\n \r\n-module.exports = router;\r\n+  // Serviço search\r\n+  async function searchServicos(term) {\r\n+    if (!term || term.length < 2) { servSug.innerHTML=''; servSug.classList.add('hidden'); return; }\r\n+    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json();\r\n+    servSug.innerHTML = list.map(s => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor || 0}\">\r\n+        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${(s.grupo && s.grupo.nome) ? s.grupo.nome : ''}</div>\r\n+      </li>`).join('');\r\n+    servSug.classList.remove('hidden');\r\n+    servSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', () => {\r\n+        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n+        servInput.value = state.selectedServico.nome;\r\n+        valorInput.value = state.selectedServico.valor.toFixed(2);\r\n+        servSug.classList.add('hidden');\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  async function saveAgendamento() {\r\n+    try {\r\n+      const clienteId = state.selectedCliente?._id;\r\n+      const petId = petSelect.value;\r\n+      const servicoId = state.selectedServico?._id;\r\n+      const profissionalId = profSelect.value;\r\n+      const hora = horaInput.value;\r\n+      const date = dateInput.value || todayStr();\r\n+\r\n+      if (!(clienteId && petId && servicoId && profissionalId && hora)) {\r\n+        alert('Preencha cliente, pet, serviço, profissional e hora.');\r\n+        return;\r\n+      }\r\n+\r\n+      const scheduledAt = parseTimeToDate(date, hora).toISOString();\r\n+\r\n+      const body = {\r\n+        storeId: state.selectedStoreId,\r\n+        clienteId,\r\n+        petId,\r\n+        servicoId,\r\n+        profissionalId,\r\n+        scheduledAt,\r\n+        valor: Number(valorInput.value || 0),\r\n+        pago: false\r\n+      };\r\n+\r\n+      const resp = await api('/func/agendamentos', {\r\n+        method: 'POST',\r\n+        body: JSON.stringify(body)\r\n+      });\r\n+\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(()=>({}));\r\n+        throw new Error(err.message || 'Erro ao salvar');\r\n+      }\r\n+\r\n+      const created = await resp.json();\r\n+      state.agendamentos.push(created);\r\n+      closeAddModal();\r\n+      renderGrid();\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+      alert(e.message || 'Erro ao salvar');\r\n+    }\r\n+  }\r\n+\r\n+  // Events\r\n+  addBtn?.addEventListener('click', openAddModal);\r\n+  modalClose?.addEventListener('click', closeAddModal);\r\n+  modalCancel?.addEventListener('click', closeAddModal);\r\n+  modalSave?.addEventListener('click', saveAgendamento);\r\n+\r\n+  cliInput?.addEventListener('input', debounce((e)=>searchClientes(e.target.value), 300));\r\n+  servInput?.addEventListener('input', debounce((e)=>searchServicos(e.target.value), 300));\r\n+\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  });\r\n+\r\n+  // Boot\r\n+  (async function init() {\r\n+    if (!dateInput.value) dateInput.value = todayStr();\r\n+    await loadStores();\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  })();\r\n+})();\r\n"
                },
                {
                    "date": 1757352914888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,335 @@\n+// SiteEoBichoTW/scripts/funcionarios/banho-e-tosa.js\r\n+(function () {\r\n+  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n+  function api(url, opts={}) {\r\n+    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n+      ...opts,\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        ...(opts.headers || {}),\r\n+        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Elements\r\n+  const agendaList = document.getElementById('agenda-list');\r\n+  const dateInput = document.getElementById('agenda-date');\r\n+  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n+  const addBtn = document.getElementById('add-service-btn');\r\n+  const storeSelect = document.getElementById('agenda-store');\r\n+  const storeLabelVisible  = document.getElementById('agenda-store-label-visible');\r\n+\r\n+  // Modal elements\r\n+  const modal = document.getElementById('modal-add-servico');\r\n+  const modalClose = document.getElementById('modal-add-close');\r\n+  const modalCancel = document.getElementById('modal-add-cancel');\r\n+  const modalSave = document.getElementById('modal-add-save');\r\n+\r\n+  const cliInput = document.getElementById('add-cli-input');\r\n+  const cliSug = document.getElementById('add-cli-sug');\r\n+  const petSelect = document.getElementById('add-pet-select');\r\n+  const servInput = document.getElementById('add-serv-input');\r\n+  const servSug = document.getElementById('add-serv-sug');\r\n+  const valorInput = document.getElementById('add-valor');\r\n+  const horaInput = document.getElementById('add-hora');\r\n+  const profSelect = document.getElementById('add-prof-select');\r\n+\r\n+  // State\r\n+  const state = {\r\n+    stores: [],\r\n+    profissionais: [],\r\n+    agendamentos: [],\r\n+    selectedStoreId: null,\r\n+    selectedCliente: null,\r\n+    selectedServico: null\r\n+  };\r\n+\r\n+  // Helpers\r\n+  function todayStr() {\r\n+    const tz = new Date();\r\n+    return tz.toISOString().slice(0, 10);\r\n+  }\r\n+  function pad(n){ return n<10? '0'+n : ''+n; }\r\n+  function parseTimeToDate(dateISO, hhmm) {\r\n+    const [h,m] = (hhmm || '00:00').split(':').map(x=>parseInt(x,10));\r\n+    const d = new Date(dateISO);\r\n+    d.setHours(h, m, 0, 0);\r\n+    return d;\r\n+  }\r\n+  function money(v){ return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n+  function clearChildren(el){ while(el && el.firstChild) el.removeChild(el.firstChild); }\r\n+  function debounce(fn, delay=250){ let t; return (...args)=>{ clearTimeout(t); t=setTimeout(()=>fn(...args), delay); }; }\r\n+\r\n+  // Load stores\r\n+  async function loadStores() {\r\n+    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+    const list = await resp.json();\r\n+    state.stores = Array.isArray(list) ? list : [];\r\n+    storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+    if (!state.selectedStoreId && state.stores[0]) {\r\n+      state.selectedStoreId = state.stores[0]._id;\r\n+      storeSelect.value = state.selectedStoreId;\r\n+    }\r\n+    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n+    if (document.getElementById('agenda-store-label-visible')) {\r\n+      document.getElementById('agenda-store-label-visible').textContent = s ? s.nome : '—';\r\n+    }\r\n+  }\r\n+\r\n+  // Load professionals (esteticistas) limited to the selected store\r\n+  async function loadProfissionais() {\r\n+    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n+    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n+    const list = await resp.json();\r\n+    state.profissionais = list || [];\r\n+    // Fill modal select\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+    }\r\n+  }\r\n+\r\n+  // Load appointments for the day/store\r\n+  async function loadAgendamentos() {\r\n+    const date = dateInput.value || todayStr();\r\n+    const resp = await api(`/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`);\r\n+    state.agendamentos = await resp.json();\r\n+  }\r\n+\r\n+  // Render grid with columns per professional\r\n+  function renderGrid() {\r\n+    if (!agendaList) return;\r\n+    const date = dateInput.value || todayStr();\r\n+    if (dateLabelVisible) {\r\n+      dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+    }\r\n+\r\n+    // Hours rows (07:00 - 20:00)\r\n+    const hours = [];\r\n+    for (let h = 7; h <= 20; h++) hours.push(`${pad(h)}:00`);\r\n+\r\n+    // Build header (first empty cell + professional names)\r\n+    const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n+    const colCount = cols.length;\r\n+\r\n+    // Grid container\r\n+    clearChildren(agendaList);\r\n+\r\n+    const header = document.createElement('div');\r\n+    header.className = `grid sticky top-0 bg-white z-10 border-b text-sm font-medium`;\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n+    cols.forEach((label, idx) => {\r\n+      const cell = document.createElement('div');\r\n+      cell.className = 'px-3 py-2 ' + (idx===0 ? 'text-gray-600' : 'text-gray-800');\r\n+      cell.textContent = label;\r\n+      header.appendChild(cell);\r\n+    });\r\n+    agendaList.appendChild(header);\r\n+\r\n+    // Body\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n+    agendaList.appendChild(body);\r\n+\r\n+    hours.forEach(hh => {\r\n+      // Time column\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n+      timeCell.textContent = hh;\r\n+      body.appendChild(timeCell);\r\n+\r\n+      // One cell per professional\r\n+      state.profissionais.forEach(p => {\r\n+        const col = document.createElement('div');\r\n+        col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n+        col.dataset.profissionalId = p._id;\r\n+        col.dataset.hh = hh;\r\n+        body.appendChild(col);\r\n+      });\r\n+    });\r\n+\r\n+    // Place cards\r\n+    for (const a of state.agendamentos) {\r\n+      const d = new Date(a.h);\r\n+      const hh = `${pad(d.getHours())}:00`;\r\n+      const col = body.querySelector(`div[data-profissional-id=\"${a.profissionalId}\"][data-hh=\"${hh}\"]`);\r\n+      if (!col) continue;\r\n+\r\n+      const card = document.createElement('div');\r\n+      card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2';\r\n+      const left = document.createElement('div');\r\n+      left.innerHTML = `<div class=\"font-medium text-gray-900\">${a.pet}</div>\r\n+                        <div class=\"text-gray-600\">${a.servico}</div>\r\n+                        <div class=\"text-gray-600\">${money(a.valor)}</div>`;\r\n+      const right = document.createElement('div');\r\n+      right.className = 'text-lg';\r\n+      const dollar = document.createElement('span');\r\n+      dollar.textContent = '$';\r\n+      if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n+      right.appendChild(dollar);\r\n+\r\n+      card.appendChild(left);\r\n+      card.appendChild(right);\r\n+      col.appendChild(card);\r\n+    }\r\n+  }\r\n+\r\n+  // Modal behavior\r\n+  function openAddModal() {\r\n+    if (!modal) return;\r\n+    // Reset\r\n+    state.selectedCliente = null;\r\n+    state.selectedServico = null;\r\n+    if (cliInput) { cliInput.value = ''; }\r\n+    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+    if (petSelect) { petSelect.innerHTML = ''; }\r\n+    if (servInput) { servInput.value = ''; }\r\n+    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    if (valorInput) { valorInput.value = ''; }\r\n+    if (horaInput) { horaInput.value = new Date().toTimeString().slice(0,5); }\r\n+\r\n+    // Load professionals (already loaded globally, but ensure select is filled)\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+    }\r\n+\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n+    cliInput?.focus();\r\n+  }\r\n+  function closeAddModal() {\r\n+    if (!modal) return;\r\n+    modal.classList.add('hidden');\r\n+    modal.classList.remove('flex');\r\n+  }\r\n+\r\n+  // Cliente search\r\n+  async function searchClientes(term) {\r\n+    if (!term || term.length < 2) { if (cliSug){ cliSug.innerHTML=''; cliSug.classList.add('hidden'); } return; }\r\n+    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json();\r\n+    if (!cliSug) return;\r\n+    cliSug.innerHTML = list.map(u => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n+        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n+      </li>`).join('');\r\n+    cliSug.classList.remove('hidden');\r\n+    cliSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', async () => {\r\n+        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n+        if (cliInput) cliInput.value = li.dataset.nome;\r\n+        cliSug.classList.add('hidden');\r\n+        // Auto load pets for this client\r\n+        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n+        const pets = await resp.json();\r\n+        if (petSelect) {\r\n+          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+        }\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  // Serviço search\r\n+  async function searchServicos(term) {\r\n+    if (!term || term.length < 2) { if (servSug){ servSug.innerHTML=''; servSug.classList.add('hidden'); } return; }\r\n+    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json();\r\n+    if (!servSug) return;\r\n+    servSug.innerHTML = list.map(s => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor || 0}\">\r\n+        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${(s.grupo && s.grupo.nome) ? s.grupo.nome : ''}</div>\r\n+      </li>`).join('');\r\n+    servSug.classList.remove('hidden');\r\n+    servSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', () => {\r\n+        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n+        if (servInput) servInput.value = state.selectedServico.nome;\r\n+        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n+        servSug.classList.add('hidden');\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  async function saveAgendamento() {\r\n+    try {\r\n+      const clienteId = state.selectedCliente?._id;\r\n+      const petId = petSelect?.value;\r\n+      const servicoId = state.selectedServico?._id;\r\n+      const profissionalId = profSelect?.value;\r\n+      const hora = horaInput?.value;\r\n+      const date = dateInput.value || todayStr();\r\n+\r\n+      if (!(clienteId && petId && servicoId && profissionalId && hora)) {\r\n+        alert('Preencha cliente, pet, serviço, profissional e hora.');\r\n+        return;\r\n+      }\r\n+\r\n+      const scheduledAt = parseTimeToDate(date, hora).toISOString();\r\n+\r\n+      const body = {\r\n+        storeId: state.selectedStoreId,\r\n+        clienteId,\r\n+        petId,\r\n+        servicoId,\r\n+        profissionalId,\r\n+        scheduledAt,\r\n+        valor: Number(valorInput?.value || 0),\r\n+        pago: false\r\n+      };\r\n+\r\n+      const resp = await api('/func/agendamentos', {\r\n+        method: 'POST',\r\n+        body: JSON.stringify(body)\r\n+      });\r\n+\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(()=>({}));\r\n+        throw new Error(err.message || 'Erro ao salvar');\r\n+      }\r\n+\r\n+      const created = await resp.json();\r\n+      state.agendamentos.push(created);\r\n+      closeAddModal();\r\n+      renderGrid();\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+      alert(e.message || 'Erro ao salvar');\r\n+    }\r\n+  }\r\n+\r\n+  // Events\r\n+  addBtn?.addEventListener('click', openAddModal);\r\n+  modalClose?.addEventListener('click', closeAddModal);\r\n+  modalCancel?.addEventListener('click', closeAddModal);\r\n+  modalSave?.addEventListener('click', saveAgendamento);\r\n+\r\n+  cliInput?.addEventListener('input', debounce((e)=>searchClientes(e.target.value), 300));\r\n+  servInput?.addEventListener('input', debounce((e)=>searchServicos(e.target.value), 300));\r\n+\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  });\r\n+\r\n+  // Boot\r\n+  (async function init() {\r\n+    if (!dateInput.value) dateInput.value = todayStr();\r\n+    await loadStores();\r\n+    // Define selected store if the select had a value pre-set\r\n+    if (!state.selectedStoreId && storeSelect?.value) state.selectedStoreId = storeSelect.value;\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  })();\r\n+})();\r\n"
                },
                {
                    "date": 1757353754202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,335 +1,218 @@\n-// SiteEoBichoTW/scripts/funcionarios/banho-e-tosa.js\r\n-(function () {\r\n-  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n-  function api(url, opts={}) {\r\n-    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n-      ...opts,\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        ...(opts.headers || {}),\r\n-        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n-      }\r\n-    });\r\n-  }\r\n+const express = require('express');\r\n+const router = express.Router();\r\n \r\n-  // Elements\r\n-  const agendaList = document.getElementById('agenda-list');\r\n-  const dateInput = document.getElementById('agenda-date');\r\n-  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n-  const addBtn = document.getElementById('add-service-btn');\r\n-  const storeSelect = document.getElementById('agenda-store');\r\n-  const storeLabelVisible  = document.getElementById('agenda-store-label-visible');\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n \r\n-  // Modal elements\r\n-  const modal = document.getElementById('modal-add-servico');\r\n-  const modalClose = document.getElementById('modal-add-close');\r\n-  const modalCancel = document.getElementById('modal-add-cancel');\r\n-  const modalSave = document.getElementById('modal-add-save');\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n \r\n-  const cliInput = document.getElementById('add-cli-input');\r\n-  const cliSug = document.getElementById('add-cli-sug');\r\n-  const petSelect = document.getElementById('add-pet-select');\r\n-  const servInput = document.getElementById('add-serv-input');\r\n-  const servSug = document.getElementById('add-serv-sug');\r\n-  const valorInput = document.getElementById('add-valor');\r\n-  const horaInput = document.getElementById('add-hora');\r\n-  const profSelect = document.getElementById('add-prof-select');\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n \r\n-  // State\r\n-  const state = {\r\n-    stores: [],\r\n-    profissionais: [],\r\n-    agendamentos: [],\r\n-    selectedStoreId: null,\r\n-    selectedCliente: null,\r\n-    selectedServico: null\r\n-  };\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n \r\n-  // Helpers\r\n-  function todayStr() {\r\n-    const tz = new Date();\r\n-    return tz.toISOString().slice(0, 10);\r\n-  }\r\n-  function pad(n){ return n<10? '0'+n : ''+n; }\r\n-  function parseTimeToDate(dateISO, hhmm) {\r\n-    const [h,m] = (hhmm || '00:00').split(':').map(x=>parseInt(x,10));\r\n-    const d = new Date(dateISO);\r\n-    d.setHours(h, m, 0, 0);\r\n-    return d;\r\n-  }\r\n-  function money(v){ return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n-  function clearChildren(el){ while(el && el.firstChild) el.removeChild(el.firstChild); }\r\n-  function debounce(fn, delay=250){ let t; return (...args)=>{ clearTimeout(t); t=setTimeout(()=>fn(...args), delay); }; }\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n \r\n-  // Load stores\r\n-  async function loadStores() {\r\n-    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n-    const list = await resp.json();\r\n-    state.stores = Array.isArray(list) ? list : [];\r\n-    storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-    if (!state.selectedStoreId && state.stores[0]) {\r\n-      state.selectedStoreId = state.stores[0]._id;\r\n-      storeSelect.value = state.selectedStoreId;\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n     }\r\n-    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n-    if (document.getElementById('agenda-store-label-visible')) {\r\n-      document.getElementById('agenda-store-label-visible').textContent = s ? s.nome : '—';\r\n-    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n   }\r\n+});\r\n \r\n-  // Load professionals (esteticistas) limited to the selected store\r\n-  async function loadProfissionais() {\r\n-    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n-    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n-    const list = await resp.json();\r\n-    state.profissionais = list || [];\r\n-    // Fill modal select\r\n-    if (profSelect) {\r\n-      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-    }\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n   }\r\n+});\r\n \r\n-  // Load appointments for the day/store\r\n-  async function loadAgendamentos() {\r\n-    const date = dateInput.value || todayStr();\r\n-    const resp = await api(`/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`);\r\n-    state.agendamentos = await resp.json();\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n   }\r\n+});\r\n \r\n-  // Render grid with columns per professional\r\n-  function renderGrid() {\r\n-    if (!agendaList) return;\r\n-    const date = dateInput.value || todayStr();\r\n-    if (dateLabelVisible) {\r\n-      dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n     }\r\n \r\n-    // Hours rows (07:00 - 20:00)\r\n-    const hours = [];\r\n-    for (let h = 7; h <= 20; h++) hours.push(`${pad(h)}:00`);\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n \r\n-    // Build header (first empty cell + professional names)\r\n-    const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n-    const colCount = cols.length;\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n \r\n-    // Grid container\r\n-    clearChildren(agendaList);\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n \r\n-    const header = document.createElement('div');\r\n-    header.className = `grid sticky top-0 bg-white z-10 border-b text-sm font-medium`;\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n-    cols.forEach((label, idx) => {\r\n-      const cell = document.createElement('div');\r\n-      cell.className = 'px-3 py-2 ' + (idx===0 ? 'text-gray-600' : 'text-gray-800');\r\n-      cell.textContent = label;\r\n-      header.appendChild(cell);\r\n-    });\r\n-    agendaList.appendChild(header);\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n \r\n-    // Body\r\n-    const body = document.createElement('div');\r\n-    body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n-    agendaList.appendChild(body);\r\n+    const { start, end } = getDayRange(date);\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n \r\n-    hours.forEach(hh => {\r\n-      // Time column\r\n-      const timeCell = document.createElement('div');\r\n-      timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n-      timeCell.textContent = hh;\r\n-      body.appendChild(timeCell);\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n \r\n-      // One cell per professional\r\n-      state.profissionais.forEach(p => {\r\n-        const col = document.createElement('div');\r\n-        col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n-        col.dataset.profissionalId = p._id;\r\n-        col.dataset.hh = hh;\r\n-        body.appendChild(col);\r\n-      });\r\n-    });\r\n+    const map = list.map(a => ({\r\n+      _id: a._id,\r\n+      h: new Date(a.scheduledAt).toISOString(),\r\n+      valor: a.valor,\r\n+      pago: !!a.pago,\r\n+      pet: a.pet ? a.pet.nome : '—',\r\n+      servico: a.servico ? a.servico.nome : '—',\r\n+      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : '—',\r\n+      profissionalId: a.profissional?._id || null\r\n+    }));\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n \r\n-    // Place cards\r\n-    for (const a of state.agendamentos) {\r\n-      const d = new Date(a.h);\r\n-      const hh = `${pad(d.getHours())}:00`;\r\n-      const col = body.querySelector(`div[data-profissional-id=\"${a.profissionalId}\"][data-hh=\"${hh}\"]`);\r\n-      if (!col) continue;\r\n-\r\n-      const card = document.createElement('div');\r\n-      card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2';\r\n-      const left = document.createElement('div');\r\n-      left.innerHTML = `<div class=\"font-medium text-gray-900\">${a.pet}</div>\r\n-                        <div class=\"text-gray-600\">${a.servico}</div>\r\n-                        <div class=\"text-gray-600\">${money(a.valor)}</div>`;\r\n-      const right = document.createElement('div');\r\n-      right.className = 'text-lg';\r\n-      const dollar = document.createElement('span');\r\n-      dollar.textContent = '$';\r\n-      if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n-      right.appendChild(dollar);\r\n-\r\n-      card.appendChild(left);\r\n-      card.appendChild(right);\r\n-      col.appendChild(card);\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n+    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n     }\r\n-  }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n \r\n-  // Modal behavior\r\n-  function openAddModal() {\r\n-    if (!modal) return;\r\n-    // Reset\r\n-    state.selectedCliente = null;\r\n-    state.selectedServico = null;\r\n-    if (cliInput) { cliInput.value = ''; }\r\n-    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n-    if (petSelect) { petSelect.innerHTML = ''; }\r\n-    if (servInput) { servInput.value = ''; }\r\n-    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-    if (valorInput) { valorInput.value = ''; }\r\n-    if (horaInput) { horaInput.value = new Date().toTimeString().slice(0,5); }\r\n-\r\n-    // Load professionals (already loaded globally, but ensure select is filled)\r\n-    if (profSelect) {\r\n-      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n+    if (!valorFinal) {\r\n+      const s = await Service.findById(servicoId).select('valor').lean();\r\n+      valorFinal = s?.valor || 0;\r\n     }\r\n \r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n-    cliInput?.focus();\r\n-  }\r\n-  function closeAddModal() {\r\n-    if (!modal) return;\r\n-    modal.classList.add('hidden');\r\n-    modal.classList.remove('flex');\r\n-  }\r\n-\r\n-  // Cliente search\r\n-  async function searchClientes(term) {\r\n-    if (!term || term.length < 2) { if (cliSug){ cliSug.innerHTML=''; cliSug.classList.add('hidden'); } return; }\r\n-    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json();\r\n-    if (!cliSug) return;\r\n-    cliSug.innerHTML = list.map(u => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n-        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n-      </li>`).join('');\r\n-    cliSug.classList.remove('hidden');\r\n-    cliSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', async () => {\r\n-        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n-        if (cliInput) cliInput.value = li.dataset.nome;\r\n-        cliSug.classList.add('hidden');\r\n-        // Auto load pets for this client\r\n-        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n-        const pets = await resp.json();\r\n-        if (petSelect) {\r\n-          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-        }\r\n-      });\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: servicoId,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: valorFinal,\r\n+      pago: !!pago,\r\n+      createdBy: req.user?._id\r\n     });\r\n-  }\r\n \r\n-  // Serviço search\r\n-  async function searchServicos(term) {\r\n-    if (!term || term.length < 2) { if (servSug){ servSug.innerHTML=''; servSug.classList.add('hidden'); } return; }\r\n-    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json();\r\n-    if (!servSug) return;\r\n-    servSug.innerHTML = list.map(s => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor || 0}\">\r\n-        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${(s.grupo && s.grupo.nome) ? s.grupo.nome : ''}</div>\r\n-      </li>`).join('');\r\n-    servSug.classList.remove('hidden');\r\n-    servSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', () => {\r\n-        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n-        if (servInput) servInput.value = state.selectedServico.nome;\r\n-        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n-        servSug.classList.add('hidden');\r\n-      });\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n     });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n   }\r\n+});\r\n \r\n-  async function saveAgendamento() {\r\n-    try {\r\n-      const clienteId = state.selectedCliente?._id;\r\n-      const petId = petSelect?.value;\r\n-      const servicoId = state.selectedServico?._id;\r\n-      const profissionalId = profSelect?.value;\r\n-      const hora = horaInput?.value;\r\n-      const date = dateInput.value || todayStr();\r\n-\r\n-      if (!(clienteId && petId && servicoId && profissionalId && hora)) {\r\n-        alert('Preencha cliente, pet, serviço, profissional e hora.');\r\n-        return;\r\n-      }\r\n-\r\n-      const scheduledAt = parseTimeToDate(date, hora).toISOString();\r\n-\r\n-      const body = {\r\n-        storeId: state.selectedStoreId,\r\n-        clienteId,\r\n-        petId,\r\n-        servicoId,\r\n-        profissionalId,\r\n-        scheduledAt,\r\n-        valor: Number(valorInput?.value || 0),\r\n-        pago: false\r\n-      };\r\n-\r\n-      const resp = await api('/func/agendamentos', {\r\n-        method: 'POST',\r\n-        body: JSON.stringify(body)\r\n-      });\r\n-\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(()=>({}));\r\n-        throw new Error(err.message || 'Erro ao salvar');\r\n-      }\r\n-\r\n-      const created = await resp.json();\r\n-      state.agendamentos.push(created);\r\n-      closeAddModal();\r\n-      renderGrid();\r\n-    } catch (e) {\r\n-      console.error(e);\r\n-      alert(e.message || 'Erro ao salvar');\r\n-    }\r\n-  }\r\n-\r\n-  // Events\r\n-  addBtn?.addEventListener('click', openAddModal);\r\n-  modalClose?.addEventListener('click', closeAddModal);\r\n-  modalCancel?.addEventListener('click', closeAddModal);\r\n-  modalSave?.addEventListener('click', saveAgendamento);\r\n-\r\n-  cliInput?.addEventListener('input', debounce((e)=>searchClientes(e.target.value), 300));\r\n-  servInput?.addEventListener('input', debounce((e)=>searchServicos(e.target.value), 300));\r\n-\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-  });\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-  });\r\n-\r\n-  // Boot\r\n-  (async function init() {\r\n-    if (!dateInput.value) dateInput.value = todayStr();\r\n-    await loadStores();\r\n-    // Define selected store if the select had a value pre-set\r\n-    if (!state.selectedStoreId && storeSelect?.value) state.selectedStoreId = storeSelect.value;\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-  })();\r\n-})();\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757353793796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+SiteEoBichoTW/servidor/routes/funcAgenda.js\r\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const { start, end } = getDayRange(date);\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = list.map(a => ({\r\n+      _id: a._id,\r\n+      h: new Date(a.scheduledAt).toISOString(),\r\n+      valor: a.valor,\r\n+      pago: !!a.pago,\r\n+      pet: a.pet ? a.pet.nome : '—',\r\n+      servico: a.servico ? a.servico.nome : '—',\r\n+      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : '—',\r\n+      profissionalId: a.profissional?._id || null\r\n+    }));\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n+    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n+    if (!valorFinal) {\r\n+      const s = await Service.findById(servicoId).select('valor').lean();\r\n+      valorFinal = s?.valor || 0;\r\n+    }\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: servicoId,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: valorFinal,\r\n+      pago: !!pago,\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757353799338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const { start, end } = getDayRange(date);\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = list.map(a => ({\r\n+      _id: a._id,\r\n+      h: new Date(a.scheduledAt).toISOString(),\r\n+      valor: a.valor,\r\n+      pago: !!a.pago,\r\n+      pet: a.pet ? a.pet.nome : '—',\r\n+      servico: a.servico ? a.servico.nome : '—',\r\n+      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : '—',\r\n+      profissionalId: a.profissional?._id || null\r\n+    }));\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n+    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n+    if (!valorFinal) {\r\n+      const s = await Service.findById(servicoId).select('valor').lean();\r\n+      valorFinal = s?.valor || 0;\r\n+    }\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: servicoId,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: valorFinal,\r\n+      pago: !!pago,\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757355336950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,224 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = list.map(a => ({\r\n+      _id: a._id,\r\n+      h: new Date(a.scheduledAt).toISOString(),\r\n+      valor: a.valor,\r\n+      pago: !!a.pago,\r\n+      pet: a.pet ? a.pet.nome : '—',\r\n+      servico: a.servico ? a.servico.nome : '—',\r\n+      profissionalId: a.profissional?._id || null,\r\n+      profissional: a.profissional\r\n+        ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n+        : null\r\n+    }));\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n+    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n+    if (!valorFinal) {\r\n+      const s = await Service.findById(servicoId).select('valor').lean();\r\n+      valorFinal = s?.valor || 0;\r\n+    }\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: servicoId,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: valorFinal,\r\n+      pago: !!pago,\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757362517803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,20 +126,24 @@\n // GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n     const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+    if (!date) {\r\n+      return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+    }\r\n \r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const [y, m, d] = String(date).split('-').map(n => parseInt(n, 10));\r\n     const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n     const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n \r\n     const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      filter.store = storeId;\r\n+    }\r\n \r\n     const list = await Appointment.find(filter)\r\n       .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome')\r\n+      .populate('pet', 'nome') // traz _id e nome do pet\r\n       .populate('servico', 'nome')\r\n       .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n       .sort({ scheduledAt: 1 })\r\n       .lean();\r\n@@ -149,13 +153,15 @@\n       h: new Date(a.scheduledAt).toISOString(),\r\n       valor: a.valor,\r\n       pago: !!a.pago,\r\n       pet: a.pet ? a.pet.nome : '—',\r\n+      petId: a.pet?._id || null,                    // <-- adicionado\r\n       servico: a.servico ? a.servico.nome : '—',\r\n       profissionalId: a.profissional?._id || null,\r\n       profissional: a.profissional\r\n         ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n-        : null\r\n+        : null,\r\n+      clienteId: a.cliente ? String(a.cliente) : null // <-- adicionado (ObjectId em lean)\r\n     }));\r\n \r\n     res.json(map);\r\n   } catch (e) {\r\n@@ -221,982 +227,4 @@\n   }\r\n });\r\n \r\n module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const { start, end } = getDayRange(date);\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = list.map(a => ({\r\n-      _id: a._id,\r\n-      h: new Date(a.scheduledAt).toISOString(),\r\n-      valor: a.valor,\r\n-      pago: !!a.pago,\r\n-      pet: a.pet ? a.pet.nome : '—',\r\n-      servico: a.servico ? a.servico.nome : '—',\r\n-      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : '—',\r\n-      profissionalId: a.profissional?._id || null\r\n-    }));\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n-    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n-    if (!valorFinal) {\r\n-      const s = await Service.findById(servicoId).select('valor').lean();\r\n-      valorFinal = s?.valor || 0;\r\n-    }\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: servicoId,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: valorFinal,\r\n-      pago: !!pago,\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-SiteEoBichoTW/servidor/routes/funcAgenda.js\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const { start, end } = getDayRange(date);\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = list.map(a => ({\r\n-      _id: a._id,\r\n-      h: new Date(a.scheduledAt).toISOString(),\r\n-      valor: a.valor,\r\n-      pago: !!a.pago,\r\n-      pet: a.pet ? a.pet.nome : '—',\r\n-      servico: a.servico ? a.servico.nome : '—',\r\n-      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : '—',\r\n-      profissionalId: a.profissional?._id || null\r\n-    }));\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n-    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n-    if (!valorFinal) {\r\n-      const s = await Service.findById(servicoId).select('valor').lean();\r\n-      valorFinal = s?.valor || 0;\r\n-    }\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: servicoId,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: valorFinal,\r\n-      pago: !!pago,\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const { start, end } = getDayRange(date);\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = list.map(a => ({\r\n-      _id: a._id,\r\n-      h: new Date(a.scheduledAt).toISOString(),\r\n-      valor: a.valor,\r\n-      pago: !!a.pago,\r\n-      pet: a.pet ? a.pet.nome : '—',\r\n-      servico: a.servico ? a.servico.nome : '—',\r\n-      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : '—',\r\n-      profissionalId: a.profissional?._id || null\r\n-    }));\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n-    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n-    if (!valorFinal) {\r\n-      const s = await Service.findById(servicoId).select('valor').lean();\r\n-      valorFinal = s?.valor || 0;\r\n-    }\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: servicoId,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: valorFinal,\r\n-      pago: !!pago,\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-(function () {\r\n-  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n-  function api(url, opts={}) {\r\n-    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n-      ...opts,\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        ...(opts.headers || {}),\r\n-        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  // Elements\r\n-  const agendaList = document.getElementById('agenda-list');\r\n-  const dateInput = document.getElementById('agenda-date');\r\n-  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n-  const addBtn = document.getElementById('add-service-btn');\r\n-  const storeSelect = document.getElementById('agenda-store');\r\n-  const storeLabelVisible  = document.getElementById('agenda-store-label-visible');\r\n-\r\n-  // Modal elements\r\n-  const modal = document.getElementById('modal-add-servico');\r\n-  const modalClose = document.getElementById('modal-add-close');\r\n-  const modalCancel = document.getElementById('modal-add-cancel');\r\n-  const modalSave = document.getElementById('modal-add-save');\r\n-\r\n-  const cliInput = document.getElementById('add-cli-input');\r\n-  const cliSug = document.getElementById('add-cli-sug');\r\n-  const petSelect = document.getElementById('add-pet-select');\r\n-  const servInput = document.getElementById('add-serv-input');\r\n-  const servSug = document.getElementById('add-serv-sug');\r\n-  const valorInput = document.getElementById('add-valor');\r\n-  const horaInput = document.getElementById('add-hora');\r\n-  const profSelect = document.getElementById('add-prof-select');\r\n-\r\n-  // State\r\n-  const state = {\r\n-    stores: [],\r\n-    profissionais: [],\r\n-    agendamentos: [],\r\n-    selectedStoreId: null,\r\n-    selectedCliente: null,\r\n-    selectedServico: null\r\n-  };\r\n-\r\n-  // Helpers\r\n-  function todayStr() {\r\n-    const tz = new Date();\r\n-    return tz.toISOString().slice(0, 10);\r\n-  }\r\n-  function pad(n){ return n<10? '0'+n : ''+n; }\r\n-  function parseTimeToDate(dateISO, hhmm) {\r\n-    const [h,m] = (hhmm || '00:00').split(':').map(x=>parseInt(x,10));\r\n-    const d = new Date(dateISO);\r\n-    d.setHours(h, m, 0, 0);\r\n-    return d;\r\n-  }\r\n-  function money(v){ return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n-  function byId(id){ return document.getElementById(id); }\r\n-  function clearChildren(el){ while(el && el.firstChild) el.removeChild(el.firstChild); }\r\n-  function debounce(fn, delay=250){ let t; return (...args)=>{ clearTimeout(t); t=setTimeout(()=>fn(...args), delay); }; }\r\n-\r\n-  // Load stores\r\n-  async function loadStores() {\r\n-    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n-    const list = await resp.json();\r\n-    state.stores = Array.isArray(list) ? list : [];\r\n-    storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-    if (!state.selectedStoreId && state.stores[0]) {\r\n-      state.selectedStoreId = state.stores[0]._id;\r\n-      storeSelect.value = state.selectedStoreId;\r\n-    }\r\n-    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n-    storeLabelVisible.textContent = s ? s.nome : '—';\r\n-  }\r\n-\r\n-  // Load professionals (esteticistas) limited to the selected store\r\n-  async function loadProfissionais() {\r\n-    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n-    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n-    const list = await resp.json();\r\n-    state.profissionais = list || [];\r\n-    // Fill modal select\r\n-    profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-  }\r\n-\r\n-  // Load appointments for the day/store\r\n-  async function loadAgendamentos() {\r\n-    const date = dateInput.value || todayStr();\r\n-    const resp = await api(`/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`);\r\n-    state.agendamentos = await resp.json();\r\n-  }\r\n-\r\n-  // Render grid with columns per professional\r\n-  function renderGrid() {\r\n-    const date = dateInput.value || todayStr();\r\n-    dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-    const store = state.stores.find(s => s._id === state.selectedStoreId);\r\n-    storeLabelVisible.textContent = store ? store.nome : '—';\r\n-\r\n-    // Hours rows (07:00 - 20:00)\r\n-    const hours = [];\r\n-    for (let h = 7; h <= 20; h++) hours.push(`${pad(h)}:00`);\r\n-\r\n-    // Build header (first empty cell + professional names)\r\n-    const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n-    const colCount = cols.length;\r\n-\r\n-    // Grid container\r\n-    clearChildren(agendaList);\r\n-\r\n-    const header = document.createElement('div');\r\n-    header.className = `grid sticky top-0 bg-white z-10 border-b text-sm font-medium`\r\n-      + ` grid-cols-${Math.min(colCount, 12)}`;\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n-    cols.forEach((label, idx) => {\r\n-      const cell = document.createElement('div');\r\n-      cell.className = 'px-3 py-2 ' + (idx===0 ? 'text-gray-600' : 'text-gray-800');\r\n-      cell.textContent = label;\r\n-      header.appendChild(cell);\r\n-    });\r\n-    agendaList.appendChild(header);\r\n-\r\n-    // Body\r\n-    const body = document.createElement('div');\r\n-    body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n-    agendaList.appendChild(body);\r\n-\r\n-    hours.forEach(hh => {\r\n-      // Time column\r\n-      const timeCell = document.createElement('div');\r\n-      timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n-      timeCell.textContent = hh;\r\n-      body.appendChild(timeCell);\r\n-\r\n-      // One cell per professional\r\n-      state.profissionais.forEach(p => {\r\n-        const col = document.createElement('div');\r\n-        col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n-        col.dataset.profissionalId = p._id;\r\n-        col.dataset.hh = hh;\r\n-        body.appendChild(col);\r\n-      });\r\n-    });\r\n-\r\n-    // Place cards\r\n-    for (const a of state.agendamentos) {\r\n-      const d = new Date(a.h);\r\n-      const hh = `${pad(d.getHours())}:00`;\r\n-      const col = body.querySelector(`div[data-profissional-id=\"${a.profissionalId}\"][data-hh=\"${hh}\"]`);\r\n-      if (!col) continue;\r\n-\r\n-      const card = document.createElement('div');\r\n-      card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2';\r\n-      const left = document.createElement('div');\r\n-      left.innerHTML = `<div class=\"font-medium text-gray-900\">${a.pet}</div>\r\n-                        <div class=\"text-gray-600\">${a.servico}</div>\r\n-                        <div class=\"text-gray-600\">${money(a.valor)}</div>`;\r\n-      const right = document.createElement('div');\r\n-      right.className = 'text-lg';\r\n-      const dollar = document.createElement('span');\r\n-      dollar.textContent = '$';\r\n-      if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n-      right.appendChild(dollar);\r\n-\r\n-      card.appendChild(left);\r\n-      card.appendChild(right);\r\n-      col.appendChild(card);\r\n-    }\r\n-  }\r\n-\r\n-  // Modal behavior\r\n-  function openAddModal() {\r\n-    // Reset\r\n-    state.selectedCliente = null;\r\n-    state.selectedServico = null;\r\n-    cliInput.value = '';\r\n-    cliSug.innerHTML = '';\r\n-    cliSug.classList.add('hidden');\r\n-    petSelect.innerHTML = '';\r\n-    servInput.value = '';\r\n-    servSug.innerHTML = '';\r\n-    servSug.classList.add('hidden');\r\n-    valorInput.value = '';\r\n-    horaInput.value = new Date().toTimeString().slice(0,5);\r\n-\r\n-    // Load professionals (already loaded globally, but ensure select is filled)\r\n-    profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-\r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n-    cliInput.focus();\r\n-  }\r\n-  function closeAddModal() {\r\n-    modal.classList.add('hidden');\r\n-    modal.classList.remove('flex');\r\n-  }\r\n-\r\n-  // Cliente search\r\n-  async function searchClientes(term) {\r\n-    if (!term || term.length < 2) { cliSug.innerHTML=''; cliSug.classList.add('hidden'); return; }\r\n-    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json();\r\n-    cliSug.innerHTML = list.map(u => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n-        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n-      </li>`).join('');\r\n-    cliSug.classList.remove('hidden');\r\n-    cliSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', async () => {\r\n-        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n-        cliInput.value = li.dataset.nome;\r\n-        cliSug.classList.add('hidden');\r\n-        // Auto load pets for this client\r\n-        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n-        const pets = await resp.json();\r\n-        petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  // Serviço search\r\n-  async function searchServicos(term) {\r\n-    if (!term || term.length < 2) { servSug.innerHTML=''; servSug.classList.add('hidden'); return; }\r\n-    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json();\r\n-    servSug.innerHTML = list.map(s => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor || 0}\">\r\n-        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${(s.grupo && s.grupo.nome) ? s.grupo.nome : ''}</div>\r\n-      </li>`).join('');\r\n-    servSug.classList.remove('hidden');\r\n-    servSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', () => {\r\n-        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n-        servInput.value = state.selectedServico.nome;\r\n-        valorInput.value = state.selectedServico.valor.toFixed(2);\r\n-        servSug.classList.add('hidden');\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  async function saveAgendamento() {\r\n-    try {\r\n-      const clienteId = state.selectedCliente?._id;\r\n-      const petId = petSelect.value;\r\n-      const servicoId = state.selectedServico?._id;\r\n-      const profissionalId = profSelect.value;\r\n-      const hora = horaInput.value;\r\n-      const date = dateInput.value || todayStr();\r\n-\r\n-      if (!(clienteId && petId && servicoId && profissionalId && hora)) {\r\n-        alert('Preencha cliente, pet, serviço, profissional e hora.');\r\n-        return;\r\n-      }\r\n-\r\n-      const scheduledAt = parseTimeToDate(date, hora).toISOString();\r\n-\r\n-      const body = {\r\n-        storeId: state.selectedStoreId,\r\n-        clienteId,\r\n-        petId,\r\n-        servicoId,\r\n-        profissionalId,\r\n-        scheduledAt,\r\n-        valor: Number(valorInput.value || 0),\r\n-        pago: false\r\n-      };\r\n-\r\n-      const resp = await api('/func/agendamentos', {\r\n-        method: 'POST',\r\n-        body: JSON.stringify(body)\r\n-      });\r\n-\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(()=>({}));\r\n-        throw new Error(err.message || 'Erro ao salvar');\r\n-      }\r\n-\r\n-      const created = await resp.json();\r\n-      state.agendamentos.push(created);\r\n-      closeAddModal();\r\n-      renderGrid();\r\n-    } catch (e) {\r\n-      console.error(e);\r\n-      alert(e.message || 'Erro ao salvar');\r\n-    }\r\n-  }\r\n-\r\n-  // Events\r\n-  addBtn?.addEventListener('click', openAddModal);\r\n-  modalClose?.addEventListener('click', closeAddModal);\r\n-  modalCancel?.addEventListener('click', closeAddModal);\r\n-  modalSave?.addEventListener('click', saveAgendamento);\r\n-\r\n-  cliInput?.addEventListener('input', debounce((e)=>searchClientes(e.target.value), 300));\r\n-  servInput?.addEventListener('input', debounce((e)=>searchServicos(e.target.value), 300));\r\n-\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-  });\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-  });\r\n-\r\n-  // Boot\r\n-  (async function init() {\r\n-    if (!dateInput.value) dateInput.value = todayStr();\r\n-    await loadStores();\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-  })();\r\n-})();\r\n"
                },
                {
                    "date": 1757362546557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,250 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) {\r\n+      return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+    }\r\n+\r\n+    const [y, m, d] = String(date).split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      filter.store = storeId;\r\n+    }\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome') // traz _id e nome do pet\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = list.map(a => ({\r\n+      _id: a._id,\r\n+      h: new Date(a.scheduledAt).toISOString(),\r\n+      valor: a.valor,\r\n+      pago: !!a.pago,\r\n+      pet: a.pet ? a.pet.nome : '—',\r\n+      petId: a.pet?._id || null,                    // <-- adicionado\r\n+      servico: a.servico ? a.servico.nome : '—',\r\n+      profissionalId: a.profissional?._id || null,\r\n+      profissional: a.profissional\r\n+        ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n+        : null,\r\n+      clienteId: a.cliente ? String(a.cliente) : null // <-- adicionado (ObjectId em lean)\r\n+    }));\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n+    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n+    if (!valorFinal) {\r\n+      const s = await Service.findById(servicoId).select('valor').lean();\r\n+      valorFinal = s?.valor || 0;\r\n+    }\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: servicoId,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: valorFinal,\r\n+      pago: !!pago,\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757362557563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,278 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) {\r\n+      return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+    }\r\n+\r\n+    const [y, m, d] = String(date).split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      filter.store = storeId;\r\n+    }\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome') // traz _id e nome do pet\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = list.map(a => ({\r\n+      _id: a._id,\r\n+      h: new Date(a.scheduledAt).toISOString(),\r\n+      valor: a.valor,\r\n+      pago: !!a.pago,\r\n+      pet: a.pet ? a.pet.nome : '—',\r\n+      petId: a.pet?._id || null,                    // <-- adicionado\r\n+      servico: a.servico ? a.servico.nome : '—',\r\n+      profissionalId: a.profissional?._id || null,\r\n+      profissional: a.profissional\r\n+        ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n+        : null,\r\n+      clienteId: a.cliente ? String(a.cliente) : null // <-- adicionado (ObjectId em lean)\r\n+    }));\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n+    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n+    if (!valorFinal) {\r\n+      const s = await Service.findById(servicoId).select('valor').lean();\r\n+      valorFinal = s?.valor || 0;\r\n+    }\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: servicoId,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: valorFinal,\r\n+      pago: !!pago,\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757363723097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,344 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId,\r\n+      clienteId,\r\n+      petId,\r\n+      servicoId,\r\n+      profissionalId,\r\n+      scheduledAt,\r\n+      valor,\r\n+      pago\r\n+    } = req.body || {};\r\n+\r\n+    // Monta somente campos permitidos e válidos\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (petId && mongoose.Types.ObjectId.isValid(petId)) set.pet = petId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId;\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(\r\n+      id,\r\n+      { $set: set },\r\n+      { new: true }\r\n+    )\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    // Retorno no mesmo formato usado pela listagem\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) {\r\n+      return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+    }\r\n+\r\n+    const [y, m, d] = String(date).split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      filter.store = storeId;\r\n+    }\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome') // traz _id e nome do pet\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = list.map(a => ({\r\n+      _id: a._id,\r\n+      h: new Date(a.scheduledAt).toISOString(),\r\n+      valor: a.valor,\r\n+      pago: !!a.pago,\r\n+      pet: a.pet ? a.pet.nome : '—',\r\n+      petId: a.pet?._id || null,                    // <-- adicionado\r\n+      servico: a.servico ? a.servico.nome : '—',\r\n+      profissionalId: a.profissional?._id || null,\r\n+      profissional: a.profissional\r\n+        ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n+        : null,\r\n+      clienteId: a.cliente ? String(a.cliente) : null // <-- adicionado (ObjectId em lean)\r\n+    }));\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n+    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n+    if (!valorFinal) {\r\n+      const s = await Service.findById(servicoId).select('valor').lean();\r\n+      valorFinal = s?.valor || 0;\r\n+    }\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: servicoId,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: valorFinal,\r\n+      pago: !!pago,\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757365408519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,320 +192,35 @@\n // GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n     const { date, storeId } = req.query;\r\n-    if (!date) {\r\n-      return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-    }\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n \r\n-    const [y, m, d] = String(date).split('-').map(n => parseInt(n, 10));\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n     const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n     const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n \r\n     const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      filter.store = storeId;\r\n-    }\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n \r\n     const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome') // traz _id e nome do pet\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = list.map(a => ({\r\n-      _id: a._id,\r\n-      h: new Date(a.scheduledAt).toISOString(),\r\n-      valor: a.valor,\r\n-      pago: !!a.pago,\r\n-      pet: a.pet ? a.pet.nome : '—',\r\n-      petId: a.pet?._id || null,                    // <-- adicionado\r\n-      servico: a.servico ? a.servico.nome : '—',\r\n-      profissionalId: a.profissional?._id || null,\r\n-      profissional: a.profissional\r\n-        ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n-        : null,\r\n-      clienteId: a.cliente ? String(a.cliente) : null // <-- adicionado (ObjectId em lean)\r\n-    }));\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n-    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n-    if (!valorFinal) {\r\n-      const s = await Service.findById(servicoId).select('valor').lean();\r\n-      valorFinal = s?.valor || 0;\r\n-    }\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: servicoId,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: valorFinal,\r\n-      pago: !!pago,\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n       .populate('pet', 'nome')\r\n       .populate('servico', 'nome')\r\n       .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) {\r\n-      return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-    }\r\n-\r\n-    const [y, m, d] = String(date).split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      filter.store = storeId;\r\n-    }\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome') // traz _id e nome do pet\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n       .sort({ scheduledAt: 1 })\r\n       .lean();\r\n \r\n     const map = list.map(a => ({\r\n       _id: a._id,\r\n       h: new Date(a.scheduledAt).toISOString(),\r\n       valor: a.valor,\r\n       pago: !!a.pago,\r\n+      status: a.status || 'agendado',\r\n       pet: a.pet ? a.pet.nome : '—',\r\n-      petId: a.pet?._id || null,                    // <-- adicionado\r\n       servico: a.servico ? a.servico.nome : '—',\r\n       profissionalId: a.profissional?._id || null,\r\n-      profissional: a.profissional\r\n-        ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n-        : null,\r\n-      clienteId: a.cliente ? String(a.cliente) : null // <-- adicionado (ObjectId em lean)\r\n+      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null\r\n     }));\r\n \r\n     res.json(map);\r\n   } catch (e) {\r\n@@ -619,484 +334,4 @@\n   }\r\n });\r\n \r\n module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) {\r\n-      return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-    }\r\n-\r\n-    const [y, m, d] = String(date).split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      filter.store = storeId;\r\n-    }\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome') // traz _id e nome do pet\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = list.map(a => ({\r\n-      _id: a._id,\r\n-      h: new Date(a.scheduledAt).toISOString(),\r\n-      valor: a.valor,\r\n-      pago: !!a.pago,\r\n-      pet: a.pet ? a.pet.nome : '—',\r\n-      petId: a.pet?._id || null,                    // <-- adicionado\r\n-      servico: a.servico ? a.servico.nome : '—',\r\n-      profissionalId: a.profissional?._id || null,\r\n-      profissional: a.profissional\r\n-        ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n-        : null,\r\n-      clienteId: a.cliente ? String(a.cliente) : null // <-- adicionado (ObjectId em lean)\r\n-    }));\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n-    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n-    if (!valorFinal) {\r\n-      const s = await Service.findById(servicoId).select('valor').lean();\r\n-      valorFinal = s?.valor || 0;\r\n-    }\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: servicoId,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: valorFinal,\r\n-      pago: !!pago,\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) {\r\n-      return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-    }\r\n-\r\n-    const [y, m, d] = String(date).split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      filter.store = storeId;\r\n-    }\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome') // traz _id e nome do pet\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = list.map(a => ({\r\n-      _id: a._id,\r\n-      h: new Date(a.scheduledAt).toISOString(),\r\n-      valor: a.valor,\r\n-      pago: !!a.pago,\r\n-      pet: a.pet ? a.pet.nome : '—',\r\n-      petId: a.pet?._id || null,                    // <-- adicionado\r\n-      servico: a.servico ? a.servico.nome : '—',\r\n-      profissionalId: a.profissional?._id || null,\r\n-      profissional: a.profissional\r\n-        ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n-        : null,\r\n-      clienteId: a.cliente ? String(a.cliente) : null // <-- adicionado (ObjectId em lean)\r\n-    }));\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n-    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n-    if (!valorFinal) {\r\n-      const s = await Service.findById(servicoId).select('valor').lean();\r\n-      valorFinal = s?.valor || 0;\r\n-    }\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: servicoId,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: valorFinal,\r\n-      pago: !!pago,\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1757365427551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,342 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId,\r\n+      clienteId,\r\n+      petId,\r\n+      servicoId,\r\n+      profissionalId,\r\n+      scheduledAt,\r\n+      valor,\r\n+      pago\r\n+    } = req.body || {};\r\n+\r\n+    // Monta somente campos permitidos e válidos\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (petId && mongoose.Types.ObjectId.isValid(petId)) set.pet = petId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId;\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(\r\n+      id,\r\n+      { $set: set },\r\n+      { new: true }\r\n+    )\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    // Retorno no mesmo formato usado pela listagem\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = list.map(a => ({\r\n+      _id: a._id,\r\n+      h: new Date(a.scheduledAt).toISOString(),\r\n+      valor: a.valor,\r\n+      pago: !!a.pago,\r\n+      status: a.status || 'agendado',\r\n+      pet: a.pet ? a.pet.nome : '—',\r\n+      servico: a.servico ? a.servico.nome : '—',\r\n+      profissionalId: a.profissional?._id || null,\r\n+      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null\r\n+    }));\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status } = req.body || {};\r\n+    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n+\r\n+    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n+    if (!valorFinal) {\r\n+      const serv = await Service.findById(servicoId).select('valor').lean();\r\n+      valorFinal = serv?.valor || 0;\r\n+    }\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: servicoId,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: valorFinal,\r\n+      pago: !!pago,\r\n+      status: statusFinal,\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao salvar' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757365780997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,353 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId,\r\n+      clienteId,\r\n+      petId,\r\n+      servicoId,\r\n+      profissionalId,\r\n+      scheduledAt,\r\n+      valor,\r\n+      pago\r\n+    } = req.body || {};\r\n+\r\n+    // Monta somente campos permitidos e válidos\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (petId && mongoose.Types.ObjectId.isValid(petId)) set.pet = petId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId;\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(\r\n+      id,\r\n+      { $set: set },\r\n+      { new: true }\r\n+    )\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    // Retorno no mesmo formato usado pela listagem\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email') // para clienteNome\r\n+      .populate('pet', 'nome')                                            // mantém _id por padrão\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = list.map(a => ({\r\n+      _id: a._id,\r\n+      h: new Date(a.scheduledAt).toISOString(),\r\n+      valor: a.valor,\r\n+      pago: !!a.pago,\r\n+      status: a.status || 'agendado',\r\n+      // cliente\r\n+      clienteId: a.cliente ? String(a.cliente._id || a.cliente) : null,\r\n+      clienteNome: a.cliente\r\n+        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null)\r\n+        : null,\r\n+      // pet\r\n+      pet: a.pet ? a.pet.nome : '—',\r\n+      petId: a.pet?._id || null,\r\n+      // serviço/profissional\r\n+      servico: a.servico ? a.servico.nome : '—',\r\n+      profissionalId: a.profissional?._id || null,\r\n+      profissional: a.profissional\r\n+        ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n+        : null\r\n+    }));\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status } = req.body || {};\r\n+    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n+\r\n+    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n+    if (!valorFinal) {\r\n+      const serv = await Service.findById(servicoId).select('valor').lean();\r\n+      valorFinal = serv?.valor || 0;\r\n+    }\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: servicoId,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: valorFinal,\r\n+      pago: !!pago,\r\n+      status: statusFinal,\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao salvar' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757366222352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,352 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId,\r\n+      clienteId,\r\n+      petId,\r\n+      servicoId,\r\n+      profissionalId,\r\n+      scheduledAt,\r\n+      valor,\r\n+      pago\r\n+    } = req.body || {};\r\n+\r\n+    // Monta somente campos permitidos e válidos\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (petId && mongoose.Types.ObjectId.isValid(petId)) set.pet = petId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId;\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(\r\n+      id,\r\n+      { $set: set },\r\n+      { new: true }\r\n+    )\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    // Retorno no mesmo formato usado pela listagem\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = list.map(a => ({\r\n+      _id: a._id,\r\n+      h: new Date(a.scheduledAt).toISOString(),\r\n+      valor: a.valor,\r\n+      pago: !!a.pago,\r\n+      status: a.status || 'agendado',\r\n+      // NOVOS CAMPOS QUE O MODAL DE EDIÇÃO PRECISA:\r\n+      storeId: a.store ? String(a.store._id || a.store) : null,\r\n+      clienteId: a.cliente ? String(a.cliente._id || a.cliente) : null,\r\n+      clienteNome: a.cliente\r\n+        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null)\r\n+        : null,\r\n+      pet: a.pet ? a.pet.nome : '—',\r\n+      petId: a.pet?._id || null,\r\n+      servico: a.servico ? a.servico.nome : '—',\r\n+      profissionalId: a.profissional?._id || null,\r\n+      profissional: a.profissional\r\n+        ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n+        : null\r\n+    }));\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status } = req.body || {};\r\n+    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n+\r\n+    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n+    if (!valorFinal) {\r\n+      const serv = await Service.findById(servicoId).select('valor').lean();\r\n+      valorFinal = serv?.valor || 0;\r\n+    }\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: servicoId,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: valorFinal,\r\n+      pago: !!pago,\r\n+      status: statusFinal,\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao salvar' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757368169710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n     const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n     if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n \r\n     const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n       .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n       .populate('pet', 'nome')\r\n       .populate('servico', 'nome')\r\n       .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n@@ -215,716 +215,15 @@\n       _id: a._id,\r\n       h: new Date(a.scheduledAt).toISOString(),\r\n       valor: a.valor,\r\n       pago: !!a.pago,\r\n-      status: a.status || 'agendado',\r\n-      // NOVOS CAMPOS QUE O MODAL DE EDIÇÃO PRECISA:\r\n       storeId: a.store ? String(a.store._id || a.store) : null,\r\n       clienteId: a.cliente ? String(a.cliente._id || a.cliente) : null,\r\n-      clienteNome: a.cliente\r\n-        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null)\r\n-        : null,\r\n+      clienteNome: a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null,\r\n       pet: a.pet ? a.pet.nome : '—',\r\n       petId: a.pet?._id || null,\r\n       servico: a.servico ? a.servico.nome : '—',\r\n       profissionalId: a.profissional?._id || null,\r\n-      profissional: a.profissional\r\n-        ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n-        : null\r\n-    }));\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status } = req.body || {};\r\n-    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n-\r\n-    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n-    if (!valorFinal) {\r\n-      const serv = await Service.findById(servicoId).select('valor').lean();\r\n-      valorFinal = serv?.valor || 0;\r\n-    }\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: servicoId,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: valorFinal,\r\n-      pago: !!pago,\r\n-      status: statusFinal,\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao salvar' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-\r\n-    const {\r\n-      storeId,\r\n-      clienteId,\r\n-      petId,\r\n-      servicoId,\r\n-      profissionalId,\r\n-      scheduledAt,\r\n-      valor,\r\n-      pago\r\n-    } = req.body || {};\r\n-\r\n-    // Monta somente campos permitidos e válidos\r\n-    const set = {};\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n-    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (petId && mongoose.Types.ObjectId.isValid(petId)) set.pet = petId;\r\n-    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId;\r\n-    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n-    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n-    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n-    if (scheduledAt) {\r\n-      const d = new Date(scheduledAt);\r\n-      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n-      set.scheduledAt = d;\r\n-    }\r\n-\r\n-    const full = await Appointment.findByIdAndUpdate(\r\n-      id,\r\n-      { $set: set },\r\n-      { new: true }\r\n-    )\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    if (!full) {\r\n-      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-    }\r\n-\r\n-    // Retorno no mesmo formato usado pela listagem\r\n-    return res.json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('PUT /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email') // para clienteNome\r\n-      .populate('pet', 'nome')                                            // mantém _id por padrão\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = list.map(a => ({\r\n-      _id: a._id,\r\n-      h: new Date(a.scheduledAt).toISOString(),\r\n-      valor: a.valor,\r\n-      pago: !!a.pago,\r\n-      status: a.status || 'agendado',\r\n-      // cliente\r\n-      clienteId: a.cliente ? String(a.cliente._id || a.cliente) : null,\r\n-      clienteNome: a.cliente\r\n-        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null)\r\n-        : null,\r\n-      // pet\r\n-      pet: a.pet ? a.pet.nome : '—',\r\n-      petId: a.pet?._id || null,\r\n-      // serviço/profissional\r\n-      servico: a.servico ? a.servico.nome : '—',\r\n-      profissionalId: a.profissional?._id || null,\r\n-      profissional: a.profissional\r\n-        ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n-        : null\r\n-    }));\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status } = req.body || {};\r\n-    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n-\r\n-    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n-    if (!valorFinal) {\r\n-      const serv = await Service.findById(servicoId).select('valor').lean();\r\n-      valorFinal = serv?.valor || 0;\r\n-    }\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: servicoId,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: valorFinal,\r\n-      pago: !!pago,\r\n-      status: statusFinal,\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao salvar' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-\r\n-    const {\r\n-      storeId,\r\n-      clienteId,\r\n-      petId,\r\n-      servicoId,\r\n-      profissionalId,\r\n-      scheduledAt,\r\n-      valor,\r\n-      pago\r\n-    } = req.body || {};\r\n-\r\n-    // Monta somente campos permitidos e válidos\r\n-    const set = {};\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n-    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (petId && mongoose.Types.ObjectId.isValid(petId)) set.pet = petId;\r\n-    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId;\r\n-    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n-    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n-    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n-    if (scheduledAt) {\r\n-      const d = new Date(scheduledAt);\r\n-      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n-      set.scheduledAt = d;\r\n-    }\r\n-\r\n-    const full = await Appointment.findByIdAndUpdate(\r\n-      id,\r\n-      { $set: set },\r\n-      { new: true }\r\n-    )\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    if (!full) {\r\n-      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-    }\r\n-\r\n-    // Retorno no mesmo formato usado pela listagem\r\n-    return res.json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('PUT /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = list.map(a => ({\r\n-      _id: a._id,\r\n-      h: new Date(a.scheduledAt).toISOString(),\r\n-      valor: a.valor,\r\n-      pago: !!a.pago,\r\n-      status: a.status || 'agendado',\r\n-      pet: a.pet ? a.pet.nome : '—',\r\n-      servico: a.servico ? a.servico.nome : '—',\r\n-      profissionalId: a.profissional?._id || null,\r\n       profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null\r\n     }));\r\n \r\n     res.json(map);\r\n@@ -1044,341 +343,4 @@\n   }\r\n });\r\n \r\n module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-\r\n-    const {\r\n-      storeId,\r\n-      clienteId,\r\n-      petId,\r\n-      servicoId,\r\n-      profissionalId,\r\n-      scheduledAt,\r\n-      valor,\r\n-      pago\r\n-    } = req.body || {};\r\n-\r\n-    // Monta somente campos permitidos e válidos\r\n-    const set = {};\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n-    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (petId && mongoose.Types.ObjectId.isValid(petId)) set.pet = petId;\r\n-    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId;\r\n-    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n-    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n-    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n-    if (scheduledAt) {\r\n-      const d = new Date(scheduledAt);\r\n-      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n-      set.scheduledAt = d;\r\n-    }\r\n-\r\n-    const full = await Appointment.findByIdAndUpdate(\r\n-      id,\r\n-      { $set: set },\r\n-      { new: true }\r\n-    )\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    if (!full) {\r\n-      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-    }\r\n-\r\n-    // Retorno no mesmo formato usado pela listagem\r\n-    return res.json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('PUT /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = list.map(a => ({\r\n-      _id: a._id,\r\n-      h: new Date(a.scheduledAt).toISOString(),\r\n-      valor: a.valor,\r\n-      pago: !!a.pago,\r\n-      status: a.status || 'agendado',\r\n-      pet: a.pet ? a.pet.nome : '—',\r\n-      servico: a.servico ? a.servico.nome : '—',\r\n-      profissionalId: a.profissional?._id || null,\r\n-      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null\r\n-    }));\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n-    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n-    if (!valorFinal) {\r\n-      const s = await Service.findById(servicoId).select('valor').lean();\r\n-      valorFinal = s?.valor || 0;\r\n-    }\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: servicoId,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: valorFinal,\r\n-      pago: !!pago,\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1757368213067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,28 +17,18 @@\n \r\n router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n     const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n \r\n     const {\r\n-      storeId,\r\n-      clienteId,\r\n-      petId,\r\n-      servicoId,\r\n-      profissionalId,\r\n-      scheduledAt,\r\n-      valor,\r\n-      pago\r\n+      storeId, clienteId, petId, servicoId,\r\n+      profissionalId, scheduledAt, valor, pago\r\n     } = req.body || {};\r\n \r\n-    // Monta somente campos permitidos e válidos\r\n     const set = {};\r\n     if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n     if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (petId && mongoose.Types.ObjectId.isValid(petId)) set.pet = petId;\r\n     if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId;\r\n     if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n     if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n     if (typeof pago !== 'undefined') set.pago = !!pago;\r\n@@ -47,33 +37,42 @@\n       if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n       set.scheduledAt = d;\r\n     }\r\n \r\n-    const full = await Appointment.findByIdAndUpdate(\r\n-      id,\r\n-      { $set: set },\r\n-      { new: true }\r\n-    )\r\n+    // Se trocar o pet, valida se pertence ao cliente do agendamento\r\n+    if (petId && mongoose.Types.ObjectId.isValid(petId)) {\r\n+      // pega cliente alvo (do body, do set ou do doc atual)\r\n+      let clienteTarget = clienteId;\r\n+      if (!clienteTarget) {\r\n+        const current = await Appointment.findById(id).select('cliente').lean();\r\n+        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n+      }\r\n+      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n+\r\n+      const pet = await Pet.findById(petId).select('owner').lean();\r\n+      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+      if (String(pet.owner) !== String(clienteTarget)) {\r\n+        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n+      }\r\n+      set.pet = petId;\r\n+    }\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n       .populate('pet', 'nome')\r\n       .populate('servico', 'nome')\r\n       .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n       .lean();\r\n \r\n-    if (!full) {\r\n-      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-    }\r\n+    if (!full) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n \r\n-    // Retorno no mesmo formato usado pela listagem\r\n-    return res.json({\r\n+    res.json({\r\n       _id: full._id,\r\n       h: new Date(full.scheduledAt).toISOString(),\r\n       valor: full.valor,\r\n       pago: !!full.pago,\r\n       pet: full.pet ? full.pet.nome : '—',\r\n       servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n       profissionalId: full.profissional?._id || null\r\n     });\r\n   } catch (e) {\r\n     console.error('PUT /func/agendamentos/:id', e);\r\n"
                },
                {
                    "date": 1757368230270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -341,5 +341,20 @@\n     res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n   }\r\n });\r\n \r\n+router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n+\r\n+    const del = await Appointment.findByIdAndDelete(id).lean();\r\n+    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+\r\n+    return res.json({ ok: true });\r\n+  } catch (e) {\r\n+    console.error('DELETE /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n+  }\r\n+});\r\n+\r\n module.exports = router;\r\n"
                },
                {
                    "date": 1757370404784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,376 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId, clienteId, petId, servicoId,\r\n+      profissionalId, scheduledAt, valor, pago, status\r\n+    } = req.body || {};\r\n+\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId;\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    // NEW: valida e aplica STATUS\r\n+    if (typeof status !== 'undefined') {\r\n+      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+      const s = String(status);\r\n+      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n+      set.status = s;\r\n+    }\r\n+\r\n+    // Troca de PET (mantida)\r\n+    if (petId && mongoose.Types.ObjectId.isValid(petId)) {\r\n+      let clienteTarget = clienteId;\r\n+      if (!clienteTarget) {\r\n+        const current = await Appointment.findById(id).select('cliente').lean();\r\n+        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n+      }\r\n+      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n+\r\n+      const pet = await Pet.findById(petId).select('owner').lean();\r\n+      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+      if (String(pet.owner) !== String(clienteTarget)) {\r\n+        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n+      }\r\n+      set.pet = petId;\r\n+    }\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = list.map(a => ({\r\n+      _id: a._id,\r\n+      h: new Date(a.scheduledAt).toISOString(),\r\n+      valor: a.valor,\r\n+      pago: !!a.pago,\r\n+      storeId: a.store ? String(a.store._id || a.store) : null,\r\n+      clienteId: a.cliente ? String(a.cliente._id || a.cliente) : null,\r\n+      clienteNome: a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null,\r\n+      pet: a.pet ? a.pet.nome : '—',\r\n+      petId: a.pet?._id || null,\r\n+      servico: a.servico ? a.servico.nome : '—',\r\n+      profissionalId: a.profissional?._id || null,\r\n+      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null\r\n+    }));\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status } = req.body || {};\r\n+    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n+\r\n+    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n+    if (!valorFinal) {\r\n+      const serv = await Service.findById(servicoId).select('valor').lean();\r\n+      valorFinal = serv?.valor || 0;\r\n+    }\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: servicoId,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: valorFinal,\r\n+      pago: !!pago,\r\n+      status: statusFinal,\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao salvar' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n+\r\n+    const del = await Appointment.findByIdAndDelete(id).lean();\r\n+    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+\r\n+    return res.json({ ok: true });\r\n+  } catch (e) {\r\n+    console.error('DELETE /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757372202085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,369 +217,9 @@\n     const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n     if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n \r\n     const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = list.map(a => ({\r\n-      _id: a._id,\r\n-      h: new Date(a.scheduledAt).toISOString(),\r\n-      valor: a.valor,\r\n-      pago: !!a.pago,\r\n-      storeId: a.store ? String(a.store._id || a.store) : null,\r\n-      clienteId: a.cliente ? String(a.cliente._id || a.cliente) : null,\r\n-      clienteNome: a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null,\r\n-      pet: a.pet ? a.pet.nome : '—',\r\n-      petId: a.pet?._id || null,\r\n-      servico: a.servico ? a.servico.nome : '—',\r\n-      profissionalId: a.profissional?._id || null,\r\n-      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null\r\n-    }));\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status } = req.body || {};\r\n-    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n-\r\n-    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n-    if (!valorFinal) {\r\n-      const serv = await Service.findById(servicoId).select('valor').lean();\r\n-      valorFinal = serv?.valor || 0;\r\n-    }\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: servicoId,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: valorFinal,\r\n-      pago: !!pago,\r\n-      status: statusFinal,\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n       .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao salvar' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n-\r\n-    const del = await Appointment.findByIdAndDelete(id).lean();\r\n-    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-\r\n-    return res.json({ ok: true });\r\n-  } catch (e) {\r\n-    console.error('DELETE /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n-\r\n-    const {\r\n-      storeId, clienteId, petId, servicoId,\r\n-      profissionalId, scheduledAt, valor, pago\r\n-    } = req.body || {};\r\n-\r\n-    const set = {};\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n-    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId;\r\n-    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n-    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n-    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n-    if (scheduledAt) {\r\n-      const d = new Date(scheduledAt);\r\n-      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n-      set.scheduledAt = d;\r\n-    }\r\n-\r\n-    // Se trocar o pet, valida se pertence ao cliente do agendamento\r\n-    if (petId && mongoose.Types.ObjectId.isValid(petId)) {\r\n-      // pega cliente alvo (do body, do set ou do doc atual)\r\n-      let clienteTarget = clienteId;\r\n-      if (!clienteTarget) {\r\n-        const current = await Appointment.findById(id).select('cliente').lean();\r\n-        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n-      }\r\n-      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n-\r\n-      const pet = await Pet.findById(petId).select('owner').lean();\r\n-      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-      if (String(pet.owner) !== String(clienteTarget)) {\r\n-        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n-      }\r\n-      set.pet = petId;\r\n-    }\r\n-\r\n-    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    if (!full) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-\r\n-    res.json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('PUT /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n       .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n       .populate('pet', 'nome')\r\n       .populate('servico', 'nome')\r\n       .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n@@ -590,16 +230,21 @@\n       _id: a._id,\r\n       h: new Date(a.scheduledAt).toISOString(),\r\n       valor: a.valor,\r\n       pago: !!a.pago,\r\n+      status: a.status || 'agendado',\r\n       storeId: a.store ? String(a.store._id || a.store) : null,\r\n       clienteId: a.cliente ? String(a.cliente._id || a.cliente) : null,\r\n-      clienteNome: a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null,\r\n+      clienteNome: a.cliente\r\n+        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null)\r\n+        : null,\r\n       pet: a.pet ? a.pet.nome : '—',\r\n       petId: a.pet?._id || null,\r\n       servico: a.servico ? a.servico.nome : '—',\r\n       profissionalId: a.profissional?._id || null,\r\n-      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null\r\n+      profissional: a.profissional\r\n+        ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n+        : null\r\n     }));\r\n \r\n     res.json(map);\r\n   } catch (e) {\r\n"
                },
                {
                    "date": 1757373363085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,18 +233,14 @@\n       pago: !!a.pago,\r\n       status: a.status || 'agendado',\r\n       storeId: a.store ? String(a.store._id || a.store) : null,\r\n       clienteId: a.cliente ? String(a.cliente._id || a.cliente) : null,\r\n-      clienteNome: a.cliente\r\n-        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null)\r\n-        : null,\r\n+      clienteNome: a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null,\r\n       pet: a.pet ? a.pet.nome : '—',\r\n       petId: a.pet?._id || null,\r\n       servico: a.servico ? a.servico.nome : '—',\r\n       profissionalId: a.profissional?._id || null,\r\n-      profissional: a.profissional\r\n-        ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial)\r\n-        : null\r\n+      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null\r\n     }));\r\n \r\n     res.json(map);\r\n   } catch (e) {\r\n"
                },
                {
                    "date": 1757452814289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,32 +217,45 @@\n     const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n     if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n \r\n     const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status')\r\n       .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n       .populate('pet', 'nome')\r\n       .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n       .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n       .sort({ scheduledAt: 1 })\r\n       .lean();\r\n \r\n-    const map = list.map(a => ({\r\n-      _id: a._id,\r\n-      h: new Date(a.scheduledAt).toISOString(),\r\n-      valor: a.valor,\r\n-      pago: !!a.pago,\r\n-      status: a.status || 'agendado',\r\n-      storeId: a.store ? String(a.store._id || a.store) : null,\r\n-      clienteId: a.cliente ? String(a.cliente._id || a.cliente) : null,\r\n-      clienteNome: a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null,\r\n-      pet: a.pet ? a.pet.nome : '—',\r\n-      petId: a.pet?._id || null,\r\n-      servico: a.servico ? a.servico.nome : '—',\r\n-      profissionalId: a.profissional?._id || null,\r\n-      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null\r\n-    }));\r\n+    const map = (list || []).map(a => {\r\n+      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n \r\n+      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n+      const servicosList = itens.length\r\n+        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n+        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n+      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n+\r\n+      return {\r\n+        _id: a._id,\r\n+        storeId: a.store?._id || a.store || null,\r\n+        clienteId: a.cliente?._id || null,\r\n+        clienteNome,\r\n+        pet: a.pet ? a.pet.nome : '—',\r\n+        petId: a.pet?._id || null,\r\n+        servico: servicosStr,             // compat: texto p/ exibição\r\n+        servicos: servicosList,           // novo: array de serviços do agendamento\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,                // total do agendamento\r\n+        pago: !!a.pago,\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n     res.json(map);\r\n   } catch (e) {\r\n     console.error('GET /func/agendamentos', e);\r\n     res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n"
                },
                {
                    "date": 1757452835236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,58 +265,86 @@\n // Criar agendamento\r\n // body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status } = req.body || {};\r\n-    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos } = req.body || {};\r\n+    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n       return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n     }\r\n     if (!mongoose.Types.ObjectId.isValid(storeId)\r\n       || !mongoose.Types.ObjectId.isValid(clienteId)\r\n       || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n       || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n       return res.status(400).json({ message: 'IDs inválidos.' });\r\n     }\r\n \r\n     const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n     const statusFinal = allowed.has(status) ? status : 'agendado';\r\n \r\n-    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n-    if (!valorFinal) {\r\n-      const serv = await Service.findById(servicoId).select('valor').lean();\r\n-      valorFinal = serv?.valor || 0;\r\n+    let itens = [];\r\n+    if (Array.isArray(servicos) && servicos.length) {\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n+    } else {\r\n+      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n+        return res.status(400).json({ message: 'servicoId inválido.' });\r\n+      }\r\n+      let valorFinal = typeof valor === 'number' ? valor : null;\r\n+      if (valorFinal == null) {\r\n+        const serv = await Service.findById(servicoId).select('valor').lean();\r\n+        valorFinal = serv?.valor || 0;\r\n+      }\r\n+      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n     }\r\n \r\n+    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+\r\n     const appt = await Appointment.create({\r\n       store: storeId,\r\n       cliente: clienteId,\r\n       pet: petId,\r\n-      servico: servicoId,\r\n+      servico: itens[0]?.servico || null, // compat\r\n+      itens,\r\n       profissional: profissionalId,\r\n       scheduledAt: new Date(scheduledAt),\r\n-      valor: valorFinal,\r\n+      valor: total,\r\n       pago: !!pago,\r\n       status: statusFinal,\r\n       createdBy: req.user?._id\r\n     });\r\n \r\n     const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status')\r\n       .populate('pet', 'nome')\r\n       .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n       .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n       .lean();\r\n \r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n     res.status(201).json({\r\n       _id: full._id,\r\n       h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n+      valor: Number(full.valor || 0),\r\n       pago: !!full.pago,\r\n       status: full.status || 'agendado',\r\n       pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n       profissionalId: full.profissional?._id || null\r\n     });\r\n   } catch (e) {\r\n     console.error('POST /func/agendamentos', e);\r\n"
                },
                {
                    "date": 1757452865705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,449 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId, clienteId, petId, servicoId,\r\n+      profissionalId, scheduledAt, valor, pago, status, servicos\r\n+    } = req.body || {};\r\n+\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    // STATUS\r\n+    if (typeof status !== 'undefined') {\r\n+      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+      const s = String(status);\r\n+      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n+      set.status = s;\r\n+    }\r\n+\r\n+    // Pet do cliente (se informado)\r\n+    if (petId) {\r\n+      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n+      let clienteTarget = null;\r\n+      if (clienteId) {\r\n+        clienteTarget = clienteId;\r\n+      } else {\r\n+        const current = await Appointment.findById(id).select('cliente').lean();\r\n+        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n+      }\r\n+      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n+\r\n+      const pet = await Pet.findById(petId).select('owner').lean();\r\n+      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+      if (String(pet.owner) !== String(clienteTarget)) {\r\n+        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n+      }\r\n+      set.pet = petId;\r\n+    }\r\n+\r\n+    // Atualiza lista de serviços (se enviada)\r\n+    if (Array.isArray(servicos)) {\r\n+      const itens = [];\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      set.itens = itens;\r\n+      if (itens.length) {\r\n+        set.servico = itens[0].servico; // compat\r\n+        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+      } else {\r\n+        set.itens = [];\r\n+        set.valor = 0;\r\n+      }\r\n+    }\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n+\r\n+      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n+      const servicosList = itens.length\r\n+        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n+        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n+      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n+\r\n+      return {\r\n+        _id: a._id,\r\n+        storeId: a.store?._id || a.store || null,\r\n+        clienteId: a.cliente?._id || null,\r\n+        clienteNome,\r\n+        pet: a.pet ? a.pet.nome : '—',\r\n+        petId: a.pet?._id || null,\r\n+        servico: servicosStr,             // compat: texto p/ exibição\r\n+        servicos: servicosList,           // novo: array de serviços do agendamento\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,                // total do agendamento\r\n+        pago: !!a.pago,\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos } = req.body || {};\r\n+    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n+\r\n+    let itens = [];\r\n+    if (Array.isArray(servicos) && servicos.length) {\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n+    } else {\r\n+      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n+        return res.status(400).json({ message: 'servicoId inválido.' });\r\n+      }\r\n+      let valorFinal = typeof valor === 'number' ? valor : null;\r\n+      if (valorFinal == null) {\r\n+        const serv = await Service.findById(servicoId).select('valor').lean();\r\n+        valorFinal = serv?.valor || 0;\r\n+      }\r\n+      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n+    }\r\n+\r\n+    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: itens[0]?.servico || null, // compat\r\n+      itens,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: total,\r\n+      pago: !!pago,\r\n+      status: statusFinal,\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao salvar' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n+\r\n+    const del = await Appointment.findByIdAndDelete(id).lean();\r\n+    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+\r\n+    return res.json({ ok: true });\r\n+  } catch (e) {\r\n+    console.error('DELETE /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757516988057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n       }\r\n     }\r\n \r\n     const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status')\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n       .populate('pet', 'nome')\r\n       .populate('servico', 'nome')\r\n       .populate('itens.servico', 'nome')\r\n       .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n@@ -248,9 +248,9 @@\n     const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n     if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n \r\n     const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status')\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n       .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n       .populate('pet', 'nome')\r\n       .populate('servico', 'nome')\r\n       .populate('itens.servico', 'nome')\r\n@@ -281,8 +281,9 @@\n         profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n         h: new Date(a.scheduledAt).toISOString(),\r\n         valor: valorTotal,                // total do agendamento\r\n         pago: !!a.pago,\r\n+        observacoes: a.observacoes || '',\r\n         status: a.status || 'agendado'\r\n       };\r\n     });\r\n \r\n@@ -352,9 +353,9 @@\n       createdBy: req.user?._id\r\n     });\r\n \r\n     const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status')\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n       .populate('pet', 'nome')\r\n       .populate('servico', 'nome')\r\n       .populate('itens.servico', 'nome')\r\n       .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n@@ -446,422 +447,4 @@\n   }\r\n });\r\n \r\n module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-\r\n-    const {\r\n-      storeId, clienteId, petId, servicoId,\r\n-      profissionalId, scheduledAt, valor, pago, status\r\n-    } = req.body || {};\r\n-\r\n-    const set = {};\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n-    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId;\r\n-    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n-    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n-    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n-\r\n-    if (scheduledAt) {\r\n-      const d = new Date(scheduledAt);\r\n-      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n-      set.scheduledAt = d;\r\n-    }\r\n-\r\n-    // NEW: valida e aplica STATUS\r\n-    if (typeof status !== 'undefined') {\r\n-      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-      const s = String(status);\r\n-      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n-      set.status = s;\r\n-    }\r\n-\r\n-    // Troca de PET (mantida)\r\n-    if (petId && mongoose.Types.ObjectId.isValid(petId)) {\r\n-      let clienteTarget = clienteId;\r\n-      if (!clienteTarget) {\r\n-        const current = await Appointment.findById(id).select('cliente').lean();\r\n-        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n-      }\r\n-      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n-\r\n-      const pet = await Pet.findById(petId).select('owner').lean();\r\n-      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-      if (String(pet.owner) !== String(clienteTarget)) {\r\n-        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n-      }\r\n-      set.pet = petId;\r\n-    }\r\n-\r\n-    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago status')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    if (!full) {\r\n-      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-    }\r\n-\r\n-    return res.json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('PUT /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n-\r\n-      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n-      const servicosList = itens.length\r\n-        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n-        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n-      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n-\r\n-      return {\r\n-        _id: a._id,\r\n-        storeId: a.store?._id || a.store || null,\r\n-        clienteId: a.cliente?._id || null,\r\n-        clienteNome,\r\n-        pet: a.pet ? a.pet.nome : '—',\r\n-        petId: a.pet?._id || null,\r\n-        servico: servicosStr,             // compat: texto p/ exibição\r\n-        servicos: servicosList,           // novo: array de serviços do agendamento\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,                // total do agendamento\r\n-        pago: !!a.pago,\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos } = req.body || {};\r\n-    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n-\r\n-    let itens = [];\r\n-    if (Array.isArray(servicos) && servicos.length) {\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n-    } else {\r\n-      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n-        return res.status(400).json({ message: 'servicoId inválido.' });\r\n-      }\r\n-      let valorFinal = typeof valor === 'number' ? valor : null;\r\n-      if (valorFinal == null) {\r\n-        const serv = await Service.findById(servicoId).select('valor').lean();\r\n-        valorFinal = serv?.valor || 0;\r\n-      }\r\n-      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n-    }\r\n-\r\n-    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: itens[0]?.servico || null, // compat\r\n-      itens,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: total,\r\n-      pago: !!pago,\r\n-      status: statusFinal,\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao salvar' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n-\r\n-    const del = await Appointment.findByIdAndDelete(id).lean();\r\n-    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-\r\n-    return res.json({ ok: true });\r\n-  } catch (e) {\r\n-    console.error('DELETE /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1757517021648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,451 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId, clienteId, petId, servicoId,\r\n+      profissionalId, scheduledAt, valor, pago, status, servicos\r\n+    } = req.body || {};\r\n+\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    // STATUS\r\n+    if (typeof status !== 'undefined') {\r\n+      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+      const s = String(status);\r\n+      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n+      set.status = s;\r\n+    }\r\n+\r\n+    // Pet do cliente (se informado)\r\n+    if (petId) {\r\n+      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n+      let clienteTarget = null;\r\n+      if (clienteId) {\r\n+        clienteTarget = clienteId;\r\n+      } else {\r\n+        const current = await Appointment.findById(id).select('cliente').lean();\r\n+        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n+      }\r\n+      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n+\r\n+      const pet = await Pet.findById(petId).select('owner').lean();\r\n+      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+      if (String(pet.owner) !== String(clienteTarget)) {\r\n+        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n+      }\r\n+      set.pet = petId;\r\n+    }\r\n+\r\n+    // Atualiza lista de serviços (se enviada)\r\n+    if (Array.isArray(servicos)) {\r\n+      const itens = [];\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      set.itens = itens;\r\n+      if (itens.length) {\r\n+        set.servico = itens[0].servico; // compat\r\n+        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+      } else {\r\n+        set.itens = [];\r\n+        set.valor = 0;\r\n+      }\r\n+    }\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n+\r\n+      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n+      const servicosList = itens.length\r\n+        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n+        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n+      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n+\r\n+      return {\r\n+        _id: a._id,\r\n+        storeId: a.store?._id || a.store || null,\r\n+        clienteId: a.cliente?._id || null,\r\n+        clienteNome,\r\n+        pet: a.pet ? a.pet.nome : '—',\r\n+        petId: a.pet?._id || null,\r\n+        servico: servicosStr,             // compat: texto p/ exibição\r\n+        servicos: servicosList,           // novo: array de serviços do agendamento\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,                // total do agendamento\r\n+        pago: !!a.pago,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n+    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n+\r\n+    let itens = [];\r\n+    if (Array.isArray(servicos) && servicos.length) {\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n+    } else {\r\n+      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n+        return res.status(400).json({ message: 'servicoId inválido.' });\r\n+      }\r\n+      let valorFinal = typeof valor === 'number' ? valor : null;\r\n+      if (valorFinal == null) {\r\n+        const serv = await Service.findById(servicoId).select('valor').lean();\r\n+        valorFinal = serv?.valor || 0;\r\n+      }\r\n+      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n+    }\r\n+\r\n+    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: itens[0]?.servico || null, // compat\r\n+      itens,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: total,\r\n+      pago: !!pago,\r\n+      status: statusFinal,\r\n+      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao salvar' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n+\r\n+    const del = await Appointment.findByIdAndDelete(id).lean();\r\n+    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+\r\n+    return res.json({ ok: true });\r\n+  } catch (e) {\r\n+    console.error('DELETE /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757517040910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,8 +373,9 @@\n       status: full.status || 'agendado',\r\n       pet: full.pet ? full.pet.nome : '—',\r\n       servico: servicosStr,\r\n       servicos: servicosList,\r\n+      observacoes: full.observacoes || '',\r\n       profissional: full.profissional\r\n         ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n         : '—',\r\n       profissionalId: full.profissional?._id || null\r\n"
                },
                {
                    "date": 1757517090887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     }\r\n \r\n     const {\r\n       storeId, clienteId, petId, servicoId,\r\n-      profissionalId, scheduledAt, valor, pago, status, servicos\r\n+      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes\r\n     } = req.body || {};\r\n \r\n     const set = {};\r\n     if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n"
                },
                {
                    "date": 1757517105655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,454 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId, clienteId, petId, servicoId,\r\n+      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes\r\n+    } = req.body || {};\r\n+\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    // STATUS\r\n+    if (typeof status !== 'undefined') {\r\n+      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+      const s = String(status);\r\n+      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n+      set.status = s;\r\n+    }\r\n+    // Observações\r\n+    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n+\r\n+    // Pet do cliente (se informado)\r\n+    if (petId) {\r\n+      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n+      let clienteTarget = null;\r\n+      if (clienteId) {\r\n+        clienteTarget = clienteId;\r\n+      } else {\r\n+        const current = await Appointment.findById(id).select('cliente').lean();\r\n+        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n+      }\r\n+      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n+\r\n+      const pet = await Pet.findById(petId).select('owner').lean();\r\n+      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+      if (String(pet.owner) !== String(clienteTarget)) {\r\n+        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n+      }\r\n+      set.pet = petId;\r\n+    }\r\n+\r\n+    // Atualiza lista de serviços (se enviada)\r\n+    if (Array.isArray(servicos)) {\r\n+      const itens = [];\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      set.itens = itens;\r\n+      if (itens.length) {\r\n+        set.servico = itens[0].servico; // compat\r\n+        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+      } else {\r\n+        set.itens = [];\r\n+        set.valor = 0;\r\n+      }\r\n+    }\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n+\r\n+      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n+      const servicosList = itens.length\r\n+        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n+        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n+      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n+\r\n+      return {\r\n+        _id: a._id,\r\n+        storeId: a.store?._id || a.store || null,\r\n+        clienteId: a.cliente?._id || null,\r\n+        clienteNome,\r\n+        pet: a.pet ? a.pet.nome : '—',\r\n+        petId: a.pet?._id || null,\r\n+        servico: servicosStr,             // compat: texto p/ exibição\r\n+        servicos: servicosList,           // novo: array de serviços do agendamento\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,                // total do agendamento\r\n+        pago: !!a.pago,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n+    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n+\r\n+    let itens = [];\r\n+    if (Array.isArray(servicos) && servicos.length) {\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n+    } else {\r\n+      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n+        return res.status(400).json({ message: 'servicoId inválido.' });\r\n+      }\r\n+      let valorFinal = typeof valor === 'number' ? valor : null;\r\n+      if (valorFinal == null) {\r\n+        const serv = await Service.findById(servicoId).select('valor').lean();\r\n+        valorFinal = serv?.valor || 0;\r\n+      }\r\n+      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n+    }\r\n+\r\n+    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: itens[0]?.servico || null, // compat\r\n+      itens,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: total,\r\n+      pago: !!pago,\r\n+      status: statusFinal,\r\n+      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      observacoes: full.observacoes || '',\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao salvar' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n+\r\n+    const del = await Appointment.findByIdAndDelete(id).lean();\r\n+    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+\r\n+    return res.json({ ok: true });\r\n+  } catch (e) {\r\n+    console.error('DELETE /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757595687364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,30 +260,19 @@\n       .sort({ scheduledAt: 1 })\r\n       .lean();\r\n \r\n     const map = (list || []).map(a => {\r\n-      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n-\r\n-      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n-      const servicosList = itens.length\r\n-        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n-        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n-      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n-\r\n+      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n       return {\r\n         _id: a._id,\r\n-        storeId: a.store?._id || a.store || null,\r\n-        clienteId: a.cliente?._id || null,\r\n-        clienteNome,\r\n-        pet: a.pet ? a.pet.nome : '—',\r\n-        petId: a.pet?._id || null,\r\n-        servico: servicosStr,             // compat: texto p/ exibição\r\n-        servicos: servicosList,           // novo: array de serviços do agendamento\r\n+        pet: a.pet ? a.pet.nome : null,\r\n+        servico: servicosList.map(s => s.nome).join(', '),\r\n+        servicos: servicosList,\r\n         profissionalId: a.profissional?._id || null,\r\n         profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n         h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,                // total do agendamento\r\n+        valor: valorTotal,\r\n         pago: !!a.pago,\r\n         observacoes: a.observacoes || '',\r\n         status: a.status || 'agendado'\r\n       };\r\n@@ -295,411 +284,21 @@\n     res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n   }\r\n });\r\n \r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+// NOVO: Listar por intervalo [start, end)\r\n+// GET /api/func/agendamentos/range?start=YYYY-MM-DD&end=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos/range', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n-    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    const { start: startStr, end: endStr, storeId } = req.query;\r\n+    if (!startStr || !endStr) {\r\n+      return res.status(400).json({ message: 'Parâmetros \"start\" e \"end\" são obrigatórios (YYYY-MM-DD).' });\r\n     }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n+    const [ys, ms, ds] = startStr.split('-').map(n => parseInt(n, 10));\r\n+    const [ye, me, de] = endStr.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(ys, ms - 1, ds, 0, 0, 0, 0);\r\n+    const end   = new Date(ye, me - 1, de, 0, 0, 0, 0); // exclusivo\r\n \r\n-    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n-\r\n-    let itens = [];\r\n-    if (Array.isArray(servicos) && servicos.length) {\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n-    } else {\r\n-      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n-        return res.status(400).json({ message: 'servicoId inválido.' });\r\n-      }\r\n-      let valorFinal = typeof valor === 'number' ? valor : null;\r\n-      if (valorFinal == null) {\r\n-        const serv = await Service.findById(servicoId).select('valor').lean();\r\n-        valorFinal = serv?.valor || 0;\r\n-      }\r\n-      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n-    }\r\n-\r\n-    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: itens[0]?.servico || null, // compat\r\n-      itens,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: total,\r\n-      pago: !!pago,\r\n-      status: statusFinal,\r\n-      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      observacoes: full.observacoes || '',\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao salvar' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n-\r\n-    const del = await Appointment.findByIdAndDelete(id).lean();\r\n-    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-\r\n-    return res.json({ ok: true });\r\n-  } catch (e) {\r\n-    console.error('DELETE /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-\r\n-    const {\r\n-      storeId, clienteId, petId, servicoId,\r\n-      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes\r\n-    } = req.body || {};\r\n-\r\n-    const set = {};\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n-    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n-    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n-    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n-    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n-\r\n-    if (scheduledAt) {\r\n-      const d = new Date(scheduledAt);\r\n-      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n-      set.scheduledAt = d;\r\n-    }\r\n-\r\n-    // STATUS\r\n-    if (typeof status !== 'undefined') {\r\n-      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-      const s = String(status);\r\n-      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n-      set.status = s;\r\n-    }\r\n-\r\n-    // Pet do cliente (se informado)\r\n-    if (petId) {\r\n-      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n-      let clienteTarget = null;\r\n-      if (clienteId) {\r\n-        clienteTarget = clienteId;\r\n-      } else {\r\n-        const current = await Appointment.findById(id).select('cliente').lean();\r\n-        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n-      }\r\n-      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n-\r\n-      const pet = await Pet.findById(petId).select('owner').lean();\r\n-      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-      if (String(pet.owner) !== String(clienteTarget)) {\r\n-        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n-      }\r\n-      set.pet = petId;\r\n-    }\r\n-\r\n-    // Atualiza lista de serviços (se enviada)\r\n-    if (Array.isArray(servicos)) {\r\n-      const itens = [];\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      set.itens = itens;\r\n-      if (itens.length) {\r\n-        set.servico = itens[0].servico; // compat\r\n-        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-      } else {\r\n-        set.itens = [];\r\n-        set.valor = 0;\r\n-      }\r\n-    }\r\n-\r\n-    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    if (!full) {\r\n-      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-    }\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    return res.json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('PUT /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n     const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n     if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n \r\n     const list = await Appointment.find(filter)\r\n@@ -712,40 +311,29 @@\n       .sort({ scheduledAt: 1 })\r\n       .lean();\r\n \r\n     const map = (list || []).map(a => {\r\n-      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n-\r\n-      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n-      const servicosList = itens.length\r\n-        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n-        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n-      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n-\r\n+      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n       return {\r\n         _id: a._id,\r\n-        storeId: a.store?._id || a.store || null,\r\n-        clienteId: a.cliente?._id || null,\r\n-        clienteNome,\r\n-        pet: a.pet ? a.pet.nome : '—',\r\n-        petId: a.pet?._id || null,\r\n-        servico: servicosStr,             // compat: texto p/ exibição\r\n-        servicos: servicosList,           // novo: array de serviços do agendamento\r\n+        pet: a.pet ? a.pet.nome : null,\r\n+        servico: servicosList.map(s => s.nome).join(', '),\r\n+        servicos: servicosList,\r\n         profissionalId: a.profissional?._id || null,\r\n         profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n         h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,                // total do agendamento\r\n+        valor: valorTotal,\r\n         pago: !!a.pago,\r\n         observacoes: a.observacoes || '',\r\n         status: a.status || 'agendado'\r\n       };\r\n     });\r\n \r\n     res.json(map);\r\n   } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+    console.error('GET /func/agendamentos/range', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos por intervalo' });\r\n   }\r\n });\r\n \r\n // Criar agendamento\r\n@@ -903,454 +491,4 @@\n   }\r\n });\r\n \r\n module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-\r\n-    const {\r\n-      storeId, clienteId, petId, servicoId,\r\n-      profissionalId, scheduledAt, valor, pago, status, servicos\r\n-    } = req.body || {};\r\n-\r\n-    const set = {};\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n-    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n-    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n-    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n-    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n-\r\n-    if (scheduledAt) {\r\n-      const d = new Date(scheduledAt);\r\n-      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n-      set.scheduledAt = d;\r\n-    }\r\n-\r\n-    // STATUS\r\n-    if (typeof status !== 'undefined') {\r\n-      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-      const s = String(status);\r\n-      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n-      set.status = s;\r\n-    }\r\n-\r\n-    // Pet do cliente (se informado)\r\n-    if (petId) {\r\n-      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n-      let clienteTarget = null;\r\n-      if (clienteId) {\r\n-        clienteTarget = clienteId;\r\n-      } else {\r\n-        const current = await Appointment.findById(id).select('cliente').lean();\r\n-        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n-      }\r\n-      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n-\r\n-      const pet = await Pet.findById(petId).select('owner').lean();\r\n-      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-      if (String(pet.owner) !== String(clienteTarget)) {\r\n-        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n-      }\r\n-      set.pet = petId;\r\n-    }\r\n-\r\n-    // Atualiza lista de serviços (se enviada)\r\n-    if (Array.isArray(servicos)) {\r\n-      const itens = [];\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      set.itens = itens;\r\n-      if (itens.length) {\r\n-        set.servico = itens[0].servico; // compat\r\n-        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-      } else {\r\n-        set.itens = [];\r\n-        set.valor = 0;\r\n-      }\r\n-    }\r\n-\r\n-    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    if (!full) {\r\n-      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-    }\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    return res.json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('PUT /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n-\r\n-      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n-      const servicosList = itens.length\r\n-        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n-        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n-      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n-\r\n-      return {\r\n-        _id: a._id,\r\n-        storeId: a.store?._id || a.store || null,\r\n-        clienteId: a.cliente?._id || null,\r\n-        clienteNome,\r\n-        pet: a.pet ? a.pet.nome : '—',\r\n-        petId: a.pet?._id || null,\r\n-        servico: servicosStr,             // compat: texto p/ exibição\r\n-        servicos: servicosList,           // novo: array de serviços do agendamento\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,                // total do agendamento\r\n-        pago: !!a.pago,\r\n-        observacoes: a.observacoes || '',\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos } = req.body || {};\r\n-    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n-\r\n-    let itens = [];\r\n-    if (Array.isArray(servicos) && servicos.length) {\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n-    } else {\r\n-      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n-        return res.status(400).json({ message: 'servicoId inválido.' });\r\n-      }\r\n-      let valorFinal = typeof valor === 'number' ? valor : null;\r\n-      if (valorFinal == null) {\r\n-        const serv = await Service.findById(servicoId).select('valor').lean();\r\n-        valorFinal = serv?.valor || 0;\r\n-      }\r\n-      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n-    }\r\n-\r\n-    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: itens[0]?.servico || null, // compat\r\n-      itens,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: total,\r\n-      pago: !!pago,\r\n-      status: statusFinal,\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao salvar' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n-\r\n-    const del = await Appointment.findByIdAndDelete(id).lean();\r\n-    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-\r\n-    return res.json({ ok: true });\r\n-  } catch (e) {\r\n-    console.error('DELETE /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1757595762073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,454 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId, clienteId, petId, servicoId,\r\n+      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes\r\n+    } = req.body || {};\r\n+\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    // STATUS\r\n+    if (typeof status !== 'undefined') {\r\n+      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+      const s = String(status);\r\n+      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n+      set.status = s;\r\n+    }\r\n+    // Observações\r\n+    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n+\r\n+    // Pet do cliente (se informado)\r\n+    if (petId) {\r\n+      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n+      let clienteTarget = null;\r\n+      if (clienteId) {\r\n+        clienteTarget = clienteId;\r\n+      } else {\r\n+        const current = await Appointment.findById(id).select('cliente').lean();\r\n+        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n+      }\r\n+      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n+\r\n+      const pet = await Pet.findById(petId).select('owner').lean();\r\n+      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+      if (String(pet.owner) !== String(clienteTarget)) {\r\n+        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n+      }\r\n+      set.pet = petId;\r\n+    }\r\n+\r\n+    // Atualiza lista de serviços (se enviada)\r\n+    if (Array.isArray(servicos)) {\r\n+      const itens = [];\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      set.itens = itens;\r\n+      if (itens.length) {\r\n+        set.servico = itens[0].servico; // compat\r\n+        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+      } else {\r\n+        set.itens = [];\r\n+        set.valor = 0;\r\n+      }\r\n+    }\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n+\r\n+      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n+      const servicosList = itens.length\r\n+        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n+        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n+      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n+\r\n+      return {\r\n+        _id: a._id,\r\n+        storeId: a.store?._id || a.store || null,\r\n+        clienteId: a.cliente?._id || null,\r\n+        clienteNome,\r\n+        pet: a.pet ? a.pet.nome : '—',\r\n+        petId: a.pet?._id || null,\r\n+        servico: servicosStr,             // compat: texto p/ exibição\r\n+        servicos: servicosList,           // novo: array de serviços do agendamento\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,                // total do agendamento\r\n+        pago: !!a.pago,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n+    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n+\r\n+    let itens = [];\r\n+    if (Array.isArray(servicos) && servicos.length) {\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n+    } else {\r\n+      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n+        return res.status(400).json({ message: 'servicoId inválido.' });\r\n+      }\r\n+      let valorFinal = typeof valor === 'number' ? valor : null;\r\n+      if (valorFinal == null) {\r\n+        const serv = await Service.findById(servicoId).select('valor').lean();\r\n+        valorFinal = serv?.valor || 0;\r\n+      }\r\n+      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n+    }\r\n+\r\n+    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: itens[0]?.servico || null, // compat\r\n+      itens,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: total,\r\n+      pago: !!pago,\r\n+      status: statusFinal,\r\n+      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      observacoes: full.observacoes || '',\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao salvar' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n+\r\n+    const del = await Appointment.findByIdAndDelete(id).lean();\r\n+    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+\r\n+    return res.json({ ok: true });\r\n+  } catch (e) {\r\n+    console.error('DELETE /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757596930150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,504 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId, clienteId, petId, servicoId,\r\n+      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes\r\n+    } = req.body || {};\r\n+\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    // STATUS\r\n+    if (typeof status !== 'undefined') {\r\n+      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+      const s = String(status);\r\n+      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n+      set.status = s;\r\n+    }\r\n+    // Observações\r\n+    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n+\r\n+    // Pet do cliente (se informado)\r\n+    if (petId) {\r\n+      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n+      let clienteTarget = null;\r\n+      if (clienteId) {\r\n+        clienteTarget = clienteId;\r\n+      } else {\r\n+        const current = await Appointment.findById(id).select('cliente').lean();\r\n+        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n+      }\r\n+      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n+\r\n+      const pet = await Pet.findById(petId).select('owner').lean();\r\n+      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+      if (String(pet.owner) !== String(clienteTarget)) {\r\n+        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n+      }\r\n+      set.pet = petId;\r\n+    }\r\n+\r\n+    // Atualiza lista de serviços (se enviada)\r\n+    if (Array.isArray(servicos)) {\r\n+      const itens = [];\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      set.itens = itens;\r\n+      if (itens.length) {\r\n+        set.servico = itens[0].servico; // compat\r\n+        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+      } else {\r\n+        set.itens = [];\r\n+        set.valor = 0;\r\n+      }\r\n+    }\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n+\r\n+      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n+      const servicosList = itens.length\r\n+        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n+        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n+      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n+\r\n+      return {\r\n+        _id: a._id,\r\n+        storeId: a.store?._id || a.store || null,\r\n+        clienteId: a.cliente?._id || null,\r\n+        clienteNome,\r\n+        pet: a.pet ? a.pet.nome : '—',\r\n+        petId: a.pet?._id || null,\r\n+        servico: servicosStr,             // compat: texto p/ exibição\r\n+        servicos: servicosList,           // novo: array de serviços do agendamento\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,                // total do agendamento\r\n+        pago: !!a.pago,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// GET /api/func/agendamentos/range?start=YYYY-MM-DD&end=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos/range', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { start: startStr, end: endStr, storeId } = req.query;\r\n+    if (!startStr || !endStr) {\r\n+      return res.status(400).json({ message: 'Parâmetros \"start\" e \"end\" são obrigatórios (YYYY-MM-DD).' });\r\n+    }\r\n+    const [ys, ms, ds] = startStr.split('-').map(n => parseInt(n, 10));\r\n+    const [ye, me, de] = endStr.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(ys, ms - 1, ds, 0, 0, 0, 0);\r\n+    const end   = new Date(ye, me - 1, de, 0, 0, 0, 0); // exclusivo\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n+      return {\r\n+        _id: a._id,\r\n+        pet: a.pet ? a.pet.nome : null,\r\n+        servico: servicosList.map(s => s.nome).join(', '),\r\n+        servicos: servicosList,\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,\r\n+        pago: !!a.pago,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos/range', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos por intervalo' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n+    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n+\r\n+    let itens = [];\r\n+    if (Array.isArray(servicos) && servicos.length) {\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n+    } else {\r\n+      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n+        return res.status(400).json({ message: 'servicoId inválido.' });\r\n+      }\r\n+      let valorFinal = typeof valor === 'number' ? valor : null;\r\n+      if (valorFinal == null) {\r\n+        const serv = await Service.findById(servicoId).select('valor').lean();\r\n+        valorFinal = serv?.valor || 0;\r\n+      }\r\n+      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n+    }\r\n+\r\n+    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: itens[0]?.servico || null, // compat\r\n+      itens,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: total,\r\n+      pago: !!pago,\r\n+      status: statusFinal,\r\n+      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      observacoes: full.observacoes || '',\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao salvar' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n+\r\n+    const del = await Appointment.findByIdAndDelete(id).lean();\r\n+    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+\r\n+    return res.json({ ok: true });\r\n+  } catch (e) {\r\n+    console.error('DELETE /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757600091675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,508 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId, clienteId, petId, servicoId,\r\n+      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes\r\n+    } = req.body || {};\r\n+\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    // STATUS\r\n+    if (typeof status !== 'undefined') {\r\n+      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+      const s = String(status);\r\n+      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n+      set.status = s;\r\n+    }\r\n+    // Observações\r\n+    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n+\r\n+    // Pet do cliente (se informado)\r\n+    if (petId) {\r\n+      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n+      let clienteTarget = null;\r\n+      if (clienteId) {\r\n+        clienteTarget = clienteId;\r\n+      } else {\r\n+        const current = await Appointment.findById(id).select('cliente').lean();\r\n+        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n+      }\r\n+      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n+\r\n+      const pet = await Pet.findById(petId).select('owner').lean();\r\n+      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+      if (String(pet.owner) !== String(clienteTarget)) {\r\n+        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n+      }\r\n+      set.pet = petId;\r\n+    }\r\n+\r\n+    // Atualiza lista de serviços (se enviada)\r\n+    if (Array.isArray(servicos)) {\r\n+      const itens = [];\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      set.itens = itens;\r\n+      if (itens.length) {\r\n+        set.servico = itens[0].servico; // compat\r\n+        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+      } else {\r\n+        set.itens = [];\r\n+        set.valor = 0;\r\n+      }\r\n+    }\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n+\r\n+      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n+      const servicosList = itens.length\r\n+        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n+        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n+      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n+\r\n+      return {\r\n+        _id: a._id,\r\n+        storeId: a.store?._id || a.store || null,\r\n+        clienteId: a.cliente?._id || null,\r\n+        clienteNome,\r\n+        pet: a.pet ? a.pet.nome : '—',\r\n+        petId: a.pet?._id || null,\r\n+        servico: servicosStr,             // compat: texto p/ exibição\r\n+        servicos: servicosList,           // novo: array de serviços do agendamento\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,                // total do agendamento\r\n+        pago: !!a.pago,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// GET /api/func/agendamentos/range?start=YYYY-MM-DD&end=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos/range', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { start: startStr, end: endStr, storeId } = req.query;\r\n+    if (!startStr || !endStr) {\r\n+      return res.status(400).json({ message: 'Parâmetros \"start\" e \"end\" são obrigatórios (YYYY-MM-DD).' });\r\n+    }\r\n+    const [ys, ms, ds] = startStr.split('-').map(n => parseInt(n, 10));\r\n+    const [ye, me, de] = endStr.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(ys, ms - 1, ds, 0, 0, 0, 0);\r\n+    const end   = new Date(ye, me - 1, de, 0, 0, 0, 0); // exclusivo\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n+      const tutorNome = a.cliente\r\n+        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || '')\r\n+        : '';\r\n+      return {\r\n+        _id: a._id,\r\n+        pet: a.pet ? a.pet.nome : null,\r\n+        servico: servicosList.map(s => s.nome).join(', '),\r\n+        servicos: servicosList,\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        tutor: tutorNome,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,\r\n+        pago: !!a.pago,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos/range', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos por intervalo' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n+    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n+\r\n+    let itens = [];\r\n+    if (Array.isArray(servicos) && servicos.length) {\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n+    } else {\r\n+      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n+        return res.status(400).json({ message: 'servicoId inválido.' });\r\n+      }\r\n+      let valorFinal = typeof valor === 'number' ? valor : null;\r\n+      if (valorFinal == null) {\r\n+        const serv = await Service.findById(servicoId).select('valor').lean();\r\n+        valorFinal = serv?.valor || 0;\r\n+      }\r\n+      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n+    }\r\n+\r\n+    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: itens[0]?.servico || null, // compat\r\n+      itens,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: total,\r\n+      pago: !!pago,\r\n+      status: statusFinal,\r\n+      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      observacoes: full.observacoes || '',\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao salvar' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n+\r\n+    const del = await Appointment.findByIdAndDelete(id).lean();\r\n+    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+\r\n+    return res.json({ ok: true });\r\n+  } catch (e) {\r\n+    console.error('DELETE /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757628319263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,9 +250,9 @@\n     const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n     if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n \r\n     const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n       .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n       .populate('pet', 'nome')\r\n       .populate('servico', 'nome')\r\n       .populate('itens.servico', 'nome')\r\n@@ -311,9 +311,9 @@\n     const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n     if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n \r\n     const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n       .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n       .populate('pet', 'nome')\r\n       .populate('servico', 'nome')\r\n       .populate('itens.servico', 'nome')\r\n@@ -337,8 +337,9 @@\n         tutor: tutorNome,\r\n         h: new Date(a.scheduledAt).toISOString(),\r\n         valor: valorTotal,\r\n         pago: !!a.pago,\r\n+        codigoVenda: a.codigoVenda || null,\r\n         observacoes: a.observacoes || '',\r\n         status: a.status || 'agendado'\r\n       };\r\n     });\r\n@@ -505,1456 +506,4 @@\n   }\r\n });\r\n \r\n module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-\r\n-    const {\r\n-      storeId, clienteId, petId, servicoId,\r\n-      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes\r\n-    } = req.body || {};\r\n-\r\n-    const set = {};\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n-    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n-    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n-    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n-    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n-\r\n-    if (scheduledAt) {\r\n-      const d = new Date(scheduledAt);\r\n-      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n-      set.scheduledAt = d;\r\n-    }\r\n-\r\n-    // STATUS\r\n-    if (typeof status !== 'undefined') {\r\n-      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-      const s = String(status);\r\n-      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n-      set.status = s;\r\n-    }\r\n-    // Observações\r\n-    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n-\r\n-    // Pet do cliente (se informado)\r\n-    if (petId) {\r\n-      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n-      let clienteTarget = null;\r\n-      if (clienteId) {\r\n-        clienteTarget = clienteId;\r\n-      } else {\r\n-        const current = await Appointment.findById(id).select('cliente').lean();\r\n-        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n-      }\r\n-      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n-\r\n-      const pet = await Pet.findById(petId).select('owner').lean();\r\n-      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-      if (String(pet.owner) !== String(clienteTarget)) {\r\n-        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n-      }\r\n-      set.pet = petId;\r\n-    }\r\n-\r\n-    // Atualiza lista de serviços (se enviada)\r\n-    if (Array.isArray(servicos)) {\r\n-      const itens = [];\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      set.itens = itens;\r\n-      if (itens.length) {\r\n-        set.servico = itens[0].servico; // compat\r\n-        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-      } else {\r\n-        set.itens = [];\r\n-        set.valor = 0;\r\n-      }\r\n-    }\r\n-\r\n-    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    if (!full) {\r\n-      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-    }\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    return res.json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('PUT /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n-\r\n-      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n-      const servicosList = itens.length\r\n-        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n-        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n-      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n-\r\n-      return {\r\n-        _id: a._id,\r\n-        storeId: a.store?._id || a.store || null,\r\n-        clienteId: a.cliente?._id || null,\r\n-        clienteNome,\r\n-        pet: a.pet ? a.pet.nome : '—',\r\n-        petId: a.pet?._id || null,\r\n-        servico: servicosStr,             // compat: texto p/ exibição\r\n-        servicos: servicosList,           // novo: array de serviços do agendamento\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,                // total do agendamento\r\n-        pago: !!a.pago,\r\n-        observacoes: a.observacoes || '',\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// GET /api/func/agendamentos/range?start=YYYY-MM-DD&end=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos/range', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { start: startStr, end: endStr, storeId } = req.query;\r\n-    if (!startStr || !endStr) {\r\n-      return res.status(400).json({ message: 'Parâmetros \"start\" e \"end\" são obrigatórios (YYYY-MM-DD).' });\r\n-    }\r\n-    const [ys, ms, ds] = startStr.split('-').map(n => parseInt(n, 10));\r\n-    const [ye, me, de] = endStr.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(ys, ms - 1, ds, 0, 0, 0, 0);\r\n-    const end   = new Date(ye, me - 1, de, 0, 0, 0, 0); // exclusivo\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n-      return {\r\n-        _id: a._id,\r\n-        pet: a.pet ? a.pet.nome : null,\r\n-        servico: servicosList.map(s => s.nome).join(', '),\r\n-        servicos: servicosList,\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,\r\n-        pago: !!a.pago,\r\n-        observacoes: a.observacoes || '',\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos/range', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos por intervalo' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n-    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n-\r\n-    let itens = [];\r\n-    if (Array.isArray(servicos) && servicos.length) {\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n-    } else {\r\n-      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n-        return res.status(400).json({ message: 'servicoId inválido.' });\r\n-      }\r\n-      let valorFinal = typeof valor === 'number' ? valor : null;\r\n-      if (valorFinal == null) {\r\n-        const serv = await Service.findById(servicoId).select('valor').lean();\r\n-        valorFinal = serv?.valor || 0;\r\n-      }\r\n-      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n-    }\r\n-\r\n-    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: itens[0]?.servico || null, // compat\r\n-      itens,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: total,\r\n-      pago: !!pago,\r\n-      status: statusFinal,\r\n-      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      observacoes: full.observacoes || '',\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao salvar' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n-\r\n-    const del = await Appointment.findByIdAndDelete(id).lean();\r\n-    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-\r\n-    return res.json({ ok: true });\r\n-  } catch (e) {\r\n-    console.error('DELETE /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-\r\n-    const {\r\n-      storeId, clienteId, petId, servicoId,\r\n-      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes\r\n-    } = req.body || {};\r\n-\r\n-    const set = {};\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n-    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n-    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n-    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n-    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n-\r\n-    if (scheduledAt) {\r\n-      const d = new Date(scheduledAt);\r\n-      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n-      set.scheduledAt = d;\r\n-    }\r\n-\r\n-    // STATUS\r\n-    if (typeof status !== 'undefined') {\r\n-      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-      const s = String(status);\r\n-      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n-      set.status = s;\r\n-    }\r\n-    // Observações\r\n-    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n-\r\n-    // Pet do cliente (se informado)\r\n-    if (petId) {\r\n-      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n-      let clienteTarget = null;\r\n-      if (clienteId) {\r\n-        clienteTarget = clienteId;\r\n-      } else {\r\n-        const current = await Appointment.findById(id).select('cliente').lean();\r\n-        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n-      }\r\n-      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n-\r\n-      const pet = await Pet.findById(petId).select('owner').lean();\r\n-      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-      if (String(pet.owner) !== String(clienteTarget)) {\r\n-        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n-      }\r\n-      set.pet = petId;\r\n-    }\r\n-\r\n-    // Atualiza lista de serviços (se enviada)\r\n-    if (Array.isArray(servicos)) {\r\n-      const itens = [];\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      set.itens = itens;\r\n-      if (itens.length) {\r\n-        set.servico = itens[0].servico; // compat\r\n-        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-      } else {\r\n-        set.itens = [];\r\n-        set.valor = 0;\r\n-      }\r\n-    }\r\n-\r\n-    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    if (!full) {\r\n-      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-    }\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    return res.json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('PUT /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n-\r\n-      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n-      const servicosList = itens.length\r\n-        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n-        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n-      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n-\r\n-      return {\r\n-        _id: a._id,\r\n-        storeId: a.store?._id || a.store || null,\r\n-        clienteId: a.cliente?._id || null,\r\n-        clienteNome,\r\n-        pet: a.pet ? a.pet.nome : '—',\r\n-        petId: a.pet?._id || null,\r\n-        servico: servicosStr,             // compat: texto p/ exibição\r\n-        servicos: servicosList,           // novo: array de serviços do agendamento\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,                // total do agendamento\r\n-        pago: !!a.pago,\r\n-        observacoes: a.observacoes || '',\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n-    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n-\r\n-    let itens = [];\r\n-    if (Array.isArray(servicos) && servicos.length) {\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n-    } else {\r\n-      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n-        return res.status(400).json({ message: 'servicoId inválido.' });\r\n-      }\r\n-      let valorFinal = typeof valor === 'number' ? valor : null;\r\n-      if (valorFinal == null) {\r\n-        const serv = await Service.findById(servicoId).select('valor').lean();\r\n-        valorFinal = serv?.valor || 0;\r\n-      }\r\n-      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n-    }\r\n-\r\n-    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: itens[0]?.servico || null, // compat\r\n-      itens,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: total,\r\n-      pago: !!pago,\r\n-      status: statusFinal,\r\n-      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      observacoes: full.observacoes || '',\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao salvar' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n-\r\n-    const del = await Appointment.findByIdAndDelete(id).lean();\r\n-    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-\r\n-    return res.json({ ok: true });\r\n-  } catch (e) {\r\n-    console.error('DELETE /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-\r\n-    const {\r\n-      storeId, clienteId, petId, servicoId,\r\n-      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes\r\n-    } = req.body || {};\r\n-\r\n-    const set = {};\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n-    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n-    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n-    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n-    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n-\r\n-    if (scheduledAt) {\r\n-      const d = new Date(scheduledAt);\r\n-      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n-      set.scheduledAt = d;\r\n-    }\r\n-\r\n-    // STATUS\r\n-    if (typeof status !== 'undefined') {\r\n-      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-      const s = String(status);\r\n-      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n-      set.status = s;\r\n-    }\r\n-    // Observações\r\n-    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n-\r\n-    // Pet do cliente (se informado)\r\n-    if (petId) {\r\n-      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n-      let clienteTarget = null;\r\n-      if (clienteId) {\r\n-        clienteTarget = clienteId;\r\n-      } else {\r\n-        const current = await Appointment.findById(id).select('cliente').lean();\r\n-        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n-      }\r\n-      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n-\r\n-      const pet = await Pet.findById(petId).select('owner').lean();\r\n-      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-      if (String(pet.owner) !== String(clienteTarget)) {\r\n-        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n-      }\r\n-      set.pet = petId;\r\n-    }\r\n-\r\n-    // Atualiza lista de serviços (se enviada)\r\n-    if (Array.isArray(servicos)) {\r\n-      const itens = [];\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      set.itens = itens;\r\n-      if (itens.length) {\r\n-        set.servico = itens[0].servico; // compat\r\n-        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-      } else {\r\n-        set.itens = [];\r\n-        set.valor = 0;\r\n-      }\r\n-    }\r\n-\r\n-    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    if (!full) {\r\n-      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-    }\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    return res.json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('PUT /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n-      return {\r\n-        _id: a._id,\r\n-        pet: a.pet ? a.pet.nome : null,\r\n-        servico: servicosList.map(s => s.nome).join(', '),\r\n-        servicos: servicosList,\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,\r\n-        pago: !!a.pago,\r\n-        observacoes: a.observacoes || '',\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// NOVO: Listar por intervalo [start, end)\r\n-// GET /api/func/agendamentos/range?start=YYYY-MM-DD&end=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos/range', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { start: startStr, end: endStr, storeId } = req.query;\r\n-    if (!startStr || !endStr) {\r\n-      return res.status(400).json({ message: 'Parâmetros \"start\" e \"end\" são obrigatórios (YYYY-MM-DD).' });\r\n-    }\r\n-    const [ys, ms, ds] = startStr.split('-').map(n => parseInt(n, 10));\r\n-    const [ye, me, de] = endStr.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(ys, ms - 1, ds, 0, 0, 0, 0);\r\n-    const end   = new Date(ye, me - 1, de, 0, 0, 0, 0); // exclusivo\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n-      return {\r\n-        _id: a._id,\r\n-        pet: a.pet ? a.pet.nome : null,\r\n-        servico: servicosList.map(s => s.nome).join(', '),\r\n-        servicos: servicosList,\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,\r\n-        pago: !!a.pago,\r\n-        observacoes: a.observacoes || '',\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos/range', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos por intervalo' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n-    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n-\r\n-    let itens = [];\r\n-    if (Array.isArray(servicos) && servicos.length) {\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n-    } else {\r\n-      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n-        return res.status(400).json({ message: 'servicoId inválido.' });\r\n-      }\r\n-      let valorFinal = typeof valor === 'number' ? valor : null;\r\n-      if (valorFinal == null) {\r\n-        const serv = await Service.findById(servicoId).select('valor').lean();\r\n-        valorFinal = serv?.valor || 0;\r\n-      }\r\n-      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n-    }\r\n-\r\n-    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: itens[0]?.servico || null, // compat\r\n-      itens,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: total,\r\n-      pago: !!pago,\r\n-      status: statusFinal,\r\n-      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      observacoes: full.observacoes || '',\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao salvar' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n-\r\n-    const del = await Appointment.findByIdAndDelete(id).lean();\r\n-    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-\r\n-    return res.json({ ok: true });\r\n-  } catch (e) {\r\n-    console.error('DELETE /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1757628348662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,510 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId, clienteId, petId, servicoId,\r\n+      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes\r\n+    } = req.body || {};\r\n+\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    // STATUS\r\n+    if (typeof status !== 'undefined') {\r\n+      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+      const s = String(status);\r\n+      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n+      set.status = s;\r\n+    }\r\n+    // Observações\r\n+    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n+\r\n+    // Pet do cliente (se informado)\r\n+    if (petId) {\r\n+      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n+      let clienteTarget = null;\r\n+      if (clienteId) {\r\n+        clienteTarget = clienteId;\r\n+      } else {\r\n+        const current = await Appointment.findById(id).select('cliente').lean();\r\n+        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n+      }\r\n+      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n+\r\n+      const pet = await Pet.findById(petId).select('owner').lean();\r\n+      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+      if (String(pet.owner) !== String(clienteTarget)) {\r\n+        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n+      }\r\n+      set.pet = petId;\r\n+    }\r\n+\r\n+    // Atualiza lista de serviços (se enviada)\r\n+    if (Array.isArray(servicos)) {\r\n+      const itens = [];\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      set.itens = itens;\r\n+      if (itens.length) {\r\n+        set.servico = itens[0].servico; // compat\r\n+        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+      } else {\r\n+        set.itens = [];\r\n+        set.valor = 0;\r\n+      }\r\n+    }\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n+\r\n+      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n+      const servicosList = itens.length\r\n+        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n+        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n+      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n+\r\n+      return {\r\n+        _id: a._id,\r\n+        storeId: a.store?._id || a.store || null,\r\n+        clienteId: a.cliente?._id || null,\r\n+        clienteNome,\r\n+        pet: a.pet ? a.pet.nome : '—',\r\n+        petId: a.pet?._id || null,\r\n+        servico: servicosStr,             // compat: texto p/ exibição\r\n+        servicos: servicosList,           // novo: array de serviços do agendamento\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,                // total do agendamento\r\n+        pago: !!a.pago,\r\n+        codigoVenda: a.codigoVenda || null,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// GET /api/func/agendamentos/range?start=YYYY-MM-DD&end=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos/range', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { start: startStr, end: endStr, storeId } = req.query;\r\n+    if (!startStr || !endStr) {\r\n+      return res.status(400).json({ message: 'Parâmetros \"start\" e \"end\" são obrigatórios (YYYY-MM-DD).' });\r\n+    }\r\n+    const [ys, ms, ds] = startStr.split('-').map(n => parseInt(n, 10));\r\n+    const [ye, me, de] = endStr.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(ys, ms - 1, ds, 0, 0, 0, 0);\r\n+    const end   = new Date(ye, me - 1, de, 0, 0, 0, 0); // exclusivo\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n+      const tutorNome = a.cliente\r\n+        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || '')\r\n+        : '';\r\n+      return {\r\n+        _id: a._id,\r\n+        pet: a.pet ? a.pet.nome : null,\r\n+        servico: servicosList.map(s => s.nome).join(', '),\r\n+        servicos: servicosList,\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        tutor: tutorNome,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,\r\n+        pago: !!a.pago,\r\n+        codigoVenda: a.codigoVenda || null,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos/range', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos por intervalo' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n+    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n+\r\n+    let itens = [];\r\n+    if (Array.isArray(servicos) && servicos.length) {\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n+    } else {\r\n+      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n+        return res.status(400).json({ message: 'servicoId inválido.' });\r\n+      }\r\n+      let valorFinal = typeof valor === 'number' ? valor : null;\r\n+      if (valorFinal == null) {\r\n+        const serv = await Service.findById(servicoId).select('valor').lean();\r\n+        valorFinal = serv?.valor || 0;\r\n+      }\r\n+      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n+    }\r\n+\r\n+    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: itens[0]?.servico || null, // compat\r\n+      itens,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: total,\r\n+      pago: !!pago,\r\n+      status: statusFinal,\r\n+      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      observacoes: full.observacoes || '',\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao salvar' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n+\r\n+    const del = await Appointment.findByIdAndDelete(id).lean();\r\n+    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+\r\n+    return res.json({ ok: true });\r\n+  } catch (e) {\r\n+    console.error('DELETE /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757628403318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,514 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId, clienteId, petId, servicoId,\r\n+      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes, codigoVenda\r\n+    } = req.body || {};\r\n+\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+    if (typeof codigoVenda !== 'undefined') {\r\n+      set.codigoVenda = String(codigoVenda || '').trim();\r\n+      if (set.codigoVenda) set.pago = true; // ao registrar código, marca como pago\r\n+    }\r\n+\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    // STATUS\r\n+    if (typeof status !== 'undefined') {\r\n+      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+      const s = String(status);\r\n+      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n+      set.status = s;\r\n+    }\r\n+    // Observações\r\n+    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n+\r\n+    // Pet do cliente (se informado)\r\n+    if (petId) {\r\n+      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n+      let clienteTarget = null;\r\n+      if (clienteId) {\r\n+        clienteTarget = clienteId;\r\n+      } else {\r\n+        const current = await Appointment.findById(id).select('cliente').lean();\r\n+        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n+      }\r\n+      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n+\r\n+      const pet = await Pet.findById(petId).select('owner').lean();\r\n+      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+      if (String(pet.owner) !== String(clienteTarget)) {\r\n+        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n+      }\r\n+      set.pet = petId;\r\n+    }\r\n+\r\n+    // Atualiza lista de serviços (se enviada)\r\n+    if (Array.isArray(servicos)) {\r\n+      const itens = [];\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      set.itens = itens;\r\n+      if (itens.length) {\r\n+        set.servico = itens[0].servico; // compat\r\n+        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+      } else {\r\n+        set.itens = [];\r\n+        set.valor = 0;\r\n+      }\r\n+    }\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n+\r\n+      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n+      const servicosList = itens.length\r\n+        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n+        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n+      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n+\r\n+      return {\r\n+        _id: a._id,\r\n+        storeId: a.store?._id || a.store || null,\r\n+        clienteId: a.cliente?._id || null,\r\n+        clienteNome,\r\n+        pet: a.pet ? a.pet.nome : '—',\r\n+        petId: a.pet?._id || null,\r\n+        servico: servicosStr,             // compat: texto p/ exibição\r\n+        servicos: servicosList,           // novo: array de serviços do agendamento\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,                // total do agendamento\r\n+        pago: !!a.pago,\r\n+        codigoVenda: a.codigoVenda || null,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// GET /api/func/agendamentos/range?start=YYYY-MM-DD&end=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos/range', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { start: startStr, end: endStr, storeId } = req.query;\r\n+    if (!startStr || !endStr) {\r\n+      return res.status(400).json({ message: 'Parâmetros \"start\" e \"end\" são obrigatórios (YYYY-MM-DD).' });\r\n+    }\r\n+    const [ys, ms, ds] = startStr.split('-').map(n => parseInt(n, 10));\r\n+    const [ye, me, de] = endStr.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(ys, ms - 1, ds, 0, 0, 0, 0);\r\n+    const end   = new Date(ye, me - 1, de, 0, 0, 0, 0); // exclusivo\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n+      const tutorNome = a.cliente\r\n+        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || '')\r\n+        : '';\r\n+      return {\r\n+        _id: a._id,\r\n+        pet: a.pet ? a.pet.nome : null,\r\n+        servico: servicosList.map(s => s.nome).join(', '),\r\n+        servicos: servicosList,\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        tutor: tutorNome,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,\r\n+        pago: !!a.pago,\r\n+        codigoVenda: a.codigoVenda || null,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos/range', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos por intervalo' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n+    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n+\r\n+    let itens = [];\r\n+    if (Array.isArray(servicos) && servicos.length) {\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n+    } else {\r\n+      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n+        return res.status(400).json({ message: 'servicoId inválido.' });\r\n+      }\r\n+      let valorFinal = typeof valor === 'number' ? valor : null;\r\n+      if (valorFinal == null) {\r\n+        const serv = await Service.findById(servicoId).select('valor').lean();\r\n+        valorFinal = serv?.valor || 0;\r\n+      }\r\n+      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n+    }\r\n+\r\n+    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: itens[0]?.servico || null, // compat\r\n+      itens,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: total,\r\n+      pago: !!pago,\r\n+      status: statusFinal,\r\n+      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      observacoes: full.observacoes || '',\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao salvar' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n+\r\n+    const del = await Appointment.findByIdAndDelete(id).lean();\r\n+    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+\r\n+    return res.json({ ok: true });\r\n+  } catch (e) {\r\n+    console.error('DELETE /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757628442199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,530 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId, clienteId, petId, servicoId,\r\n+      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes, codigoVenda\r\n+    } = req.body || {};\r\n+\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+    if (typeof codigoVenda !== 'undefined') {\r\n+      set.codigoVenda = String(codigoVenda || '').trim();\r\n+      if (set.codigoVenda) set.pago = true; // ao registrar código, marca como pago\r\n+    }\r\n+\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    // STATUS\r\n+    if (typeof status !== 'undefined') {\r\n+      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+      const s = String(status);\r\n+      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n+      set.status = s;\r\n+    }\r\n+    // Observações\r\n+    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n+\r\n+    // Pet do cliente (se informado)\r\n+    if (petId) {\r\n+      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n+      let clienteTarget = null;\r\n+      if (clienteId) {\r\n+        clienteTarget = clienteId;\r\n+      } else {\r\n+        const current = await Appointment.findById(id).select('cliente').lean();\r\n+        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n+      }\r\n+      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n+\r\n+      const pet = await Pet.findById(petId).select('owner').lean();\r\n+      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+      if (String(pet.owner) !== String(clienteTarget)) {\r\n+        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n+      }\r\n+      set.pet = petId;\r\n+    }\r\n+\r\n+    // Atualiza lista de serviços (se enviada)\r\n+    if (Array.isArray(servicos)) {\r\n+      const itens = [];\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      set.itens = itens;\r\n+      if (itens.length) {\r\n+        set.servico = itens[0].servico; // compat\r\n+        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+      } else {\r\n+        set.itens = [];\r\n+        set.valor = 0;\r\n+      }\r\n+    }\r\n+\r\n+    // Se já faturado e não é admin/admin_master, bloquear mudanças em serviços e data/hora\r\n+    try {\r\n+      const current = await Appointment.findById(id).select('codigoVenda pago').lean();\r\n+      const locked = !!(current?.codigoVenda || current?.pago);\r\n+      const role = req.user?.role || 'cliente';\r\n+      const privileged = (role === 'admin' || role === 'admin_master');\r\n+\r\n+      // Intenções do request\r\n+      const wantsServiceChange = Array.isArray(servicos) || typeof valor !== 'undefined' || !!servicoId;\r\n+      const wantsScheduleChange = !!scheduledAt;\r\n+\r\n+      if (locked && !privileged && (wantsServiceChange || wantsScheduleChange)) {\r\n+        return res.status(403).json({ message: 'Agendamento já faturado. Apenas Admin/Admin Master podem alterar serviços ou data/hora.' });\r\n+      }\r\n+    } catch (_) {}\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n+\r\n+      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n+      const servicosList = itens.length\r\n+        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n+        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n+      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n+\r\n+      return {\r\n+        _id: a._id,\r\n+        storeId: a.store?._id || a.store || null,\r\n+        clienteId: a.cliente?._id || null,\r\n+        clienteNome,\r\n+        pet: a.pet ? a.pet.nome : '—',\r\n+        petId: a.pet?._id || null,\r\n+        servico: servicosStr,             // compat: texto p/ exibição\r\n+        servicos: servicosList,           // novo: array de serviços do agendamento\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,                // total do agendamento\r\n+        pago: !!a.pago,\r\n+        codigoVenda: a.codigoVenda || null,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// GET /api/func/agendamentos/range?start=YYYY-MM-DD&end=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos/range', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { start: startStr, end: endStr, storeId } = req.query;\r\n+    if (!startStr || !endStr) {\r\n+      return res.status(400).json({ message: 'Parâmetros \"start\" e \"end\" são obrigatórios (YYYY-MM-DD).' });\r\n+    }\r\n+    const [ys, ms, ds] = startStr.split('-').map(n => parseInt(n, 10));\r\n+    const [ye, me, de] = endStr.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(ys, ms - 1, ds, 0, 0, 0, 0);\r\n+    const end   = new Date(ye, me - 1, de, 0, 0, 0, 0); // exclusivo\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n+      const tutorNome = a.cliente\r\n+        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || '')\r\n+        : '';\r\n+      return {\r\n+        _id: a._id,\r\n+        pet: a.pet ? a.pet.nome : null,\r\n+        servico: servicosList.map(s => s.nome).join(', '),\r\n+        servicos: servicosList,\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        tutor: tutorNome,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,\r\n+        pago: !!a.pago,\r\n+        codigoVenda: a.codigoVenda || null,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos/range', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos por intervalo' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n+    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n+\r\n+    let itens = [];\r\n+    if (Array.isArray(servicos) && servicos.length) {\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n+    } else {\r\n+      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n+        return res.status(400).json({ message: 'servicoId inválido.' });\r\n+      }\r\n+      let valorFinal = typeof valor === 'number' ? valor : null;\r\n+      if (valorFinal == null) {\r\n+        const serv = await Service.findById(servicoId).select('valor').lean();\r\n+        valorFinal = serv?.valor || 0;\r\n+      }\r\n+      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n+    }\r\n+\r\n+    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: itens[0]?.servico || null, // compat\r\n+      itens,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: total,\r\n+      pago: !!pago,\r\n+      status: statusFinal,\r\n+      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      observacoes: full.observacoes || '',\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao salvar' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n+\r\n+    const del = await Appointment.findByIdAndDelete(id).lean();\r\n+    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+\r\n+    return res.json({ ok: true });\r\n+  } catch (e) {\r\n+    console.error('DELETE /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757628461428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,530 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n+\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+\r\n+router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+\r\n+    const {\r\n+      storeId, clienteId, petId, servicoId,\r\n+      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes, codigoVenda\r\n+    } = req.body || {};\r\n+\r\n+    const set = {};\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n+    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n+    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n+    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n+    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n+    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n+    if (typeof codigoVenda !== 'undefined') {\r\n+      set.codigoVenda = String(codigoVenda || '').trim();\r\n+      if (set.codigoVenda) set.pago = true; // ao registrar código, marca como pago\r\n+    }\r\n+\r\n+    if (scheduledAt) {\r\n+      const d = new Date(scheduledAt);\r\n+      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n+      set.scheduledAt = d;\r\n+    }\r\n+\r\n+    // STATUS\r\n+    if (typeof status !== 'undefined') {\r\n+      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+      const s = String(status);\r\n+      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n+      set.status = s;\r\n+    }\r\n+    // Observações\r\n+    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n+\r\n+    // Pet do cliente (se informado)\r\n+    if (petId) {\r\n+      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n+      let clienteTarget = null;\r\n+      if (clienteId) {\r\n+        clienteTarget = clienteId;\r\n+      } else {\r\n+        const current = await Appointment.findById(id).select('cliente').lean();\r\n+        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n+      }\r\n+      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n+\r\n+      const pet = await Pet.findById(petId).select('owner').lean();\r\n+      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+      if (String(pet.owner) !== String(clienteTarget)) {\r\n+        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n+      }\r\n+      set.pet = petId;\r\n+    }\r\n+\r\n+    // Atualiza lista de serviços (se enviada)\r\n+    if (Array.isArray(servicos)) {\r\n+      const itens = [];\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      set.itens = itens;\r\n+      if (itens.length) {\r\n+        set.servico = itens[0].servico; // compat\r\n+        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+      } else {\r\n+        set.itens = [];\r\n+        set.valor = 0;\r\n+      }\r\n+    }\r\n+\r\n+    // Se já faturado e não é admin/admin_master, bloquear mudanças em serviços e data/hora\r\n+    try {\r\n+      const current = await Appointment.findById(id).select('codigoVenda pago').lean();\r\n+      const locked = !!(current?.codigoVenda || current?.pago);\r\n+      const role = req.user?.role || 'cliente';\r\n+      const privileged = (role === 'admin' || role === 'admin_master');\r\n+\r\n+      // Intenções do request\r\n+      const wantsServiceChange = Array.isArray(servicos) || typeof valor !== 'undefined' || !!servicoId;\r\n+      const wantsScheduleChange = !!scheduledAt;\r\n+\r\n+      if (locked && !privileged && (wantsServiceChange || wantsScheduleChange)) {\r\n+        return res.status(403).json({ message: 'Agendamento já faturado. Apenas Admin/Admin Master podem alterar serviços ou data/hora.' });\r\n+      }\r\n+    } catch (_) {}\r\n+\r\n+    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    if (!full) {\r\n+      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+    }\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    return res.json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('PUT /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n+\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n+    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n+    }\r\n+\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n+\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n+\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+\r\n+    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n+\r\n+      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n+      const servicosList = itens.length\r\n+        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n+        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n+      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n+\r\n+      return {\r\n+        _id: a._id,\r\n+        storeId: a.store?._id || a.store || null,\r\n+        clienteId: a.cliente?._id || null,\r\n+        clienteNome,\r\n+        pet: a.pet ? a.pet.nome : '—',\r\n+        petId: a.pet?._id || null,\r\n+        servico: servicosStr,             // compat: texto p/ exibição\r\n+        servicos: servicosList,           // novo: array de serviços do agendamento\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,                // total do agendamento\r\n+        pago: !!a.pago,\r\n+        codigoVenda: a.codigoVenda || null,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n+\r\n+// GET /api/func/agendamentos/range?start=YYYY-MM-DD&end=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos/range', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { start: startStr, end: endStr, storeId } = req.query;\r\n+    if (!startStr || !endStr) {\r\n+      return res.status(400).json({ message: 'Parâmetros \"start\" e \"end\" são obrigatórios (YYYY-MM-DD).' });\r\n+    }\r\n+    const [ys, ms, ds] = startStr.split('-').map(n => parseInt(n, 10));\r\n+    const [ye, me, de] = endStr.split('-').map(n => parseInt(n, 10));\r\n+    const start = new Date(ys, ms - 1, ds, 0, 0, 0, 0);\r\n+    const end   = new Date(ye, me - 1, de, 0, 0, 0, 0); // exclusivo\r\n+\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n+      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n+\r\n+    const map = (list || []).map(a => {\r\n+      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n+      const tutorNome = a.cliente\r\n+        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || '')\r\n+        : '';\r\n+      return {\r\n+        _id: a._id,\r\n+        pet: a.pet ? a.pet.nome : null,\r\n+        servico: servicosList.map(s => s.nome).join(', '),\r\n+        servicos: servicosList,\r\n+        profissionalId: a.profissional?._id || null,\r\n+        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n+        tutor: tutorNome,\r\n+        h: new Date(a.scheduledAt).toISOString(),\r\n+        valor: valorTotal,\r\n+        pago: !!a.pago,\r\n+        codigoVenda: a.codigoVenda || null,\r\n+        observacoes: a.observacoes || '',\r\n+        status: a.status || 'agendado'\r\n+      };\r\n+    });\r\n+\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos/range', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos por intervalo' });\r\n+  }\r\n+});\r\n+\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n+    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n+\r\n+    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n+    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n+\r\n+    let itens = [];\r\n+    if (Array.isArray(servicos) && servicos.length) {\r\n+      for (const it of servicos) {\r\n+        const sid = it?.servicoId;\r\n+        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n+        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n+        if (v == null) {\r\n+          const s = await Service.findById(sid).select('valor').lean();\r\n+          v = s?.valor || 0;\r\n+        }\r\n+        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+      }\r\n+      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n+    } else {\r\n+      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n+        return res.status(400).json({ message: 'servicoId inválido.' });\r\n+      }\r\n+      let valorFinal = typeof valor === 'number' ? valor : null;\r\n+      if (valorFinal == null) {\r\n+        const serv = await Service.findById(servicoId).select('valor').lean();\r\n+        valorFinal = serv?.valor || 0;\r\n+      }\r\n+      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n+    }\r\n+\r\n+    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: itens[0]?.servico || null, // compat\r\n+      itens,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: total,\r\n+      pago: !!pago,\r\n+      status: statusFinal,\r\n+      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n+      createdBy: req.user?._id\r\n+    });\r\n+\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('itens.servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n+    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: Number(full.valor || 0),\r\n+      pago: !!full.pago,\r\n+      status: full.status || 'agendado',\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: servicosStr,\r\n+      servicos: servicosList,\r\n+      observacoes: full.observacoes || '',\r\n+      profissional: full.profissional\r\n+        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n+        : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao salvar' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const u = await User.findById(id)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!u) {\r\n+      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n+    }\r\n+    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n+    res.json({ _id: u._id, nome });\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n+  }\r\n+});\r\n+\r\n+router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n+      return res.status(400).json({ message: 'ID inválido.' });\r\n+    }\r\n+    const p = await Pet.findById(id)\r\n+      .select('_id nome owner')\r\n+      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n+      .lean();\r\n+    if (!p) {\r\n+      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n+    }\r\n+    const clienteNome = p.owner\r\n+      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n+      : '';\r\n+    res.json({\r\n+      _id: p._id,\r\n+      nome: p.nome,\r\n+      clienteId: p.owner?._id || null,\r\n+      clienteNome\r\n+    });\r\n+  } catch (e) {\r\n+    console.error('GET /func/pets/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n+  }\r\n+});\r\n+\r\n+router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n+\r\n+    const del = await Appointment.findByIdAndDelete(id).lean();\r\n+    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n+\r\n+    return res.json({ ok: true });\r\n+  } catch (e) {\r\n+    console.error('DELETE /func/agendamentos/:id', e);\r\n+    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n+  }\r\n+});\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757953177200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,8 +173,9 @@\n     res.json(users.map(u => ({\r\n       _id: u._id,\r\n       nome: userDisplayName(u),\r\n       email: u.email,\r\n+      celular: u.celular || '',\r\n       doc: u.cpf || u.cnpj || '',\r\n       tipoConta: u.tipoConta\r\n     })));\r\n   } catch (e) {\r\n@@ -221,538 +222,71 @@\n     res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n   }\r\n });\r\n \r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+// Preço por raça de um serviço para uso na agenda\r\n+// GET /api/func/servicos/preco?serviceId=&storeId=&petId=  (ou &tipo=&raca=)\r\n+router.get('/servicos/preco', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n+    const { serviceId, storeId, petId } = req.query || {};\r\n+    if (!serviceId || !mongoose.Types.ObjectId.isValid(serviceId)) {\r\n+      return res.status(400).json({ message: 'serviceId obrigatório' });\r\n     }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n-\r\n-      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n-      const servicosList = itens.length\r\n-        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n-        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n-      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n-\r\n-      return {\r\n-        _id: a._id,\r\n-        storeId: a.store?._id || a.store || null,\r\n-        clienteId: a.cliente?._id || null,\r\n-        clienteNome,\r\n-        pet: a.pet ? a.pet.nome : '—',\r\n-        petId: a.pet?._id || null,\r\n-        servico: servicosStr,             // compat: texto p/ exibição\r\n-        servicos: servicosList,           // novo: array de serviços do agendamento\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,                // total do agendamento\r\n-        pago: !!a.pago,\r\n-        codigoVenda: a.codigoVenda || null,\r\n-        observacoes: a.observacoes || '',\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// GET /api/func/agendamentos/range?start=YYYY-MM-DD&end=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos/range', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { start: startStr, end: endStr, storeId } = req.query;\r\n-    if (!startStr || !endStr) {\r\n-      return res.status(400).json({ message: 'Parâmetros \"start\" e \"end\" são obrigatórios (YYYY-MM-DD).' });\r\n+    if (!storeId || !mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      return res.status(400).json({ message: 'storeId obrigatório' });\r\n     }\r\n-    const [ys, ms, ds] = startStr.split('-').map(n => parseInt(n, 10));\r\n-    const [ye, me, de] = endStr.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(ys, ms - 1, ds, 0, 0, 0, 0);\r\n-    const end   = new Date(ye, me - 1, de, 0, 0, 0, 0); // exclusivo\r\n \r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+    let tipo = (req.query.tipo || '').trim();\r\n+    let raca = (req.query.raca || '').trim();\r\n \r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n-      const tutorNome = a.cliente\r\n-        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || '')\r\n-        : '';\r\n-      return {\r\n-        _id: a._id,\r\n-        pet: a.pet ? a.pet.nome : null,\r\n-        servico: servicosList.map(s => s.nome).join(', '),\r\n-        servicos: servicosList,\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        tutor: tutorNome,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,\r\n-        pago: !!a.pago,\r\n-        codigoVenda: a.codigoVenda || null,\r\n-        observacoes: a.observacoes || '',\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos/range', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos por intervalo' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n-    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n-\r\n-    let itens = [];\r\n-    if (Array.isArray(servicos) && servicos.length) {\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n+    if ((!tipo || !raca) && petId && mongoose.Types.ObjectId.isValid(petId)) {\r\n+      const pet = await Pet.findById(petId).select('tipo raca').lean();\r\n+      if (pet) {\r\n+        const norm = (s) => String(s || '')\r\n+          .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+          .trim().toLowerCase();\r\n+        const mapTipo = (t) => {\r\n+          const n = norm(t);\r\n+          if (/cachorr|cao|c.o/.test(n)) return 'cachorro';\r\n+          if (/gat/.test(n)) return 'gato';\r\n+          if (/passar|ave/.test(n)) return 'passaro';\r\n+          if (/peix/.test(n)) return 'peixe';\r\n+          if (/roedor|hamster|coelho|porquinho/.test(n)) return 'roedor';\r\n+          if (/lagart/.test(n)) return 'lagarto';\r\n+          if (/tartarug/.test(n)) return 'tartaruga';\r\n+          if (/exot/.test(n)) return 'exotico';\r\n+          return n || 'cachorro';\r\n+        };\r\n+        tipo = tipo || mapTipo(pet.tipo);\r\n+        raca = raca || String(pet.raca || '').trim();\r\n       }\r\n-      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n-    } else {\r\n-      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n-        return res.status(400).json({ message: 'servicoId inválido.' });\r\n-      }\r\n-      let valorFinal = typeof valor === 'number' ? valor : null;\r\n-      if (valorFinal == null) {\r\n-        const serv = await Service.findById(servicoId).select('valor').lean();\r\n-        valorFinal = serv?.valor || 0;\r\n-      }\r\n-      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n     }\r\n \r\n-    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: itens[0]?.servico || null, // compat\r\n-      itens,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: total,\r\n-      pago: !!pago,\r\n-      status: statusFinal,\r\n-      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      observacoes: full.observacoes || '',\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao salvar' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n-\r\n-    const del = await Appointment.findByIdAndDelete(id).lean();\r\n-    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-\r\n-    return res.json({ ok: true });\r\n-  } catch (e) {\r\n-    console.error('DELETE /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-\r\n-    const {\r\n-      storeId, clienteId, petId, servicoId,\r\n-      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes, codigoVenda\r\n-    } = req.body || {};\r\n-\r\n-    const set = {};\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n-    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n-    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n-    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n-    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n-    if (typeof codigoVenda !== 'undefined') {\r\n-      set.codigoVenda = String(codigoVenda || '').trim();\r\n-      if (set.codigoVenda) set.pago = true; // ao registrar código, marca como pago\r\n-    }\r\n-\r\n-    if (scheduledAt) {\r\n-      const d = new Date(scheduledAt);\r\n-      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n-      set.scheduledAt = d;\r\n-    }\r\n-\r\n-    // STATUS\r\n-    if (typeof status !== 'undefined') {\r\n-      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-      const s = String(status);\r\n-      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n-      set.status = s;\r\n-    }\r\n-    // Observações\r\n-    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n-\r\n-    // Pet do cliente (se informado)\r\n-    if (petId) {\r\n-      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n-      let clienteTarget = null;\r\n-      if (clienteId) {\r\n-        clienteTarget = clienteId;\r\n-      } else {\r\n-        const current = await Appointment.findById(id).select('cliente').lean();\r\n-        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n+    const ServiceBreedPrice = require('../models/ServiceBreedPrice');\r\n+    let preco = null;\r\n+    if (tipo && raca) {\r\n+      const ov = await ServiceBreedPrice.findOne({\r\n+        service: serviceId,\r\n+        store: storeId,\r\n+        tipo: String(tipo).trim(),\r\n+        raca: new RegExp('^' + escapeRegex(raca) + '$', 'i')\r\n+      }).select('valor custo').lean();\r\n+      if (ov) {\r\n+        preco = { valor: Number(ov.valor || 0), custo: Number(ov.custo || 0), source: 'breed' };\r\n       }\r\n-      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n-\r\n-      const pet = await Pet.findById(petId).select('owner').lean();\r\n-      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-      if (String(pet.owner) !== String(clienteTarget)) {\r\n-        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n-      }\r\n-      set.pet = petId;\r\n     }\r\n \r\n-    // Atualiza lista de serviços (se enviada)\r\n-    if (Array.isArray(servicos)) {\r\n-      const itens = [];\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      set.itens = itens;\r\n-      if (itens.length) {\r\n-        set.servico = itens[0].servico; // compat\r\n-        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-      } else {\r\n-        set.itens = [];\r\n-        set.valor = 0;\r\n-      }\r\n+    if (!preco || !(preco.valor > 0)) {\r\n+      const s = await Service.findById(serviceId).select('valor').lean();\r\n+      preco = { valor: Number((s && s.valor) || 0), custo: 0, source: 'service' };\r\n     }\r\n-\r\n-    // Se já faturado e não é admin/admin_master, bloquear mudanças em serviços e data/hora\r\n-    try {\r\n-      const current = await Appointment.findById(id).select('codigoVenda pago').lean();\r\n-      const locked = !!(current?.codigoVenda || current?.pago);\r\n-      const role = req.user?.role || 'cliente';\r\n-      const privileged = (role === 'admin' || role === 'admin_master');\r\n-\r\n-      // Intenções do request\r\n-      const wantsServiceChange = Array.isArray(servicos) || typeof valor !== 'undefined' || !!servicoId;\r\n-      const wantsScheduleChange = !!scheduledAt;\r\n-\r\n-      if (locked && !privileged && (wantsServiceChange || wantsScheduleChange)) {\r\n-        return res.status(403).json({ message: 'Agendamento já faturado. Apenas Admin/Admin Master podem alterar serviços ou data/hora.' });\r\n-      }\r\n-    } catch (_) {}\r\n-\r\n-    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    if (!full) {\r\n-      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-    }\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    return res.json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n+    res.json(preco);\r\n   } catch (e) {\r\n-    console.error('PUT /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n+    console.error('GET /func/servicos/preco', e);\r\n+    res.status(500).json({ message: 'Erro ao obter preço do serviço' });\r\n   }\r\n });\r\n \r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n // ---------- PROFISSIONAIS (esteticistas) ----------\r\n router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n     const { storeId } = req.query;\r\n@@ -776,1028 +310,29 @@\n     res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n   }\r\n });\r\n \r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+// PROFISSIONAIS: esteticistas e veterinários\r\n+router.get('/profissionais', authMiddleware, requireStaff, async (req, res) => {\r\n   try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n-\r\n-      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n-      const servicosList = itens.length\r\n-        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n-        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n-      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n-\r\n-      return {\r\n-        _id: a._id,\r\n-        storeId: a.store?._id || a.store || null,\r\n-        clienteId: a.cliente?._id || null,\r\n-        clienteNome,\r\n-        pet: a.pet ? a.pet.nome : '—',\r\n-        petId: a.pet?._id || null,\r\n-        servico: servicosStr,             // compat: texto p/ exibição\r\n-        servicos: servicosList,           // novo: array de serviços do agendamento\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,                // total do agendamento\r\n-        pago: !!a.pago,\r\n-        codigoVenda: a.codigoVenda || null,\r\n-        observacoes: a.observacoes || '',\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// GET /api/func/agendamentos/range?start=YYYY-MM-DD&end=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos/range', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { start: startStr, end: endStr, storeId } = req.query;\r\n-    if (!startStr || !endStr) {\r\n-      return res.status(400).json({ message: 'Parâmetros \"start\" e \"end\" são obrigatórios (YYYY-MM-DD).' });\r\n-    }\r\n-    const [ys, ms, ds] = startStr.split('-').map(n => parseInt(n, 10));\r\n-    const [ye, me, de] = endStr.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(ys, ms - 1, ds, 0, 0, 0, 0);\r\n-    const end   = new Date(ye, me - 1, de, 0, 0, 0, 0); // exclusivo\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n-      const tutorNome = a.cliente\r\n-        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || '')\r\n-        : '';\r\n-      return {\r\n-        _id: a._id,\r\n-        pet: a.pet ? a.pet.nome : null,\r\n-        servico: servicosList.map(s => s.nome).join(', '),\r\n-        servicos: servicosList,\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        tutor: tutorNome,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,\r\n-        pago: !!a.pago,\r\n-        codigoVenda: a.codigoVenda || null,\r\n-        observacoes: a.observacoes || '',\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos/range', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos por intervalo' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n-    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n-\r\n-    let itens = [];\r\n-    if (Array.isArray(servicos) && servicos.length) {\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n-    } else {\r\n-      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n-        return res.status(400).json({ message: 'servicoId inválido.' });\r\n-      }\r\n-      let valorFinal = typeof valor === 'number' ? valor : null;\r\n-      if (valorFinal == null) {\r\n-        const serv = await Service.findById(servicoId).select('valor').lean();\r\n-        valorFinal = serv?.valor || 0;\r\n-      }\r\n-      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n-    }\r\n-\r\n-    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: itens[0]?.servico || null, // compat\r\n-      itens,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: total,\r\n-      pago: !!pago,\r\n-      status: statusFinal,\r\n-      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      observacoes: full.observacoes || '',\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao salvar' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n-\r\n-    const del = await Appointment.findByIdAndDelete(id).lean();\r\n-    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-\r\n-    return res.json({ ok: true });\r\n-  } catch (e) {\r\n-    console.error('DELETE /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-\r\n-    const {\r\n-      storeId, clienteId, petId, servicoId,\r\n-      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes, codigoVenda\r\n-    } = req.body || {};\r\n-\r\n-    const set = {};\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n-    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n-    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n-    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n-    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n-    if (typeof codigoVenda !== 'undefined') {\r\n-      set.codigoVenda = String(codigoVenda || '').trim();\r\n-      if (set.codigoVenda) set.pago = true; // ao registrar código, marca como pago\r\n-    }\r\n-\r\n-    if (scheduledAt) {\r\n-      const d = new Date(scheduledAt);\r\n-      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n-      set.scheduledAt = d;\r\n-    }\r\n-\r\n-    // STATUS\r\n-    if (typeof status !== 'undefined') {\r\n-      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-      const s = String(status);\r\n-      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n-      set.status = s;\r\n-    }\r\n-    // Observações\r\n-    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n-\r\n-    // Pet do cliente (se informado)\r\n-    if (petId) {\r\n-      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n-      let clienteTarget = null;\r\n-      if (clienteId) {\r\n-        clienteTarget = clienteId;\r\n-      } else {\r\n-        const current = await Appointment.findById(id).select('cliente').lean();\r\n-        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n-      }\r\n-      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n-\r\n-      const pet = await Pet.findById(petId).select('owner').lean();\r\n-      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-      if (String(pet.owner) !== String(clienteTarget)) {\r\n-        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n-      }\r\n-      set.pet = petId;\r\n-    }\r\n-\r\n-    // Atualiza lista de serviços (se enviada)\r\n-    if (Array.isArray(servicos)) {\r\n-      const itens = [];\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      set.itens = itens;\r\n-      if (itens.length) {\r\n-        set.servico = itens[0].servico; // compat\r\n-        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-      } else {\r\n-        set.itens = [];\r\n-        set.valor = 0;\r\n-      }\r\n-    }\r\n-\r\n-    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    if (!full) {\r\n-      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-    }\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    return res.json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('PUT /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n     const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n+    let tipos = String(req.query.tipos || '').trim();\r\n+    const ALLOWED = ['esteticista','veterinario'];\r\n+    const tiposArr = tipos ? tipos.split(',').map(s => s.trim().toLowerCase()).filter(s => ALLOWED.includes(s)) : ALLOWED;\r\n+    const filter = { role: { $in: ['funcionario','admin','admin_master'] }, grupos: { $in: tiposArr } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.empresas = storeId;\r\n     const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email grupos')\r\n       .sort({ nomeCompleto: 1 })\r\n       .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n-\r\n-      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n-      const servicosList = itens.length\r\n-        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n-        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n-      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n-\r\n-      return {\r\n-        _id: a._id,\r\n-        storeId: a.store?._id || a.store || null,\r\n-        clienteId: a.cliente?._id || null,\r\n-        clienteNome,\r\n-        pet: a.pet ? a.pet.nome : '—',\r\n-        petId: a.pet?._id || null,\r\n-        servico: servicosStr,             // compat: texto p/ exibição\r\n-        servicos: servicosList,           // novo: array de serviços do agendamento\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,                // total do agendamento\r\n-        pago: !!a.pago,\r\n-        codigoVenda: a.codigoVenda || null,\r\n-        observacoes: a.observacoes || '',\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// GET /api/func/agendamentos/range?start=YYYY-MM-DD&end=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos/range', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { start: startStr, end: endStr, storeId } = req.query;\r\n-    if (!startStr || !endStr) {\r\n-      return res.status(400).json({ message: 'Parâmetros \"start\" e \"end\" são obrigatórios (YYYY-MM-DD).' });\r\n-    }\r\n-    const [ys, ms, ds] = startStr.split('-').map(n => parseInt(n, 10));\r\n-    const [ye, me, de] = endStr.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(ys, ms - 1, ds, 0, 0, 0, 0);\r\n-    const end   = new Date(ye, me - 1, de, 0, 0, 0, 0); // exclusivo\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n-      const tutorNome = a.cliente\r\n-        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || '')\r\n-        : '';\r\n-      return {\r\n-        _id: a._id,\r\n-        pet: a.pet ? a.pet.nome : null,\r\n-        servico: servicosList.map(s => s.nome).join(', '),\r\n-        servicos: servicosList,\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        tutor: tutorNome,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,\r\n-        pago: !!a.pago,\r\n-        codigoVenda: a.codigoVenda || null,\r\n-        observacoes: a.observacoes || '',\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos/range', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos por intervalo' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n-    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n-\r\n-    let itens = [];\r\n-    if (Array.isArray(servicos) && servicos.length) {\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n-    } else {\r\n-      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n-        return res.status(400).json({ message: 'servicoId inválido.' });\r\n-      }\r\n-      let valorFinal = typeof valor === 'number' ? valor : null;\r\n-      if (valorFinal == null) {\r\n-        const serv = await Service.findById(servicoId).select('valor').lean();\r\n-        valorFinal = serv?.valor || 0;\r\n-      }\r\n-      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n-    }\r\n-\r\n-    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: itens[0]?.servico || null, // compat\r\n-      itens,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: total,\r\n-      pago: !!pago,\r\n-      status: statusFinal,\r\n-      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      observacoes: full.observacoes || '',\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao salvar' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n-\r\n-    const del = await Appointment.findByIdAndDelete(id).lean();\r\n-    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-\r\n-    return res.json({ ok: true });\r\n-  } catch (e) {\r\n-    console.error('DELETE /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-\r\n-    const {\r\n-      storeId, clienteId, petId, servicoId,\r\n-      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes\r\n-    } = req.body || {};\r\n-\r\n-    const set = {};\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n-    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n-    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n-    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n-    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n-\r\n-    if (scheduledAt) {\r\n-      const d = new Date(scheduledAt);\r\n-      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n-      set.scheduledAt = d;\r\n-    }\r\n-\r\n-    // STATUS\r\n-    if (typeof status !== 'undefined') {\r\n-      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-      const s = String(status);\r\n-      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n-      set.status = s;\r\n-    }\r\n-    // Observações\r\n-    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n-\r\n-    // Pet do cliente (se informado)\r\n-    if (petId) {\r\n-      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n-      let clienteTarget = null;\r\n-      if (clienteId) {\r\n-        clienteTarget = clienteId;\r\n-      } else {\r\n-        const current = await Appointment.findById(id).select('cliente').lean();\r\n-        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n-      }\r\n-      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n-\r\n-      const pet = await Pet.findById(petId).select('owner').lean();\r\n-      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-      if (String(pet.owner) !== String(clienteTarget)) {\r\n-        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n-      }\r\n-      set.pet = petId;\r\n-    }\r\n-\r\n-    // Atualiza lista de serviços (se enviada)\r\n-    if (Array.isArray(servicos)) {\r\n-      const itens = [];\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      set.itens = itens;\r\n-      if (itens.length) {\r\n-        set.servico = itens[0].servico; // compat\r\n-        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-      } else {\r\n-        set.itens = [];\r\n-        set.valor = 0;\r\n-      }\r\n-    }\r\n-\r\n-    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    if (!full) {\r\n-      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-    }\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    return res.json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('PUT /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n+    const out = users.map(u => ({\r\n       _id: u._id,\r\n       nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n+      tipo: (Array.isArray(u.grupos) && u.grupos.includes('veterinario')) ? 'veterinario' : 'esteticista'\r\n+    }));\r\n+    res.json(out);\r\n   } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n+    console.error('GET /func/profissionais', e);\r\n     res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n   }\r\n });\r\n \r\n@@ -2081,513 +616,4 @@\n   }\r\n });\r\n \r\n module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-\r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n-\r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n-\r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n-\r\n-router.put('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-\r\n-    const {\r\n-      storeId, clienteId, petId, servicoId,\r\n-      profissionalId, scheduledAt, valor, pago, status, servicos, observacoes\r\n-    } = req.body || {};\r\n-\r\n-    const set = {};\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) set.store = storeId;\r\n-    if (clienteId && mongoose.Types.ObjectId.isValid(clienteId)) set.cliente = clienteId;\r\n-    if (servicoId && mongoose.Types.ObjectId.isValid(servicoId)) set.servico = servicoId; // compat\r\n-    if (profissionalId && mongoose.Types.ObjectId.isValid(profissionalId)) set.profissional = profissionalId;\r\n-    if (typeof valor !== 'undefined') set.valor = Number(valor);\r\n-    if (typeof pago !== 'undefined') set.pago = !!pago;\r\n-\r\n-    if (scheduledAt) {\r\n-      const d = new Date(scheduledAt);\r\n-      if (isNaN(d.getTime())) return res.status(400).json({ message: 'scheduledAt inválido.' });\r\n-      set.scheduledAt = d;\r\n-    }\r\n-\r\n-    // STATUS\r\n-    if (typeof status !== 'undefined') {\r\n-      const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-      const s = String(status);\r\n-      if (!allowed.has(s)) return res.status(400).json({ message: 'Status inválido.' });\r\n-      set.status = s;\r\n-    }\r\n-    // Observações\r\n-    if (typeof observacoes !== 'undefined') set.observacoes = String(observacoes);\r\n-\r\n-    // Pet do cliente (se informado)\r\n-    if (petId) {\r\n-      if (!mongoose.Types.ObjectId.isValid(petId)) return res.status(400).json({ message: 'petId inválido.' });\r\n-      let clienteTarget = null;\r\n-      if (clienteId) {\r\n-        clienteTarget = clienteId;\r\n-      } else {\r\n-        const current = await Appointment.findById(id).select('cliente').lean();\r\n-        clienteTarget = current?.cliente ? String(current.cliente) : null;\r\n-      }\r\n-      if (!clienteTarget) return res.status(400).json({ message: 'clienteId é obrigatório para trocar o pet.' });\r\n-\r\n-      const pet = await Pet.findById(petId).select('owner').lean();\r\n-      if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-      if (String(pet.owner) !== String(clienteTarget)) {\r\n-        return res.status(400).json({ message: 'Este pet não pertence ao cliente selecionado.' });\r\n-      }\r\n-      set.pet = petId;\r\n-    }\r\n-\r\n-    // Atualiza lista de serviços (se enviada)\r\n-    if (Array.isArray(servicos)) {\r\n-      const itens = [];\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      set.itens = itens;\r\n-      if (itens.length) {\r\n-        set.servico = itens[0].servico; // compat\r\n-        set.valor = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-      } else {\r\n-        set.itens = [];\r\n-        set.valor = 0;\r\n-      }\r\n-    }\r\n-\r\n-    const full = await Appointment.findByIdAndUpdate(id, { $set: set }, { new: true })\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    if (!full) {\r\n-      return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-    }\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    return res.json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('PUT /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao atualizar agendamento' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n-\r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n-    }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n-    }\r\n-\r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n-\r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n-\r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n-\r\n-    const [y, m, d] = date.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-    const end   = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const clienteNome = a.cliente ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.email || null) : null;\r\n-\r\n-      const itens = Array.isArray(a.itens) ? a.itens : [];\r\n-      const servicosList = itens.length\r\n-        ? itens.map(it => ({ _id: it.servico?._id || it.servico || null, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }))\r\n-        : (a.servico ? [{ _id: a.servico?._id || a.servico, nome: a.servico?.nome || '—', valor: Number(a.valor || 0) }] : []);\r\n-      const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-      const valorTotal = (servicosList.reduce((s, x) => s + Number(x.valor || 0), 0)) || Number(a.valor || 0) || 0;\r\n-\r\n-      return {\r\n-        _id: a._id,\r\n-        storeId: a.store?._id || a.store || null,\r\n-        clienteId: a.cliente?._id || null,\r\n-        clienteNome,\r\n-        pet: a.pet ? a.pet.nome : '—',\r\n-        petId: a.pet?._id || null,\r\n-        servico: servicosStr,             // compat: texto p/ exibição\r\n-        servicos: servicosList,           // novo: array de serviços do agendamento\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,                // total do agendamento\r\n-        pago: !!a.pago,\r\n-        observacoes: a.observacoes || '',\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n-\r\n-// GET /api/func/agendamentos/range?start=YYYY-MM-DD&end=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos/range', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { start: startStr, end: endStr, storeId } = req.query;\r\n-    if (!startStr || !endStr) {\r\n-      return res.status(400).json({ message: 'Parâmetros \"start\" e \"end\" são obrigatórios (YYYY-MM-DD).' });\r\n-    }\r\n-    const [ys, ms, ds] = startStr.split('-').map(n => parseInt(n, 10));\r\n-    const [ye, me, de] = endStr.split('-').map(n => parseInt(n, 10));\r\n-    const start = new Date(ys, ms - 1, ds, 0, 0, 0, 0);\r\n-    const end   = new Date(ye, me - 1, de, 0, 0, 0, 0); // exclusivo\r\n-\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n-\r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago codigoVenda status observacoes')\r\n-      .populate('cliente', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n-\r\n-    const map = (list || []).map(a => {\r\n-      const servicosList = (a.itens || []).map(it => ({ _id: it.servico?._id, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-      const valorTotal = servicosList.reduce((acc, s) => acc + Number(s.valor || 0), 0) || Number(a.valor || 0) || 0;\r\n-      const tutorNome = a.cliente\r\n-        ? (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || '')\r\n-        : '';\r\n-      return {\r\n-        _id: a._id,\r\n-        pet: a.pet ? a.pet.nome : null,\r\n-        servico: servicosList.map(s => s.nome).join(', '),\r\n-        servicos: servicosList,\r\n-        profissionalId: a.profissional?._id || null,\r\n-        profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : null,\r\n-        tutor: tutorNome,\r\n-        h: new Date(a.scheduledAt).toISOString(),\r\n-        valor: valorTotal,\r\n-        pago: !!a.pago,\r\n-        codigoVenda: a.codigoVenda || null,\r\n-        observacoes: a.observacoes || '',\r\n-        status: a.status || 'agendado'\r\n-      };\r\n-    });\r\n-\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos/range', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos por intervalo' });\r\n-  }\r\n-});\r\n-\r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago, status, servicos, observacoes } = req.body || {};\r\n-    if (!storeId || !clienteId || !petId || !profissionalId || !scheduledAt) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n-    }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n-\r\n-    const allowed = new Set(['agendado', 'em_espera', 'em_atendimento', 'finalizado']);\r\n-    const statusFinal = allowed.has(status) ? status : 'agendado';\r\n-\r\n-    let itens = [];\r\n-    if (Array.isArray(servicos) && servicos.length) {\r\n-      for (const it of servicos) {\r\n-        const sid = it?.servicoId;\r\n-        if (!sid || !mongoose.Types.ObjectId.isValid(sid)) continue;\r\n-        let v = typeof it?.valor === 'number' ? it.valor : null;\r\n-        if (v == null) {\r\n-          const s = await Service.findById(sid).select('valor').lean();\r\n-          v = s?.valor || 0;\r\n-        }\r\n-        itens.push({ servico: sid, valor: Number(v || 0) });\r\n-      }\r\n-      if (!itens.length) return res.status(400).json({ message: 'Lista de serviços inválida.' });\r\n-    } else {\r\n-      if (!servicoId || !mongoose.Types.ObjectId.isValid(servicoId)) {\r\n-        return res.status(400).json({ message: 'servicoId inválido.' });\r\n-      }\r\n-      let valorFinal = typeof valor === 'number' ? valor : null;\r\n-      if (valorFinal == null) {\r\n-        const serv = await Service.findById(servicoId).select('valor').lean();\r\n-        valorFinal = serv?.valor || 0;\r\n-      }\r\n-      itens = [{ servico: servicoId, valor: Number(valorFinal || 0) }];\r\n-    }\r\n-\r\n-    const total = itens.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-\r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: itens[0]?.servico || null, // compat\r\n-      itens,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: total,\r\n-      pago: !!pago,\r\n-      status: statusFinal,\r\n-      observacoes: (typeof observacoes === 'string' ? observacoes : ''),\r\n-      createdBy: req.user?._id\r\n-    });\r\n-\r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico itens profissional scheduledAt valor pago status observacoes')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('itens.servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    const servicosList = (full.itens || []).map(it => ({ _id: it.servico?._id || it.servico, nome: it.servico?.nome || '—', valor: Number(it.valor || 0) }));\r\n-    const servicosStr = servicosList.map(s => s.nome).join(', ');\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: Number(full.valor || 0),\r\n-      pago: !!full.pago,\r\n-      status: full.status || 'agendado',\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: servicosStr,\r\n-      servicos: servicosList,\r\n-      observacoes: full.observacoes || '',\r\n-      profissional: full.profissional\r\n-        ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial)\r\n-        : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao salvar' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/clientes/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const u = await User.findById(id)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!u) {\r\n-      return res.status(404).json({ message: 'Cliente não encontrado.' });\r\n-    }\r\n-    const nome = u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email || '';\r\n-    res.json({ _id: u._id, nome });\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar cliente.' });\r\n-  }\r\n-});\r\n-\r\n-router.get('/pets/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n-      return res.status(400).json({ message: 'ID inválido.' });\r\n-    }\r\n-    const p = await Pet.findById(id)\r\n-      .select('_id nome owner')\r\n-      .populate('owner', 'nomeCompleto nomeContato razaoSocial email')\r\n-      .lean();\r\n-    if (!p) {\r\n-      return res.status(404).json({ message: 'Pet não encontrado.' });\r\n-    }\r\n-    const clienteNome = p.owner\r\n-      ? (p.owner.nomeCompleto || p.owner.nomeContato || p.owner.razaoSocial || p.owner.email || '')\r\n-      : '';\r\n-    res.json({\r\n-      _id: p._id,\r\n-      nome: p.nome,\r\n-      clienteId: p.owner?._id || null,\r\n-      clienteNome\r\n-    });\r\n-  } catch (e) {\r\n-    console.error('GET /func/pets/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n-  }\r\n-});\r\n-\r\n-router.delete('/agendamentos/:id', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { id } = req.params;\r\n-    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido.' });\r\n-\r\n-    const del = await Appointment.findByIdAndDelete(id).lean();\r\n-    if (!del) return res.status(404).json({ message: 'Agendamento não encontrado.' });\r\n-\r\n-    return res.json({ ok: true });\r\n-  } catch (e) {\r\n-    console.error('DELETE /func/agendamentos/:id', e);\r\n-    res.status(500).json({ message: 'Erro ao excluir agendamento' });\r\n-  }\r\n-});\r\n-\r\n-module.exports = router;\r\n"
                }
            ],
            "date": 1757347212717,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst mongoose = require('mongoose');\r\nconst authMiddleware = require('../middlewares/authMiddleware');\r\nconst authorizeRoles = require('../middlewares/authorizeRoles');\r\n\r\nconst User = require('../models/User');\r\nconst Pet = require('../models/Pet');\r\nconst Service = require('../models/Service');\r\n\r\n// Somente funcionários e admins\r\nconst requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n\r\nfunction escapeRegex(s) {\r\n  return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\nfunction userDisplayName(u) {\r\n  return u.nomeCompleto || u.nomeContato || u.razaoSocial || u.email;\r\n}\r\n\r\n// GET /api/func/clientes/buscar?q=...&limit=8\r\nrouter.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n  try {\r\n    const q = String(req.query.q || '').trim();\r\n    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n    if (!q) return res.json([]);\r\n\r\n    const regex = new RegExp(escapeRegex(q), 'i');\r\n    const onlyDigits = q.replace(/\\D/g, '');\r\n\r\n    const or = [\r\n      { nomeCompleto: regex },\r\n      { nomeContato: regex },\r\n      { razaoSocial: regex },\r\n      { email: regex },\r\n    ];\r\n    if (onlyDigits.length >= 4) {\r\n      or.push({ cpf: new RegExp(onlyDigits) });\r\n      or.push({ cnpj: new RegExp(onlyDigits) });\r\n      or.push({ celular: new RegExp(onlyDigits) });\r\n    }\r\n\r\n    const users = await User.find({ $or: or })\r\n      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n      .limit(limit)\r\n      .lean();\r\n\r\n    res.json(users.map(u => ({\r\n      _id: u._id,\r\n      nome: userDisplayName(u),\r\n      email: u.email,\r\n      cpf: u.cpf,\r\n      cnpj: u.cnpj,\r\n      tipoConta: u.tipoConta,\r\n    })));\r\n  } catch (e) {\r\n    console.error('GET /func/clientes/buscar', e);\r\n    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n  }\r\n});\r\n\r\n// GET /api/func/clientes/:id/pets\r\nrouter.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    if (!mongoose.Types.ObjectId.isValid(id)) return res.status(400).json({ message: 'ID inválido' });\r\n    const pets = await Pet.find({ owner: id })\r\n      .select('_id nome tipo raca porte sexo')\r\n      .sort({ nome: 1 })\r\n      .lean();\r\n    res.json(pets);\r\n  } catch (e) {\r\n    console.error('GET /func/clientes/:id/pets', e);\r\n    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n  }\r\n});\r\n\r\n// GET /api/func/servicos/buscar?q=...&limit=8\r\nrouter.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n  try {\r\n    const q = String(req.query.q || '').trim();\r\n    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n    const items = await Service.find(filter)\r\n      .select('_id nome valor porte grupo')\r\n      .populate('grupo')\r\n      .limit(limit)\r\n      .sort({ nome: 1 })\r\n      .lean();\r\n\r\n    res.json(items.map(s => ({\r\n      _id: s._id,\r\n      nome: s.nome,\r\n      valor: s.valor || 0,\r\n      porte: s.porte || [],\r\n      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n    })));\r\n  } catch (e) {\r\n    console.error('GET /func/servicos/buscar', e);\r\n    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n  }\r\n});\r\n\r\n// GET /api/func/profissionais/esteticistas?storeId=<id>\r\nrouter.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n  try {\r\n    const { storeId } = req.query;\r\n    const filter = {\r\n      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n      grupos: 'esteticista'\r\n    };\r\n    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n      filter.empresas = storeId;\r\n    }\r\n    const users = await User.find(filter)\r\n      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n      .sort({ nomeCompleto: 1 })\r\n      .lean();\r\n\r\n    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n  } catch (e) {\r\n    console.error('GET /func/profissionais/esteticistas', e);\r\n    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"
        }
    ]
}