{
    "sourceFile": "servidor/routes/cart.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756579352474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756579352474,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst User = require('../models/User');\r\nconst mongoose = require('mongoose');\r\nconst requireAuth = require('../middlewares/requireAuth');\r\n\r\n// Função auxiliar para calcular o carrinho com a hierarquia de promoções\r\nasync function getCalculatedCart(userId) {\r\n    const user = await User.findById(userId).populate('cart.product');\r\n    if (!user) return []; // Retorna um carrinho vazio se o utilizador não for encontrado\r\n\r\n    const cartWithEffectivePrices = user.cart.map(item => {\r\n        const product = item.product;\r\n        if (!product) return null;\r\n\r\n        let bestPrice = product.venda;\r\n        let appliedPromoText = null;\r\n\r\n        // 1. Promoção Individual\r\n        if (product.promocao && product.promocao.ativa && product.promocao.porcentagem > 0) {\r\n            const promoPrice = product.venda * (1 - product.promocao.porcentagem / 100);\r\n            if (promoPrice < bestPrice) {\r\n                bestPrice = promoPrice;\r\n                appliedPromoText = `${product.promocao.porcentagem}% OFF`;\r\n            }\r\n        }\r\n\r\n        // 2. Promoção Condicional (Acima de X unidades)\r\n        if (product.promocaoCondicional && product.promocaoCondicional.ativa && product.promocaoCondicional.tipo === 'acima_de') {\r\n            if (item.quantity >= product.promocaoCondicional.quantidadeMinima) {\r\n                const conditionalPrice = product.venda * (1 - product.promocaoCondicional.descontoPorcentagem / 100);\r\n                if (conditionalPrice < bestPrice) {\r\n                    bestPrice = conditionalPrice;\r\n                    appliedPromoText = `Acima de ${product.promocaoCondicional.quantidadeMinima} un.`;\r\n                }\r\n            }\r\n        }\r\n\r\n        // 3. Promoção Condicional (Leve X, Pague Y)\r\n        if (product.promocaoCondicional && product.promocaoCondicional.ativa && product.promocaoCondicional.tipo === 'leve_pague') {\r\n            const { leve, pague } = product.promocaoCondicional;\r\n            if (leve > 0 && item.quantity >= leve) {\r\n                const promoPacks = Math.floor(item.quantity / leve);\r\n                const paidItems = promoPacks * pague;\r\n                const remainingItems = item.quantity % leve;\r\n\r\n                const totalLevePaguePrice = (paidItems + remainingItems) * product.venda;\r\n                const effectiveLevePaguePrice = totalLevePaguePrice / item.quantity;\r\n\r\n                if (effectiveLevePaguePrice < bestPrice) {\r\n                    bestPrice = effectiveLevePaguePrice;\r\n                    appliedPromoText = `Leve ${leve} Pague ${pague}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        // 4. Preço Club\r\n        if (item.isSubscribed && product.precoClube && product.precoClube > 0) {\r\n            if (product.precoClube < bestPrice) {\r\n                bestPrice = product.precoClube;\r\n                appliedPromoText = 'Preço Club';\r\n            }\r\n        }\r\n\r\n        return {\r\n            _id: item._id,\r\n            quantity: item.quantity,\r\n            product: item.product,\r\n            isSubscribed: item.isSubscribed,\r\n            effectivePrice: bestPrice,\r\n            promoText: appliedPromoText\r\n        };\r\n    }).filter(item => item !== null);\r\n\r\n    return cartWithEffectivePrices;\r\n}\r\n\r\n// Middleware para validar se é o dono do carrinho ou admin_master\r\nfunction authorizeCartAccess(req, res, next) {\r\n    if (req.user.id !== req.params.userId && req.user.role !== 'admin_master') {\r\n        return res.status(403).json({ message: 'Acesso negado' });\r\n    }\r\n    next();\r\n}\r\n\r\n// GET /api/cart/:userId - Busca o carrinho de um utilizador\r\nrouter.get('/:userId', requireAuth, authorizeCartAccess, async (req, res) => {\r\n    try {\r\n        const calculatedCart = await getCalculatedCart(req.params.userId);\r\n        res.json(calculatedCart);\r\n    } catch (error) {\r\n        console.error(\"Erro ao buscar carrinho:\", error);\r\n        res.status(500).json({ message: 'Erro no servidor.' });\r\n    }\r\n});\r\n\r\n// POST /api/cart/:userId - Adiciona um item ao carrinho\r\nrouter.post('/:userId', requireAuth, authorizeCartAccess, async (req, res) => {\r\n    const { productId, quantity } = req.body;\r\n    try {\r\n        const user = await User.findById(req.params.userId);\r\n        if (!user) return res.status(404).json({ message: 'Utilizador não encontrado.' });\r\n\r\n        const cartItemIndex = user.cart.findIndex(item => item.product.toString() === productId);\r\n\r\n        if (cartItemIndex > -1) {\r\n            user.cart[cartItemIndex].quantity += quantity;\r\n        } else {\r\n            user.cart.push({ product: productId, quantity: quantity });\r\n        }\r\n\r\n        await user.save();\r\n        const populatedUser = await User.findById(req.params.userId).populate('cart.product');\r\n        res.status(200).json(populatedUser.cart);\r\n    } catch (error) {\r\n        console.error(\"Erro ao adicionar item ao carrinho:\", error);\r\n        res.status(500).json({ message: 'Erro no servidor.' });\r\n    }\r\n});\r\n\r\n// PUT /api/cart/:userId/:productId - Atualiza a quantidade de um item\r\nrouter.put('/:userId/:productId', requireAuth, authorizeCartAccess, async (req, res) => {\r\n    const { quantity } = req.body;\r\n    try {\r\n        const user = await User.findById(req.params.userId);\r\n        if (!user) return res.status(404).json({ message: 'Utilizador não encontrado.' });\r\n\r\n        const cartItem = user.cart.find(item => item.product.toString() === req.params.productId);\r\n        if (cartItem) {\r\n            cartItem.quantity = quantity;\r\n        }\r\n\r\n        user.cart = user.cart.filter(item => item.quantity > 0);\r\n\r\n        await user.save();\r\n        const populatedUser = await User.findById(req.params.userId).populate('cart.product');\r\n        res.status(200).json(populatedUser.cart);\r\n    } catch (error) {\r\n        console.error(\"Erro ao atualizar carrinho:\", error);\r\n        res.status(500).json({ message: 'Erro no servidor.' });\r\n    }\r\n});\r\n\r\n// PUT /api/cart/:userId/:productId/subscribe - Liga/desliga a assinatura de um item\r\nrouter.put('/:userId/:productId/subscribe', requireAuth, authorizeCartAccess, async (req, res) => {\r\n    const { isSubscribed } = req.body;\r\n    try {\r\n        const user = await User.findById(req.params.userId);\r\n        if (!user) return res.status(404).json({ message: 'Utilizador não encontrado.' });\r\n\r\n        const cartItem = user.cart.find(item => item.product.toString() === req.params.productId);\r\n        if (cartItem) {\r\n            cartItem.isSubscribed = isSubscribed;\r\n            await user.save();\r\n        }\r\n\r\n        const calculatedCart = await getCalculatedCart(req.params.userId);\r\n        res.status(200).json(calculatedCart);\r\n    } catch (error) {\r\n        console.error(\"Erro ao atualizar assinatura:\", error);\r\n        res.status(500).json({ message: 'Erro no servidor.' });\r\n    }\r\n});\r\n\r\n// DELETE /api/cart/:userId/:productId - Remove um item do carrinho\r\nrouter.delete('/:userId/:productId', requireAuth, authorizeCartAccess, async (req, res) => {\r\n    try {\r\n        await User.updateOne(\r\n            { _id: req.params.userId },\r\n            { $pull: { cart: { product: req.params.productId } } }\r\n        );\r\n        const populatedUser = await User.findById(req.params.userId).populate('cart.product');\r\n        res.status(200).json(populatedUser.cart);\r\n    } catch (error) {\r\n        console.error(\"Erro ao remover item do carrinho:\", error);\r\n        res.status(500).json({ message: 'Erro no servidor.' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}