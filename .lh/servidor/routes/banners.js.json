{
    "sourceFile": "servidor/routes/banners.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1756571321994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756571372781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n const Banner = require('../models/Banner');\r\n const multer = require('multer');\r\n const path = require('path');\r\n const fs = require('fs');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n \r\n // Configuração do Multer para upload de imagens dos banners\r\n const storage = multer.diskStorage({\r\n     destination: (req, file, cb) => {\r\n"
                },
                {
                    "date": 1756571379172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-// Ficheiro: servidor/routes/banners.js\r\n-\r\n const express = require('express');\r\n const router = express.Router();\r\n const Banner = require('../models/Banner');\r\n const multer = require('multer');\r\n"
                },
                {
                    "date": 1756579288917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n const Banner = require('../models/Banner');\r\n const multer = require('multer');\r\n const path = require('path');\r\n const fs = require('fs');\r\n+const requireAuth = require('../middlewares/requireAuth');\r\n const authorizeRoles = require('../middlewares/authorizeRoles');\r\n \r\n // Configuração do Multer para upload de imagens dos banners\r\n const storage = multer.diskStorage({\r\n@@ -18,48 +19,60 @@\n     }\r\n });\r\n const upload = multer({ storage: storage });\r\n \r\n-// ROTA: GET /api/banners - Busca todos os banners ordenados\r\n+// ROTA: GET /api/banners - Busca todos os banners ordenados (pública)\r\n router.get('/', async (req, res) => {\r\n     try {\r\n         const banners = await Banner.find({}).sort({ order: 1 });\r\n         res.json(banners);\r\n     } catch (error) {\r\n+        console.error('Erro ao buscar banners:', error);\r\n         res.status(500).json({ message: 'Erro ao buscar banners.' });\r\n     }\r\n });\r\n \r\n-// ROTA: POST /api/banners - Cria um novo banner com upload de imagem\r\n-router.post('/', authorizeRoles('admin', 'admin_master'), upload.single('bannerImage'), async (req, res) => {\r\n-    try {\r\n-        if (!req.file) {\r\n-            return res.status(400).json({ message: 'Nenhum ficheiro de imagem enviado.' });\r\n+// ROTA: POST /api/banners - Cria um novo banner (apenas admin/admin_master)\r\n+router.post(\r\n+    '/',\r\n+    requireAuth,\r\n+    authorizeRoles('admin', 'admin_master'),\r\n+    upload.single('bannerImage'),\r\n+    async (req, res) => {\r\n+        try {\r\n+            if (!req.file) {\r\n+                return res.status(400).json({ message: 'Nenhum ficheiro de imagem enviado.' });\r\n+            }\r\n+            const { title, subtitle, buttonText, link } = req.body;\r\n+            const newBanner = new Banner({\r\n+                imageUrl: `/uploads/banners/${req.file.filename}`,\r\n+                title,\r\n+                subtitle,\r\n+                buttonText,\r\n+                link\r\n+            });\r\n+            await newBanner.save();\r\n+            res.status(201).json(newBanner);\r\n+        } catch (error) {\r\n+            console.error('Erro ao criar banner:', error);\r\n+            res.status(500).json({ message: 'Erro ao criar banner.' });\r\n         }\r\n-        const { title, subtitle, buttonText, link } = req.body;\r\n-        const newBanner = new Banner({\r\n-            imageUrl: `/uploads/banners/${req.file.filename}`,\r\n-            title, subtitle, buttonText, link\r\n-        });\r\n-        await newBanner.save();\r\n-        res.status(201).json(newBanner);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: 'Erro ao criar banner.' });\r\n     }\r\n-});\r\n+);\r\n \r\n-// ROTA: DELETE /api/banners/:id - Apaga um banner\r\n-router.delete('/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n+// ROTA: DELETE /api/banners/:id - Apaga um banner (apenas admin/admin_master)\r\n+router.delete('/:id', requireAuth, authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n     try {\r\n         await Banner.findByIdAndDelete(req.params.id);\r\n         res.json({ message: 'Banner apagado com sucesso.' });\r\n     } catch (error) {\r\n+        console.error('Erro ao apagar banner:', error);\r\n         res.status(500).json({ message: 'Erro ao apagar banner.' });\r\n     }\r\n });\r\n \r\n-// ROTA: PUT /api/banners/order - Atualiza a ordem dos banners\r\n-router.put('/order', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n+// ROTA: PUT /api/banners/order - Atualiza a ordem dos banners (apenas admin/admin_master)\r\n+router.put('/order', requireAuth, authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n     try {\r\n         const { orderedIds } = req.body;\r\n         const bulkOps = orderedIds.map((id, index) => ({\r\n             updateOne: {\r\n@@ -69,9 +82,10 @@\n         }));\r\n         await Banner.bulkWrite(bulkOps);\r\n         res.json({ message: 'Ordem dos banners atualizada.' });\r\n     } catch (error) {\r\n+        console.error('Erro ao reordenar banners:', error);\r\n         res.status(500).json({ message: 'Erro ao reordenar banners.' });\r\n     }\r\n });\r\n \r\n\\ No newline at end of file\n-module.exports = router;\n+module.exports = router;\r\n"
                }
            ],
            "date": 1756571321994,
            "name": "Commit-0",
            "content": "// Ficheiro: servidor/routes/banners.js\r\n\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst Banner = require('../models/Banner');\r\nconst multer = require('multer');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\n\r\n// Configuração do Multer para upload de imagens dos banners\r\nconst storage = multer.diskStorage({\r\n    destination: (req, file, cb) => {\r\n        const dir = 'public/uploads/banners';\r\n        if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });\r\n        cb(null, dir);\r\n    },\r\n    filename: (req, file, cb) => {\r\n        cb(null, `banner-${Date.now()}${path.extname(file.originalname)}`);\r\n    }\r\n});\r\nconst upload = multer({ storage: storage });\r\n\r\n// ROTA: GET /api/banners - Busca todos os banners ordenados\r\nrouter.get('/', async (req, res) => {\r\n    try {\r\n        const banners = await Banner.find({}).sort({ order: 1 });\r\n        res.json(banners);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao buscar banners.' });\r\n    }\r\n});\r\n\r\n// ROTA: POST /api/banners - Cria um novo banner com upload de imagem\r\nrouter.post('/', authorizeRoles('admin', 'admin_master'), upload.single('bannerImage'), async (req, res) => {\r\n    try {\r\n        if (!req.file) {\r\n            return res.status(400).json({ message: 'Nenhum ficheiro de imagem enviado.' });\r\n        }\r\n        const { title, subtitle, buttonText, link } = req.body;\r\n        const newBanner = new Banner({\r\n            imageUrl: `/uploads/banners/${req.file.filename}`,\r\n            title, subtitle, buttonText, link\r\n        });\r\n        await newBanner.save();\r\n        res.status(201).json(newBanner);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao criar banner.' });\r\n    }\r\n});\r\n\r\n// ROTA: DELETE /api/banners/:id - Apaga um banner\r\nrouter.delete('/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n    try {\r\n        await Banner.findByIdAndDelete(req.params.id);\r\n        res.json({ message: 'Banner apagado com sucesso.' });\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao apagar banner.' });\r\n    }\r\n});\r\n\r\n// ROTA: PUT /api/banners/order - Atualiza a ordem dos banners\r\nrouter.put('/order', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n    try {\r\n        const { orderedIds } = req.body;\r\n        const bulkOps = orderedIds.map((id, index) => ({\r\n            updateOne: {\r\n                filter: { _id: id },\r\n                update: { $set: { order: index } }\r\n            }\r\n        }));\r\n        await Banner.bulkWrite(bulkOps);\r\n        res.json({ message: 'Ordem dos banners atualizada.' });\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Erro ao reordenar banners.' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"
        }
    ]
}