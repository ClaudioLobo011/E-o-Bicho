{
    "sourceFile": "servidor/routes/vehicles.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1756571719366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756580436986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,41 +1,54 @@\n const express = require('express');\r\n const router = express.Router();\r\n const Vehicle = require('../models/Vehicle');\r\n+const requireAuth = require('../middlewares/requireAuth');\r\n const authorizeRoles = require('../middlewares/authorizeRoles');\r\n \r\n-// GET /api/vehicles - Busca todos os veículos\r\n+// GET /api/vehicles - Público (usado no cálculo de frete)\r\n router.get('/', async (req, res) => {\r\n     try {\r\n         const vehicles = await Vehicle.find({});\r\n         res.json(vehicles);\r\n-    } catch (error) { res.status(500).json({ message: 'Erro no servidor.' }); }\r\n+    } catch (error) { \r\n+        console.error(\"Erro ao buscar veículos:\", error);\r\n+        res.status(500).json({ message: 'Erro no servidor.' }); \r\n+    }\r\n });\r\n \r\n-// POST /api/vehicles - Cria um novo veículo\r\n-router.post('/', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n+// POST /api/vehicles - Criar veículo (restrito)\r\n+router.post('/', requireAuth, authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n     try {\r\n         const newVehicle = new Vehicle(req.body);\r\n         const savedVehicle = await newVehicle.save();\r\n         res.status(201).json(savedVehicle);\r\n-    } catch (error) { res.status(500).json({ message: 'Erro ao criar veículo.' }); }\r\n+    } catch (error) { \r\n+        console.error(\"Erro ao criar veículo:\", error);\r\n+        res.status(500).json({ message: 'Erro ao criar veículo.' }); \r\n+    }\r\n });\r\n \r\n-// PUT /api/vehicles/:id - Atualiza um veículo\r\n-router.put('/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n+// PUT /api/vehicles/:id - Atualizar veículo (restrito)\r\n+router.put('/:id', requireAuth, authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n     try {\r\n         const updatedVehicle = await Vehicle.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n         if (!updatedVehicle) return res.status(404).json({ message: 'Veículo não encontrado.' });\r\n\\ No newline at end of file\n         res.json(updatedVehicle);\r\n-    } catch (error) { res.status(500).json({ message: 'Erro ao atualizar veículo.' }); }\r\n+    } catch (error) { \r\n+        console.error(\"Erro ao atualizar veículo:\", error);\r\n+        res.status(500).json({ message: 'Erro ao atualizar veículo.' }); \r\n+    }\r\n });\r\n \r\n-// DELETE /api/vehicles/:id - Apaga um veículo\r\n-router.delete('/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n+// DELETE /api/vehicles/:id - Deletar veículo (restrito)\r\n+router.delete('/:id', requireAuth, authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n     try {\r\n         const deletedVehicle = await Vehicle.findByIdAndDelete(req.params.id);\r\n         if (!deletedVehicle) return res.status(404).json({ message: 'Veículo não encontrado.' });\r\n         res.json({ message: 'Veículo apagado com sucesso.' });\r\n-    } catch (error) { res.status(500).json({ message: 'Erro ao apagar veículo.' }); }\r\n+    } catch (error) { \r\n+        console.error(\"Erro ao apagar veículo:\", error);\r\n+        res.status(500).json({ message: 'Erro ao apagar veículo.' }); \r\n+    }\r\n });\r\n \r\n-module.exports = router;\n+module.exports = router;\r\n"
                }
            ],
            "date": 1756571719366,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst Vehicle = require('../models/Vehicle');\r\nconst authorizeRoles = require('../middlewares/authorizeRoles');\r\n\r\n// GET /api/vehicles - Busca todos os veículos\r\nrouter.get('/', async (req, res) => {\r\n    try {\r\n        const vehicles = await Vehicle.find({});\r\n        res.json(vehicles);\r\n    } catch (error) { res.status(500).json({ message: 'Erro no servidor.' }); }\r\n});\r\n\r\n// POST /api/vehicles - Cria um novo veículo\r\nrouter.post('/', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n    try {\r\n        const newVehicle = new Vehicle(req.body);\r\n        const savedVehicle = await newVehicle.save();\r\n        res.status(201).json(savedVehicle);\r\n    } catch (error) { res.status(500).json({ message: 'Erro ao criar veículo.' }); }\r\n});\r\n\r\n// PUT /api/vehicles/:id - Atualiza um veículo\r\nrouter.put('/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n    try {\r\n        const updatedVehicle = await Vehicle.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n        if (!updatedVehicle) return res.status(404).json({ message: 'Veículo não encontrado.' });\r\n        res.json(updatedVehicle);\r\n    } catch (error) { res.status(500).json({ message: 'Erro ao atualizar veículo.' }); }\r\n});\r\n\r\n// DELETE /api/vehicles/:id - Apaga um veículo\r\nrouter.delete('/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n    try {\r\n        const deletedVehicle = await Vehicle.findByIdAndDelete(req.params.id);\r\n        if (!deletedVehicle) return res.status(404).json({ message: 'Veículo não encontrado.' });\r\n        res.json({ message: 'Veículo apagado com sucesso.' });\r\n    } catch (error) { res.status(500).json({ message: 'Erro ao apagar veículo.' }); }\r\n});\r\n\r\nmodule.exports = router;"
        }
    ]
}