{
    "sourceFile": "servidor/routes/pets.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1756579740053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756585126527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,18 +11,13 @@\n   }\r\n   next();\r\n }\r\n \r\n-// ROTA: POST /api/pets\r\n-// DESCRIÇÃO: Cria um novo pet (somente dono ou admin_master)\r\n+// Criar um pet (qualquer usuário logado pode criar)\r\n router.post('/', requireAuth, async (req, res) => {\r\n   try {\r\n-    if (req.user.id !== req.body.owner && req.user.role !== 'admin_master') {\r\n-      return res.status(403).json({ message: 'Acesso negado' });\r\n-    }\r\n-\r\n     const newPet = new Pet({\r\n-      owner: req.body.owner,\r\n+      owner: req.user.id, // garante que o dono é o usuário logado\r\n       nome: req.body.pet_name,\r\n       tipo: req.body.pet_type,\r\n       raca: req.body.pet_raca,\r\n       porte: req.body.pet_porte,\r\n@@ -35,51 +30,52 @@\n     });\r\n \r\n     const savedPet = await newPet.save();\r\n     res.status(201).json({ message: 'Pet adicionado com sucesso!', pet: savedPet });\r\n-\r\n   } catch (error) {\r\n-    console.error(\"Erro ao salvar pet:\", error);\r\n     res.status(500).json({ message: 'Erro no servidor ao salvar o pet.' });\r\n   }\r\n });\r\n \r\n-// GET /api/pets/user/:userId - Busca todos os pets de um utilizador específico\r\n-router.get('/user/:userId', requireAuth, authorizePetAccess, async (req, res) => {\r\n+// Buscar pets de um usuário\r\n+router.get('/user/:userId', requireAuth, async (req, res) => {\r\n   try {\r\n+    // só o próprio user ou admin pode ver\r\n+    if (req.user.id !== req.params.userId && req.user.role !== 'admin_master') {\r\n+      return res.status(403).json({ message: 'Acesso negado.' });\r\n+    }\r\n+\r\n     const pets = await Pet.find({ owner: req.params.userId });\r\n-    res.status(200).json(pets);\r\n+    res.json(pets);\r\n   } catch (error) {\r\n-    console.error(\"Erro ao buscar pets:\", error);\r\n-    res.status(500).json({ message: 'Erro no servidor ao buscar os pets.' });\r\n+    res.status(500).json({ message: 'Erro ao buscar pets.' });\r\n   }\r\n });\r\n \r\n-// GET /api/pets/:petId - Busca um pet específico (somente dono ou admin_master)\r\n+// Buscar um pet específico\r\n router.get('/:petId', requireAuth, async (req, res) => {\r\n   try {\r\n     const pet = await Pet.findById(req.params.petId);\r\n     if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n \r\n-    if (req.user.id !== pet.owner.toString() && req.user.role !== 'admin_master') {\r\n-      return res.status(403).json({ message: 'Acesso negado' });\r\n+    if (String(pet.owner) !== req.user.id && req.user.role !== 'admin_master') {\r\n+      return res.status(403).json({ message: 'Acesso negado.' });\r\n     }\r\n \r\n-    res.status(200).json(pet);\r\n+    res.json(pet);\r\n   } catch (error) {\r\n-    console.error(\"Erro ao buscar pet:\", error);\r\n-    res.status(500).json({ message: 'Erro no servidor ao buscar o pet.' });\r\n+    res.status(500).json({ message: 'Erro ao buscar pet.' });\r\n   }\r\n });\r\n \r\n-// PUT /api/pets/:petId - Atualiza um pet existente (somente dono ou admin_master)\r\n+// Atualizar pet\r\n router.put('/:petId', requireAuth, async (req, res) => {\r\n   try {\r\n     const pet = await Pet.findById(req.params.petId);\r\n-    if (!pet) return res.status(404).json({ message: 'Pet não encontrado para atualização.' });\r\n+    if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n \r\n-    if (req.user.id !== pet.owner.toString() && req.user.role !== 'admin_master') {\r\n-      return res.status(403).json({ message: 'Acesso negado' });\r\n+    if (String(pet.owner) !== req.user.id && req.user.role !== 'admin_master') {\r\n+      return res.status(403).json({ message: 'Acesso negado.' });\r\n     }\r\n \r\n     const updateData = {\r\n       nome: req.body.pet_name,\r\n@@ -93,35 +89,29 @@\n       rga: req.body.pet_rga,\r\n       peso: req.body.pet_peso,\r\n     };\r\n \r\n-    const updatedPet = await Pet.findByIdAndUpdate(req.params.petId, updateData, {\r\n-      new: true,\r\n-      runValidators: true,\r\n-    });\r\n-\r\n-    res.status(200).json({ message: 'Pet atualizado com sucesso!', pet: updatedPet });\r\n+    const updatedPet = await Pet.findByIdAndUpdate(req.params.petId, updateData, { new: true, runValidators: true });\r\n+    res.json({ message: 'Pet atualizado com sucesso!', pet: updatedPet });\r\n   } catch (error) {\r\n-    console.error(\"Erro ao atualizar pet:\", error);\r\n-    res.status(500).json({ message: 'Erro no servidor ao atualizar o pet.' });\r\n+    res.status(500).json({ message: 'Erro ao atualizar pet.' });\r\n   }\r\n });\r\n \r\n-// DELETE /api/pets/:petId - Exclui um pet (somente dono ou admin_master)\r\n+// Excluir pet\r\n router.delete('/:petId', requireAuth, async (req, res) => {\r\n   try {\r\n     const pet = await Pet.findById(req.params.petId);\r\n-    if (!pet) return res.status(404).json({ message: 'Pet não encontrado para exclusão.' });\r\n+    if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n \r\n-    if (req.user.id !== pet.owner.toString() && req.user.role !== 'admin_master') {\r\n-      return res.status(403).json({ message: 'Acesso negado' });\r\n+    if (String(pet.owner) !== req.user.id && req.user.role !== 'admin_master') {\r\n+      return res.status(403).json({ message: 'Acesso negado.' });\r\n     }\r\n \r\n-    await pet.deleteOne();\r\n-    res.status(200).json({ message: 'Pet excluído com sucesso!' });\r\n+    await Pet.findByIdAndDelete(req.params.petId);\r\n+    res.json({ message: 'Pet excluído com sucesso!' });\r\n   } catch (error) {\r\n-    console.error(\"Erro ao excluir pet:\", error);\r\n-    res.status(500).json({ message: 'Erro no servidor ao excluir o pet.' });\r\n+    res.status(500).json({ message: 'Erro ao excluir pet.' });\r\n   }\r\n });\r\n \r\n module.exports = router;\r\n"
                }
            ],
            "date": 1756579740053,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst Pet = require('../models/Pet');\r\nconst requireAuth = require('../middlewares/requireAuth');\r\n\r\n// Middleware para validar acesso aos pets\r\nfunction authorizePetAccess(req, res, next) {\r\n  const { userId } = req.params;\r\n  if (userId && req.user.id !== userId && req.user.role !== 'admin_master') {\r\n    return res.status(403).json({ message: 'Acesso negado' });\r\n  }\r\n  next();\r\n}\r\n\r\n// ROTA: POST /api/pets\r\n// DESCRIÇÃO: Cria um novo pet (somente dono ou admin_master)\r\nrouter.post('/', requireAuth, async (req, res) => {\r\n  try {\r\n    if (req.user.id !== req.body.owner && req.user.role !== 'admin_master') {\r\n      return res.status(403).json({ message: 'Acesso negado' });\r\n    }\r\n\r\n    const newPet = new Pet({\r\n      owner: req.body.owner,\r\n      nome: req.body.pet_name,\r\n      tipo: req.body.pet_type,\r\n      raca: req.body.pet_raca,\r\n      porte: req.body.pet_porte,\r\n      sexo: req.body.pet_sexo,\r\n      dataNascimento: req.body.pet_nascimento,\r\n      microchip: req.body.pet_microchip,\r\n      pelagemCor: req.body.pet_pelagem,\r\n      rga: req.body.pet_rga,\r\n      peso: req.body.pet_peso,\r\n    });\r\n\r\n    const savedPet = await newPet.save();\r\n    res.status(201).json({ message: 'Pet adicionado com sucesso!', pet: savedPet });\r\n\r\n  } catch (error) {\r\n    console.error(\"Erro ao salvar pet:\", error);\r\n    res.status(500).json({ message: 'Erro no servidor ao salvar o pet.' });\r\n  }\r\n});\r\n\r\n// GET /api/pets/user/:userId - Busca todos os pets de um utilizador específico\r\nrouter.get('/user/:userId', requireAuth, authorizePetAccess, async (req, res) => {\r\n  try {\r\n    const pets = await Pet.find({ owner: req.params.userId });\r\n    res.status(200).json(pets);\r\n  } catch (error) {\r\n    console.error(\"Erro ao buscar pets:\", error);\r\n    res.status(500).json({ message: 'Erro no servidor ao buscar os pets.' });\r\n  }\r\n});\r\n\r\n// GET /api/pets/:petId - Busca um pet específico (somente dono ou admin_master)\r\nrouter.get('/:petId', requireAuth, async (req, res) => {\r\n  try {\r\n    const pet = await Pet.findById(req.params.petId);\r\n    if (!pet) return res.status(404).json({ message: 'Pet não encontrado.' });\r\n\r\n    if (req.user.id !== pet.owner.toString() && req.user.role !== 'admin_master') {\r\n      return res.status(403).json({ message: 'Acesso negado' });\r\n    }\r\n\r\n    res.status(200).json(pet);\r\n  } catch (error) {\r\n    console.error(\"Erro ao buscar pet:\", error);\r\n    res.status(500).json({ message: 'Erro no servidor ao buscar o pet.' });\r\n  }\r\n});\r\n\r\n// PUT /api/pets/:petId - Atualiza um pet existente (somente dono ou admin_master)\r\nrouter.put('/:petId', requireAuth, async (req, res) => {\r\n  try {\r\n    const pet = await Pet.findById(req.params.petId);\r\n    if (!pet) return res.status(404).json({ message: 'Pet não encontrado para atualização.' });\r\n\r\n    if (req.user.id !== pet.owner.toString() && req.user.role !== 'admin_master') {\r\n      return res.status(403).json({ message: 'Acesso negado' });\r\n    }\r\n\r\n    const updateData = {\r\n      nome: req.body.pet_name,\r\n      tipo: req.body.pet_type,\r\n      raca: req.body.pet_raca,\r\n      porte: req.body.pet_porte,\r\n      sexo: req.body.pet_sexo,\r\n      dataNascimento: req.body.pet_nascimento,\r\n      microchip: req.body.pet_microchip,\r\n      pelagemCor: req.body.pet_pelagem,\r\n      rga: req.body.pet_rga,\r\n      peso: req.body.pet_peso,\r\n    };\r\n\r\n    const updatedPet = await Pet.findByIdAndUpdate(req.params.petId, updateData, {\r\n      new: true,\r\n      runValidators: true,\r\n    });\r\n\r\n    res.status(200).json({ message: 'Pet atualizado com sucesso!', pet: updatedPet });\r\n  } catch (error) {\r\n    console.error(\"Erro ao atualizar pet:\", error);\r\n    res.status(500).json({ message: 'Erro no servidor ao atualizar o pet.' });\r\n  }\r\n});\r\n\r\n// DELETE /api/pets/:petId - Exclui um pet (somente dono ou admin_master)\r\nrouter.delete('/:petId', requireAuth, async (req, res) => {\r\n  try {\r\n    const pet = await Pet.findById(req.params.petId);\r\n    if (!pet) return res.status(404).json({ message: 'Pet não encontrado para exclusão.' });\r\n\r\n    if (req.user.id !== pet.owner.toString() && req.user.role !== 'admin_master') {\r\n      return res.status(403).json({ message: 'Acesso negado' });\r\n    }\r\n\r\n    await pet.deleteOne();\r\n    res.status(200).json({ message: 'Pet excluído com sucesso!' });\r\n  } catch (error) {\r\n    console.error(\"Erro ao excluir pet:\", error);\r\n    res.status(500).json({ message: 'Erro no servidor ao excluir o pet.' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}