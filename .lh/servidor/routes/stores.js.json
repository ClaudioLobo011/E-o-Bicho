{
    "sourceFile": "servidor/routes/stores.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1756571675242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756571684439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     } catch (error) { res.status(500).json({ message: 'Erro no servidor.' }); }\r\n });\r\n \r\n // POST /api/stores - Cria uma nova loja\r\n-router.post('/', async (req, res) => {\r\n+router.post('/', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n     try {\r\n         const newStore = new Store(req.body);\r\n         const savedStore = await newStore.save();\r\n         res.status(201).json(savedStore);\r\n"
                },
                {
                    "date": 1756571693847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+const Store = require('../models/Store');\r\n+const multer = require('multer');\r\n+const path = require('path');\r\n+const fs = require('fs');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+\r\n+// Configuração do Multer para upload de imagens das lojas\r\n+const storage = multer.diskStorage({\r\n+    destination: function (req, file, cb) {\r\n+        const dir = 'public/uploads/stores';\r\n+        // Cria o diretório se ele não existir\r\n+        if (!fs.existsSync(dir)){\r\n+            fs.mkdirSync(dir, { recursive: true });\r\n+        }\r\n+        cb(null, dir);\r\n+    },\r\n+    filename: function (req, file, cb) {\r\n+        cb(null, `store-${req.params.id}${path.extname(file.originalname)}`);\r\n+    }\r\n+});\r\n+const upload = multer({ storage: storage });\r\n+\r\n+// GET /api/stores - Busca todas as lojas\r\n+router.get('/', async (req, res) => {\r\n+    try {\r\n+        const stores = await Store.find({}).sort({ nome: 1 });\r\n+        res.json(stores);\r\n+    } catch (error) { res.status(500).json({ message: 'Erro no servidor.' }); }\r\n+});\r\n+\r\n+// GET /api/stores/:id - Busca uma loja por ID\r\n+router.get('/:id', async (req, res) => {\r\n+    try {\r\n+        const store = await Store.findById(req.params.id);\r\n+        if (!store) return res.status(404).json({ message: 'Loja não encontrada.' });\r\n+        res.json(store);\r\n+    } catch (error) { res.status(500).json({ message: 'Erro no servidor.' }); }\r\n+});\r\n+\r\n+// POST /api/stores - Cria uma nova loja\r\n+router.post('/', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n+    try {\r\n+        const newStore = new Store(req.body);\r\n+        const savedStore = await newStore.save();\r\n+        res.status(201).json(savedStore);\r\n+    } catch (error) { res.status(500).json({ message: 'Erro ao criar loja.' }); }\r\n+});\r\n+\r\n+// PUT /api/stores/:id - Atualiza uma loja existente\r\n+router.put('/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n+    try {\r\n+        const updatedStore = await Store.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n+        if (!updatedStore) return res.status(404).json({ message: 'Loja não encontrada.' });\r\n+        res.json(updatedStore);\r\n+    } catch (error) { res.status(500).json({ message: 'Erro ao atualizar loja.' }); }\r\n+});\r\n+\r\n+// DELETE /api/stores/:id - Apaga uma loja\r\n+router.delete('/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n+    try {\r\n+        const deletedStore = await Store.findByIdAndDelete(req.params.id);\r\n+        if (!deletedStore) return res.status(404).json({ message: 'Loja não encontrada.' });\r\n+        res.json({ message: 'Loja apagada com sucesso.' });\r\n+    } catch (error) { res.status(500).json({ message: 'Erro ao apagar loja.' }); }\r\n+});\r\n+\r\n+// Rota para upload de imagem da loja\r\n+router.post('/:id/upload', authorizeRoles('admin', 'admin_master'), upload.single('imagem'), async (req, res) => {\r\n+    try {\r\n+        const store = await Store.findById(req.params.id);\r\n+        if (!store) {\r\n+            return res.status(404).json({ message: 'Loja não encontrada.' });\r\n+        }\r\n+        // Salva o caminho do ficheiro no banco de dados\r\n+        store.imagem = `/uploads/stores/${req.file.filename}`;\r\n+        await store.save();\r\n+        res.json(store);\r\n+    } catch (error) {\r\n+        console.error(\"Erro no upload da imagem da loja:\", error);\r\n+        res.status(500).json({ message: 'Erro no servidor ao fazer upload da imagem.' });\r\n+    }\r\n+});\r\n+\r\n+module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756580333991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,15 @@\n const Store = require('../models/Store');\r\n const multer = require('multer');\r\n const path = require('path');\r\n const fs = require('fs');\r\n+const requireAuth = require('../middlewares/requireAuth');\r\n const authorizeRoles = require('../middlewares/authorizeRoles');\r\n \r\n // Configuração do Multer para upload de imagens das lojas\r\n const storage = multer.diskStorage({\r\n     destination: function (req, file, cb) {\r\n         const dir = 'public/uploads/stores';\r\n-        // Cria o diretório se ele não existir\r\n         if (!fs.existsSync(dir)){\r\n             fs.mkdirSync(dir, { recursive: true });\r\n         }\r\n         cb(null, dir);\r\n@@ -21,146 +21,74 @@\n     }\r\n });\r\n const upload = multer({ storage: storage });\r\n \r\n-// GET /api/stores - Busca todas as lojas\r\n+// GET /api/stores - Público\r\n router.get('/', async (req, res) => {\r\n     try {\r\n         const stores = await Store.find({}).sort({ nome: 1 });\r\n         res.json(stores);\r\n-    } catch (error) { res.status(500).json({ message: 'Erro no servidor.' }); }\r\n+    } catch (error) { \r\n+        console.error(\"Erro ao buscar lojas:\", error);\r\n+        res.status(500).json({ message: 'Erro no servidor.' }); \r\n+    }\r\n });\r\n \r\n-// GET /api/stores/:id - Busca uma loja por ID\r\n+// GET /api/stores/:id - Público\r\n router.get('/:id', async (req, res) => {\r\n     try {\r\n         const store = await Store.findById(req.params.id);\r\n         if (!store) return res.status(404).json({ message: 'Loja não encontrada.' });\r\n         res.json(store);\r\n-    } catch (error) { res.status(500).json({ message: 'Erro no servidor.' }); }\r\n+    } catch (error) { \r\n+        console.error(\"Erro ao buscar loja:\", error);\r\n+        res.status(500).json({ message: 'Erro no servidor.' }); \r\n+    }\r\n });\r\n \r\n-// POST /api/stores - Cria uma nova loja\r\n-router.post('/', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n+// POST /api/stores - Criar loja (restrito)\r\n+router.post('/', requireAuth, authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n     try {\r\n         const newStore = new Store(req.body);\r\n         const savedStore = await newStore.save();\r\n         res.status(201).json(savedStore);\r\n-    } catch (error) { res.status(500).json({ message: 'Erro ao criar loja.' }); }\r\n+    } catch (error) { \r\n+        console.error(\"Erro ao criar loja:\", error);\r\n+        res.status(500).json({ message: 'Erro ao criar loja.' }); \r\n+    }\r\n });\r\n \r\n-// PUT /api/stores/:id - Atualiza uma loja existente\r\n-router.put('/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n+// PUT /api/stores/:id - Atualizar loja (restrito)\r\n+router.put('/:id', requireAuth, authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n     try {\r\n         const updatedStore = await Store.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n         if (!updatedStore) return res.status(404).json({ message: 'Loja não encontrada.' });\r\n         res.json(updatedStore);\r\n-    } catch (error) { res.status(500).json({ message: 'Erro ao atualizar loja.' }); }\r\n+    } catch (error) { \r\n+        console.error(\"Erro ao atualizar loja:\", error);\r\n+        res.status(500).json({ message: 'Erro ao atualizar loja.' }); \r\n+    }\r\n });\r\n \r\n-// DELETE /api/stores/:id - Apaga uma loja\r\n-router.delete('/:id', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n+// DELETE /api/stores/:id - Deletar loja (restrito)\r\n+router.delete('/:id', requireAuth, authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n     try {\r\n         const deletedStore = await Store.findByIdAndDelete(req.params.id);\r\n         if (!deletedStore) return res.status(404).json({ message: 'Loja não encontrada.' });\r\n         res.json({ message: 'Loja apagada com sucesso.' });\r\n-    } catch (error) { res.status(500).json({ message: 'Erro ao apagar loja.' }); }\r\n-});\r\n-\r\n-// Rota para upload de imagem da loja\r\n-router.post('/:id/upload', authorizeRoles('admin', 'admin_master'), upload.single('imagem'), async (req, res) => {\r\n-    try {\r\n-        const store = await Store.findById(req.params.id);\r\n-        if (!store) {\r\n-            return res.status(404).json({ message: 'Loja não encontrada.' });\r\n-        }\r\n-        // Salva o caminho do ficheiro no banco de dados\r\n-        store.imagem = `/uploads/stores/${req.file.filename}`;\r\n-        await store.save();\r\n-        res.json(store);\r\n-    } catch (error) {\r\n-        console.error(\"Erro no upload da imagem da loja:\", error);\r\n-        res.status(500).json({ message: 'Erro no servidor ao fazer upload da imagem.' });\r\n+    } catch (error) { \r\n+        console.error(\"Erro ao apagar loja:\", error);\r\n+        res.status(500).json({ message: 'Erro ao apagar loja.' }); \r\n     }\r\n });\r\n \r\n-module.exports = router;\n-const express = require('express');\r\n-const router = express.Router();\r\n-const Store = require('../models/Store');\r\n-const multer = require('multer');\r\n-const path = require('path');\r\n-const fs = require('fs');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n-\r\n-// Configuração do Multer para upload de imagens das lojas\r\n-const storage = multer.diskStorage({\r\n-    destination: function (req, file, cb) {\r\n-        const dir = 'public/uploads/stores';\r\n-        // Cria o diretório se ele não existir\r\n-        if (!fs.existsSync(dir)){\r\n-            fs.mkdirSync(dir, { recursive: true });\r\n-        }\r\n-        cb(null, dir);\r\n-    },\r\n-    filename: function (req, file, cb) {\r\n-        cb(null, `store-${req.params.id}${path.extname(file.originalname)}`);\r\n-    }\r\n-});\r\n-const upload = multer({ storage: storage });\r\n-\r\n-// GET /api/stores - Busca todas as lojas\r\n-router.get('/', async (req, res) => {\r\n+// POST /api/stores/:id/upload - Upload de imagem (restrito)\r\n+router.post('/:id/upload', requireAuth, authorizeRoles('admin', 'admin_master'), upload.single('imagem'), async (req, res) => {\r\n     try {\r\n-        const stores = await Store.find({}).sort({ nome: 1 });\r\n-        res.json(stores);\r\n-    } catch (error) { res.status(500).json({ message: 'Erro no servidor.' }); }\r\n-});\r\n-\r\n-// GET /api/stores/:id - Busca uma loja por ID\r\n-router.get('/:id', async (req, res) => {\r\n-    try {\r\n         const store = await Store.findById(req.params.id);\r\n-        if (!store) return res.status(404).json({ message: 'Loja não encontrada.' });\r\n-        res.json(store);\r\n-    } catch (error) { res.status(500).json({ message: 'Erro no servidor.' }); }\r\n-});\r\n-\r\n-// POST /api/stores - Cria uma nova loja\r\n-router.post('/', authorizeRoles('admin', 'admin_master'), async (req, res) => {\r\n-    try {\r\n-        const newStore = new Store(req.body);\r\n-        const savedStore = await newStore.save();\r\n-        res.status(201).json(savedStore);\r\n-    } catch (error) { res.status(500).json({ message: 'Erro ao criar loja.' }); }\r\n-});\r\n-\r\n-// PUT /api/stores/:id - Atualiza uma loja existente\r\n-router.put('/:id', async (req, res) => {\r\n-    try {\r\n-        const updatedStore = await Store.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n-        if (!updatedStore) return res.status(404).json({ message: 'Loja não encontrada.' });\r\n-        res.json(updatedStore);\r\n-    } catch (error) { res.status(500).json({ message: 'Erro ao atualizar loja.' }); }\r\n-});\r\n-\r\n-// DELETE /api/stores/:id - Apaga uma loja\r\n-router.delete('/:id', async (req, res) => {\r\n-    try {\r\n-        const deletedStore = await Store.findByIdAndDelete(req.params.id);\r\n-        if (!deletedStore) return res.status(404).json({ message: 'Loja não encontrada.' });\r\n-        res.json({ message: 'Loja apagada com sucesso.' });\r\n-    } catch (error) { res.status(500).json({ message: 'Erro ao apagar loja.' }); }\r\n-});\r\n-\r\n-// Rota para upload de imagem da loja\r\n-router.post('/:id/upload', upload.single('imagem'), async (req, res) => {\r\n-    try {\r\n-        const store = await Store.findById(req.params.id);\r\n         if (!store) {\r\n             return res.status(404).json({ message: 'Loja não encontrada.' });\r\n         }\r\n-        // Salva o caminho do ficheiro no banco de dados\r\n         store.imagem = `/uploads/stores/${req.file.filename}`;\r\n         await store.save();\r\n         res.json(store);\r\n     } catch (error) {\r\n@@ -168,5 +96,5 @@\n         res.status(500).json({ message: 'Erro no servidor ao fazer upload da imagem.' });\r\n     }\r\n });\r\n \r\n-module.exports = router;\n\\ No newline at end of file\n+module.exports = router;\r\n"
                }
            ],
            "date": 1756571675242,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst Store = require('../models/Store');\r\nconst multer = require('multer');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst authorizeRoles = require('../middlewares/authorizeRoles');\r\n\r\n// Configuração do Multer para upload de imagens das lojas\r\nconst storage = multer.diskStorage({\r\n    destination: function (req, file, cb) {\r\n        const dir = 'public/uploads/stores';\r\n        // Cria o diretório se ele não existir\r\n        if (!fs.existsSync(dir)){\r\n            fs.mkdirSync(dir, { recursive: true });\r\n        }\r\n        cb(null, dir);\r\n    },\r\n    filename: function (req, file, cb) {\r\n        cb(null, `store-${req.params.id}${path.extname(file.originalname)}`);\r\n    }\r\n});\r\nconst upload = multer({ storage: storage });\r\n\r\n// GET /api/stores - Busca todas as lojas\r\nrouter.get('/', async (req, res) => {\r\n    try {\r\n        const stores = await Store.find({}).sort({ nome: 1 });\r\n        res.json(stores);\r\n    } catch (error) { res.status(500).json({ message: 'Erro no servidor.' }); }\r\n});\r\n\r\n// GET /api/stores/:id - Busca uma loja por ID\r\nrouter.get('/:id', async (req, res) => {\r\n    try {\r\n        const store = await Store.findById(req.params.id);\r\n        if (!store) return res.status(404).json({ message: 'Loja não encontrada.' });\r\n        res.json(store);\r\n    } catch (error) { res.status(500).json({ message: 'Erro no servidor.' }); }\r\n});\r\n\r\n// POST /api/stores - Cria uma nova loja\r\nrouter.post('/', async (req, res) => {\r\n    try {\r\n        const newStore = new Store(req.body);\r\n        const savedStore = await newStore.save();\r\n        res.status(201).json(savedStore);\r\n    } catch (error) { res.status(500).json({ message: 'Erro ao criar loja.' }); }\r\n});\r\n\r\n// PUT /api/stores/:id - Atualiza uma loja existente\r\nrouter.put('/:id', async (req, res) => {\r\n    try {\r\n        const updatedStore = await Store.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n        if (!updatedStore) return res.status(404).json({ message: 'Loja não encontrada.' });\r\n        res.json(updatedStore);\r\n    } catch (error) { res.status(500).json({ message: 'Erro ao atualizar loja.' }); }\r\n});\r\n\r\n// DELETE /api/stores/:id - Apaga uma loja\r\nrouter.delete('/:id', async (req, res) => {\r\n    try {\r\n        const deletedStore = await Store.findByIdAndDelete(req.params.id);\r\n        if (!deletedStore) return res.status(404).json({ message: 'Loja não encontrada.' });\r\n        res.json({ message: 'Loja apagada com sucesso.' });\r\n    } catch (error) { res.status(500).json({ message: 'Erro ao apagar loja.' }); }\r\n});\r\n\r\n// Rota para upload de imagem da loja\r\nrouter.post('/:id/upload', upload.single('imagem'), async (req, res) => {\r\n    try {\r\n        const store = await Store.findById(req.params.id);\r\n        if (!store) {\r\n            return res.status(404).json({ message: 'Loja não encontrada.' });\r\n        }\r\n        // Salva o caminho do ficheiro no banco de dados\r\n        store.imagem = `/uploads/stores/${req.file.filename}`;\r\n        await store.save();\r\n        res.json(store);\r\n    } catch (error) {\r\n        console.error(\"Erro no upload da imagem da loja:\", error);\r\n        res.status(500).json({ message: 'Erro no servidor ao fazer upload da imagem.' });\r\n    }\r\n});\r\n\r\nmodule.exports = router;"
        }
    ]
}