{
    "sourceFile": "servidor/routes/adminServicosGrupos.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1757180613909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757181177597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,21 @@\n const express = require('express');\r\n const router = express.Router();\r\n-const { authMiddleware, requireAdmin } = require('../middlewares/authMiddleware');\r\n+\r\n const ServiceGroup = require('../models/ServiceGroup');\r\n const { STAFF_TYPES } = require('../models/ServiceGroup');\r\n \r\n-// Todas as rotas exigem admin\r\n-router.use(authMiddleware, requireAdmin);\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n \r\n+// === MANTER O MESMO PADRÃO DAS ROTAS DE ADMIN ===\r\n+function requireAdmin(req, res, next) {\r\n+  const role = req.user?.role;\r\n+  if (role === 'admin' || role === 'admin_master') return next();\r\n+  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n+}\r\n+\r\n // LISTAR\r\n-router.get('/', async (req, res) => {\r\n+router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     const items = await ServiceGroup.find({}).sort({ nome: 1 }).lean();\r\n     return res.json(items);\r\n   } catch (e) {\r\n@@ -18,9 +24,9 @@\n   }\r\n });\r\n \r\n // OBTER POR ID\r\n-router.get('/:id', async (req, res) => {\r\n+router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     const item = await ServiceGroup.findById(req.params.id).lean();\r\n     if (!item) return res.status(404).json({ message: 'Grupo não encontrado' });\r\n     return res.json(item);\r\n@@ -30,9 +36,9 @@\n   }\r\n });\r\n \r\n // CRIAR\r\n-router.post('/', async (req, res) => {\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     let { nome, tiposPermitidos, comissaoPercent } = req.body;\r\n \r\n     nome = (nome || '').trim();\r\n@@ -41,9 +47,9 @@\n     let tipos = [];\r\n     if (Array.isArray(tiposPermitidos)) tipos = tiposPermitidos;\r\n     else if (typeof tiposPermitidos === 'string') tipos = [tiposPermitidos];\r\n \r\n-    tipos = [...new Set(tipos.filter(t => STAFF_TYPES.includes(String(t).toLowerCase())))];\r\n+    tipos = [...new Set(tipos.map(t => String(t).toLowerCase()).filter(t => STAFF_TYPES.includes(t)))];\r\n     if (!tipos.length) return res.status(400).json({ message: 'Selecione ao menos um tipo de funcionário.' });\r\n \r\n     const comissao = Number(comissaoPercent ?? 0);\r\n     if (Number.isNaN(comissao) || comissao < 0 || comissao > 100) {\r\n@@ -65,9 +71,9 @@\n   }\r\n });\r\n \r\n // ATUALIZAR\r\n-router.put('/:id', async (req, res) => {\r\n+router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     const update = {};\r\n     if (typeof req.body.nome !== 'undefined') {\r\n       update.nome = String(req.body.nome || '').trim();\r\n@@ -90,9 +96,14 @@\n       }\r\n       update.comissaoPercent = c;\r\n     }\r\n \r\n-    const saved = await ServiceGroup.findByIdAndUpdate(req.params.id, { $set: update }, { new: true, runValidators: true });\r\n+    const saved = await ServiceGroup.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      { $set: update },\r\n+      { new: true, runValidators: true }\r\n+    );\r\n+\r\n     if (!saved) return res.status(404).json({ message: 'Grupo não encontrado' });\r\n     return res.json(saved);\r\n   } catch (e) {\r\n     if (e?.code === 11000) {\r\n@@ -103,9 +114,9 @@\n   }\r\n });\r\n \r\n // REMOVER\r\n-router.delete('/:id', async (req, res) => {\r\n+router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     const del = await ServiceGroup.findByIdAndDelete(req.params.id);\r\n     if (!del) return res.status(404).json({ message: 'Grupo não encontrado' });\r\n     return res.json({ deleted: true });\r\n"
                }
            ],
            "date": 1757180613909,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst { authMiddleware, requireAdmin } = require('../middlewares/authMiddleware');\r\nconst ServiceGroup = require('../models/ServiceGroup');\r\nconst { STAFF_TYPES } = require('../models/ServiceGroup');\r\n\r\n// Todas as rotas exigem admin\r\nrouter.use(authMiddleware, requireAdmin);\r\n\r\n// LISTAR\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const items = await ServiceGroup.find({}).sort({ nome: 1 }).lean();\r\n    return res.json(items);\r\n  } catch (e) {\r\n    console.error('GET /admin/servicos/grupos', e);\r\n    return res.status(500).json({ message: 'Erro ao listar grupos' });\r\n  }\r\n});\r\n\r\n// OBTER POR ID\r\nrouter.get('/:id', async (req, res) => {\r\n  try {\r\n    const item = await ServiceGroup.findById(req.params.id).lean();\r\n    if (!item) return res.status(404).json({ message: 'Grupo não encontrado' });\r\n    return res.json(item);\r\n  } catch (e) {\r\n    console.error('GET /admin/servicos/grupos/:id', e);\r\n    return res.status(500).json({ message: 'Erro ao obter grupo' });\r\n  }\r\n});\r\n\r\n// CRIAR\r\nrouter.post('/', async (req, res) => {\r\n  try {\r\n    let { nome, tiposPermitidos, comissaoPercent } = req.body;\r\n\r\n    nome = (nome || '').trim();\r\n    if (!nome) return res.status(400).json({ message: 'Informe o nome do grupo.' });\r\n\r\n    let tipos = [];\r\n    if (Array.isArray(tiposPermitidos)) tipos = tiposPermitidos;\r\n    else if (typeof tiposPermitidos === 'string') tipos = [tiposPermitidos];\r\n\r\n    tipos = [...new Set(tipos.filter(t => STAFF_TYPES.includes(String(t).toLowerCase())))];\r\n    if (!tipos.length) return res.status(400).json({ message: 'Selecione ao menos um tipo de funcionário.' });\r\n\r\n    const comissao = Number(comissaoPercent ?? 0);\r\n    if (Number.isNaN(comissao) || comissao < 0 || comissao > 100) {\r\n      return res.status(400).json({ message: 'Comissão deve estar entre 0 e 100.' });\r\n    }\r\n\r\n    const created = await ServiceGroup.create({\r\n      nome,\r\n      tiposPermitidos: tipos,\r\n      comissaoPercent: comissao\r\n    });\r\n    return res.status(201).json(created);\r\n  } catch (e) {\r\n    if (e?.code === 11000) {\r\n      return res.status(409).json({ message: 'Já existe um grupo com este nome.' });\r\n    }\r\n    console.error('POST /admin/servicos/grupos', e);\r\n    return res.status(500).json({ message: 'Erro ao criar grupo' });\r\n  }\r\n});\r\n\r\n// ATUALIZAR\r\nrouter.put('/:id', async (req, res) => {\r\n  try {\r\n    const update = {};\r\n    if (typeof req.body.nome !== 'undefined') {\r\n      update.nome = String(req.body.nome || '').trim();\r\n      if (!update.nome) return res.status(400).json({ message: 'Nome do grupo não pode ser vazio.' });\r\n    }\r\n\r\n    if (typeof req.body.tiposPermitidos !== 'undefined') {\r\n      let tipos = [];\r\n      if (Array.isArray(req.body.tiposPermitidos)) tipos = req.body.tiposPermitidos;\r\n      else if (typeof req.body.tiposPermitidos === 'string') tipos = [req.body.tiposPermitidos];\r\n      tipos = [...new Set(tipos.map(t => String(t).toLowerCase()).filter(t => STAFF_TYPES.includes(t)))];\r\n      if (!tipos.length) return res.status(400).json({ message: 'Selecione ao menos um tipo de funcionário.' });\r\n      update.tiposPermitidos = tipos;\r\n    }\r\n\r\n    if (typeof req.body.comissaoPercent !== 'undefined') {\r\n      const c = Number(req.body.comissaoPercent);\r\n      if (Number.isNaN(c) || c < 0 || c > 100) {\r\n        return res.status(400).json({ message: 'Comissão deve estar entre 0 e 100.' });\r\n      }\r\n      update.comissaoPercent = c;\r\n    }\r\n\r\n    const saved = await ServiceGroup.findByIdAndUpdate(req.params.id, { $set: update }, { new: true, runValidators: true });\r\n    if (!saved) return res.status(404).json({ message: 'Grupo não encontrado' });\r\n    return res.json(saved);\r\n  } catch (e) {\r\n    if (e?.code === 11000) {\r\n      return res.status(409).json({ message: 'Já existe um grupo com este nome.' });\r\n    }\r\n    console.error('PUT /admin/servicos/grupos/:id', e);\r\n    return res.status(500).json({ message: 'Erro ao atualizar grupo' });\r\n  }\r\n});\r\n\r\n// REMOVER\r\nrouter.delete('/:id', async (req, res) => {\r\n  try {\r\n    const del = await ServiceGroup.findByIdAndDelete(req.params.id);\r\n    if (!del) return res.status(404).json({ message: 'Grupo não encontrado' });\r\n    return res.json({ deleted: true });\r\n  } catch (e) {\r\n    console.error('DELETE /admin/servicos/grupos/:id', e);\r\n    return res.status(500).json({ message: 'Erro ao remover grupo' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"
        }
    ]
}