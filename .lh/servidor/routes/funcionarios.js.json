{
    "sourceFile": "servidor/routes/funcionarios.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1756594510721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756594902929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,68 @@\n+// servidor/routes/adminFuncionarios.js\r\n const express = require('express');\r\n const router = express.Router();\r\n+const User = require('../models/User'); // ajuste o caminho do seu model de usuário\r\n const authMiddleware = require('../middleware/authMiddleware');\r\n-const User = require('../models/User'); // supondo que os funcionários também sejam usuários\r\n \r\n-// Listar todos os funcionários\r\n-router.get('/', authMiddleware, async (req, res) => {\r\n+// 🔒 Todas as rotas daqui exigem autenticação e cargo admin/admin_master\r\n+function requireAdmin(req, res, next) {\r\n+  if (req.user.role === 'admin' || req.user.role === 'admin_master') {\r\n+    return next();\r\n+  }\r\n+  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n+}\r\n+\r\n+// 📌 Listar funcionários\r\n+router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n-    if (req.user.role !== 'admin' && req.user.role !== 'admin_master') {\r\n-      return res.status(403).json({ message: 'Acesso negado' });\r\n-    }\r\n-\r\n-    const funcionarios = await User.find({ role: { $in: ['funcionario', 'admin'] } });\r\n+    const funcionarios = await User.find({ role: { $in: ['funcionario', 'admin'] } }).select('-password');\r\n     res.json(funcionarios);\r\n   } catch (err) {\r\n-    res.status(500).json({ message: 'Erro ao buscar funcionários' });\r\n+    res.status(500).json({ message: 'Erro ao buscar funcionários.' });\r\n   }\r\n });\r\n \r\n-// Criar novo funcionário\r\n-router.post('/', authMiddleware, async (req, res) => {\r\n+// 📌 Criar funcionário\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n-    if (req.user.role !== 'admin' && req.user.role !== 'admin_master') {\r\n-      return res.status(403).json({ message: 'Acesso negado' });\r\n-    }\r\n-\r\n     const { nome, email, senha, role } = req.body;\r\n-    const novoFuncionario = new User({ nome, email, senha, role });\r\n-    await novoFuncionario.save();\r\n \r\n-    res.json({ message: 'Funcionário criado com sucesso!', funcionario: novoFuncionario });\r\n+    const existente = await User.findOne({ email });\r\n+    if (existente) return res.status(400).json({ message: 'Email já cadastrado.' });\r\n+\r\n+    const novo = new User({ nome, email, password: senha, role: role || 'funcionario' });\r\n+    await novo.save();\r\n+\r\n+    res.json({ message: 'Funcionário criado com sucesso.' });\r\n   } catch (err) {\r\n-    res.status(500).json({ message: 'Erro ao criar funcionário' });\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'Erro ao criar funcionário.' });\r\n   }\r\n });\r\n \r\n-// Atualizar funcionário\r\n-router.put('/:id', authMiddleware, async (req, res) => {\r\n+// 📌 Atualizar funcionário\r\n+router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n-    if (req.user.role !== 'admin' && req.user.role !== 'admin_master') {\r\n-      return res.status(403).json({ message: 'Acesso negado' });\r\n-    }\r\n+    const { nome, email, senha, role } = req.body;\r\n \r\n-    const { nome, email, role } = req.body;\r\n-    const funcionario = await User.findByIdAndUpdate(req.params.id, { nome, email, role }, { new: true });\r\n-    res.json(funcionario);\r\n+    const updateData = { nome, email, role };\r\n+    if (senha) updateData.password = senha;\r\n+\r\n+    await User.findByIdAndUpdate(req.params.id, updateData);\r\n+    res.json({ message: 'Funcionário atualizado com sucesso.' });\r\n   } catch (err) {\r\n-    res.status(500).json({ message: 'Erro ao atualizar funcionário' });\r\n+    res.status(500).json({ message: 'Erro ao atualizar funcionário.' });\r\n   }\r\n });\r\n \r\n-// Excluir funcionário\r\n-router.delete('/:id', authMiddleware, async (req, res) => {\r\n+// 📌 Deletar funcionário\r\n+router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n-    if (req.user.role !== 'admin_master') {\r\n-      return res.status(403).json({ message: 'Apenas admin_master pode excluir funcionários' });\r\n-    }\r\n-\r\n     await User.findByIdAndDelete(req.params.id);\r\n-    res.json({ message: 'Funcionário removido com sucesso!' });\r\n+    res.json({ message: 'Funcionário removido com sucesso.' });\r\n   } catch (err) {\r\n-    res.status(500).json({ message: 'Erro ao remover funcionário' });\r\n+    res.status(500).json({ message: 'Erro ao remover funcionário.' });\r\n   }\r\n });\r\n \r\n module.exports = router;\r\n"
                }
            ],
            "date": 1756594510721,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst authMiddleware = require('../middleware/authMiddleware');\r\nconst User = require('../models/User'); // supondo que os funcionários também sejam usuários\r\n\r\n// Listar todos os funcionários\r\nrouter.get('/', authMiddleware, async (req, res) => {\r\n  try {\r\n    if (req.user.role !== 'admin' && req.user.role !== 'admin_master') {\r\n      return res.status(403).json({ message: 'Acesso negado' });\r\n    }\r\n\r\n    const funcionarios = await User.find({ role: { $in: ['funcionario', 'admin'] } });\r\n    res.json(funcionarios);\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Erro ao buscar funcionários' });\r\n  }\r\n});\r\n\r\n// Criar novo funcionário\r\nrouter.post('/', authMiddleware, async (req, res) => {\r\n  try {\r\n    if (req.user.role !== 'admin' && req.user.role !== 'admin_master') {\r\n      return res.status(403).json({ message: 'Acesso negado' });\r\n    }\r\n\r\n    const { nome, email, senha, role } = req.body;\r\n    const novoFuncionario = new User({ nome, email, senha, role });\r\n    await novoFuncionario.save();\r\n\r\n    res.json({ message: 'Funcionário criado com sucesso!', funcionario: novoFuncionario });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Erro ao criar funcionário' });\r\n  }\r\n});\r\n\r\n// Atualizar funcionário\r\nrouter.put('/:id', authMiddleware, async (req, res) => {\r\n  try {\r\n    if (req.user.role !== 'admin' && req.user.role !== 'admin_master') {\r\n      return res.status(403).json({ message: 'Acesso negado' });\r\n    }\r\n\r\n    const { nome, email, role } = req.body;\r\n    const funcionario = await User.findByIdAndUpdate(req.params.id, { nome, email, role }, { new: true });\r\n    res.json(funcionario);\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Erro ao atualizar funcionário' });\r\n  }\r\n});\r\n\r\n// Excluir funcionário\r\nrouter.delete('/:id', authMiddleware, async (req, res) => {\r\n  try {\r\n    if (req.user.role !== 'admin_master') {\r\n      return res.status(403).json({ message: 'Apenas admin_master pode excluir funcionários' });\r\n    }\r\n\r\n    await User.findByIdAndDelete(req.params.id);\r\n    res.json({ message: 'Funcionário removido com sucesso!' });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Erro ao remover funcionário' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}