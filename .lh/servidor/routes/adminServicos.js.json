{
    "sourceFile": "servidor/routes/adminServicos.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1757182658702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757185296596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,11 @@\n const Service = require('../models/Service');\r\n const ServiceGroup = require('../models/ServiceGroup');\r\n const authMiddleware = require('../middlewares/authMiddleware');\r\n \r\n-// segue o padrão das rotas Admin do projeto\r\n+const { PORTES } = require('../models/Service');\r\n+\r\n+// Apenas administradores\r\n function requireAdmin(req, res, next) {\r\n   const role = req.user?.role;\r\n   if (role === 'admin' || role === 'admin_master') return next();\r\n   return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n@@ -15,133 +17,122 @@\n // LISTAR\r\n router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     const items = await Service.find({})\r\n-      .populate('grupo', 'nome')\r\n-      .sort({ 'grupo.nome': 1, nome: 1 })\r\n+      .populate('grupo')\r\n+      .sort({ nome: 1 })\r\n       .lean();\r\n-    return res.json(items);\r\n+    res.json(items);\r\n   } catch (e) {\r\n     console.error('GET /admin/servicos', e);\r\n-    return res.status(500).json({ message: 'Erro ao listar serviços' });\r\n+    res.status(500).json({ message: 'Erro ao listar serviços' });\r\n   }\r\n });\r\n \r\n // OBTER POR ID\r\n router.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n-    const item = await Service.findById(req.params.id).populate('grupo', 'nome').lean();\r\n+    const item = await Service.findById(req.params.id).populate('grupo').lean();\r\n     if (!item) return res.status(404).json({ message: 'Serviço não encontrado' });\r\n-    return res.json(item);\r\n+    res.json(item);\r\n   } catch (e) {\r\n     console.error('GET /admin/servicos/:id', e);\r\n-    return res.status(500).json({ message: 'Erro ao obter serviço' });\r\n+    res.status(500).json({ message: 'Erro ao carregar serviço' });\r\n   }\r\n });\r\n \r\n-// CRIAR\r\n-router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n-  try {\r\n-    let { nome, grupo, duracaoMinutos, custo, valor } = req.body;\r\n+function validarPayload(body, isUpdate = false) {\r\n+  const erros = [];\r\n+  const out = {};\r\n \r\n-    nome = String(nome || '').trim();\r\n-    if (!nome) return res.status(400).json({ message: 'Informe o nome do serviço.' });\r\n+  if (!isUpdate || typeof body.nome !== 'undefined') {\r\n+    const nome = String(body.nome || '').trim();\r\n+    if (!nome) erros.push('Nome obrigatório.');\r\n+    else out.nome = nome;\r\n+  }\r\n \r\n-    const grpId = String(grupo || '').trim();\r\n-    if (!grpId) return res.status(400).json({ message: 'Selecione um grupo.' });\r\n-    const grpExists = await ServiceGroup.exists({ _id: grpId });\r\n-    if (!grpExists) return res.status(400).json({ message: 'Grupo inexistente.' });\r\n+  if (!isUpdate || typeof body.grupo !== 'undefined') {\r\n+    const grpId = String(body.grupo || '').trim();\r\n+    if (!grpId) erros.push('Grupo obrigatório.');\r\n+    else out.grupo = grpId;\r\n+  }\r\n \r\n-    const dur = Number(duracaoMinutos);\r\n-    if (!Number.isInteger(dur) || dur < 1 || dur > 600) {\r\n-      return res.status(400).json({ message: 'Duração deve estar entre 1 e 600 minutos.' });\r\n-    }\r\n+  if (!isUpdate || typeof body.duracaoMinutos !== 'undefined') {\r\n+    const dur = Number(body.duracaoMinutos);\r\n+    if (!Number.isInteger(dur) || dur < 1 || dur > 600) erros.push('Duração deve estar entre 1 e 600 minutos.');\r\n+    else out.duracaoMinutos = dur;\r\n+  }\r\n \r\n-    const c = Number(custo ?? 0);\r\n-    if (Number.isNaN(c) || c < 0) return res.status(400).json({ message: 'Custo inválido.' });\r\n+  if (!isUpdate || typeof body.custo !== 'undefined') {\r\n+    const custo = Number(body.custo);\r\n+    if (Number.isNaN(custo) || custo < 0) erros.push('Custo inválido.');\r\n+    else out.custo = custo;\r\n+  }\r\n \r\n-    const v = Number(valor);\r\n-    if (Number.isNaN(v) || v < 0) return res.status(400).json({ message: 'Valor inválido.' });\r\n+  if (!isUpdate || typeof body.valor !== 'undefined') {\r\n+    const valor = Number(body.valor);\r\n+    if (Number.isNaN(valor) || valor < 0) erros.push('Valor inválido.');\r\n+    else out.valor = valor;\r\n+  }\r\n \r\n-    const created = await Service.create({\r\n-      nome, grupo: grpId, duracaoMinutos: dur, custo: c, valor: v\r\n-    });\r\n+  if (!isUpdate || typeof body.porte !== 'undefined') {\r\n+    const porte = String(body.porte || 'Todos');\r\n+    if (!PORTES.includes(porte)) erros.push('Porte inválido.');\r\n+    else out.porte = porte;\r\n+  }\r\n \r\n-    const withGroup = await Service.findById(created._id).populate('grupo', 'nome').lean();\r\n-    return res.status(201).json(withGroup);\r\n+  return { ok: erros.length === 0, erros, out };\r\n+}\r\n+\r\n+// CRIAR\r\n+router.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n+  try {\r\n+    const v = validarPayload(req.body, false);\r\n+    if (!v.ok) return res.status(400).json({ message: v.erros.join(' ') });\r\n+\r\n+    // valida grupo existente\r\n+    const grpExists = await ServiceGroup.exists({ _id: v.out.grupo });\r\n+    if (!grpExists) return res.status(400).json({ message: 'Grupo inexistente.' });\r\n+\r\n+    const created = await Service.create(v.out);\r\n+    const full = await Service.findById(created._id).populate('grupo').lean();\r\n+    res.status(201).json(full);\r\n   } catch (e) {\r\n-    if (e?.code === 11000) {\r\n-      return res.status(409).json({ message: 'Já existe um serviço com este nome neste grupo.' });\r\n-    }\r\n     console.error('POST /admin/servicos', e);\r\n-    return res.status(500).json({ message: 'Erro ao criar serviço' });\r\n+    res.status(500).json({ message: 'Erro ao criar serviço' });\r\n   }\r\n });\r\n \r\n // ATUALIZAR\r\n router.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n-    const update = {};\r\n+    const v = validarPayload(req.body, true);\r\n+    if (!v.ok) return res.status(400).json({ message: v.erros.join(' ') });\r\n \r\n-    if (typeof req.body.nome !== 'undefined') {\r\n-      update.nome = String(req.body.nome || '').trim();\r\n-      if (!update.nome) return res.status(400).json({ message: 'Nome do serviço não pode ser vazio.' });\r\n-    }\r\n-\r\n-    if (typeof req.body.grupo !== 'undefined') {\r\n-      const grpId = String(req.body.grupo || '').trim();\r\n-      if (!grpId) return res.status(400).json({ message: 'Grupo não pode ser vazio.' });\r\n-      const grpExists = await ServiceGroup.exists({ _id: grpId });\r\n+    if (typeof v.out.grupo !== 'undefined') {\r\n+      const grpExists = await ServiceGroup.exists({ _id: v.out.grupo });\r\n       if (!grpExists) return res.status(400).json({ message: 'Grupo inexistente.' });\r\n-      update.grupo = grpId;\r\n     }\r\n \r\n-    if (typeof req.body.duracaoMinutos !== 'undefined') {\r\n-      const dur = Number(req.body.duracaoMinutos);\r\n-      if (!Number.isInteger(dur) || dur < 1 || dur > 600) {\r\n-        return res.status(400).json({ message: 'Duração deve estar entre 1 e 600 minutos.' });\r\n-      }\r\n-      update.duracaoMinutos = dur;\r\n-    }\r\n-\r\n-    if (typeof req.body.custo !== 'undefined') {\r\n-      const c = Number(req.body.custo);\r\n-      if (Number.isNaN(c) || c < 0) return res.status(400).json({ message: 'Custo inválido.' });\r\n-      update.custo = c;\r\n-    }\r\n-\r\n-    if (typeof req.body.valor !== 'undefined') {\r\n-      const v = Number(req.body.valor);\r\n-      if (Number.isNaN(v) || v < 0) return res.status(400).json({ message: 'Valor inválido.' });\r\n-      update.valor = v;\r\n-    }\r\n-\r\n-    const saved = await Service.findByIdAndUpdate(\r\n-      req.params.id,\r\n-      { $set: update },\r\n-      { new: true, runValidators: true }\r\n-    ).populate('grupo', 'nome');\r\n-\r\n-    if (!saved) return res.status(404).json({ message: 'Serviço não encontrado' });\r\n-    return res.json(saved);\r\n+    const updated = await Service.findByIdAndUpdate(req.params.id, v.out, { new: true, runValidators: true })\r\n+      .populate('grupo');\r\n+    if (!updated) return res.status(404).json({ message: 'Serviço não encontrado' });\r\n+    res.json(updated);\r\n   } catch (e) {\r\n-    if (e?.code === 11000) {\r\n-      return res.status(409).json({ message: 'Já existe um serviço com este nome neste grupo.' });\r\n-    }\r\n     console.error('PUT /admin/servicos/:id', e);\r\n-    return res.status(500).json({ message: 'Erro ao atualizar serviço' });\r\n+    res.status(500).json({ message: 'Erro ao atualizar serviço' });\r\n   }\r\n });\r\n \r\n // REMOVER\r\n router.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     const del = await Service.findByIdAndDelete(req.params.id);\r\n     if (!del) return res.status(404).json({ message: 'Serviço não encontrado' });\r\n-    return res.json({ deleted: true });\r\n+    res.json({ deleted: true });\r\n   } catch (e) {\r\n     console.error('DELETE /admin/servicos/:id', e);\r\n-    return res.status(500).json({ message: 'Erro ao remover serviço' });\r\n+    res.status(500).json({ message: 'Erro ao remover serviço' });\r\n   }\r\n });\r\n \r\n module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757186355218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,23 @@\n   if (role === 'admin' || role === 'admin_master') return next();\r\n   return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n }\r\n \r\n+function parsePorte(input) {\r\n+  // aceita body.porte (array|string) ou body.portes (alias)\r\n+  const raw = typeof input?.porte !== 'undefined' ? input.porte : input?.portes;\r\n+  let arr = Array.isArray(raw) ? raw : (raw != null ? [raw] : []);\r\n+  arr = arr.map(v => String(v)).filter(Boolean);\r\n+  // remove duplicados\r\n+  arr = [...new Set(arr)];\r\n+  if (arr.length === 0) return ['Todos'];\r\n+  // valida e normaliza \"Todos\"\r\n+  for (const p of arr) {\r\n+    if (!PORTES.includes(p)) throw new Error('Porte inválido.');\r\n+  }\r\n+  return arr.includes('Todos') ? ['Todos'] : arr;\r\n+}\r\n+\r\n // LISTAR\r\n router.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n   try {\r\n     const items = await Service.find({})\r\n@@ -73,12 +88,14 @@\n     if (Number.isNaN(valor) || valor < 0) erros.push('Valor inválido.');\r\n     else out.valor = valor;\r\n   }\r\n \r\n-  if (!isUpdate || typeof body.porte !== 'undefined') {\r\n-    const porte = String(body.porte || 'Todos');\r\n-    if (!PORTES.includes(porte)) erros.push('Porte inválido.');\r\n-    else out.porte = porte;\r\n+  if (!isUpdate || typeof body.porte !== 'undefined' || typeof body.portes !== 'undefined') {\r\n+    try {\r\n+      out.porte = parsePorte(body);\r\n+    } catch (e) {\r\n+      erros.push(e.message || 'Porte inválido.');\r\n+    }\r\n   }\r\n \r\n   return { ok: erros.length === 0, erros, out };\r\n }\r\n@@ -88,9 +105,8 @@\n   try {\r\n     const v = validarPayload(req.body, false);\r\n     if (!v.ok) return res.status(400).json({ message: v.erros.join(' ') });\r\n \r\n-    // valida grupo existente\r\n     const grpExists = await ServiceGroup.exists({ _id: v.out.grupo });\r\n     if (!grpExists) return res.status(400).json({ message: 'Grupo inexistente.' });\r\n \r\n     const created = await Service.create(v.out);\r\n@@ -112,10 +128,14 @@\n       const grpExists = await ServiceGroup.exists({ _id: v.out.grupo });\r\n       if (!grpExists) return res.status(400).json({ message: 'Grupo inexistente.' });\r\n     }\r\n \r\n-    const updated = await Service.findByIdAndUpdate(req.params.id, v.out, { new: true, runValidators: true })\r\n-      .populate('grupo');\r\n+    const updated = await Service.findByIdAndUpdate(\r\n+      req.params.id,\r\n+      v.out,\r\n+      { new: true, runValidators: true }\r\n+    ).populate('grupo');\r\n+\r\n     if (!updated) return res.status(404).json({ message: 'Serviço não encontrado' });\r\n     res.json(updated);\r\n   } catch (e) {\r\n     console.error('PUT /admin/servicos/:id', e);\r\n"
                }
            ],
            "date": 1757182658702,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst Service = require('../models/Service');\r\nconst ServiceGroup = require('../models/ServiceGroup');\r\nconst authMiddleware = require('../middlewares/authMiddleware');\r\n\r\n// segue o padrão das rotas Admin do projeto\r\nfunction requireAdmin(req, res, next) {\r\n  const role = req.user?.role;\r\n  if (role === 'admin' || role === 'admin_master') return next();\r\n  return res.status(403).json({ message: 'Acesso negado. Apenas administradores.' });\r\n}\r\n\r\n// LISTAR\r\nrouter.get('/', authMiddleware, requireAdmin, async (req, res) => {\r\n  try {\r\n    const items = await Service.find({})\r\n      .populate('grupo', 'nome')\r\n      .sort({ 'grupo.nome': 1, nome: 1 })\r\n      .lean();\r\n    return res.json(items);\r\n  } catch (e) {\r\n    console.error('GET /admin/servicos', e);\r\n    return res.status(500).json({ message: 'Erro ao listar serviços' });\r\n  }\r\n});\r\n\r\n// OBTER POR ID\r\nrouter.get('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n  try {\r\n    const item = await Service.findById(req.params.id).populate('grupo', 'nome').lean();\r\n    if (!item) return res.status(404).json({ message: 'Serviço não encontrado' });\r\n    return res.json(item);\r\n  } catch (e) {\r\n    console.error('GET /admin/servicos/:id', e);\r\n    return res.status(500).json({ message: 'Erro ao obter serviço' });\r\n  }\r\n});\r\n\r\n// CRIAR\r\nrouter.post('/', authMiddleware, requireAdmin, async (req, res) => {\r\n  try {\r\n    let { nome, grupo, duracaoMinutos, custo, valor } = req.body;\r\n\r\n    nome = String(nome || '').trim();\r\n    if (!nome) return res.status(400).json({ message: 'Informe o nome do serviço.' });\r\n\r\n    const grpId = String(grupo || '').trim();\r\n    if (!grpId) return res.status(400).json({ message: 'Selecione um grupo.' });\r\n    const grpExists = await ServiceGroup.exists({ _id: grpId });\r\n    if (!grpExists) return res.status(400).json({ message: 'Grupo inexistente.' });\r\n\r\n    const dur = Number(duracaoMinutos);\r\n    if (!Number.isInteger(dur) || dur < 1 || dur > 600) {\r\n      return res.status(400).json({ message: 'Duração deve estar entre 1 e 600 minutos.' });\r\n    }\r\n\r\n    const c = Number(custo ?? 0);\r\n    if (Number.isNaN(c) || c < 0) return res.status(400).json({ message: 'Custo inválido.' });\r\n\r\n    const v = Number(valor);\r\n    if (Number.isNaN(v) || v < 0) return res.status(400).json({ message: 'Valor inválido.' });\r\n\r\n    const created = await Service.create({\r\n      nome, grupo: grpId, duracaoMinutos: dur, custo: c, valor: v\r\n    });\r\n\r\n    const withGroup = await Service.findById(created._id).populate('grupo', 'nome').lean();\r\n    return res.status(201).json(withGroup);\r\n  } catch (e) {\r\n    if (e?.code === 11000) {\r\n      return res.status(409).json({ message: 'Já existe um serviço com este nome neste grupo.' });\r\n    }\r\n    console.error('POST /admin/servicos', e);\r\n    return res.status(500).json({ message: 'Erro ao criar serviço' });\r\n  }\r\n});\r\n\r\n// ATUALIZAR\r\nrouter.put('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n  try {\r\n    const update = {};\r\n\r\n    if (typeof req.body.nome !== 'undefined') {\r\n      update.nome = String(req.body.nome || '').trim();\r\n      if (!update.nome) return res.status(400).json({ message: 'Nome do serviço não pode ser vazio.' });\r\n    }\r\n\r\n    if (typeof req.body.grupo !== 'undefined') {\r\n      const grpId = String(req.body.grupo || '').trim();\r\n      if (!grpId) return res.status(400).json({ message: 'Grupo não pode ser vazio.' });\r\n      const grpExists = await ServiceGroup.exists({ _id: grpId });\r\n      if (!grpExists) return res.status(400).json({ message: 'Grupo inexistente.' });\r\n      update.grupo = grpId;\r\n    }\r\n\r\n    if (typeof req.body.duracaoMinutos !== 'undefined') {\r\n      const dur = Number(req.body.duracaoMinutos);\r\n      if (!Number.isInteger(dur) || dur < 1 || dur > 600) {\r\n        return res.status(400).json({ message: 'Duração deve estar entre 1 e 600 minutos.' });\r\n      }\r\n      update.duracaoMinutos = dur;\r\n    }\r\n\r\n    if (typeof req.body.custo !== 'undefined') {\r\n      const c = Number(req.body.custo);\r\n      if (Number.isNaN(c) || c < 0) return res.status(400).json({ message: 'Custo inválido.' });\r\n      update.custo = c;\r\n    }\r\n\r\n    if (typeof req.body.valor !== 'undefined') {\r\n      const v = Number(req.body.valor);\r\n      if (Number.isNaN(v) || v < 0) return res.status(400).json({ message: 'Valor inválido.' });\r\n      update.valor = v;\r\n    }\r\n\r\n    const saved = await Service.findByIdAndUpdate(\r\n      req.params.id,\r\n      { $set: update },\r\n      { new: true, runValidators: true }\r\n    ).populate('grupo', 'nome');\r\n\r\n    if (!saved) return res.status(404).json({ message: 'Serviço não encontrado' });\r\n    return res.json(saved);\r\n  } catch (e) {\r\n    if (e?.code === 11000) {\r\n      return res.status(409).json({ message: 'Já existe um serviço com este nome neste grupo.' });\r\n    }\r\n    console.error('PUT /admin/servicos/:id', e);\r\n    return res.status(500).json({ message: 'Erro ao atualizar serviço' });\r\n  }\r\n});\r\n\r\n// REMOVER\r\nrouter.delete('/:id', authMiddleware, requireAdmin, async (req, res) => {\r\n  try {\r\n    const del = await Service.findByIdAndDelete(req.params.id);\r\n    if (!del) return res.status(404).json({ message: 'Serviço não encontrado' });\r\n    return res.json({ deleted: true });\r\n  } catch (e) {\r\n    console.error('DELETE /admin/servicos/:id', e);\r\n    return res.status(500).json({ message: 'Erro ao remover serviço' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"
        }
    ]
}