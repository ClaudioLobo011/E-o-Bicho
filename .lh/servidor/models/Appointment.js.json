{
    "sourceFile": "servidor/models/Appointment.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1757349920382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757365305179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,25 @@\n+const mongoose = require('mongoose');\r\n+const { Schema } = mongoose;\r\n+\r\n+const AppointmentSchema = new Schema({\r\n+  store: { type: Schema.Types.ObjectId, ref: 'Store', required: true },\r\n+  cliente: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n+  pet: { type: Schema.Types.ObjectId, ref: 'Pet', required: true },\r\n+  servico: { type: Schema.Types.ObjectId, ref: 'Service', required: true },\r\n+  profissional: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n+  scheduledAt: { type: Date, required: true },\r\n+  valor: { type: Number, required: true, min: 0 },\r\n+  pago: { type: Boolean, default: false },\r\n+  status: {\r\n+    type: String,\r\n+    enum: ['agendado', 'em_espera', 'em_atendimento', 'finalizado'],\r\n+    default: 'agendado',\r\n+    index: true\r\n+  },\r\n+  createdBy: { type: Schema.Types.ObjectId, ref: 'User' },\r\n+}, { timestamps: true });\r\n+\r\n+AppointmentSchema.index({ store: 1, scheduledAt: 1 });\r\n+AppointmentSchema.index({ profissional: 1, scheduledAt: 1 });\r\n+\r\n+module.exports = mongoose.model('Appointment', AppointmentSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757452784203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,13 @@\n const AppointmentSchema = new Schema({\r\n   store: { type: Schema.Types.ObjectId, ref: 'Store', required: true },\r\n   cliente: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n   pet: { type: Schema.Types.ObjectId, ref: 'Pet', required: true },\r\n-  servico: { type: Schema.Types.ObjectId, ref: 'Service', required: true },\r\n+    servico: { type: Schema.Types.ObjectId, ref: 'Service', required: false },\r\n+    itens: [{\r\n+    servico: { type: Schema.Types.ObjectId, ref: 'Service', required: true },\r\n+    valor:   { type: Number, required: true, min: 0 }\r\n+    }],\r\n   profissional: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n   scheduledAt: { type: Date, required: true },\r\n   valor: { type: Number, required: true, min: 0 },\r\n   pago: { type: Boolean, default: false },\r\n@@ -21,24 +25,5 @@\n \r\n AppointmentSchema.index({ store: 1, scheduledAt: 1 });\r\n AppointmentSchema.index({ profissional: 1, scheduledAt: 1 });\r\n \r\n-module.exports = mongoose.model('Appointment', AppointmentSchema);\n-const mongoose = require('mongoose');\r\n-const { Schema } = mongoose;\r\n-\r\n-const AppointmentSchema = new Schema({\r\n-  store: { type: Schema.Types.ObjectId, ref: 'Store', required: true },\r\n-  cliente: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n-  pet: { type: Schema.Types.ObjectId, ref: 'Pet', required: true },\r\n-  servico: { type: Schema.Types.ObjectId, ref: 'Service', required: true },\r\n-  profissional: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n-  scheduledAt: { type: Date, required: true },\r\n-  valor: { type: Number, required: true, min: 0 },\r\n-  pago: { type: Boolean, default: false },\r\n-  createdBy: { type: Schema.Types.ObjectId, ref: 'User' },\r\n-}, { timestamps: true });\r\n-\r\n-AppointmentSchema.index({ store: 1, scheduledAt: 1 });\r\n-AppointmentSchema.index({ profissional: 1, scheduledAt: 1 });\r\n-\r\n module.exports = mongoose.model('Appointment', AppointmentSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757516832871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+const mongoose = require('mongoose');\r\n+const { Schema } = mongoose;\r\n+\r\n+const AppointmentSchema = new Schema({\r\n+  store: { type: Schema.Types.ObjectId, ref: 'Store', required: true },\r\n+  cliente: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n+  pet: { type: Schema.Types.ObjectId, ref: 'Pet', required: true },\r\n+    servico: { type: Schema.Types.ObjectId, ref: 'Service', required: false },\r\n+    itens: [{\r\n+    servico: { type: Schema.Types.ObjectId, ref: 'Service', required: true },\r\n+    valor:   { type: Number, required: true, min: 0 }\r\n+    }],\r\n+  profissional: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n+  scheduledAt: { type: Date, required: true },\r\n+  valor: { type: Number, required: true, min: 0 },\r\n+  pago: { type: Boolean, default: false },\r\n+  status: {\r\n+    type: String,\r\n+    enum: ['agendado', 'em_espera', 'em_atendimento', 'finalizado'],\r\n+    default: 'agendado',\r\n+    index: true\r\n+  },\r\n+  observacoes: { type: String },\r\n+  createdBy: { type: Schema.Types.ObjectId, ref: 'User' },\r\n+}, { timestamps: true });\r\n+\r\n+AppointmentSchema.index({ store: 1, scheduledAt: 1 });\r\n+AppointmentSchema.index({ profissional: 1, scheduledAt: 1 });\r\n+\r\n+module.exports = mongoose.model('Appointment', AppointmentSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757628201811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n   profissional: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n   scheduledAt: { type: Date, required: true },\r\n   valor: { type: Number, required: true, min: 0 },\r\n   pago: { type: Boolean, default: false },\r\n+  codigoVenda: { type: String },\r\n   status: {\r\n     type: String,\r\n     enum: ['agendado', 'em_espera', 'em_atendimento', 'finalizado'],\r\n     default: 'agendado',\r\n@@ -26,34 +27,5 @@\n \r\n AppointmentSchema.index({ store: 1, scheduledAt: 1 });\r\n AppointmentSchema.index({ profissional: 1, scheduledAt: 1 });\r\n \r\n-module.exports = mongoose.model('Appointment', AppointmentSchema);\n-const mongoose = require('mongoose');\r\n-const { Schema } = mongoose;\r\n-\r\n-const AppointmentSchema = new Schema({\r\n-  store: { type: Schema.Types.ObjectId, ref: 'Store', required: true },\r\n-  cliente: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n-  pet: { type: Schema.Types.ObjectId, ref: 'Pet', required: true },\r\n-    servico: { type: Schema.Types.ObjectId, ref: 'Service', required: false },\r\n-    itens: [{\r\n-    servico: { type: Schema.Types.ObjectId, ref: 'Service', required: true },\r\n-    valor:   { type: Number, required: true, min: 0 }\r\n-    }],\r\n-  profissional: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n-  scheduledAt: { type: Date, required: true },\r\n-  valor: { type: Number, required: true, min: 0 },\r\n-  pago: { type: Boolean, default: false },\r\n-  status: {\r\n-    type: String,\r\n-    enum: ['agendado', 'em_espera', 'em_atendimento', 'finalizado'],\r\n-    default: 'agendado',\r\n-    index: true\r\n-  },\r\n-  createdBy: { type: Schema.Types.ObjectId, ref: 'User' },\r\n-}, { timestamps: true });\r\n-\r\n-AppointmentSchema.index({ store: 1, scheduledAt: 1 });\r\n-AppointmentSchema.index({ profissional: 1, scheduledAt: 1 });\r\n-\r\n module.exports = mongoose.model('Appointment', AppointmentSchema);\n\\ No newline at end of file\n"
                }
            ],
            "date": 1757349920382,
            "name": "Commit-0",
            "content": "const mongoose = require('mongoose');\r\nconst { Schema } = mongoose;\r\n\r\nconst AppointmentSchema = new Schema({\r\n  store: { type: Schema.Types.ObjectId, ref: 'Store', required: true },\r\n  cliente: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n  pet: { type: Schema.Types.ObjectId, ref: 'Pet', required: true },\r\n  servico: { type: Schema.Types.ObjectId, ref: 'Service', required: true },\r\n  profissional: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n  scheduledAt: { type: Date, required: true },\r\n  valor: { type: Number, required: true, min: 0 },\r\n  pago: { type: Boolean, default: false },\r\n  createdBy: { type: Schema.Types.ObjectId, ref: 'User' },\r\n}, { timestamps: true });\r\n\r\nAppointmentSchema.index({ store: 1, scheduledAt: 1 });\r\nAppointmentSchema.index({ profissional: 1, scheduledAt: 1 });\r\n\r\nmodule.exports = mongoose.model('Appointment', AppointmentSchema);"
        }
    ]
}