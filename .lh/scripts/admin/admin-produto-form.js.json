{
    "sourceFile": "scripts/admin/admin-produto-form.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1756593856675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757085778587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,36 @@\n     const saveCategoryModalBtn = document.getElementById('save-category-modal-btn');\r\n     const cancelCategoryModalBtn = document.getElementById('cancel-category-modal-btn');\r\n     const closeCategoryModalBtn = document.getElementById('close-category-modal-btn');\r\n \r\n+    // --- LÓGICA DAS ABAS (Geral / Especificações) ---\r\n+    const productTabLinks = document.querySelectorAll('#product-tabs .tab-link');\r\n+    const productTabContents = {\r\n+        'tab-geral': document.getElementById('tab-geral'),\r\n+        'tab-especificacoes': document.getElementById('tab-especificacoes'),\r\n+    };\r\n+    function activateProductTab(tabId) {\r\n+        Object.entries(productTabContents).forEach(([id, el]) => {\r\n+            if (!el) return;\r\n+            if (id === tabId) el.classList.remove('hidden'); else el.classList.add('hidden');\r\n+        });\r\n+        productTabLinks.forEach((btn) => {\r\n+            const isActive = btn.dataset.tab === tabId;\r\n+            btn.classList.toggle('text-primary', isActive);\r\n+            btn.classList.toggle('border-primary', isActive);\r\n+            btn.classList.toggle('text-gray-500', !isActive);\r\n+            btn.classList.toggle('border-transparent', !isActive);\r\n+            btn.classList.toggle('hover:border-gray-300', !isActive);\r\n+        });\r\n+    }\r\n+    if (productTabLinks.length) {\r\n+        productTabLinks.forEach((btn) => {\r\n+            btn.addEventListener('click', () => activateProductTab(btn.dataset.tab));\r\n+        });\r\n+        // Garante aba inicial correta (a que já vem com text-primary) ou default 'Geral'\r\n+        activateProductTab(document.querySelector('#product-tabs .tab-link.text-primary')?.dataset.tab || 'tab-geral');\r\n+    }\r\n+\r\n     // --- ESTADO DA PÁGINA ---\r\n     const urlParams = new URLSearchParams(window.location.search);\r\n     const productId = urlParams.get('id');\r\n     let productCategories = []; // Array de IDs das categorias selecionadas\r\n@@ -44,24 +72,33 @@\n         const createList = (categories, depth = 0) => {\r\n             const ul = document.createElement('ul');\r\n             if (depth > 0) ul.className = 'pl-5';\r\n             \r\n-            for (const category of categories) {\r\n+            categories.forEach(cat => {\r\n                 const li = document.createElement('li');\r\n-                li.className = 'my-1';\r\n-                li.innerHTML = `\r\n-                    <label class=\"flex items-center space-x-3 text-sm text-gray-800 cursor-pointer\">\r\n-                        <input type=\"checkbox\" class=\"form-checkbox h-4 w-4 text-primary rounded border-gray-300 focus:ring-primary\" \r\n-                               value=\"${category._id}\" \r\n-                               ${selectedIds.includes(category._id) ? 'checked' : ''}>\r\n-                        <span>${category.nome}</span>\r\n-                    </label>\r\n-                `;\r\n+                li.className = 'mb-2';\r\n+                \r\n+                const label = document.createElement('label');\r\n+                label.className = 'inline-flex items-center space-x-2';\r\n+                \r\n+                const checkbox = document.createElement('input');\r\n+                checkbox.type = 'checkbox';\r\n+                checkbox.value = cat._id;\r\n+                checkbox.checked = selectedIds.includes(cat._id);\r\n+                \r\n+                const span = document.createElement('span');\r\n+                span.textContent = cat.nome;\r\n+                \r\n+                label.appendChild(checkbox);\r\n+                label.appendChild(span);\r\n+                li.appendChild(label);\r\n+\r\n+                if (cat.children && cat.children.length > 0) {\r\n+                    li.appendChild(createList(cat.children, depth + 1));\r\n+                }\r\n+\r\n                 ul.appendChild(li);\r\n-                if (category.children && category.children.length > 0) {\r\n-                    li.appendChild(createList(category.children, depth + 1));\r\n-                }\r\n-            }\r\n+            });\r\n             return ul;\r\n         };\r\n         categoryTreeContainer.innerHTML = '';\r\n         categoryTreeContainer.appendChild(createList(categories));\r\n@@ -83,15 +120,75 @@\n \r\n         existingImagesGrid.innerHTML = product.imagens.map(imgUrl => `\r\n             <div class=\"relative group\">\r\n                 <img src=\"${API_CONFIG.SERVER_URL}${imgUrl}\" alt=\"Imagem do produto\" class=\"w-full h-24 object-cover rounded-md border\">\r\n-                <div class=\"absolute inset-0 bg-black bg-opacity-60 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity\">\r\n+                <div class=\"absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity\">\r\n                     <button type=\"button\" class=\"delete-image-btn text-white text-xs bg-red-600 hover:bg-red-700 px-2 py-1 rounded\" data-image-url=\"${imgUrl}\">Apagar</button>\r\n                 </div>\r\n             </div>\r\n         `).join('');\r\n+\r\n+        // --- Especificações ---\r\n+        const espec = product.especificacoes || {};\r\n+        // Idade\r\n+        document.querySelectorAll('input[name=\"spec-idade\"]').forEach(cb => {\r\n+            cb.checked = Array.isArray(espec.idade) ? espec.idade.includes(cb.value) : false;\r\n+        });\r\n+        // Pet\r\n+        document.querySelectorAll('input[name=\"spec-pet\"]').forEach(cb => {\r\n+            cb.checked = Array.isArray(espec.pet) ? espec.pet.includes(cb.value) : false;\r\n+        });\r\n+        // Porte Raça\r\n+        document.querySelectorAll('input[name=\"spec-porte\"]').forEach(cb => {\r\n+            cb.checked = Array.isArray(espec.porteRaca) ? espec.porteRaca.includes(cb.value) : false;\r\n+        });\r\n+        // Apresentação\r\n+        const apInput = document.getElementById('spec-apresentacao');\r\n+        if (apInput) apInput.value = espec.apresentacao || '';\r\n+        // Código de barras (somente visual)\r\n+        const eanInput = document.getElementById('spec-codbarras');\r\n+        if (eanInput) eanInput.value = product.codbarras || '';\r\n     };\r\n \r\n+    const initializeSaveCategoryButton = (allFlatCategories) => {\r\n+        saveCategoryModalBtn.addEventListener('click', () => {\r\n+            const selectedCheckboxes = categoryTreeContainer.querySelectorAll('input[type=\"checkbox\"]:checked');\r\n+            productCategories = Array.from(selectedCheckboxes).map(cb => cb.value);\r\n+            \r\n+            // Usamos uma única chamada à API para obter todas as categorias de uma vez\r\n+            fetch(`${API_CONFIG.BASE_URL}/categories`).then(res => res.json()).then(allFlatCategories => {\r\n+                \r\n+                // 1. Renderiza as tags, como antes\r\n+                const selectedCategoryObjects = allFlatCategories.filter(cat => productCategories.includes(cat._id));\r\n+                renderCategoryTags(selectedCategoryObjects);\r\n+\r\n+                // 2. Lógica para encontrar e preencher a marca\r\n+                const categoryMap = new Map(allFlatCategories.map(cat => [cat._id.toString(), cat]));\r\n+                let brandName = '';\r\n+\r\n+                for (const selectedCat of selectedCategoryObjects) {\r\n+                    let current = selectedCat;\r\n+                    while (current && current.parent) {\r\n+                        const parent = categoryMap.get(current.parent.toString());\r\n+                        if (parent && parent.nome === 'Marcas') {\r\n+                            brandName = selectedCat.nome; // Encontrou! A marca é o nome da categoria selecionada.\r\n+                            break; // Para o loop interno\r\n+                        }\r\n+                        current = parent;\r\n+                    }\r\n+                    if (brandName) break; // Para o loop externo se já encontrou a marca\r\n+                }\r\n+\r\n+                // 3. Preenche o campo 'marca' no formulário\r\n+                if (brandName) {\r\n+                    form.querySelector('#marca').value = brandName;\r\n+                }\r\n+\r\n+                categoryModal.classList.add('hidden');\r\n+            });\r\n+        });\r\n+    };\r\n+\r\n     const initializePage = async () => {\r\n         try {\r\n             // Usa Promise.all para buscar dados do produto e TODAS as categorias em paralelo\r\n             const [productRes, hierarchicalRes, flatRes] = await Promise.all([\r\n@@ -115,9 +212,9 @@\n             populateCategoryTree(allHierarchicalCategories, productCategories);\r\n \r\n         } catch (error) {\r\n             console.error(\"Erro ao inicializar a página:\", error);\r\n-            showModal({ title: 'Erro', message: error.message, confirmText: 'OK', onConfirm: () => window.location.href = 'admin-produtos.html' });\r\n+            showModal({ title: 'Erro', message: error.message, confirmText: 'Voltar', onConfirm: () => window.location.href = 'admin-produtos.html' });\r\n         }\r\n \r\n     };\r\n     \r\n@@ -157,15 +254,15 @@\n                 }\r\n                 if (brandName) break; // Para o loop externo se já encontrou a marca\r\n             }\r\n \r\n-            // 3. Preenche o campo 'marca' no formulário\r\n+            // 3. Preenche o campo 'marca'\r\n             if (brandName) {\r\n                 form.querySelector('#marca').value = brandName;\r\n             }\r\n+\r\n+            categoryModal.classList.add('hidden');\r\n         });\r\n-\r\n-        categoryModal.classList.add('hidden');\r\n     });\r\n \r\n     form.addEventListener('submit', async (event) => {\r\n         event.preventDefault();\r\n@@ -177,9 +274,15 @@\n         const updateData = {\r\n             descricao: formData.get('descricao'),\r\n             marca: formData.get('marca'),\r\n             stock: formData.get('stock'),\r\n-            categorias: productCategories\r\n+            categorias: productCategories,\r\n+            especificacoes: {\r\n+                idade: Array.from(form.querySelectorAll('input[name=\"spec-idade\"]:checked')).map(i => i.value),\r\n+                pet: Array.from(form.querySelectorAll('input[name=\"spec-pet\"]:checked')).map(i => i.value),\r\n+                porteRaca: Array.from(form.querySelectorAll('input[name=\"spec-porte\"]:checked')).map(i => i.value),\r\n+                apresentacao: (document.getElementById('spec-apresentacao')?.value || '').trim()\r\n+            }\r\n         };\r\n \r\n         try {\r\n             const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n@@ -250,48 +353,13 @@\n                         }\r\n                         showModal({ title: 'Sucesso!', message: result.message, confirmText: 'OK' });\r\n                         button.closest('.relative.group').remove();\r\n                     } catch (error) {\r\n-                        showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n+                        showModal({ title: 'Erro', message: `Não foi possível excluir a imagem: ${error.message}`, confirmText: 'Ok' });\r\n                     }\r\n                 }\r\n             });\r\n         }\r\n     });\r\n \r\n-    const initializeSaveCategoryButton = (allFlatCategories) => {\r\n-        saveCategoryModalBtn.addEventListener('click', () => {\r\n-            const selectedCheckboxes = categoryTreeContainer.querySelectorAll('input[type=\"checkbox\"]:checked');\r\n-            productCategories = Array.from(selectedCheckboxes).map(cb => cb.value);\r\n-            \r\n-            // 1. Renderiza as tags\r\n-            const selectedCategoryObjects = allFlatCategories.filter(cat => productCategories.includes(cat._id));\r\n-            renderCategoryTags(selectedCategoryObjects);\r\n-\r\n-            // 2. Lógica para encontrar e preencher a marca (agora usando a lista já carregada)\r\n-            const categoryMap = new Map(allFlatCategories.map(cat => [cat._id.toString(), cat]));\r\n-            let brandName = '';\r\n-\r\n-            for (const selectedCat of selectedCategoryObjects) {\r\n-                let current = selectedCat;\r\n-                while (current && current.parent) {\r\n-                    const parent = categoryMap.get(current.parent.toString());\r\n-                    if (parent && parent.nome === 'Marcas') {\r\n-                        brandName = selectedCat.nome;\r\n-                        break;\r\n-                    }\r\n-                    current = parent;\r\n-                }\r\n-                if (brandName) break;\r\n-            }\r\n-\r\n-            // 3. Preenche o campo 'marca'\r\n-            if (brandName) {\r\n-                form.querySelector('#marca').value = brandName;\r\n-            }\r\n-\r\n-            categoryModal.classList.add('hidden');\r\n-        });\r\n-    };\r\n-\r\n     initializePage();\r\n\\ No newline at end of file\n-});\n+});\r\n"
                },
                {
                    "date": 1757088834542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,10 +313,25 @@\n                 });\r\n                 if (!uploadResponse.ok) throw new Error('Falha ao enviar as imagens.');\r\n             }\r\n             \r\n-            showModal({ title: 'Sucesso!', message: 'Produto atualizado com sucesso.', confirmText: 'OK', onConfirm: () => window.location.href = 'admin-produtos.html' });\r\n+            try {\r\n+            const productRes = await fetch(`${API_CONFIG.BASE_URL}/products/${productId}`);\r\n+            if (productRes.ok) {\r\n+                const updatedProduct = await productRes.json();\r\n+                // Reaproveita sua função que preenche o formulário e a galeria\r\n+                populateForm(updatedProduct);\r\n+            }\r\n+            } catch (e) {\r\n+            console.warn('Não foi possível recarregar o produto após salvar.', e);\r\n+            }\r\n \r\n+            showModal({\r\n+            title: 'Sucesso!',\r\n+            message: 'Produto atualizado com sucesso.',\r\n+            confirmText: 'OK'\r\n+            });\r\n+\r\n         } catch (error) {\r\n             showModal({ title: 'Erro', message: `Não foi possível salvar: ${error.message}`, confirmText: 'Tentar Novamente' });\r\n         } finally {\r\n             submitButton.disabled = false;\r\n@@ -361,5 +376,5 @@\n         }\r\n     });\r\n \r\n     initializePage();\r\n-});\n\\ No newline at end of file\n+});\r\n"
                }
            ],
            "date": 1756593856675,
            "name": "Commit-0",
            "content": "document.addEventListener('DOMContentLoaded', () => {\r\n    \r\n    // --- REFERÊNCIAS AO DOM ---\r\n    const form = document.getElementById('edit-product-form');\r\n    const imageUploadInput = document.getElementById('imageUpload');\r\n    const existingImagesGrid = document.getElementById('existing-images-grid');\r\n    const pageTitle = document.getElementById('product-page-title');\r\n    const categoryTagsContainer = document.getElementById('category-tags-container');\r\n    const addCategoryBtn = document.getElementById('add-category-btn');\r\n    const categoryModal = document.getElementById('category-modal');\r\n    const categoryTreeContainer = document.getElementById('category-tree-container');\r\n    const saveCategoryModalBtn = document.getElementById('save-category-modal-btn');\r\n    const cancelCategoryModalBtn = document.getElementById('cancel-category-modal-btn');\r\n    const closeCategoryModalBtn = document.getElementById('close-category-modal-btn');\r\n\r\n    // --- ESTADO DA PÁGINA ---\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const productId = urlParams.get('id');\r\n    let productCategories = []; // Array de IDs das categorias selecionadas\r\n    let allHierarchicalCategories = []; // Guarda a árvore de categorias\r\n\r\n    if (!productId) {\r\n        alert(\"ID do produto não encontrado!\");\r\n        window.location.href = 'admin-produtos.html';\r\n        return;\r\n    }\r\n\r\n    // --- FUNÇÕES DE LÓGICA ---\r\n    const renderCategoryTags = (categories) => {\r\n        categoryTagsContainer.innerHTML = '';\r\n        if (categories.length === 0) {\r\n            categoryTagsContainer.innerHTML = `<span class=\"text-sm text-gray-500\">Nenhuma categoria associada.</span>`;\r\n            return;\r\n        }\r\n        categories.forEach(cat => {\r\n            const tag = document.createElement('span');\r\n            tag.className = \"inline-flex items-center bg-gray-200 text-gray-700 text-xs font-medium px-2 py-1 rounded-full\";\r\n            tag.textContent = cat.nome;\r\n            categoryTagsContainer.appendChild(tag);\r\n        });\r\n    };\r\n\r\n    const populateCategoryTree = (categories, selectedIds) => {\r\n        const createList = (categories, depth = 0) => {\r\n            const ul = document.createElement('ul');\r\n            if (depth > 0) ul.className = 'pl-5';\r\n            \r\n            for (const category of categories) {\r\n                const li = document.createElement('li');\r\n                li.className = 'my-1';\r\n                li.innerHTML = `\r\n                    <label class=\"flex items-center space-x-3 text-sm text-gray-800 cursor-pointer\">\r\n                        <input type=\"checkbox\" class=\"form-checkbox h-4 w-4 text-primary rounded border-gray-300 focus:ring-primary\" \r\n                               value=\"${category._id}\" \r\n                               ${selectedIds.includes(category._id) ? 'checked' : ''}>\r\n                        <span>${category.nome}</span>\r\n                    </label>\r\n                `;\r\n                ul.appendChild(li);\r\n                if (category.children && category.children.length > 0) {\r\n                    li.appendChild(createList(category.children, depth + 1));\r\n                }\r\n            }\r\n            return ul;\r\n        };\r\n        categoryTreeContainer.innerHTML = '';\r\n        categoryTreeContainer.appendChild(createList(categories));\r\n    };\r\n\r\n    const populateForm = (product) => {\r\n        pageTitle.textContent = `Editar Produto: ${product.nome}`;\r\n        form.querySelector('#nome').value = product.nome || '';\r\n        form.querySelector('#marca').value = product.marca || '';\r\n        form.querySelector('#cod').value = product.cod || '';\r\n        form.querySelector('#codbarras').value = product.codbarras || '';\r\n        form.querySelector('#descricao').value = product.descricao || '';\r\n        form.querySelector('#custo').value = product.custo || 0;\r\n        form.querySelector('#venda').value = product.venda || 0;\r\n        form.querySelector('#stock').value = product.stock || 0;\r\n\r\n        productCategories = product.categorias.map(cat => cat._id);\r\n        renderCategoryTags(product.categorias);\r\n\r\n        existingImagesGrid.innerHTML = product.imagens.map(imgUrl => `\r\n            <div class=\"relative group\">\r\n                <img src=\"${API_CONFIG.SERVER_URL}${imgUrl}\" alt=\"Imagem do produto\" class=\"w-full h-24 object-cover rounded-md border\">\r\n                <div class=\"absolute inset-0 bg-black bg-opacity-60 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity\">\r\n                    <button type=\"button\" class=\"delete-image-btn text-white text-xs bg-red-600 hover:bg-red-700 px-2 py-1 rounded\" data-image-url=\"${imgUrl}\">Apagar</button>\r\n                </div>\r\n            </div>\r\n        `).join('');\r\n    };\r\n\r\n    const initializePage = async () => {\r\n        try {\r\n            // Usa Promise.all para buscar dados do produto e TODAS as categorias em paralelo\r\n            const [productRes, hierarchicalRes, flatRes] = await Promise.all([\r\n                fetch(`${API_CONFIG.BASE_URL}/products/${productId}`),\r\n                fetch(`${API_CONFIG.BASE_URL}/categories/hierarchical`),\r\n                fetch(`${API_CONFIG.BASE_URL}/categories`) // <-- ADICIONADO: Busca a lista plana aqui\r\n            ]);\r\n\r\n            if (!productRes.ok || !hierarchicalRes.ok || !flatRes.ok) {\r\n                throw new Error('Falha ao carregar os dados iniciais da página.');\r\n            }\r\n\r\n            const product = await productRes.json();\r\n            allHierarchicalCategories = await hierarchicalRes.json();\r\n            const allFlatCategories = await flatRes.json(); // <-- Guarda a lista plana\r\n\r\n            // Passa a lista plana de categorias para a lógica do botão de salvar\r\n            initializeSaveCategoryButton(allFlatCategories); \r\n            \r\n            populateForm(product);\r\n            populateCategoryTree(allHierarchicalCategories, productCategories);\r\n\r\n        } catch (error) {\r\n            console.error(\"Erro ao inicializar a página:\", error);\r\n            showModal({ title: 'Erro', message: error.message, confirmText: 'OK', onConfirm: () => window.location.href = 'admin-produtos.html' });\r\n        }\r\n\r\n    };\r\n    \r\n    // --- EVENT LISTENERS ---\r\n    addCategoryBtn.addEventListener('click', () => {\r\n        populateCategoryTree(allHierarchicalCategories, productCategories);\r\n        categoryModal.classList.remove('hidden');\r\n    });\r\n    cancelCategoryModalBtn.addEventListener('click', () => categoryModal.classList.add('hidden'));\r\n    closeCategoryModalBtn.addEventListener('click', () => categoryModal.classList.add('hidden'));\r\n\r\n    // ▼▼▼ ALTERAÇÃO: Lógica de preenchimento automático da marca adicionada aqui ▼▼▼\r\n    saveCategoryModalBtn.addEventListener('click', () => {\r\n        const selectedCheckboxes = categoryTreeContainer.querySelectorAll('input[type=\"checkbox\"]:checked');\r\n        productCategories = Array.from(selectedCheckboxes).map(cb => cb.value);\r\n        \r\n        // Usamos uma única chamada à API para obter todas as categorias de uma vez\r\n        fetch(`${API_CONFIG.BASE_URL}/categories`).then(res => res.json()).then(allFlatCategories => {\r\n            \r\n            // 1. Renderiza as tags, como antes\r\n            const selectedCategoryObjects = allFlatCategories.filter(cat => productCategories.includes(cat._id));\r\n            renderCategoryTags(selectedCategoryObjects);\r\n\r\n            // 2. Lógica para encontrar e preencher a marca\r\n            const categoryMap = new Map(allFlatCategories.map(cat => [cat._id.toString(), cat]));\r\n            let brandName = '';\r\n\r\n            for (const selectedCat of selectedCategoryObjects) {\r\n                let current = selectedCat;\r\n                while (current && current.parent) {\r\n                    const parent = categoryMap.get(current.parent.toString());\r\n                    if (parent && parent.nome === 'Marcas') {\r\n                        brandName = selectedCat.nome; // Encontrou! A marca é o nome da categoria selecionada.\r\n                        break; // Para o loop interno\r\n                    }\r\n                    current = parent;\r\n                }\r\n                if (brandName) break; // Para o loop externo se já encontrou a marca\r\n            }\r\n\r\n            // 3. Preenche o campo 'marca' no formulário\r\n            if (brandName) {\r\n                form.querySelector('#marca').value = brandName;\r\n            }\r\n        });\r\n\r\n        categoryModal.classList.add('hidden');\r\n    });\r\n\r\n    form.addEventListener('submit', async (event) => {\r\n        event.preventDefault();\r\n        const submitButton = form.querySelector('button[type=\"submit\"]');\r\n        submitButton.disabled = true;\r\n        submitButton.innerHTML = `<i class=\"fas fa-spinner fa-spin mr-2\"></i>A Salvar...`;\r\n        \r\n        const formData = new FormData(form);\r\n        const updateData = {\r\n            descricao: formData.get('descricao'),\r\n            marca: formData.get('marca'),\r\n            stock: formData.get('stock'),\r\n            categorias: productCategories\r\n        };\r\n\r\n        try {\r\n            const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n            const token = loggedInUser?.token;\r\n\r\n            const textResponse = await fetch(`${API_CONFIG.BASE_URL}/products/${productId}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify(updateData),\r\n            });\r\n            if (!textResponse.ok) throw new Error('Falha ao salvar os dados do produto.');\r\n\r\n            const files = imageUploadInput.files;\r\n            if (files.length > 0) {\r\n                const imageFormData = new FormData();\r\n                for (const file of files) {\r\n                    imageFormData.append('imagens', file);\r\n                }\r\n                const uploadResponse = await fetch(`${API_CONFIG.BASE_URL}/products/${productId}/upload`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`\r\n                    },\r\n                    body: imageFormData,\r\n                });\r\n                if (!uploadResponse.ok) throw new Error('Falha ao enviar as imagens.');\r\n            }\r\n            \r\n            showModal({ title: 'Sucesso!', message: 'Produto atualizado com sucesso.', confirmText: 'OK', onConfirm: () => window.location.href = 'admin-produtos.html' });\r\n\r\n        } catch (error) {\r\n            showModal({ title: 'Erro', message: `Não foi possível salvar: ${error.message}`, confirmText: 'Tentar Novamente' });\r\n        } finally {\r\n            submitButton.disabled = false;\r\n            submitButton.innerHTML = 'Salvar Alterações';\r\n        }\r\n    });\r\n\r\n    existingImagesGrid.addEventListener('click', async (event) => {\r\n        if (event.target.classList.contains('delete-image-btn')) {\r\n            const button = event.target;\r\n            const imageUrlToDelete = button.dataset.imageUrl;\r\n\r\n            showModal({\r\n                title: 'Confirmar Exclusão',\r\n                message: `Tem a certeza de que deseja apagar esta imagem? Esta ação não pode ser desfeita.`,\r\n                confirmText: 'Apagar',\r\n                cancelText: 'Cancelar',\r\n                onConfirm: async () => {\r\n                    try {\r\n                        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                        const token = loggedInUser?.token;\r\n                        const response = await fetch(`${API_CONFIG.BASE_URL}/products/${productId}/images`, {\r\n                            method: 'DELETE',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                                'Authorization': `Bearer ${token}`\r\n                            },\r\n                            body: JSON.stringify({ imageUrl: imageUrlToDelete })\r\n                        });\r\n                        \r\n                        const result = await response.json();\r\n                        if (!response.ok) {\r\n                            throw new Error(result.message || 'Falha ao apagar a imagem.');\r\n                        }\r\n                        showModal({ title: 'Sucesso!', message: result.message, confirmText: 'OK' });\r\n                        button.closest('.relative.group').remove();\r\n                    } catch (error) {\r\n                        showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    const initializeSaveCategoryButton = (allFlatCategories) => {\r\n        saveCategoryModalBtn.addEventListener('click', () => {\r\n            const selectedCheckboxes = categoryTreeContainer.querySelectorAll('input[type=\"checkbox\"]:checked');\r\n            productCategories = Array.from(selectedCheckboxes).map(cb => cb.value);\r\n            \r\n            // 1. Renderiza as tags\r\n            const selectedCategoryObjects = allFlatCategories.filter(cat => productCategories.includes(cat._id));\r\n            renderCategoryTags(selectedCategoryObjects);\r\n\r\n            // 2. Lógica para encontrar e preencher a marca (agora usando a lista já carregada)\r\n            const categoryMap = new Map(allFlatCategories.map(cat => [cat._id.toString(), cat]));\r\n            let brandName = '';\r\n\r\n            for (const selectedCat of selectedCategoryObjects) {\r\n                let current = selectedCat;\r\n                while (current && current.parent) {\r\n                    const parent = categoryMap.get(current.parent.toString());\r\n                    if (parent && parent.nome === 'Marcas') {\r\n                        brandName = selectedCat.nome;\r\n                        break;\r\n                    }\r\n                    current = parent;\r\n                }\r\n                if (brandName) break;\r\n            }\r\n\r\n            // 3. Preenche o campo 'marca'\r\n            if (brandName) {\r\n                form.querySelector('#marca').value = brandName;\r\n            }\r\n\r\n            categoryModal.classList.add('hidden');\r\n        });\r\n    };\r\n\r\n    initializePage();\r\n});"
        }
    ]
}