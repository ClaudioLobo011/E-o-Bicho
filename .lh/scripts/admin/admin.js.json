{
    "sourceFile": "scripts/admin/admin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1756587869969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756592244038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,10 @@\n         return;\r\n     }\r\n \r\n     try {\r\n+        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+        const token = loggedInUser?.token;\r\n         // Chama a API para validar o token e confirmar se o usuário é admin\r\n         const response = await fetch(`${API_CONFIG.BASE_URL}/auth/check`, {\r\n             headers: { 'Authorization': `Bearer ${token}` }\r\n         });\r\n"
                },
                {
                    "date": 1756592635878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,23 @@\n async function checkAdminAccess() {\r\n-    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n-    const token = loggedInUser?.token;\r\n-\r\n-    // Se não está logado → manda pro login\r\n-    if (!loggedInUser || !token) {\r\n-        alert(\"Você precisa estar logado como administrador.\");\r\n+    const token = localStorage.getItem('authToken');\r\n+    if (!token) {\r\n+        alert(\"Sessão expirada. Faça login novamente.\");\r\n         window.location.replace('/pages/login.html');\r\n         return;\r\n     }\r\n \r\n     try {\r\n-        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n-        const token = loggedInUser?.token;\r\n-        // Chama a API para validar o token e confirmar se o usuário é admin\r\n         const response = await fetch(`${API_CONFIG.BASE_URL}/auth/check`, {\r\n             headers: { 'Authorization': `Bearer ${token}` }\r\n         });\r\n \r\n-        if (!response.ok) throw new Error(\"Falha ao validar acesso de administrador\");\r\n+        if (!response.ok) throw new Error(\"Erro ao verificar permissões\");\r\n \r\n         const data = await response.json();\r\n+        console.log(\"Admin OK:\", data);\r\n+        document.body.style.visibility = 'visible';\r\n \r\n-        // Confere se o role do usuário permite acesso\r\n-        if (data.role !== 'admin' && data.role !== 'admin_master') {\r\n-            alert(\"Acesso negado. Esta página é apenas para administradores.\");\r\n-            window.location.replace('/index.html');\r\n-            return;\r\n-        }\r\n-\r\n-        console.log(\"Acesso de administrador concedido. Bem-vindo!\");\r\n-        document.body.style.visibility = 'visible';\r\n     } catch (error) {\r\n         console.error(\"Erro ao verificar admin:\", error);\r\n         alert(\"Erro ao verificar permissões. Faça login novamente.\");\r\n         window.location.replace('/pages/login.html');\r\n"
                },
                {
                    "date": 1756593212459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,36 @@\n async function checkAdminAccess() {\r\n-    const token = localStorage.getItem('authToken');\r\n-    if (!token) {\r\n-        alert(\"Sessão expirada. Faça login novamente.\");\r\n+    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+    const token = loggedInUser?.token;\r\n+\r\n+    // Se não está logado → manda pro login\r\n+    if (!loggedInUser || !token) {\r\n+        alert(\"Você precisa estar logado como administrador.\");\r\n         window.location.replace('/pages/login.html');\r\n         return;\r\n     }\r\n \r\n     try {\r\n+        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+        const token = loggedInUser?.token;\r\n+        // Chama a API para validar o token e confirmar se o usuário é admin\r\n         const response = await fetch(`${API_CONFIG.BASE_URL}/auth/check`, {\r\n             headers: { 'Authorization': `Bearer ${token}` }\r\n         });\r\n \r\n-        if (!response.ok) throw new Error(\"Erro ao verificar permissões\");\r\n+        if (!response.ok) throw new Error(\"Falha ao validar acesso de administrador\");\r\n \r\n         const data = await response.json();\r\n-        console.log(\"Admin OK:\", data);\r\n+\r\n+        // Confere se o role do usuário permite acesso\r\n+        if (data.role !== 'admin' && data.role !== 'admin_master') {\r\n+            alert(\"Acesso negado. Esta página é apenas para administradores.\");\r\n+            window.location.replace('/index.html');\r\n+            return;\r\n+        }\r\n+\r\n+        console.log(\"Acesso de administrador concedido. Bem-vindo!\");\r\n         document.body.style.visibility = 'visible';\r\n-\r\n     } catch (error) {\r\n         console.error(\"Erro ao verificar admin:\", error);\r\n         alert(\"Erro ao verificar permissões. Faça login novamente.\");\r\n         window.location.replace('/pages/login.html');\r\n"
                },
                {
                    "date": 1756748029700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,60 @@\n+// scripts/admin/admin.js\r\n async function checkAdminAccess() {\r\n-    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+  // Esconde conteúdo até validar\r\n+  document.body.style.visibility = 'hidden';\r\n+\r\n+  try {\r\n+    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n     const token = loggedInUser?.token;\r\n \r\n-    // Se não está logado → manda pro login\r\n+    // Sem login -> login\r\n     if (!loggedInUser || !token) {\r\n-        alert(\"Você precisa estar logado como administrador.\");\r\n-        window.location.replace('/pages/login.html');\r\n-        return;\r\n+      alert('Você precisa estar logado como administrador.');\r\n+      window.location.replace('/pages/login.html');\r\n+      return;\r\n     }\r\n \r\n-    try {\r\n-        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n-        const token = loggedInUser?.token;\r\n-        // Chama a API para validar o token e confirmar se o usuário é admin\r\n-        const response = await fetch(`${API_CONFIG.BASE_URL}/auth/check`, {\r\n-            headers: { 'Authorization': `Bearer ${token}` }\r\n-        });\r\n+    // Valida token e obtém role\r\n+    const resp = await fetch(`${API_CONFIG.BASE_URL}/auth/check`, {\r\n+      headers: { Authorization: `Bearer ${token}` },\r\n+    });\r\n \r\n-        if (!response.ok) throw new Error(\"Falha ao validar acesso de administrador\");\r\n+    if (!resp.ok) {\r\n+      // token inválido/expirado\r\n+      alert('Sessão expirada. Faça login novamente.');\r\n+      window.location.replace('/pages/login.html');\r\n+      return;\r\n+    }\r\n \r\n-        const data = await response.json();\r\n+    const data = await resp.json();\r\n+    const role = data?.role;\r\n \r\n-        // Confere se o role do usuário permite acesso\r\n-        if (data.role !== 'admin' && data.role !== 'admin_master') {\r\n-            alert(\"Acesso negado. Esta página é apenas para administradores.\");\r\n-            window.location.replace('/index.html');\r\n-            return;\r\n-        }\r\n+    // Libera somente admin e admin_master\r\n+    const allowed = role === 'admin' || role === 'admin_master';\r\n+    if (!allowed) {\r\n+      alert('Acesso negado. Esta área é restrita a administradores.');\r\n+      // se quiser mandar para home em vez do login, troque a URL abaixo\r\n+      window.location.replace('/pages/login.html');\r\n+      return;\r\n+    }\r\n \r\n-        console.log(\"Acesso de administrador concedido. Bem-vindo!\");\r\n-        document.body.style.visibility = 'visible';\r\n-    } catch (error) {\r\n-        console.error(\"Erro ao verificar admin:\", error);\r\n-        alert(\"Erro ao verificar permissões. Faça login novamente.\");\r\n-        window.location.replace('/pages/login.html');\r\n-    }\r\n+    // Ok, mostra a página\r\n+    document.body.style.visibility = 'visible';\r\n+  } catch (err) {\r\n+    console.error('Erro ao verificar permissões:', err);\r\n+    alert('Erro ao verificar permissões. Faça login novamente.');\r\n+    window.location.replace('/pages/login.html');\r\n+  }\r\n }\r\n \r\n-// Esconde até validar\r\n+// Garante que o body não pisca antes da validação\r\n document.body.style.visibility = 'hidden';\r\n \r\n-// Garante que config.js já foi carregado\r\n+// Aguarda config.js estar carregado\r\n if (typeof API_CONFIG !== 'undefined') {\r\n-    checkAdminAccess();\r\n+  checkAdminAccess();\r\n } else {\r\n-    console.error(\"API_CONFIG não definido. Certifique-se que config.js é carregado antes de admin.js\");\r\n+  console.error('API_CONFIG não definido. Garanta que config.js é carregado antes de admin.js');\r\n+  // mesmo assim tenta validar após um pequeno delay\r\n+  setTimeout(checkAdminAccess, 100);\r\n }\r\n"
                }
            ],
            "date": 1756587869969,
            "name": "Commit-0",
            "content": "async function checkAdminAccess() {\r\n    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n    const token = loggedInUser?.token;\r\n\r\n    // Se não está logado → manda pro login\r\n    if (!loggedInUser || !token) {\r\n        alert(\"Você precisa estar logado como administrador.\");\r\n        window.location.replace('/pages/login.html');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // Chama a API para validar o token e confirmar se o usuário é admin\r\n        const response = await fetch(`${API_CONFIG.BASE_URL}/auth/check`, {\r\n            headers: { 'Authorization': `Bearer ${token}` }\r\n        });\r\n\r\n        if (!response.ok) throw new Error(\"Falha ao validar acesso de administrador\");\r\n\r\n        const data = await response.json();\r\n\r\n        // Confere se o role do usuário permite acesso\r\n        if (data.role !== 'admin' && data.role !== 'admin_master') {\r\n            alert(\"Acesso negado. Esta página é apenas para administradores.\");\r\n            window.location.replace('/index.html');\r\n            return;\r\n        }\r\n\r\n        console.log(\"Acesso de administrador concedido. Bem-vindo!\");\r\n        document.body.style.visibility = 'visible';\r\n    } catch (error) {\r\n        console.error(\"Erro ao verificar admin:\", error);\r\n        alert(\"Erro ao verificar permissões. Faça login novamente.\");\r\n        window.location.replace('/pages/login.html');\r\n    }\r\n}\r\n\r\n// Esconde até validar\r\ndocument.body.style.visibility = 'hidden';\r\n\r\n// Garante que config.js já foi carregado\r\nif (typeof API_CONFIG !== 'undefined') {\r\n    checkAdminAccess();\r\n} else {\r\n    console.error(\"API_CONFIG não definido. Certifique-se que config.js é carregado antes de admin.js\");\r\n}\r\n"
        }
    ]
}