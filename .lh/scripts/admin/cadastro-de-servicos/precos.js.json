{
    "sourceFile": "scripts/admin/cadastro-de-servicos/precos.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757790692001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757790692001,
            "name": "Commit-0",
            "content": "import { getToken } from './core.js';\n\n// Elements\nconst E = {\n  btnTabCadastro: document.getElementById('tab-btn-cadastro'),\n  btnTabPrecos:   document.getElementById('tab-btn-precos'),\n  tabCadastro:    document.getElementById('tab-cadastro'),\n  tabPrecos:      document.getElementById('tab-precos'),\n\n  servInput:  document.getElementById('ap-serv-input'),\n  servSug:    document.getElementById('ap-serv-sug'),\n  servId:     document.getElementById('ap-serv-id'),\n  servPorteInfo: document.getElementById('ap-serv-porte-info'),\n\n  tipo:       document.getElementById('ap-tipo'),\n  porte:      document.getElementById('ap-porte'),\n  store:      document.getElementById('ap-store'),\n\n  replCusto:  document.getElementById('ap-repl-custo'),\n  replCustoBtn: document.getElementById('ap-repl-custo-btn'),\n  replValor:  document.getElementById('ap-repl-valor'),\n  replValorBtn: document.getElementById('ap-repl-valor-btn'),\n\n  gridBody:   document.getElementById('ap-grid-tbody'),\n  gridEmpty:  document.getElementById('ap-grid-empty'),\n  saveBtn:    document.getElementById('ap-save-btn'),\n};\n\nconst API_BASE = API_CONFIG.BASE_URL;\n\n// --- Species/breeds loader from data/Racas-leitura.js ---\nlet SPECIES_MAP = null; // { cachorro:{portes:{mini:[],...}, all:[], map:{}}, gato:[...], passaro:[...], ... }\nconst norm = (s) => String(s || '')\n  .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n  .trim().toLowerCase();\n\nasync function loadSpeciesMap() {\n  if (SPECIES_MAP) return SPECIES_MAP;\n  const base = (window.basePath || '../../');\n  const url = base + 'data/Racas-leitura.js';\n  try {\n    const txt = await fetch(url).then(r => r.text());\n    const species = {};\n    let dogMap = { mini:[], pequeno:[], medio:[], grande:[], gigante:[] };\n    const reDogGlobal = /porte[_\\s-]?(mini|pequeno|medio|grande|gigante)\\s*{([\\s\\S]*?)}\\s*/gi;\n    let m;\n    while ((m = reDogGlobal.exec(txt))) {\n      const key = m[1].toLowerCase();\n      const body = m[2];\n      const list = body.split(/\\n+/).map(x => x.trim())\n        .filter(x => x && !x.startsWith('//') && x !== '...')\n        .map(x => x.replace(/\\*.*?\\*/g, ''))\n        .map(x => x.replace(/\\s*\\(duplicata.*$/i, ''))\n        .map(x => x.replace(/\\s*[ï¿½?\"-].*$/,'').replace(/\\s*-\\s*registro.*$/i,''));\n      dogMap[key] = Array.from(new Set(list));\n    }\n    const dogAll = Array.from(new Set([\n      ...dogMap.mini, ...dogMap.pequeno, ...dogMap.medio, ...dogMap.grande, ...dogMap.gigante\n    ]));\n    const dogLookup = {};\n    dogAll.forEach(n => { dogLookup[norm(n)] =\n      dogMap.mini.includes(n) ? 'mini' :\n      dogMap.pequeno.includes(n) ? 'pequeno' :\n      dogMap.medio.includes(n) ? 'medio' :\n      dogMap.grande.includes(n) ? 'grande' : 'gigante';\n    });\n    species.cachorro = { portes: dogMap, all: dogAll, map: dogLookup };\n\n    const simpleSpecies = ['gatos','gato','passaros','passaro','peixes','peixe','roedores','roedor','lagartos','lagarto','tartarugas','tartaruga','exoticos','exotico'];\n    for (const sp of simpleSpecies) {\n      const m2 = new RegExp(sp + \"\\\\s*{([\\\\s\\\\S]*?)}\",\"i\").exec(txt);\n      if (m2) {\n        const list = m2[1]\n          .split(/\\n+/)\n          .map(x => x.trim())\n          .filter(x => x && !x.startsWith('//') && x !== '...')\n          .map(x => x.replace(/\\*.*?\\*/g, ''))\n          .map(x => x.replace(/\\s*\\(duplicata.*$/i, ''))\n          .map(x => x.replace(/\\s*[ï¿½?\"-].*$/, '').replace(/\\s*-\\s*registro.*$/i, ''));\n        const singular =\n          /roedores$/i.test(sp)   ? 'roedor'     :\n          /gatos$/i.test(sp)      ? 'gato'       :\n          /passaros$/i.test(sp)   ? 'passaro'    :\n          /peixes$/i.test(sp)     ? 'peixe'      :\n          /lagartos$/i.test(sp)   ? 'lagarto'    :\n          /tartarugas$/i.test(sp) ? 'tartaruga'  :\n          /exoticos$/i.test(sp)   ? 'exotico'    :\n          sp.replace(/s$/, '');\n        species[singular] = Array.from(new Set(list));\n      }\n    }\n    SPECIES_MAP = species;\n    return species;\n  } catch (e) {\n    console.warn('Falha ao ler Racas-leitura.js', e);\n    SPECIES_MAP = null;\n    return null;\n  }\n}\n\nfunction populateTiposSelect() {\n  if (!E.tipo) return;\n  const opts = [\n    { v: 'todos', l: 'Todos' },\n    { v: 'cachorro', l: 'Cachorro' },\n    { v: 'gato', l: 'Gato' },\n    { v: 'passaro', l: 'Pássaro' },\n    { v: 'peixe', l: 'Peixe' },\n    { v: 'roedor', l: 'Roedor' },\n    { v: 'lagarto', l: 'Lagarto' },\n    { v: 'tartaruga', l: 'Tartaruga' },\n    { v: 'exotico', l: 'Exótico' },\n  ];\n  E.tipo.innerHTML = '';\n  opts.forEach(o => {\n    const opt = document.createElement('option');\n    opt.value = o.v; opt.textContent = o.l; E.tipo.appendChild(opt);\n  });\n}\n\n\nfunction setPorteOptionsFromService(service) {\n  const el = E.porte; if (!el) return;\n  const portes = Array.isArray(service?.porte) ? service.porte : [];\n  const all = ['Todos','Mini','Pequeno','Médio','Grande','Gigante'];\n  el.innerHTML = '';\n  const enabled = (portes.includes('Todos') || !portes.length)\n    ? all\n    : portes.map(s => String(s).replace('MǸdio','Médio').replace('M?dio','Médio').replace('M\u001ddio','Médio'));\n  for (const p of all) {\n    const opt = document.createElement('option');\n    opt.value = p; opt.textContent = p; opt.disabled = !enabled.includes(p);\n    el.appendChild(opt);\n  }\n  if (enabled.includes('Todos')) el.value = 'Todos';\n  else el.value = enabled[0] || 'Mini';\n  const info = enabled.join(', ');\n  if (E.servPorteInfo) E.servPorteInfo.textContent = `Portes permitidos: ${info}`;\n}\n\nasync function loadStores() {\n  const res = await fetch(`${API_BASE}/stores`);\n  const list = await res.json().catch(() => []);\n  E.store.innerHTML = '';\n  list.forEach(s => {\n    const opt = document.createElement('option');\n    opt.value = s._id; opt.textContent = s.nome; E.store.appendChild(opt);\n  });\n}\n\nfunction clearSugList() { if (E.servSug) { E.servSug.innerHTML = ''; E.servSug.classList.add('hidden'); } }\n\nasync function searchServices(q) {\n  const res = await fetch(`${API_BASE}/func/servicos/buscar?q=${encodeURIComponent(q)}&limit=20`, {\n    headers: { 'Authorization': `Bearer ${getToken()}` }\n  });\n  if (!res.ok) return [];\n  return res.json();\n}\n\nfunction renderServiceSug(list) {\n  clearSugList();\n  if (!E.servSug || !list.length) return;\n  E.servSug.classList.remove('hidden');\n  list.forEach(item => {\n    const li = document.createElement('li');\n    li.className = 'px-3 py-2 hover:bg-gray-50 cursor-pointer';\n    li.textContent = `${item.nome} ${item.grupo ? '(' + item.grupo.nome + ')' : ''}`;\n    li.dataset.id = item._id;\n    li.__item = item;\n    E.servSug.appendChild(li);\n  });\n}\n\nfunction breedsForSelection(tipo, porte, service) {\n  const data = SPECIES_MAP || {};\n  const t = tipo || 'cachorro';\n  if (t === 'todos') {\n    const dog = data.cachorro || { all: [] };\n    const all = new Set([ ...(dog.all || []) ]);\n    for (const k of Object.keys(data)) {\n      if (k === 'cachorro') continue;\n      const arr = Array.isArray(data[k]) ? data[k] : [];\n      arr.forEach(n => all.add(n));\n    }\n    return Array.from(all);\n  }\n  if (t === 'cachorro') {\n    const dog = data.cachorro || { portes: {} };\n    if (!porte || porte === 'Todos' || (service?.porte||[]).includes('Todos')) {\n      const { mini=[], pequeno=[], medio=[], grande=[], gigante=[] } = dog.portes || {};\n      return [...new Set([ ...mini, ...pequeno, ...medio, ...grande, ...gigante ])];\n    }\n    const key = norm(porte);\n    return dog.portes?.[key] || [];\n  }\n  return data[t] || [];\n}\n\nasync function loadPrices(serviceId, storeId, tipo) {\n  if (!serviceId || !storeId || !tipo) return [];\n  const url = `${API_BASE}/admin/servicos/precos?serviceId=${serviceId}&storeId=${storeId}&tipo=${encodeURIComponent(tipo)}`;\n  const res = await fetch(url, { headers: { 'Authorization': `Bearer ${getToken()}` } });\n  if (!res.ok) return [];\n  return res.json();\n}\n\nasync function savePrices(serviceId, storeId, tipo, items) {\n  const res = await fetch(`${API_BASE}/admin/servicos/precos/bulk`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${getToken()}` },\n    body: JSON.stringify({ serviceId, storeId, tipo, items })\n  });\n  if (!res.ok) {\n    const err = await res.json().catch(() => ({}));\n    throw new Error(err.message || 'Falha ao salvar');\n  }\n  return res.json();\n}\n\nfunction renderGrid(breeds, overrides) {\n  E.gridBody.innerHTML = '';\n  const map = new Map((overrides || []).map(o => [norm(o.raca), o]));\n  if (!breeds.length) { E.gridEmpty.classList.remove('hidden'); return; }\n  E.gridEmpty.classList.add('hidden');\n  for (const name of breeds) {\n    const ov = map.get(norm(name)) || { custo: '', valor: '' };\n    const tr = document.createElement('tr');\n    tr.innerHTML = `\n      <td class=\"px-3 py-2 text-gray-800\">${name}</td>\n      <td class=\"px-3 py-2\"><input type=\"number\" step=\"0.01\" class=\"w-32 rounded border-gray-300\" value=\"${ov.custo === '' ? '' : Number(ov.custo)}\" /></td>\n      <td class=\"px-3 py-2\"><input type=\"number\" step=\"0.01\" class=\"w-32 rounded border-gray-300\" value=\"${ov.valor === '' ? '' : Number(ov.valor)}\" /></td>\n    `;\n    tr.dataset.raca = name;\n    E.gridBody.appendChild(tr);\n  }\n}\n\nfunction getGridItems() {\n  const rows = Array.from(E.gridBody?.querySelectorAll('tr') || []);\n  return rows.map(r => {\n    const inputs = r.querySelectorAll('input');\n    const custo = parseFloat(inputs[0]?.value || '0');\n    const valor = parseFloat(inputs[1]?.value || '0');\n    return { raca: r.dataset.raca || '', custo: Number.isFinite(custo) ? custo : 0, valor: Number.isFinite(valor) ? valor : 0 };\n  });\n}\n\nasync function refreshGrid() {\n  const serviceId = E.servId?.value;\n  const storeId = E.store?.value;\n  const tipo = E.tipo?.value;\n  if (!serviceId || !storeId || !tipo) {\n    E.gridBody.innerHTML = '';\n    E.gridEmpty.classList.remove('hidden');\n    return;\n  }\n  const service = E.servInput.__selectedService || null;\n  const porte = E.porte?.value || 'Todos';\n  const breeds = breedsForSelection(tipo, porte, service);\n  const overrides = (tipo === 'todos') ? [] : await loadPrices(serviceId, storeId, tipo);\n  renderGrid(breeds, overrides);\n}\n\nfunction bindEvents() {\n  // Tabs\n  E.btnTabCadastro?.addEventListener('click', () => {\n    E.tabCadastro?.classList.remove('hidden');\n    E.tabPrecos?.classList.add('hidden');\n    E.btnTabCadastro?.classList.add('bg-primary','text-white');\n    E.btnTabPrecos?.classList.remove('bg-primary','text-white');\n    E.btnTabPrecos?.classList.add('border','border-gray-300','text-gray-700');\n  });\n  E.btnTabPrecos?.addEventListener('click', () => {\n    E.tabPrecos?.classList.remove('hidden');\n    E.tabCadastro?.classList.add('hidden');\n    E.btnTabPrecos?.classList.add('bg-primary','text-white');\n    E.btnTabCadastro?.classList.remove('bg-primary','text-white');\n    E.btnTabCadastro?.classList.add('border','border-gray-300','text-gray-700');\n  });\n\n  // Serviço search + choose\n  let searchTimer = null;\n  E.servInput?.addEventListener('input', () => {\n    const q = E.servInput.value.trim();\n    E.servId.value = '';\n    E.servInput.__selectedService = null;\n    if (searchTimer) clearTimeout(searchTimer);\n    if (!q) { clearSugList(); return; }\n    searchTimer = setTimeout(async () => {\n      const list = await searchServices(q);\n      renderServiceSug(list);\n    }, 200);\n  });\n  E.servSug?.addEventListener('click', (ev) => {\n    const li = ev.target?.closest('li');\n    if (!li || !li.__item) return;\n    const it = li.__item;\n    E.servInput.value = it.nome;\n    E.servId.value = it._id;\n    E.servInput.__selectedService = it;\n    setPorteOptionsFromService(it);\n    clearSugList();\n    refreshGrid();\n  });\n\n  // Filters\n  E.tipo?.addEventListener('change', () => {\n    const t = E.tipo?.value;\n    if (t === 'todos') {\n      if (E.porte) { E.porte.value = 'Todos'; E.porte.disabled = true; }\n      if (E.saveBtn) E.saveBtn.disabled = true;\n    } else {\n      if (E.porte) { E.porte.disabled = false; }\n      if (E.saveBtn) E.saveBtn.disabled = false;\n    }\n    refreshGrid();\n  });\n  E.porte?.addEventListener('change', refreshGrid);\n  E.store?.addEventListener('change', refreshGrid);\n\n  // Replicate\n  const applyToAll = (idx, value) => {\n    const v = String(value || '').trim();\n    if (v === '') return;\n    E.gridBody.querySelectorAll('tr').forEach(tr => {\n      const inp = tr.querySelectorAll('input')[idx];\n      if (inp) inp.value = v;\n    });\n  };\n  E.replCustoBtn?.addEventListener('click', () => applyToAll(0, E.replCusto?.value));\n  E.replValorBtn?.addEventListener('click', () => applyToAll(1, E.replValor?.value));\n\n  // Save\n  E.saveBtn?.addEventListener('click', async () => {\n    const serviceId = E.servId?.value;\n    const storeId = E.store?.value;\n    const tipo = E.tipo?.value;\n    if (!serviceId || !storeId || !tipo) { alert('Selecione serviço, tipo e empresa.'); return; } if (tipo === 'todos') { alert('Selecione um Tipo específico para salvar preços.'); return; }\n    try {\n      const items = getGridItems();\n      await savePrices(serviceId, storeId, tipo, items);\n      alert('Preços salvos com sucesso.');\n      await refreshGrid();\n    } catch (e) {\n      console.error(e); alert(e?.message || 'Erro ao salvar preços');\n    }\n  });\n}\n\nexport async function initPrecosTab() {\n  if (!E.tabPrecos) return;\n  await loadSpeciesMap();\n  populateTiposSelect();\n  // Default: 'Todos' selecionado e porte bloqueado\n  try { if (E.tipo) E.tipo.value = 'todos'; } catch {}\n  try { if (E.porte) { E.porte.disabled = true; E.porte.innerHTML = '<option>Todos</option>'; } } catch {}\n  try { if (E.saveBtn) E.saveBtn.disabled = true; } catch {}\n  await loadStores();\n  bindEvents();\n}\n\n"
        }
    ]
}