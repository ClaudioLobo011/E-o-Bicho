{
    "sourceFile": "scripts/admin/admin-promocoes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1756588376113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756591995559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,11 @@\n         promoList.addEventListener('click', async (e) => {\r\n             if (e.target.closest('.remove-promo-btn')) {\r\n                 const productId = e.target.closest('.remove-promo-btn').dataset.id;\r\n                 try {\r\n-                    await fetch(`${API_CONFIG.BASE_URL}/promocoes/produtos/${productId}`, { method: 'DELETE' });\r\n+                    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+                    const token = loggedInUser?.token;\r\n+                    await fetch(`${API_CONFIG.BASE_URL}/promocoes/produtos/${productId}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${token}` } });\r\n                     promoProducts = promoProducts.filter(p => p._id !== productId);\r\n                     updatePromoLists();\r\n                 } catch (error) { showModal({ title: 'Erro de Rede', message: 'Não foi possível remover a promoção.', confirmText: 'OK'}); }\r\n             }\r\n@@ -193,10 +195,15 @@\n             group: 'shared-promo', animation: 150,\r\n             onAdd: async (evt) => {\r\n                 const productId = evt.item.dataset.id;\r\n                 try {\r\n+                    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+                    const token = loggedInUser?.token;\r\n                     await fetch(`${API_CONFIG.BASE_URL}/promocoes/produtos/${productId}`, {\r\n-                        method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ porcentagem: 0 })\r\n+                        method: 'POST', headers: { \r\n+                            'Content-Type': 'application/json',\r\n+                            'Authorization': `Bearer ${token}`\r\n+                        }, body: JSON.stringify({ porcentagem: 0 })\r\n                     });\r\n                     const response = await fetch(`${API_CONFIG.BASE_URL}/promocoes/produtos`);\r\n                     promoProducts = await response.json();\r\n                     updatePromoLists();\r\n@@ -373,10 +380,15 @@\n             quantidadeMinima: document.getElementById('quantidade-minima-input').value,\r\n             descontoPorcentagem: document.getElementById('desconto-porcentagem-input').value\r\n         };\r\n         try {\r\n+            const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+            const token = loggedInUser?.token;\r\n             await fetch(`${API_CONFIG.BASE_URL}/promocoes/condicional/${productId}`, {\r\n-                method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body)\r\n+                method: 'POST', headers: { \r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }, body: JSON.stringify(body)\r\n             });\r\n             condModal.classList.add('hidden');\r\n             initializeCondicionalTab();\r\n         } catch(error) { showModal({ title: 'Erro', message: 'Falha ao salvar a promoção.', confirmText: 'OK'}); }\r\n@@ -398,9 +410,11 @@\n                     message: `Tem a certeza de que deseja remover esta promoção condicional?`,\r\n                     confirmText: 'Sim, remover', cancelText: 'Cancelar',\r\n                     onConfirm: async () => {\r\n                         try {\r\n-                            await fetch(`${API_CONFIG.BASE_URL}/promocoes/condicional/${removeBtn.dataset.id}`, { method: 'DELETE' });\r\n+                            const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+                            const token = loggedInUser?.token;\r\n+                            await fetch(`${API_CONFIG.BASE_URL}/promocoes/condicional/${removeBtn.dataset.id}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${token}` } });\r\n                             initializeCondicionalTab();\r\n                         } catch (error) { showModal({ title: 'Erro', message: 'Falha ao remover a promoção.', confirmText: 'OK'}); }\r\n                     }\r\n                 });\r\n@@ -460,10 +474,15 @@\n     bannerUploadForm.addEventListener('submit', async (e) => {\r\n         e.preventDefault();\r\n         const formData = new FormData(bannerUploadForm);\r\n         try {\r\n+            const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+            const token = loggedInUser?.token;\r\n             await fetch(`${API_CONFIG.BASE_URL}/banners`, {\r\n                 method: 'POST',\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n                 body: formData\r\n             });\r\n             bannerUploadForm.reset();\r\n             loadBanners();\r\n@@ -474,9 +493,11 @@\n \r\n     bannerList.addEventListener('click', async (e) => {\r\n         if (e.target.closest('.remove-banner-btn')) {\r\n             const bannerId = e.target.closest('.remove-banner-btn').dataset.id;\r\n-            await fetch(`${API_CONFIG.BASE_URL}/banners/${bannerId}`, { method: 'DELETE' });\r\n+            const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+            const token = loggedInUser?.token;\r\n+            await fetch(`${API_CONFIG.BASE_URL}/banners/${bannerId}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${token}` } });\r\n             loadBanners();\r\n         }\r\n     });\r\n \r\n@@ -484,11 +505,16 @@\n         animation: 150,\r\n         handle: '.fa-grip-vertical',\r\n         onEnd: async (evt) => {\r\n             const orderedIds = Array.from(evt.target.children).map(li => li.dataset.id);\r\n+            const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+            const token = loggedInUser?.token;\r\n             await fetch(`${API_CONFIG.BASE_URL}/banners/order`, {\r\n                 method: 'PUT',\r\n-                headers: { 'Content-Type': 'application/json' },\r\n+                headers: { \r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n                 body: JSON.stringify({ orderedIds })\r\n             });\r\n         }\r\n     });\r\n"
                }
            ],
            "date": 1756588376113,
            "name": "Commit-0",
            "content": "document.addEventListener('DOMContentLoaded', () => {\r\n    // =================================================\r\n    // =========== LÓGICA GERAL DAS ABAS ===============\r\n    // =================================================\r\n    const tabClub = document.getElementById('tab-clubeobicho');\r\n    const tabProducts = document.getElementById('tab-produtos');\r\n    const tabConditional = document.getElementById('tab-condicional');\r\n    const tabBanners = document.getElementById('tab-banners');\r\n    const contentClub = document.getElementById('tab-clubeobicho-content');\r\n    const contentProducts = document.getElementById('tab-produtos-content');\r\n    const contentConditional = document.getElementById('tab-condicional-content');\r\n    const contentBanners = document.getElementById('tab-banners-content');\r\n    const tabs = [\r\n        { tab: tabClub, content: contentClub },\r\n        { tab: tabProducts, content: contentProducts },\r\n        { tab: tabConditional, content: contentConditional },\r\n        { tab: tabBanners, content: contentBanners }\r\n    ];\r\n\r\n    function showTab(tabToShow) {\r\n        tabs.forEach(({ tab, content }) => {\r\n            if (!tab || !content) return;\r\n            const isTarget = tab === tabToShow;\r\n            content.classList.toggle('hidden', !isTarget);\r\n            tab.classList.toggle('border-primary', isTarget);\r\n            tab.classList.toggle('text-primary', isTarget);\r\n            tab.classList.toggle('border-transparent', !isTarget);\r\n            tab.classList.toggle('text-gray-500', !isTarget);\r\n        });\r\n    }\r\n\r\n    tabs.forEach(({ tab }) => {\r\n        if (tab) {\r\n            tab.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                showTab(tab);\r\n            });\r\n        }\r\n    });\r\n\r\n    // ==================================================\r\n    // ========= LÓGICA ABA CLUBEOBICHO =================\r\n    // ==================================================\r\n    const clubDiscountInput = document.getElementById('desconto-clube-input');\r\n    const clubSaveButton = document.getElementById('salvar-desconto-clube-btn');\r\n\r\n    async function loadClubDiscount() {\r\n        if (!clubDiscountInput) return;\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.BASE_URL}/promocoes/clube/desconto-global`);\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                clubDiscountInput.value = data.percentage;\r\n            }\r\n        } catch (error) {\r\n            console.error('Erro ao carregar o desconto do clube:', error);\r\n        }\r\n    }\r\n\r\n    if (clubSaveButton) {\r\n        clubSaveButton.addEventListener('click', () => {\r\n            const percentageValue = parseFloat(clubDiscountInput.value);\r\n            if (isNaN(percentageValue) || percentageValue < 0 || percentageValue > 100) {\r\n                showModal({ title: 'Valor Inválido', message: 'Por favor, insira um número entre 0 e 100.', confirmText: 'OK' });\r\n                return;\r\n            }\r\n            showModal({\r\n                title: 'Confirmar Alteração',\r\n                message: `Tem a certeza de que deseja aplicar um desconto de ${percentageValue}% a TODOS os produtos?`,\r\n                confirmText: 'Sim, aplicar',\r\n                cancelText: 'Cancelar',\r\n                onConfirm: async () => {\r\n                    clubSaveButton.disabled = true;\r\n                    clubSaveButton.textContent = 'A aplicar...';\r\n                    try {\r\n                        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                        const token = loggedInUser?.token;\r\n\r\n                        const response = await fetch(`${API_CONFIG.BASE_URL}/promocoes/clube/desconto-global`, {\r\n                            method: 'POST',\r\n                            headers: { \r\n                                'Content-Type': 'application/json',\r\n                                'Authorization': `Bearer ${token}`   // <-- obrigatório\r\n                            },\r\n                            body: JSON.stringify({ percentage: percentageValue })\r\n                        });\r\n                        const result = await response.json();\r\n                        if (!response.ok) throw new Error(result.message);\r\n                        showModal({ title: 'Sucesso!', message: result.message, confirmText: 'OK' });\r\n                    } catch (error) {\r\n                        showModal({ title: 'Erro', message: error.message, confirmText: 'Tentar Novamente' });\r\n                    } finally {\r\n                        clubSaveButton.disabled = false;\r\n                        clubSaveButton.textContent = 'Aplicar';\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // ==================================================\r\n    // ========= LÓGICA ABA PROMOÇÕES DE PRODUTOS =======\r\n    // ==================================================\r\n    const promoAvailableList = document.getElementById('available-products-list-promo');\r\n    const promoList = document.getElementById('promo-products-list');\r\n    const promoSearchInput = document.getElementById('search-available-promo');\r\n    let allProducts = []; // Será partilhado por todas as abas que precisam da lista completa\r\n    let promoProducts = [];\r\n    let debounceTimer;\r\n\r\n    const renderPromoAvailableList = () => {\r\n        const searchTerm = promoSearchInput.value.toLowerCase();\r\n        const promoIds = new Set(promoProducts.map(p => p._id));\r\n        const filtered = allProducts.filter(p => !promoIds.has(p._id) && p.nome.toLowerCase().includes(searchTerm));\r\n        promoAvailableList.innerHTML = '';\r\n        filtered.forEach(p => {\r\n            const li = document.createElement('li');\r\n            li.className = 'p-2 border rounded-md bg-white cursor-grab';\r\n            li.dataset.id = p._id;\r\n            li.textContent = p.nome;\r\n            promoAvailableList.appendChild(li);\r\n        });\r\n    };\r\n    const renderPromoList = () => {\r\n        promoList.innerHTML = '';\r\n        promoProducts.forEach(p => {\r\n            const li = document.createElement('li');\r\n            li.className = 'p-2 border rounded-md bg-green-50 flex items-center justify-between';\r\n            li.dataset.id = p._id;\r\n            li.innerHTML = `\r\n                <span class=\"font-semibold text-sm\">${p.nome}</span>\r\n                <div class=\"flex items-center space-x-2\">\r\n                    <input type=\"number\" value=\"${p.promocao ? p.promocao.porcentagem : 0}\" min=\"0\" max=\"100\" class=\"w-20 text-center border-gray-300 rounded-md shadow-sm promo-discount-input\" data-id=\"${p._id}\">\r\n                    <span class=\"text-sm font-bold\">%</span>\r\n                    <button class=\"remove-promo-btn text-red-500 hover:text-red-700\" data-id=\"${p._id}\">&times;</button>\r\n                </div>\r\n            `;\r\n            promoList.appendChild(li);\r\n        });\r\n    };\r\n    const updatePromoLists = () => {\r\n        renderPromoAvailableList();\r\n        renderPromoList();\r\n    };\r\n    const initializePromoTab = async () => {\r\n        if (!promoAvailableList) return;\r\n        try {\r\n            const [allProductsRes, promoProductsRes] = await Promise.all([\r\n                fetch(`${API_CONFIG.BASE_URL}/products?limit=5000`),\r\n                fetch(`${API_CONFIG.BASE_URL}/promocoes/produtos`)\r\n            ]);\r\n            allProducts = (await allProductsRes.json()).products;\r\n            promoProducts = await promoProductsRes.json();\r\n            updatePromoLists();\r\n        } catch (error) {\r\n            console.error('Erro ao inicializar aba de promoções:', error);\r\n        }\r\n    };\r\n    if (promoSearchInput) promoSearchInput.addEventListener('input', renderPromoAvailableList);\r\n    if (promoList) {\r\n        promoList.addEventListener('change', (e) => {\r\n            if (e.target.classList.contains('promo-discount-input')) {\r\n                clearTimeout(debounceTimer);\r\n                debounceTimer = setTimeout(async () => {\r\n                    const productId = e.target.dataset.id;\r\n                    const percentage = parseFloat(e.target.value) || 0;\r\n                    try {\r\n                        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                        const token = loggedInUser?.token;\r\n                        await fetch(`${API_CONFIG.BASE_URL}/promocoes/produtos/${productId}`, {\r\n                            method: 'POST',\r\n                            headers: { \r\n                                'Content-Type': 'application/json',\r\n                                'Authorization': `Bearer ${token}`\r\n                            },\r\n                            body: JSON.stringify({ porcentagem: percentage })\r\n                        });\r\n                    } catch (error) { showModal({ title: 'Erro de Rede', message: 'Não foi possível salvar o desconto.', confirmText: 'OK'}); }\r\n                }, 500);\r\n            }\r\n        });\r\n        promoList.addEventListener('click', async (e) => {\r\n            if (e.target.closest('.remove-promo-btn')) {\r\n                const productId = e.target.closest('.remove-promo-btn').dataset.id;\r\n                try {\r\n                    await fetch(`${API_CONFIG.BASE_URL}/promocoes/produtos/${productId}`, { method: 'DELETE' });\r\n                    promoProducts = promoProducts.filter(p => p._id !== productId);\r\n                    updatePromoLists();\r\n                } catch (error) { showModal({ title: 'Erro de Rede', message: 'Não foi possível remover a promoção.', confirmText: 'OK'}); }\r\n            }\r\n        });\r\n        new Sortable(promoList, {\r\n            group: 'shared-promo', animation: 150,\r\n            onAdd: async (evt) => {\r\n                const productId = evt.item.dataset.id;\r\n                try {\r\n                    await fetch(`${API_CONFIG.BASE_URL}/promocoes/produtos/${productId}`, {\r\n                        method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ porcentagem: 0 })\r\n                    });\r\n                    const response = await fetch(`${API_CONFIG.BASE_URL}/promocoes/produtos`);\r\n                    promoProducts = await response.json();\r\n                    updatePromoLists();\r\n                } catch (error) {\r\n                    showModal({ title: 'Erro de Rede', message: 'Não foi possível adicionar o produto à promoção.', confirmText: 'OK'});\r\n                    initializePromoTab(); \r\n                }\r\n            }\r\n        });\r\n        new Sortable(promoAvailableList, { group: 'shared-promo', animation: 150 });\r\n    }\r\n\r\n    // ==================================================\r\n    // ====== LÓGICA ABA PROMOÇÃO CONDICIONAL ===========\r\n    // ==================================================\r\n    const condAvailableList = document.getElementById('available-products-list-condicional');\r\n    const condPromoList = document.getElementById('condicional-promo-list');\r\n    const condSearchInput = document.getElementById('search-available-condicional');\r\n    const condModal = document.getElementById('conditional-promo-modal');\r\n    const condModalProductName = document.getElementById('conditional-modal-product-name');\r\n    const condModalProductId = document.getElementById('conditional-modal-product-id');\r\n    const condModalSaveBtn = document.getElementById('save-conditional-modal-btn');\r\n    const condModalCancelBtn = document.getElementById('cancel-conditional-modal-btn');\r\n    const radioLevePague = document.querySelector('input[name=\"promo_type\"][value=\"leve_pague\"]');\r\n    const radioAcimaDe = document.querySelector('input[name=\"promo_type\"][value=\"acima_de\"]');\r\n    const fieldsLevePague = document.getElementById('fields-leve-pague');\r\n    const fieldsAcimaDe = document.getElementById('fields-acima-de');\r\n\r\n    const originalPriceInput = document.getElementById('acima-de-original-price');\r\n    const finalPriceInput = document.getElementById('acima-de-valor-final');\r\n    const percentageInput = document.getElementById('desconto-porcentagem-input');\r\n    const quantityInput = document.getElementById('quantidade-minima-input');\r\n\r\n    let currentProductPrice = 0;\r\n    let condPromoProducts = [];\r\n\r\n    // --- Funções de Cálculo ---\r\n    function updatePercentage() {\r\n        const finalPrice = parseFloat(finalPriceInput.value);\r\n        if (isNaN(finalPrice) || currentProductPrice <= 0) return;\r\n        \r\n        const discount = 100 - (finalPrice / currentProductPrice) * 100;\r\n        percentageInput.value = discount > 0 ? discount.toFixed(2) : 0;\r\n    }\r\n\r\n    function updateFinalPrice() {\r\n        const percentage = parseFloat(percentageInput.value);\r\n        if (isNaN(percentage) || currentProductPrice <= 0) return;\r\n\r\n        const discountMultiplier = 1 - (percentage / 100);\r\n        finalPriceInput.value = (currentProductPrice * discountMultiplier).toFixed(2);\r\n    }\r\n\r\n    const renderCondPromoList = () => {\r\n        condPromoList.innerHTML = '';\r\n        condPromoProducts.forEach(p => {\r\n            const promo = p.promocaoCondicional;\r\n            let promoText = 'Não definida';\r\n            if (promo.tipo === 'leve_pague') {\r\n                promoText = `Leve ${promo.leve || '?'}, Pague ${promo.pague || '?'}`;\r\n            } else if (promo.tipo === 'acima_de') {\r\n                promoText = `Acima de ${promo.quantidadeMinima || '?'} un., ${promo.descontoPorcentagem || '?'}% OFF`;\r\n            }\r\n            const li = document.createElement('li');\r\n            li.className = 'p-2 border rounded-md bg-blue-50 flex items-center justify-between';\r\n            li.dataset.id = p._id;\r\n            li.innerHTML = `\r\n                <div>\r\n                    <span class=\"font-semibold text-sm\">${p.nome}</span>\r\n                    <span class=\"block text-xs text-blue-700\">${promoText}</span>\r\n                </div>\r\n                <div>\r\n                    <button class=\"edit-cond-promo-btn text-blue-600 hover:text-blue-800 mr-2\" data-id=\"${p._id}\">Editar</button>\r\n                    <button class=\"remove-cond-promo-btn text-red-500 hover:text-red-700\" data-id=\"${p._id}\">&times;</button>\r\n                </div>\r\n            `;\r\n            condPromoList.appendChild(li);\r\n        });\r\n    };\r\n    const updateCondLists = () => {\r\n        if (!condSearchInput) return; // Garante que o código não quebra se o elemento não existir\r\n        const searchTerm = condSearchInput.value.toLowerCase();\r\n        const promoIds = new Set(condPromoProducts.map(p => p._id));\r\n        \r\n        const filtered = allProducts.filter(p => {\r\n            const isNotOnPromo = !promoIds.has(p._id);\r\n            const matchesSearch = p.nome.toLowerCase().includes(searchTerm);\r\n            return isNotOnPromo && matchesSearch;\r\n        });\r\n        \r\n        condAvailableList.innerHTML = '';\r\n\r\n        if (filtered.length === 0 && searchTerm) {\r\n            condAvailableList.innerHTML = '<li class=\"p-2 border rounded-md text-center text-gray-500\">Nenhum produto encontrado.</li>';\r\n        } else {\r\n            filtered.forEach(p => {\r\n                const li = document.createElement('li');\r\n                li.className = 'p-2 border rounded-md bg-white cursor-grab';\r\n                li.dataset.id = p._id;\r\n                li.textContent = p.nome;\r\n                condAvailableList.appendChild(li);\r\n            });\r\n        }\r\n        renderCondPromoList();\r\n    };\r\n    const openConditionalModal = (product) => {\r\n        condModalProductId.value = product._id;\r\n        condModalProductName.textContent = product.nome;\r\n        currentProductPrice = product.venda; // Guarda o preço original\r\n\r\n        const promo = product.promocaoCondicional || {};\r\n        \r\n        // Preenche o formulário\r\n        radioLevePague.checked = promo.tipo !== 'acima_de';\r\n        radioAcimaDe.checked = promo.tipo === 'acima_de';\r\n        fieldsLevePague.classList.toggle('hidden', promo.tipo === 'acima_de');\r\n        fieldsAcimaDe.classList.toggle('hidden', promo.tipo !== 'acima_de');\r\n        \r\n        // Campos \"Leve e Pague\"\r\n        fieldsLevePague.querySelector('#leve-input').value = promo.leve || '';\r\n        fieldsLevePague.querySelector('#pague-input').value = promo.pague || '';\r\n        \r\n        // Campos \"Acima de\"\r\n        originalPriceInput.value = `R$ ${product.venda.toFixed(2)}`;\r\n        quantityInput.value = promo.quantidadeMinima || '';\r\n        percentageInput.value = promo.descontoPorcentagem || '';\r\n        \r\n        // Calcula o valor final com base na percentagem guardada\r\n        if(promo.descontoPorcentagem > 0) {\r\n            const discountMultiplier = 1 - (promo.descontoPorcentagem / 100);\r\n            finalPriceInput.value = (product.venda * discountMultiplier).toFixed(2);\r\n        } else {\r\n            finalPriceInput.value = '';\r\n        }\r\n        \r\n        condModal.classList.remove('hidden');\r\n    };\r\n    const closeConditionalModal = () => {\r\n        condModal.classList.add('hidden');\r\n        initializeCondicionalTab();\r\n    };\r\n    const initializeCondicionalTab = async () => {\r\n        if (!condAvailableList) return;\r\n        try {\r\n            // ▼▼▼ A LINHA QUE FALTAVA: Buscar TODOS os produtos (partilhado com a outra aba) ▼▼▼\r\n            if (allProducts.length === 0) {\r\n                const allProductsRes = await fetch(`${API_CONFIG.BASE_URL}/products?limit=5000`);\r\n                allProducts = (await allProductsRes.json()).products;\r\n            }\r\n            \r\n            const res = await fetch(`${API_CONFIG.BASE_URL}/promocoes/condicional`);\r\n            condPromoProducts = await res.json();\r\n\r\n            // ▼▼▼ CHAMA A FUNÇÃO DE ATUALIZAÇÃO AQUI, DEPOIS DE TER OS DADOS ▼▼▼\r\n            updateCondLists(); \r\n\r\n        } catch (error) { console.error('Erro ao inicializar a aba condicional:', error); }\r\n    };\r\n    if (radioLevePague) radioLevePague.addEventListener('change', () => {\r\n        fieldsLevePague.classList.remove('hidden');\r\n        fieldsAcimaDe.classList.add('hidden');\r\n    });\r\n    if (radioAcimaDe) radioAcimaDe.addEventListener('change', () => {\r\n        fieldsAcimaDe.classList.remove('hidden');\r\n        fieldsLevePague.classList.add('hidden');\r\n    });\r\n    if (condModalCancelBtn) condModalCancelBtn.addEventListener('click', closeConditionalModal);\r\n    if (condModalSaveBtn) condModalSaveBtn.addEventListener('click', async () => {\r\n        const productId = condModalProductId.value;\r\n        const tipo = document.querySelector('input[name=\"promo_type\"]:checked').value;\r\n        const body = { tipo,\r\n            leve: document.getElementById('leve-input').value,\r\n            pague: document.getElementById('pague-input').value,\r\n            quantidadeMinima: document.getElementById('quantidade-minima-input').value,\r\n            descontoPorcentagem: document.getElementById('desconto-porcentagem-input').value\r\n        };\r\n        try {\r\n            await fetch(`${API_CONFIG.BASE_URL}/promocoes/condicional/${productId}`, {\r\n                method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body)\r\n            });\r\n            condModal.classList.add('hidden');\r\n            initializeCondicionalTab();\r\n        } catch(error) { showModal({ title: 'Erro', message: 'Falha ao salvar a promoção.', confirmText: 'OK'}); }\r\n    });\r\n    if (condSearchInput) condSearchInput.addEventListener('input', updateCondLists);\r\n    if (finalPriceInput) finalPriceInput.addEventListener('input', updatePercentage);\r\n    if (percentageInput) percentageInput.addEventListener('input', updateFinalPrice);\r\n    if (condPromoList) {\r\n        condPromoList.addEventListener('click', async (e) => {\r\n            const editBtn = e.target.closest('.edit-cond-promo-btn');\r\n            const removeBtn = e.target.closest('.remove-cond-promo-btn');\r\n            if (editBtn) {\r\n                const product = allProducts.find(p => p._id === editBtn.dataset.id);\r\n                if(product) openConditionalModal(product);\r\n            }\r\n            if (removeBtn) {\r\n                showModal({\r\n                    title: 'Remover Promoção',\r\n                    message: `Tem a certeza de que deseja remover esta promoção condicional?`,\r\n                    confirmText: 'Sim, remover', cancelText: 'Cancelar',\r\n                    onConfirm: async () => {\r\n                        try {\r\n                            await fetch(`${API_CONFIG.BASE_URL}/promocoes/condicional/${removeBtn.dataset.id}`, { method: 'DELETE' });\r\n                            initializeCondicionalTab();\r\n                        } catch (error) { showModal({ title: 'Erro', message: 'Falha ao remover a promoção.', confirmText: 'OK'}); }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        new Sortable(condPromoList, { // A lista da DIREITA (Produtos em Promoção)\r\n            group: 'condicional-promo',\r\n            animation: 150,\r\n            // O evento onAdd aqui é acionado quando um item NOVO chega\r\n            onAdd: (evt) => {\r\n                const product = allProducts.find(p => p._id === evt.item.dataset.id);\r\n                if(product) {\r\n                    // Abre o modal para definir a promoção\r\n                    openConditionalModal(product);\r\n                }\r\n            }\r\n        });\r\n\r\n        new Sortable(condAvailableList, { // A lista da ESQUERDA (Produtos Disponíveis)\r\n            group: 'condicional-promo',\r\n            animation: 150\r\n            // Não há evento 'onAdd' aqui, pois não queremos fazer nada \r\n            // quando um item é arrastado de volta para esta lista.\r\n        });\r\n    }\r\n\r\n    // ==================================================\r\n    // ============== LÓGICA ABA BANNERS ================\r\n    // ==================================================\r\n    const bannerUploadForm = document.getElementById('banner-upload-form');\r\n    const bannerList = document.getElementById('banner-list');\r\n\r\n    async function loadBanners() {\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.BASE_URL}/banners`);\r\n            const banners = await response.json();\r\n            bannerList.innerHTML = '';\r\n            banners.forEach(banner => {\r\n                const li = document.createElement('li');\r\n                li.className = 'flex items-center justify-between p-2 border rounded-md bg-gray-50 cursor-grab';\r\n                li.dataset.id = banner._id;\r\n                li.innerHTML = `\r\n                    <div class=\"flex items-center\">\r\n                        <i class=\"fas fa-grip-vertical mr-3 text-gray-400\"></i>\r\n                        <img src=\"${API_CONFIG.SERVER_URL}${banner.imageUrl}\" class=\"w-24 h-12 object-cover rounded-md mr-4\">\r\n                        <span class=\"text-sm font-medium\">${banner.link}</span>\r\n                    </div>\r\n                    <button class=\"remove-banner-btn text-red-500 hover:text-red-700\" data-id=\"${banner._id}\">&times;</button>\r\n                `;\r\n                bannerList.appendChild(li);\r\n            });\r\n        } catch (error) {\r\n            console.error('Erro ao carregar banners:', error);\r\n        }\r\n    }\r\n\r\n    bannerUploadForm.addEventListener('submit', async (e) => {\r\n        e.preventDefault();\r\n        const formData = new FormData(bannerUploadForm);\r\n        try {\r\n            await fetch(`${API_CONFIG.BASE_URL}/banners`, {\r\n                method: 'POST',\r\n                body: formData\r\n            });\r\n            bannerUploadForm.reset();\r\n            loadBanners();\r\n        } catch (error) {\r\n            showModal({ title: 'Erro', message: 'Falha ao enviar o banner.', confirmText: 'OK'});\r\n        }\r\n    });\r\n\r\n    bannerList.addEventListener('click', async (e) => {\r\n        if (e.target.closest('.remove-banner-btn')) {\r\n            const bannerId = e.target.closest('.remove-banner-btn').dataset.id;\r\n            await fetch(`${API_CONFIG.BASE_URL}/banners/${bannerId}`, { method: 'DELETE' });\r\n            loadBanners();\r\n        }\r\n    });\r\n\r\n    new Sortable(bannerList, {\r\n        animation: 150,\r\n        handle: '.fa-grip-vertical',\r\n        onEnd: async (evt) => {\r\n            const orderedIds = Array.from(evt.target.children).map(li => li.dataset.id);\r\n            await fetch(`${API_CONFIG.BASE_URL}/banners/order`, {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ orderedIds })\r\n            });\r\n        }\r\n    });\r\n\r\n    // --- CARGA INICIAL DE TODAS AS ABAS ---\r\n    if(document.getElementById('desconto-clube-input')) loadClubDiscount();\r\n    if(document.getElementById('available-products-list-promo')) initializePromoTab();\r\n    if(document.getElementById('available-products-list-condicional')) initializeCondicionalTab();\r\n    if(document.getElementById('banner-list')) loadBanners();\r\n});"
        }
    ]
}