{
    "sourceFile": "scripts/admin/admin-servicos-grupos.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757180543812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757180543812,
            "name": "Commit-0",
            "content": "(function () {\r\n  const API = `${API_CONFIG.BASE_URL}/admin/servicos/grupos`;\r\n\r\n  const form = document.getElementById('grupo-form');\r\n  const inputId = document.getElementById('grupo-id');\r\n  const inputNome = document.getElementById('grupo-nome');\r\n  const tiposBox = document.getElementById('grupo-tipos');\r\n  const inputComissao = document.getElementById('grupo-comissao');\r\n  const submitLabel = document.getElementById('grupo-submit-label');\r\n  const btnCancelar = document.getElementById('grupo-cancelar');\r\n\r\n  const tbody = document.getElementById('grupo-tbody');\r\n  const empty = document.getElementById('grupo-empty');\r\n\r\n  if (!form) return;\r\n\r\n  function getToken() {\r\n    try {\r\n      const cached = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n      return cached?.token || '';\r\n    } catch { return ''; }\r\n  }\r\n\r\n  function getTiposSelecionados() {\r\n    return Array\r\n      .from(tiposBox.querySelectorAll('input[type=\"checkbox\"]:checked'))\r\n      .map(cb => cb.value);\r\n  }\r\n\r\n  function setTiposSelecionados(arr) {\r\n    const set = new Set(arr || []);\r\n    tiposBox.querySelectorAll('input[type=\"checkbox\"]').forEach(cb => {\r\n      cb.checked = set.has(cb.value);\r\n    });\r\n  }\r\n\r\n  function validar() {\r\n    const erros = [];\r\n    const nome = (inputNome.value || '').trim();\r\n    const comissao = Number(inputComissao.value);\r\n\r\n    if (!nome) erros.push('Informe o nome do grupo.');\r\n    const tipos = getTiposSelecionados();\r\n    if (!tipos.length) erros.push('Selecione ao menos um tipo de funcionário.');\r\n    if (Number.isNaN(comissao) || comissao < 0 || comissao > 100) {\r\n      erros.push('Comissão deve estar entre 0 e 100.');\r\n    }\r\n    return { ok: erros.length === 0, erros, nome, tipos, comissao };\r\n  }\r\n\r\n  async function fetchJSON(url, opts = {}) {\r\n    const token = getToken();\r\n    const res = await fetch(url, {\r\n      ...opts,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n        ...(opts.headers || {})\r\n      }\r\n    });\r\n    if (!res.ok) {\r\n      const t = await res.text().catch(() => '');\r\n      throw new Error(t || `Erro HTTP ${res.status}`);\r\n    }\r\n    return res.json();\r\n  }\r\n\r\n  async function listar() {\r\n    const data = await fetchJSON(API);\r\n    renderLista(Array.isArray(data) ? data : (data?.items || []));\r\n  }\r\n\r\n  function renderLista(items) {\r\n    tbody.innerHTML = '';\r\n    if (!items.length) {\r\n      empty.classList.remove('hidden');\r\n      return;\r\n    }\r\n    empty.classList.add('hidden');\r\n\r\n    for (const it of items) {\r\n      const tr = document.createElement('tr');\r\n\r\n      const tiposFmt = (it.tiposPermitidos || []).map(t => {\r\n        switch (t) {\r\n          case 'esteticista': return 'Esteticista';\r\n          case 'veterinario': return 'Veterinário';\r\n          case 'vendedor': return 'Vendedor';\r\n          case 'gerente': return 'Gerente';\r\n          default: return t;\r\n        }\r\n      }).join(', ');\r\n\r\n      tr.innerHTML = `\r\n        <td class=\"px-3 py-2 font-medium text-gray-800\">${it.nome || ''}</td>\r\n        <td class=\"px-3 py-2 text-gray-700\">${tiposFmt}</td>\r\n        <td class=\"px-3 py-2 text-gray-700\">${Number(it.comissaoPercent || 0).toFixed(2)}</td>\r\n        <td class=\"px-3 py-2\">\r\n          <div class=\"flex items-center gap-2\">\r\n            <button class=\"px-2 py-1 rounded bg-gray-100 hover:bg-gray-200 text-gray-800\" data-edit=\"${it._id}\"><i class=\"fas fa-pen\"></i></button>\r\n            <button class=\"px-2 py-1 rounded bg-red-50 hover:bg-red-100 text-red-700\" data-del=\"${it._id}\"><i class=\"fas fa-trash\"></i></button>\r\n          </div>\r\n        </td>\r\n      `;\r\n      tbody.appendChild(tr);\r\n    }\r\n  }\r\n\r\n  function resetForm() {\r\n    inputId.value = '';\r\n    inputNome.value = '';\r\n    setTiposSelecionados([]);\r\n    inputComissao.value = '0';\r\n    submitLabel.textContent = 'Salvar';\r\n    btnCancelar.classList.add('hidden');\r\n  }\r\n\r\n  function fillForm(item) {\r\n    inputId.value = item._id;\r\n    inputNome.value = item.nome || '';\r\n    setTiposSelecionados(item.tiposPermitidos || []);\r\n    inputComissao.value = Number(item.comissaoPercent || 0).toString();\r\n    submitLabel.textContent = 'Atualizar';\r\n    btnCancelar.classList.remove('hidden');\r\n  }\r\n\r\n  // Eventos\r\n  form.addEventListener('submit', async (e) => {\r\n    e.preventDefault();\r\n    const v = validar();\r\n    if (!v.ok) {\r\n      alert(v.erros.join('\\n'));\r\n      return;\r\n    }\r\n    const payload = {\r\n      nome: v.nome,\r\n      tiposPermitidos: v.tipos,\r\n      comissaoPercent: v.comissao\r\n    };\r\n\r\n    try {\r\n      if (inputId.value) {\r\n        const saved = await fetchJSON(`${API}/${inputId.value}`, {\r\n          method: 'PUT',\r\n          body: JSON.stringify(payload)\r\n        });\r\n        fillForm(saved); // mantém no modo edição com valores atualizados\r\n      } else {\r\n        await fetchJSON(API, { method: 'POST', body: JSON.stringify(payload) });\r\n        resetForm();\r\n      }\r\n      await listar();\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert('Erro ao salvar grupo.\\n' + err.message);\r\n    }\r\n  });\r\n\r\n  btnCancelar?.addEventListener('click', () => resetForm());\r\n\r\n  tbody.addEventListener('click', async (e) => {\r\n    const btn = e.target.closest('button');\r\n    if (!btn) return;\r\n    const id = btn.getAttribute('data-edit') || btn.getAttribute('data-del');\r\n    if (!id) return;\r\n\r\n    if (btn.hasAttribute('data-edit')) {\r\n      try {\r\n        const item = await fetchJSON(`${API}/${id}`);\r\n        fillForm(item);\r\n        window.scrollTo({ top: 0, behavior: 'smooth' });\r\n      } catch (err) {\r\n        alert('Não foi possível carregar o grupo selecionado.');\r\n      }\r\n    } else if (btn.hasAttribute('data-del')) {\r\n      if (!confirm('Confirma remover este grupo?')) return;\r\n      try {\r\n        await fetchJSON(`${API}/${id}`, { method: 'DELETE' });\r\n        if (inputId.value === id) resetForm();\r\n        await listar();\r\n      } catch (err) {\r\n        alert('Erro ao remover grupo.\\n' + err.message);\r\n      }\r\n    }\r\n  });\r\n\r\n  // Inicialização\r\n  listar().catch(err => {\r\n    console.error(err);\r\n    alert('Erro ao carregar grupos.\\n' + err.message);\r\n  });\r\n})();"
        }
    ]
}