{
    "sourceFile": "scripts/admin/admin-nossas-lojas.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756593979877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756593979877,
            "name": "Commit-0",
            "content": "document.addEventListener('DOMContentLoaded', () => {\r\n    // --- Referências ao DOM ---\r\n    const tableBody = document.getElementById('stores-table-body');\r\n    const addStoreBtn = document.getElementById('add-store-btn');\r\n    const modal = document.getElementById('store-modal');\r\n    const form = document.getElementById('store-form');\r\n    const cancelBtn = document.getElementById('cancel-store-modal-btn');\r\n    const modalTitle = document.getElementById('store-modal-title');\r\n    const hiddenStoreId = document.getElementById('store-id');\r\n    const horarioContainer = document.getElementById('horario-inputs-container');\r\n    const openServicesModalBtn = document.getElementById('open-services-modal-btn');\r\n    const servicesModal = document.getElementById('services-modal');\r\n    const saveServicesModalBtn = document.getElementById('save-services-modal-btn');\r\n    const servicesCheckboxContainer = document.getElementById('services-checkbox-container');\r\n    const serviceTagsContainer = document.getElementById('service-tags-container');\r\n    const imagePreview = document.getElementById('image-preview');\r\n    const imageInput = document.getElementById('store-image-input');\r\n    const cepInput = document.getElementById('store-cep');\r\n    const enderecoInput = document.getElementById('store-endereco');\r\n\r\n    // -- REFERÊNCIAS PARA O MAPA DE LOCALIZAÇÃO --\r\n    let locationMap = null;\r\n    let locationMarker = null;\r\n    const latInput = document.getElementById('store-latitude');\r\n    const lonInput = document.getElementById('store-longitude');\r\n\r\n    // --- Dados e Constantes ---\r\n    const diasDaSemana = [\r\n        { key: 'domingo', label: 'Domingo' },\r\n        { key: 'segunda', label: 'Segunda-feira' },\r\n        { key: 'terca', label: 'Terça-feira' },\r\n        { key: 'quarta', label: 'Quarta-feira' },\r\n        { key: 'quinta', label: 'Quinta-feira' },\r\n        { key: 'sexta', label: 'Sexta-feira' },\r\n        { key: 'sabado', label: 'Sábado' },\r\n    ];\r\n    const availableServices = ['Banho e Tosa', 'Veterinária', 'Farmácia'];\r\n    let selectedServices = [];\r\n\r\n    // --- Funções do Modal de Serviços ---\r\n    const openServicesModal = () => {\r\n        servicesCheckboxContainer.innerHTML = '';\r\n        availableServices.forEach(service => {\r\n            const isChecked = selectedServices.includes(service) ? 'checked' : '';\r\n            const checkboxHtml = `\r\n                <label class=\"flex items-center\">\r\n                    <input type=\"checkbox\" value=\"${service}\" ${isChecked} class=\"form-checkbox h-5 w-5 text-primary rounded service-checkbox\">\r\n                    <span class=\"ml-2 text-gray-700\">${service}</span>\r\n                </label>`;\r\n            servicesCheckboxContainer.innerHTML += checkboxHtml;\r\n        });\r\n        servicesModal.classList.remove('hidden');\r\n    };\r\n    const closeServicesModal = () => servicesModal.classList.add('hidden');\r\n    const saveServicesSelection = () => {\r\n        selectedServices = Array.from(servicesCheckboxContainer.querySelectorAll('.service-checkbox:checked')).map(cb => cb.value);\r\n        renderServiceTags();\r\n        closeServicesModal();\r\n    };\r\n    const renderServiceTags = () => {\r\n        serviceTagsContainer.innerHTML = '';\r\n        selectedServices.forEach(service => {\r\n            const tagHtml = `<span class=\"bg-primary/10 text-primary text-sm font-semibold px-2.5 py-1 rounded-full\">${service}</span>`;\r\n            serviceTagsContainer.innerHTML += tagHtml;\r\n        });\r\n    };\r\n\r\n    // --- Pré-visualização da Imagem ---\r\n    imageInput.addEventListener('change', () => {\r\n        const file = imageInput.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                imagePreview.src = e.target.result;\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    });\r\n\r\n    // --- Criação Dinâmica dos Horários ---\r\n    const createHorarioInputs = () => {\r\n        horarioContainer.innerHTML = '';\r\n        diasDaSemana.forEach(({ key, label }) => {\r\n            const dayHtml = `\r\n                <div data-day=\"${key}\" class=\"grid grid-cols-1 sm:grid-cols-4 gap-2 items-center\">\r\n                    <label class=\"font-medium text-sm sm:col-span-1\">${label}</label>\r\n                    <div class=\"sm:col-span-2 flex items-center gap-2\">\r\n                        <input type=\"time\" name=\"abre\" class=\"time-input block w-full border-gray-300 rounded-md shadow-sm text-sm\">\r\n                        <span>às</span>\r\n                        <input type=\"time\" name=\"fecha\" class=\"time-input block w-full border-gray-300 rounded-md shadow-sm text-sm\">\r\n                    </div>\r\n                    <div class=\"sm:col-span-1 flex items-center justify-end sm:justify-start\">\r\n                        <input type=\"checkbox\" name=\"fechada\" class=\"fechada-checkbox h-4 w-4 text-primary rounded\">\r\n                        <label class=\"ml-2 text-sm\">Fechada</label>\r\n                    </div>\r\n                </div>`;\r\n            horarioContainer.innerHTML += dayHtml;\r\n        });\r\n    };\r\n    \r\n    // --- FUNÇÃO DE GEOCODIFICAÇÃO ROBUSTA ---\r\n    async function geocodeAddress(address, cep) {\r\n        const fullAddress = `${address || ''}, ${cep || ''}`;\r\n        if (fullAddress.trim() === ',') return null;\r\n\r\n        const queryString = encodeURIComponent(fullAddress);\r\n        const url = `https://nominatim.openstreetmap.org/search?q=${queryString}&countrycodes=br&format=json&limit=1`;\r\n        console.log(`Buscando coordenadas para o endereço completo: \"${fullAddress}\"`);\r\n\r\n        try {\r\n            const response = await fetch(url);\r\n            if (!response.ok) throw new Error('Falha na rede.');\r\n            const data = await response.json();\r\n\r\n            if (data && data.length > 0) {\r\n                const lat = parseFloat(data[0].lat);\r\n                const lng = parseFloat(data[0].lon);\r\n                return { lat, lng };\r\n            } else {\r\n                console.warn(`Nenhuma coordenada encontrada para o endereço: \"${fullAddress}\"`);\r\n                return null;\r\n            }\r\n        } catch (error) {\r\n            console.error('Erro na geocodificação:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // --- FUNÇÃO PARA INICIAR O MAPA NO MODAL ---\r\n    const initializeLocationPicker = () => {\r\n        if (locationMap || !document.getElementById('location-picker-map')) return;\r\n\r\n        locationMap = L.map('location-picker-map').setView([-22.9068, -43.1729], 12);\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(locationMap);\r\n\r\n        locationMap.on('click', (e) => {\r\n            const coords = e.latlng;\r\n            latInput.value = coords.lat;\r\n            lonInput.value = coords.lng;\r\n\r\n            if (!locationMarker) {\r\n                locationMarker = L.marker(coords).addTo(locationMap);\r\n            } else {\r\n                locationMarker.setLatLng(coords);\r\n            }\r\n        });\r\n    };\r\n\r\n    // --- Funções do Modal Principal (Adicionar/Editar Loja) ---\r\n    const openModalForNew = () => {\r\n        modalTitle.textContent = 'Adicionar Nova Loja';\r\n        hiddenStoreId.value = '';\r\n        form.reset();\r\n        selectedServices = [];\r\n        renderServiceTags();\r\n        diasDaSemana.forEach(({ key }) => {\r\n            const dayRow = horarioContainer.querySelector(`[data-day=\"${key}\"]`);\r\n            const inputs = dayRow.querySelectorAll('.time-input');\r\n            const checkbox = dayRow.querySelector('.fechada-checkbox');\r\n            inputs.forEach(input => input.disabled = false);\r\n            checkbox.checked = false;\r\n        });\r\n        imagePreview.src = '/public/image/placeholder.png';\r\n        imageInput.value = '';\r\n        modal.classList.remove('hidden');\r\n\r\n        setTimeout(() => {\r\n            if (locationMap) {\r\n                locationMap.invalidateSize();\r\n                locationMap.setView([-22.9068, -43.1729], 12);\r\n                if (locationMarker) {\r\n                    locationMarker.remove();\r\n                    locationMarker = null;\r\n                }\r\n                latInput.value = '';\r\n                lonInput.value = '';\r\n            }\r\n        }, 100);\r\n    };\r\n\r\n    const openModalForEdit = async (storeId) => {\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.BASE_URL}/stores/${storeId}`);\r\n            if (!response.ok) throw new Error('Falha ao carregar dados da loja.');\r\n            const store = await response.json();\r\n            \r\n            modalTitle.textContent = 'Editar Loja';\r\n            hiddenStoreId.value = store._id;\r\n            document.getElementById('store-nome').value = store.nome;\r\n            enderecoInput.value = store.endereco;\r\n            cepInput.value = store.cep;\r\n            document.getElementById('store-telefone').value = store.telefone;\r\n            document.getElementById('store-whatsapp').value = store.whatsapp;\r\n            selectedServices = store.servicos || [];\r\n            renderServiceTags();\r\n\r\n            diasDaSemana.forEach(({ key }) => {\r\n                const horarioDia = store.horario ? store.horario[key] : null;\r\n                const dayRow = horarioContainer.querySelector(`[data-day=\"${key}\"]`);\r\n                const abreInput = dayRow.querySelector('input[name=\"abre\"]');\r\n                const fechaInput = dayRow.querySelector('input[name=\"fecha\"]');\r\n                const fechadaCheckbox = dayRow.querySelector('input[name=\"fechada\"]');\r\n                if (horarioDia) {\r\n                    abreInput.value = horarioDia.abre || '';\r\n                    fechaInput.value = horarioDia.fecha || '';\r\n                    fechadaCheckbox.checked = horarioDia.fechada;\r\n                    abreInput.disabled = horarioDia.fechada;\r\n                    fechaInput.disabled = horarioDia.fechada;\r\n                }\r\n            });\r\n            imagePreview.src = `${API_CONFIG.SERVER_URL}${store.imagem}`;\r\n            imageInput.value = '';\r\n            modal.classList.remove('hidden');\r\n\r\n            setTimeout(async () => {\r\n                if (locationMap) {\r\n                    locationMap.invalidateSize();\r\n                    if (locationMarker) locationMarker.remove();\r\n\r\n                    let initialCoords = null;\r\n                    let initialZoom = 12;\r\n\r\n                    // 1. Prioriza as coordenadas exatas já salvas.\r\n                    if (store.latitude && store.longitude) {\r\n                        initialCoords = { lat: store.latitude, lng: store.longitude };\r\n                        initialZoom = 17;\r\n                    // 2. Se não existirem, tenta buscar pelo endereço completo como fallback.\r\n                    } else {\r\n                        const foundCoords = await geocodeAddress(store.endereco, store.cep);\r\n                        if (foundCoords) {\r\n                            initialCoords = foundCoords;\r\n                            initialZoom = 17;\r\n                        }\r\n                    }\r\n\r\n                    // 3. Se tudo falhar, usa a localização padrão.\r\n                    if (!initialCoords) {\r\n                        initialCoords = { lat: -22.9068, lng: -43.1729 };\r\n                    }\r\n\r\n                    locationMap.setView([initialCoords.lat, initialCoords.lng], initialZoom);\r\n\r\n                    // Se a loja já tiver coordenadas salvas, coloca o marcador e os valores nos inputs.\r\n                    if (store.latitude && store.longitude) {\r\n                        locationMarker = L.marker(initialCoords).addTo(locationMap);\r\n                        latInput.value = store.latitude;\r\n                        lonInput.value = store.longitude;\r\n                    } else {\r\n                        locationMarker = null;\r\n                        latInput.value = '';\r\n                        lonInput.value = '';\r\n                    }\r\n                }\r\n            }, 100);\r\n        } catch (error) {\r\n            showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n        }\r\n    };\r\n\r\n    const closeModal = () => modal.classList.add('hidden');\r\n\r\n    // --- Renderização da Tabela ---\r\n    async function fetchAndDisplayStores() {\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n            const stores = await response.json();\r\n            \r\n            tableBody.innerHTML = '';\r\n            stores.forEach(store => {\r\n                const rowHtml = `\r\n                    <tr class=\"bg-white border-b hover:bg-gray-50\">\r\n                        <td class=\"px-6 py-4 font-medium text-gray-900\">${store.nome}</td>\r\n                        <td class=\"px-6 py-4\">${store.endereco}</td>\r\n                        <td class=\"px-6 py-4 text-center\">\r\n                            <button data-action=\"edit\" data-id=\"${store._id}\" class=\"font-medium text-blue-600 hover:underline mr-3\">Editar</button>\r\n                            <button data-action=\"delete\" data-id=\"${store._id}\" class=\"font-medium text-red-600 hover:underline\">Apagar</button>\r\n                        </td>\r\n                    </tr>\r\n                `;\r\n                tableBody.innerHTML += rowHtml;\r\n            });\r\n        } catch (error) {\r\n            tableBody.innerHTML = `<tr><td colspan=\"3\" class=\"text-center py-10 text-red-500\">Não foi possível carregar as lojas.</td></tr>`;\r\n        }\r\n    }\r\n\r\n    // --- Event Listeners ---\r\n    addStoreBtn.addEventListener('click', openModalForNew);\r\n    cancelBtn.addEventListener('click', closeModal);\r\n    openServicesModalBtn.addEventListener('click', openServicesModal);\r\n    saveServicesModalBtn.addEventListener('click', saveServicesSelection);\r\n\r\n    horarioContainer.addEventListener('change', (event) => {\r\n        if (event.target.classList.contains('fechada-checkbox')) {\r\n            const dayRow = event.target.closest('[data-day]');\r\n            const inputs = dayRow.querySelectorAll('.time-input');\r\n            inputs.forEach(input => {\r\n                input.disabled = event.target.checked;\r\n                if (event.target.checked) {\r\n                    input.value = '';\r\n                }\r\n            });\r\n        }\r\n    });\r\n    \r\n    cepInput.addEventListener('blur', async () => {\r\n        const cepValue = cepInput.value;\r\n        const enderecoValue = enderecoInput.value;\r\n        if (cepValue.replace(/\\D/g, '').length === 8) {\r\n            const coords = await geocodeAddress(enderecoValue, cepValue);\r\n            if (coords && locationMap) {\r\n                locationMap.setView([coords.lat, coords.lng], 17);\r\n                showModal({ \r\n                    title: 'Localização Encontrada', \r\n                    message: 'O mapa foi centralizado na morada informada. Agora, clique no local exato da loja para ajustar.', \r\n                    confirmText: 'Entendi' \r\n                });\r\n            } else {\r\n                showModal({\r\n                    title: 'Endereço não encontrado',\r\n                    message: 'Não foi possível encontrar este endereço. Verifique os dados ou aponte a localização manualmente no mapa.',\r\n                    confirmText: 'OK'\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    tableBody.addEventListener('click', (event) => {\r\n        const target = event.target;\r\n        const action = target.dataset.action;\r\n        const id = target.dataset.id;\r\n        if (!action || !id) return;\r\n\r\n        if (action === 'edit') {\r\n            openModalForEdit(id);\r\n        } else if (action === 'delete') {\r\n            showModal({\r\n                title: 'Confirmar Exclusão',\r\n                message: 'Tem a certeza de que deseja apagar esta loja? Esta ação não pode ser desfeita.',\r\n                confirmText: 'Sim, apagar',\r\n                cancelText: 'Cancelar',\r\n                onConfirm: async () => {\r\n                    try {\r\n                        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                        const token = loggedInUser?.token;\r\n\r\n                        await fetch(`${API_CONFIG.BASE_URL}/stores/${id}`, {\r\n                            method: 'DELETE',\r\n                            headers: {\r\n                                'Authorization': `Bearer ${token}`\r\n                            }\r\n                        });\r\n                        fetchAndDisplayStores();\r\n                    } catch (error) {\r\n                        showModal({ title: 'Erro', message: 'Não foi possível apagar a loja.', confirmText: 'OK'});\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    form.addEventListener('submit', async (event) => {\r\n        event.preventDefault();\r\n        const storeId = hiddenStoreId.value;\r\n        const submitButton = document.getElementById('save-store-modal-btn');\r\n        submitButton.disabled = true;\r\n\r\n        const storeData = {\r\n            nome: document.getElementById('store-nome').value,\r\n            endereco: enderecoInput.value,\r\n            cep: cepInput.value,\r\n            latitude: parseFloat(latInput.value) || null,\r\n            longitude: parseFloat(lonInput.value) || null,\r\n            telefone: document.getElementById('store-telefone').value,\r\n            whatsapp: document.getElementById('store-whatsapp').value,\r\n            servicos: selectedServices,\r\n            horario: {}\r\n        };\r\n        \r\n        diasDaSemana.forEach(({ key }) => {\r\n            const dayRow = horarioContainer.querySelector(`[data-day=\"${key}\"]`);\r\n            storeData.horario[key] = {\r\n                abre: dayRow.querySelector('input[name=\"abre\"]').value,\r\n                fecha: dayRow.querySelector('input[name=\"fecha\"]').value,\r\n                fechada: dayRow.querySelector('input[name=\"fechada\"]').checked\r\n            };\r\n        });\r\n\r\n        const method = storeId ? 'PUT' : 'POST';\r\n        const url = storeId ? `${API_CONFIG.BASE_URL}/stores/${storeId}` : `${API_CONFIG.BASE_URL}/stores`;\r\n\r\n        try {\r\n            const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n            const token = loggedInUser?.token;\r\n            const response = await fetch(url, { method, headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify(storeData) });\r\n            const savedStore = await response.json();\r\n            if (!response.ok) throw new Error('Falha ao salvar os dados da loja.');\r\n\r\n            if (imageInput.files[0]) {\r\n                const formData = new FormData();\r\n                formData.append('imagem', imageInput.files[0]);\r\n                const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                const token = loggedInUser?.token;\r\n                await fetch(`${API_CONFIG.BASE_URL}/stores/${savedStore._id}/upload`, {\r\n                    method: 'POST',\r\n                    body: formData,\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                });\r\n            }\r\n\r\n            closeModal();\r\n            fetchAndDisplayStores();\r\n            showModal({ title: 'Sucesso!', message: `Loja ${storeId ? 'atualizada' : 'adicionada'} com sucesso.`, confirmText: 'OK' });\r\n        } catch (error) {\r\n            showModal({ title: 'Erro', message: error.message, confirmText: 'Tentar Novamente' });\r\n        } finally {\r\n            submitButton.disabled = false;\r\n        }\r\n    });\r\n\r\n    // --- Carga Inicial ---\r\n    createHorarioInputs();\r\n    fetchAndDisplayStores();\r\n    initializeLocationPicker();\r\n});"
        }
    ]
}