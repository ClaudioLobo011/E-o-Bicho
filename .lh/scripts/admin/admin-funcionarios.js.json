{
    "sourceFile": "scripts/admin/admin-funcionarios.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1756594569512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756596082520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,85 +1,255 @@\n+// scripts/admin/admin-funcionarios.js\r\n document.addEventListener('DOMContentLoaded', () => {\r\n-  const container = document.querySelector('.bg-white.rounded-lg.shadow.p-6');\r\n+  // Containers/elementos da página\r\n+  const pageContainer = document.querySelector('.bg-white.rounded-lg.shadow.p-6');\r\n+  const listContainer = document.getElementById('funcionarios-container') || pageContainer;\r\n \r\n-  async function loadFuncionarios() {\r\n-    container.innerHTML = `<h1 class=\"text-2xl font-bold mb-4\">Gerir Funcionários</h1>\r\n-      <p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n+  const btnAdd = document.getElementById('btn-add-funcionario');\r\n \r\n-    try {\r\n-      const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n-      const token = loggedInUser?.token;\r\n+  // Modal e formulário\r\n+  const modal = document.getElementById('funcionario-modal');\r\n+  const modalTitle = document.getElementById('funcionario-modal-title');\r\n+  const form = document.getElementById('funcionario-form');\r\n \r\n-      const res = await fetch(`${API_CONFIG.BASE_URL}/funcionarios`, {\r\n-        headers: { 'Authorization': `Bearer ${token}` }\r\n-      });\r\n+  const inputId = document.getElementById('funcionario-id');\r\n+  const inputNome = document.getElementById('nome');\r\n+  const inputEmail = document.getElementById('email');\r\n+  const inputSenha = document.getElementById('senha');\r\n+  const selectRole = document.getElementById('role');\r\n \r\n-      if (!res.ok) throw new Error(\"Erro ao carregar funcionários\");\r\n-      const funcionarios = await res.json();\r\n+  // Token do usuário logado\r\n+  const loggedInUser = (() => {\r\n+    try { return JSON.parse(localStorage.getItem('loggedInUser')); } catch { return null; }\r\n+  })();\r\n+  const token = loggedInUser?.token || '';\r\n \r\n-      if (funcionarios.length === 0) {\r\n-        container.innerHTML = `<h1 class=\"text-2xl font-bold mb-4\">Gerir Funcionários</h1>\r\n-          <p class=\"text-gray-500\">Nenhum funcionário cadastrado.</p>`;\r\n-        return;\r\n-      }\r\n+  // Base correta da API (rota montada no servidor como /api/admin/funcionarios)\r\n+  const BASE = `${API_CONFIG.BASE_URL}/admin/funcionarios`;\r\n \r\n-      let html = `\r\n-        <h1 class=\"text-2xl font-bold mb-4\">Gerir Funcionários</h1>\r\n-        <table class=\"min-w-full bg-white border rounded-lg shadow\">\r\n+  // Helpers de UI\r\n+  function toastErro(msg = 'Ocorreu um erro') {\r\n+    console.error(msg);\r\n+    if (listContainer) listContainer.insertAdjacentHTML('afterbegin', `<p class=\"text-red-600 mb-3\">${msg}</p>`);\r\n+    alert(msg);\r\n+  }\r\n+\r\n+  function openModal(modo = 'create', dados = null) {\r\n+    if (!modal) return;\r\n+    modal.classList.remove('hidden');\r\n+\r\n+    if (modo === 'create') {\r\n+      modalTitle.textContent = 'Adicionar Funcionário';\r\n+      inputId.value = '';\r\n+      inputNome.value = '';\r\n+      inputEmail.value = '';\r\n+      inputSenha.value = '';\r\n+      selectRole.value = 'funcionario';\r\n+    } else {\r\n+      modalTitle.textContent = 'Editar Funcionário';\r\n+      inputId.value = dados?._id || '';\r\n+      inputNome.value = dados?.nomeCompleto || '';\r\n+      inputEmail.value = dados?.email || '';\r\n+      inputSenha.value = ''; // senha só se o admin quiser redefinir\r\n+      selectRole.value = dados?.role || 'funcionario';\r\n+    }\r\n+  }\r\n+\r\n+  function closeModal() {\r\n+    if (!modal) return;\r\n+    modal.classList.add('hidden');\r\n+  }\r\n+\r\n+  // Fechar modal ao clicar fora\r\n+  if (modal) {\r\n+    modal.addEventListener('click', (ev) => {\r\n+      if (ev.target === modal) closeModal();\r\n+    });\r\n+  }\r\n+\r\n+  // Chamada de API (com token)\r\n+  async function apiGet() {\r\n+    return fetch(BASE, { headers: { 'Authorization': `Bearer ${token}` } });\r\n+  }\r\n+  async function apiPost(body) {\r\n+    return fetch(BASE, {\r\n+      method: 'POST',\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'Authorization': `Bearer ${token}`\r\n+      },\r\n+      body: JSON.stringify(body)\r\n+    });\r\n+  }\r\n+  async function apiPut(id, body) {\r\n+    return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n+      method: 'PUT',\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        'Authorization': `Bearer ${token}`\r\n+      },\r\n+      body: JSON.stringify(body)\r\n+    });\r\n+  }\r\n+  async function apiDelete(id) {\r\n+    return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n+      method: 'DELETE',\r\n+      headers: { 'Authorization': `Bearer ${token}` }\r\n+    });\r\n+  }\r\n+\r\n+  function renderTabela(funcionarios = []) {\r\n+    if (!Array.isArray(funcionarios)) funcionarios = [];\r\n+\r\n+    if (!funcionarios.length) {\r\n+      listContainer.innerHTML = `\r\n+        <div class=\"text-gray-600\">Nenhum funcionário encontrado.</div>\r\n+      `;\r\n+      return;\r\n+    }\r\n+\r\n+    const rows = funcionarios.map(f => {\r\n+      const nome = f.nomeCompleto || f.username || '(sem nome)';\r\n+      const email = f.email || '';\r\n+      const role = f.role || '-';\r\n+      const id = f._id || f.id || '';\r\n+      return `\r\n+        <tr class=\"border-b\">\r\n+          <td class=\"px-4 py-2 whitespace-nowrap font-medium\">${nome}</td>\r\n+          <td class=\"px-4 py-2\">${email}</td>\r\n+          <td class=\"px-4 py-2\">\r\n+            <span class=\"inline-block px-2 py-1 text-xs rounded bg-gray-100\">${role}</span>\r\n+          </td>\r\n+          <td class=\"px-4 py-2 text-right\">\r\n+            <button data-action=\"edit\" data-id=\"${id}\" class=\"text-blue-600 hover:underline mr-3\">Editar</button>\r\n+            <button data-action=\"delete\" data-id=\"${id}\" class=\"text-red-600 hover:underline\">Excluir</button>\r\n+          </td>\r\n+        </tr>\r\n+      `;\r\n+    }).join('');\r\n+\r\n+    listContainer.innerHTML = `\r\n+      <div class=\"overflow-x-auto\">\r\n+        <table class=\"min-w-full text-sm\">\r\n           <thead>\r\n-            <tr class=\"bg-gray-200 text-left text-sm font-semibold text-gray-600\">\r\n-              <th class=\"py-2 px-4\">Nome</th>\r\n-              <th class=\"py-2 px-4\">Email</th>\r\n-              <th class=\"py-2 px-4\">Cargo</th>\r\n-              <th class=\"py-2 px-4 text-right\">Ações</th>\r\n+            <tr class=\"text-left text-gray-500 border-b\">\r\n+              <th class=\"px-4 py-2\">Nome</th>\r\n+              <th class=\"px-4 py-2\">Email</th>\r\n+              <th class=\"px-4 py-2\">Cargo</th>\r\n+              <th class=\"px-4 py-2 text-right\">Ações</th>\r\n             </tr>\r\n           </thead>\r\n-          <tbody>\r\n-            ${funcionarios.map(f => `\r\n-              <tr class=\"border-b\">\r\n-                <td class=\"py-2 px-4\">${f.nome}</td>\r\n-                <td class=\"py-2 px-4\">${f.email}</td>\r\n-                <td class=\"py-2 px-4\">${f.role}</td>\r\n-                <td class=\"py-2 px-4 text-right\">\r\n-                  <button class=\"text-blue-500 hover:text-blue-700 mr-2\" data-id=\"${f._id}\" data-action=\"edit\"><i class=\"fas fa-edit\"></i></button>\r\n-                  <button class=\"text-red-500 hover:text-red-700\" data-id=\"${f._id}\" data-action=\"delete\"><i class=\"fas fa-trash\"></i></button>\r\n-                </td>\r\n-              </tr>\r\n-            `).join('')}\r\n-          </tbody>\r\n+          <tbody>${rows}</tbody>\r\n         </table>\r\n-      `;\r\n-      container.innerHTML = html;\r\n+      </div>\r\n+    `;\r\n+  }\r\n \r\n+  async function loadFuncionarios() {\r\n+    if (!token) {\r\n+      listContainer.innerHTML = `<p class=\"text-red-600\">Sessão expirada. Faça login novamente.</p>`;\r\n+      return;\r\n+    }\r\n+\r\n+    listContainer.innerHTML = `<p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n+\r\n+    try {\r\n+      const res = await apiGet();\r\n+      if (!res.ok) throw new Error('Erro ao carregar funcionários');\r\n+\r\n+      const data = await res.json();\r\n+      // Aceita tanto {items: [...]} quanto array direto\r\n+      const lista = Array.isArray(data) ? data : (data.items || data.funcionarios || data.users || []);\r\n+      renderTabela(lista);\r\n     } catch (err) {\r\n       console.error(err);\r\n-      container.innerHTML = `<p class=\"text-red-500\">Erro ao carregar funcionários.</p>`;\r\n+      listContainer.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n     }\r\n   }\r\n \r\n-  // Eventos futuros (editar, excluir)\r\n-  container.addEventListener('click', async (e) => {\r\n-    const btn = e.target.closest('button[data-action]');\r\n+  // Delegação de eventos para botões Editar/Excluir da tabela\r\n+  listContainer.addEventListener('click', async (ev) => {\r\n+    const btn = ev.target.closest('button');\r\n     if (!btn) return;\r\n-    const id = btn.dataset.id;\r\n-    const action = btn.dataset.action;\r\n \r\n+    const action = btn.getAttribute('data-action');\r\n+    const id = btn.getAttribute('data-id');\r\n+\r\n+    if (action === 'edit') {\r\n+      // Tentamos pegar os dados da linha (para preencher o modal)\r\n+      const tr = btn.closest('tr');\r\n+      const tds = tr ? tr.querySelectorAll('td') : [];\r\n+      const dados = {\r\n+        _id: id,\r\n+        nomeCompleto: tds[0]?.textContent?.trim() || '',\r\n+        email: tds[1]?.textContent?.trim() || '',\r\n+        role: tds[2]?.innerText?.trim() || 'funcionario'\r\n+      };\r\n+      openModal('edit', dados);\r\n+    }\r\n+\r\n     if (action === 'delete') {\r\n-      if (!confirm(\"Deseja realmente excluir este funcionário?\")) return;\r\n+      const ok = confirm('Tem certeza que deseja excluir este funcionário?');\r\n+      if (!ok) return;\r\n       try {\r\n-        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n-        const token = loggedInUser?.token;\r\n-        const res = await fetch(`${API_CONFIG.BASE_URL}/funcionarios/${id}`, {\r\n-          method: 'DELETE',\r\n-          headers: { 'Authorization': `Bearer ${token}` }\r\n-        });\r\n-        if (!res.ok) throw new Error(\"Erro ao excluir funcionário\");\r\n-        alert(\"Funcionário excluído com sucesso!\");\r\n-        loadFuncionarios();\r\n+        const res = await apiDelete(id);\r\n+        if (!res.ok) throw new Error('Erro ao excluir funcionário');\r\n+        alert('Funcionário excluído com sucesso!');\r\n+        await loadFuncionarios();\r\n       } catch (err) {\r\n-        alert(\"Erro ao excluir funcionário\");\r\n+        toastErro('Erro ao excluir funcionário.');\r\n       }\r\n     }\r\n   });\r\n \r\n+  // Botão \"Adicionar Funcionário\"\r\n+  if (btnAdd) {\r\n+    btnAdd.addEventListener('click', () => openModal('create'));\r\n+  }\r\n+\r\n+  // Submit do formulário (criar/editar)\r\n+  if (form) {\r\n+    form.addEventListener('submit', async (ev) => {\r\n+      ev.preventDefault();\r\n+\r\n+      const id = inputId.value.trim();\r\n+      const payload = {\r\n+        nomeCompleto: inputNome.value.trim(),\r\n+        email: inputEmail.value.trim(),\r\n+        role: selectRole.value\r\n+      };\r\n+      // senha só vai se estiver preenchida (para criação ou redefinição)\r\n+      if (inputSenha.value.trim()) {\r\n+        payload.senha = inputSenha.value.trim();\r\n+      }\r\n+\r\n+      try {\r\n+        let res;\r\n+        if (id) {\r\n+          // Atualizar\r\n+          res = await apiPut(id, payload);\r\n+        } else {\r\n+          // Criar\r\n+          // Caso seu backend exija algum campo obrigatório extra (ex.: tipoConta),\r\n+          // defina aqui. Exemplo padrão:\r\n+          if (!payload.tipoConta) payload.tipoConta = 'pessoa_fisica';\r\n+          res = await apiPost(payload);\r\n+        }\r\n+\r\n+        if (!res.ok) {\r\n+          const errText = await res.text();\r\n+          throw new Error(errText || 'Erro ao salvar funcionário');\r\n+        }\r\n+\r\n+        closeModal();\r\n+        await loadFuncionarios();\r\n+        alert('Dados salvos com sucesso!');\r\n+      } catch (err) {\r\n+        console.error(err);\r\n+        toastErro('Não foi possível salvar os dados do funcionário.');\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Carrega na entrada\r\n   loadFuncionarios();\r\n });\r\n"
                },
                {
                    "date": 1756598554512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n   const listContainer = document.getElementById('funcionarios-container') || pageContainer;\r\n \r\n   const btnAdd = document.getElementById('btn-add-funcionario');\r\n \r\n-  // Modal e formulário\r\n+  // Modal e formulário (mantemos para eventual edição de dados)\r\n   const modal = document.getElementById('funcionario-modal');\r\n   const modalTitle = document.getElementById('funcionario-modal-title');\r\n   const form = document.getElementById('funcionario-form');\r\n \r\n@@ -25,8 +25,10 @@\n \r\n   // Base correta da API (rota montada no servidor como /api/admin/funcionarios)\r\n   const BASE = `${API_CONFIG.BASE_URL}/admin/funcionarios`;\r\n \r\n+  console.log('admin-funcionarios BASE:', BASE);\r\n+\r\n   // Helpers de UI\r\n   function toastErro(msg = 'Ocorreu um erro') {\r\n     console.error(msg);\r\n     if (listContainer) listContainer.insertAdjacentHTML('afterbegin', `<p class=\"text-red-600 mb-3\">${msg}</p>`);\r\n@@ -49,9 +51,9 @@\n       inputId.value = dados?._id || '';\r\n       inputNome.value = dados?.nomeCompleto || '';\r\n       inputEmail.value = dados?.email || '';\r\n       inputSenha.value = ''; // senha só se o admin quiser redefinir\r\n-      selectRole.value = dados?.role || 'funcionario';\r\n+      selectRole.value = 'funcionario';\r\n     }\r\n   }\r\n \r\n   function closeModal() {\r\n@@ -65,9 +67,9 @@\n       if (ev.target === modal) closeModal();\r\n     });\r\n   }\r\n \r\n-  // Chamada de API (com token)\r\n+  // ------------------ API helpers ------------------\r\n   async function apiGet() {\r\n     return fetch(BASE, { headers: { 'Authorization': `Bearer ${token}` } });\r\n   }\r\n   async function apiPost(body) {\r\n@@ -89,15 +91,16 @@\n       },\r\n       body: JSON.stringify(body)\r\n     });\r\n   }\r\n-  async function apiDelete(id) {\r\n-    return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n-      method: 'DELETE',\r\n+  async function apiRebaixar(id) {\r\n+    return fetch(`${BASE}/${encodeURIComponent(id)}/rebaixar`, {\r\n+      method: 'POST',\r\n       headers: { 'Authorization': `Bearer ${token}` }\r\n     });\r\n   }\r\n \r\n+  // ------------------ Tabela ------------------\r\n   function renderTabela(funcionarios = []) {\r\n     if (!Array.isArray(funcionarios)) funcionarios = [];\r\n \r\n     if (!funcionarios.length) {\r\n@@ -120,9 +123,9 @@\n             <span class=\"inline-block px-2 py-1 text-xs rounded bg-gray-100\">${role}</span>\r\n           </td>\r\n           <td class=\"px-4 py-2 text-right\">\r\n             <button data-action=\"edit\" data-id=\"${id}\" class=\"text-blue-600 hover:underline mr-3\">Editar</button>\r\n-            <button data-action=\"delete\" data-id=\"${id}\" class=\"text-red-600 hover:underline\">Excluir</button>\r\n+            <button data-action=\"delete\" data-id=\"${id}\" class=\"text-red-600 hover:underline\">Remover do quadro</button>\r\n           </td>\r\n         </tr>\r\n       `;\r\n     }).join('');\r\n@@ -156,18 +159,142 @@\n       const res = await apiGet();\r\n       if (!res.ok) throw new Error('Erro ao carregar funcionários');\r\n \r\n       const data = await res.json();\r\n-      // Aceita tanto {items: [...]} quanto array direto\r\n       const lista = Array.isArray(data) ? data : (data.items || data.funcionarios || data.users || []);\r\n       renderTabela(lista);\r\n     } catch (err) {\r\n       console.error(err);\r\n       listContainer.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n     }\r\n   }\r\n \r\n-  // Delegação de eventos para botões Editar/Excluir da tabela\r\n+  // ------------------ Modal promover (selecionar usuário) ------------------\r\n+  function createPromoteModal() {\r\n+    // cria e injeta no DOM\r\n+    const wrapper = document.createElement('div');\r\n+    wrapper.id = 'promote-modal';\r\n+    wrapper.className = 'fixed inset-0 bg-black/50 flex items-center justify-center z-50';\r\n+    wrapper.innerHTML = `\r\n+      <div class=\"bg-white rounded-lg shadow-lg w-full max-w-2xl p-6\">\r\n+        <h2 class=\"text-xl font-bold mb-4\">Adicionar Funcionário (promover cliente)</h2>\r\n+        <div class=\"mb-4\">\r\n+          <label class=\"block text-sm font-medium mb-1\">Buscar usuário</label>\r\n+          <input id=\"pm-search\" type=\"text\" placeholder=\"Nome, email ou username\"\r\n+                 class=\"w-full border rounded px-3 py-2\" />\r\n+        </div>\r\n+        <div id=\"pm-results\" class=\"border rounded max-h-72 overflow-auto divide-y\">\r\n+          <div class=\"p-3 text-gray-500\">Digite para buscar clientes...</div>\r\n+        </div>\r\n+        <div class=\"mt-5 flex justify-end gap-3\">\r\n+          <button id=\"pm-cancel\" class=\"px-4 py-2 rounded bg-gray-200 hover:bg-gray-300\">Cancelar</button>\r\n+          <button id=\"pm-promote\" class=\"px-4 py-2 rounded bg-green-600 text-white disabled:opacity-50\" disabled>Promover</button>\r\n+        </div>\r\n+      </div>\r\n+    `;\r\n+    document.body.appendChild(wrapper);\r\n+\r\n+    const input = wrapper.querySelector('#pm-search');\r\n+    const results = wrapper.querySelector('#pm-results');\r\n+    const btnCancel = wrapper.querySelector('#pm-cancel');\r\n+    const btnPromote = wrapper.querySelector('#pm-promote');\r\n+\r\n+    let selectedId = null;\r\n+\r\n+    function renderResults(items) {\r\n+      if (!items.length) {\r\n+        results.innerHTML = `<div class=\"p-3 text-gray-500\">Nenhum usuário encontrado.</div>`;\r\n+        selectedId = null;\r\n+        btnPromote.disabled = true;\r\n+        return;\r\n+      }\r\n+      results.innerHTML = items.map(u => {\r\n+        const nome = u.nomeCompleto || u.username || '(sem nome)';\r\n+        const email = u.email || '';\r\n+        const id = u._id || u.id;\r\n+        return `\r\n+          <div class=\"p-3 hover:bg-gray-50 cursor-pointer flex items-center justify-between\" data-id=\"${id}\">\r\n+            <div>\r\n+              <div class=\"font-medium\">${nome}</div>\r\n+              <div class=\"text-xs text-gray-500\">${email}</div>\r\n+            </div>\r\n+            <input type=\"radio\" name=\"selUser\" />\r\n+          </div>\r\n+        `;\r\n+      }).join('');\r\n+    }\r\n+\r\n+    let searchTimeout = null;\r\n+    async function doSearch(q) {\r\n+      try {\r\n+        const url = new URL(`${BASE}/candidatos`);\r\n+        if (q) url.searchParams.set('q', q);\r\n+        url.searchParams.set('limit', '20');\r\n+        const res = await fetch(url.toString(), {\r\n+          headers: { 'Authorization': `Bearer ${token}` }\r\n+        });\r\n+        if (!res.ok) throw new Error('Falha ao buscar candidatos');\r\n+        const data = await res.json();\r\n+        renderResults(Array.isArray(data) ? data : []);\r\n+      } catch (err) {\r\n+        console.error(err);\r\n+        results.innerHTML = `<div class=\"p-3 text-red-600\">Erro ao buscar candidatos.</div>`;\r\n+      }\r\n+    }\r\n+\r\n+    input.addEventListener('input', (e) => {\r\n+      const q = e.target.value.trim();\r\n+      clearTimeout(searchTimeout);\r\n+      searchTimeout = setTimeout(() => doSearch(q), 300);\r\n+    });\r\n+\r\n+    results.addEventListener('click', (e) => {\r\n+      const item = e.target.closest('[data-id]');\r\n+      if (!item) return;\r\n+      // marcar visualmente\r\n+      results.querySelectorAll('[data-id]').forEach(el => el.classList.remove('bg-green-50', 'ring-2', 'ring-green-300'));\r\n+      item.classList.add('bg-green-50', 'ring-2', 'ring-green-300');\r\n+      // marcar o radio do item\r\n+      const radio = item.querySelector('input[type=\"radio\"]');\r\n+      if (radio) radio.checked = true;\r\n+\r\n+      selectedId = item.getAttribute('data-id');\r\n+      btnPromote.disabled = !selectedId;\r\n+    });\r\n+\r\n+    btnCancel.addEventListener('click', () => {\r\n+      wrapper.remove();\r\n+    });\r\n+\r\n+    btnPromote.addEventListener('click', async () => {\r\n+      if (!selectedId) return;\r\n+      try {\r\n+        const res = await fetch(`${BASE}/promover`, {\r\n+          method: 'POST',\r\n+          headers: {\r\n+            'Content-Type': 'application/json',\r\n+            'Authorization': `Bearer ${token}`\r\n+          },\r\n+          body: JSON.stringify({ userId: selectedId })\r\n+        });\r\n+        if (!res.ok) {\r\n+          const t = await res.text();\r\n+          throw new Error(t || 'Falha ao promover');\r\n+        }\r\n+        wrapper.remove();\r\n+        await loadFuncionarios();\r\n+        alert('Usuário promovido a funcionário!');\r\n+      } catch (err) {\r\n+        console.error(err);\r\n+        alert('Erro ao promover usuário.');\r\n+      }\r\n+    });\r\n+\r\n+    // dispara primeira busca vazia para sugerir últimos cadastrados\r\n+    doSearch('');\r\n+  }\r\n+\r\n+  // Delegação de eventos para botões Editar/Remover da tabela\r\n   listContainer.addEventListener('click', async (ev) => {\r\n     const btn = ev.target.closest('button');\r\n     if (!btn) return;\r\n \r\n@@ -181,59 +308,51 @@\n       const dados = {\r\n         _id: id,\r\n         nomeCompleto: tds[0]?.textContent?.trim() || '',\r\n         email: tds[1]?.textContent?.trim() || '',\r\n-        role: tds[2]?.innerText?.trim() || 'funcionario'\r\n+        role: 'funcionario'\r\n       };\r\n       openModal('edit', dados);\r\n     }\r\n \r\n     if (action === 'delete') {\r\n-      const ok = confirm('Tem certeza que deseja excluir este funcionário?');\r\n+      const ok = confirm('Remover do quadro de funcionários? (o usuário voltará a ser cliente)');\r\n       if (!ok) return;\r\n       try {\r\n-        const res = await apiDelete(id);\r\n-        if (!res.ok) throw new Error('Erro ao excluir funcionário');\r\n-        alert('Funcionário excluído com sucesso!');\r\n+        const res = await apiRebaixar(id);\r\n+        if (!res.ok) throw new Error('Erro ao remover do quadro');\r\n+        alert('Removido do quadro (agora cliente).');\r\n         await loadFuncionarios();\r\n       } catch (err) {\r\n-        toastErro('Erro ao excluir funcionário.');\r\n+        toastErro('Erro ao remover do quadro.');\r\n       }\r\n     }\r\n   });\r\n \r\n-  // Botão \"Adicionar Funcionário\"\r\n+  // Botão \"Adicionar Funcionário\" -> abrir modal de promoção\r\n   if (btnAdd) {\r\n-    btnAdd.addEventListener('click', () => openModal('create'));\r\n+    btnAdd.addEventListener('click', () => createPromoteModal());\r\n   }\r\n \r\n-  // Submit do formulário (criar/editar)\r\n+  // Submit do formulário (editar dados)\r\n   if (form) {\r\n     form.addEventListener('submit', async (ev) => {\r\n       ev.preventDefault();\r\n \r\n       const id = inputId.value.trim();\r\n       const payload = {\r\n         nomeCompleto: inputNome.value.trim(),\r\n-        email: inputEmail.value.trim(),\r\n-        role: selectRole.value\r\n+        email: inputEmail.value.trim()\r\n       };\r\n-      // senha só vai se estiver preenchida (para criação ou redefinição)\r\n-      if (inputSenha.value.trim()) {\r\n-        payload.senha = inputSenha.value.trim();\r\n-      }\r\n \r\n       try {\r\n         let res;\r\n         if (id) {\r\n-          // Atualizar\r\n           res = await apiPut(id, payload);\r\n         } else {\r\n-          // Criar\r\n-          // Caso seu backend exija algum campo obrigatório extra (ex.: tipoConta),\r\n-          // defina aqui. Exemplo padrão:\r\n-          if (!payload.tipoConta) payload.tipoConta = 'pessoa_fisica';\r\n-          res = await apiPost(payload);\r\n+          // não criamos usuários novos por aqui; fluxo é promover existente\r\n+          alert('Para adicionar funcionário, use o botão \"Adicionar\" e selecione um cliente.');\r\n+          return;\r\n         }\r\n \r\n         if (!res.ok) {\r\n           const errText = await res.text();\r\n@@ -241,9 +360,9 @@\n         }\r\n \r\n         closeModal();\r\n         await loadFuncionarios();\r\n-        alert('Dados salvos com sucesso!');\r\n+        alert('Dados atualizados com sucesso!');\r\n       } catch (err) {\r\n         console.error(err);\r\n         toastErro('Não foi possível salvar os dados do funcionário.');\r\n       }\r\n"
                },
                {
                    "date": 1756599940172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n   const listContainer = document.getElementById('funcionarios-container') || pageContainer;\r\n \r\n   const btnAdd = document.getElementById('btn-add-funcionario');\r\n \r\n-  // Modal e formulário (mantemos para eventual edição de dados)\r\n+  // Modal e formulário\r\n   const modal = document.getElementById('funcionario-modal');\r\n   const modalTitle = document.getElementById('funcionario-modal-title');\r\n   const form = document.getElementById('funcionario-form');\r\n \r\n@@ -24,9 +24,8 @@\n   const token = loggedInUser?.token || '';\r\n \r\n   // Base correta da API (rota montada no servidor como /api/admin/funcionarios)\r\n   const BASE = `${API_CONFIG.BASE_URL}/admin/funcionarios`;\r\n-\r\n   console.log('admin-funcionarios BASE:', BASE);\r\n \r\n   // Helpers de UI\r\n   function toastErro(msg = 'Ocorreu um erro') {\r\n@@ -53,22 +52,62 @@\n       inputEmail.value = dados?.email || '';\r\n       inputSenha.value = ''; // senha só se o admin quiser redefinir\r\n       selectRole.value = 'funcionario';\r\n     }\r\n+\r\n+    // garante o bind do botão Cancelar sempre que abrir o modal\r\n+    bindModalCancelButtons();\r\n   }\r\n \r\n   function closeModal() {\r\n     if (!modal) return;\r\n     modal.classList.add('hidden');\r\n   }\r\n \r\n-  // Fechar modal ao clicar fora\r\n+  // Fecha ao clicar fora do conteúdo\r\n   if (modal) {\r\n     modal.addEventListener('click', (ev) => {\r\n       if (ev.target === modal) closeModal();\r\n     });\r\n   }\r\n \r\n+  // Fecha com ESC\r\n+  document.addEventListener('keydown', (ev) => {\r\n+    if (ev.key === 'Escape' && modal && !modal.classList.contains('hidden')) {\r\n+      closeModal();\r\n+    }\r\n+  });\r\n+\r\n+  // === FIX: Cancelar do modal ===\r\n+  function bindModalCancelButtons() {\r\n+    if (!modal) return;\r\n+\r\n+    // Tente por ID conhecido, data-atributo, classe e fallback por texto\r\n+    const candidates = [\r\n+      modal.querySelector('#btn-cancelar-funcionario'),\r\n+      modal.querySelector('[data-action=\"cancelar\"]'),\r\n+      modal.querySelector('button.btn-cancelar'),\r\n+      // fallback por texto do botão:\r\n+      [...modal.querySelectorAll('button')].find(\r\n+        (b) => (b.textContent || '').trim().toLowerCase() === 'cancelar'\r\n+      )\r\n+    ].filter(Boolean);\r\n+\r\n+    candidates.forEach((btn) => {\r\n+      // evita duplicar listener\r\n+      btn.dataset.boundCancel = '1';\r\n+      btn.addEventListener('click', (e) => {\r\n+        e.preventDefault();      // impede submit\r\n+        e.stopPropagation();     // não propaga para backdrop\r\n+        closeModal();\r\n+      }, { once: false });\r\n+      // dica: no HTML, use type=\"button\" no Cancelar\r\n+      if (!btn.getAttribute('type')) btn.setAttribute('type', 'button');\r\n+    });\r\n+  }\r\n+  // faz um bind inicial (caso o modal já venha no DOM com o botão)\r\n+  bindModalCancelButtons();\r\n+\r\n   // ------------------ API helpers ------------------\r\n   async function apiGet() {\r\n     return fetch(BASE, { headers: { 'Authorization': `Bearer ${token}` } });\r\n   }\r\n@@ -91,11 +130,11 @@\n       },\r\n       body: JSON.stringify(body)\r\n     });\r\n   }\r\n-  async function apiRebaixar(id) {\r\n-    return fetch(`${BASE}/${encodeURIComponent(id)}/rebaixar`, {\r\n-      method: 'POST',\r\n+  async function apiDelete(id) {\r\n+    return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n+      method: 'DELETE',\r\n       headers: { 'Authorization': `Bearer ${token}` }\r\n     });\r\n   }\r\n \r\n@@ -123,9 +162,9 @@\n             <span class=\"inline-block px-2 py-1 text-xs rounded bg-gray-100\">${role}</span>\r\n           </td>\r\n           <td class=\"px-4 py-2 text-right\">\r\n             <button data-action=\"edit\" data-id=\"${id}\" class=\"text-blue-600 hover:underline mr-3\">Editar</button>\r\n-            <button data-action=\"delete\" data-id=\"${id}\" class=\"text-red-600 hover:underline\">Remover do quadro</button>\r\n+            <button data-action=\"delete\" data-id=\"${id}\" class=\"text-red-600 hover:underline\">Excluir</button>\r\n           </td>\r\n         </tr>\r\n       `;\r\n     }).join('');\r\n@@ -159,142 +198,18 @@\n       const res = await apiGet();\r\n       if (!res.ok) throw new Error('Erro ao carregar funcionários');\r\n \r\n       const data = await res.json();\r\n+      // Aceita tanto {items: [...]} quanto array direto\r\n       const lista = Array.isArray(data) ? data : (data.items || data.funcionarios || data.users || []);\r\n       renderTabela(lista);\r\n     } catch (err) {\r\n       console.error(err);\r\n       listContainer.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n     }\r\n   }\r\n \r\n-  // ------------------ Modal promover (selecionar usuário) ------------------\r\n-  function createPromoteModal() {\r\n-    // cria e injeta no DOM\r\n-    const wrapper = document.createElement('div');\r\n-    wrapper.id = 'promote-modal';\r\n-    wrapper.className = 'fixed inset-0 bg-black/50 flex items-center justify-center z-50';\r\n-    wrapper.innerHTML = `\r\n-      <div class=\"bg-white rounded-lg shadow-lg w-full max-w-2xl p-6\">\r\n-        <h2 class=\"text-xl font-bold mb-4\">Adicionar Funcionário (promover cliente)</h2>\r\n-        <div class=\"mb-4\">\r\n-          <label class=\"block text-sm font-medium mb-1\">Buscar usuário</label>\r\n-          <input id=\"pm-search\" type=\"text\" placeholder=\"Nome, email ou username\"\r\n-                 class=\"w-full border rounded px-3 py-2\" />\r\n-        </div>\r\n-        <div id=\"pm-results\" class=\"border rounded max-h-72 overflow-auto divide-y\">\r\n-          <div class=\"p-3 text-gray-500\">Digite para buscar clientes...</div>\r\n-        </div>\r\n-        <div class=\"mt-5 flex justify-end gap-3\">\r\n-          <button id=\"pm-cancel\" class=\"px-4 py-2 rounded bg-gray-200 hover:bg-gray-300\">Cancelar</button>\r\n-          <button id=\"pm-promote\" class=\"px-4 py-2 rounded bg-green-600 text-white disabled:opacity-50\" disabled>Promover</button>\r\n-        </div>\r\n-      </div>\r\n-    `;\r\n-    document.body.appendChild(wrapper);\r\n-\r\n-    const input = wrapper.querySelector('#pm-search');\r\n-    const results = wrapper.querySelector('#pm-results');\r\n-    const btnCancel = wrapper.querySelector('#pm-cancel');\r\n-    const btnPromote = wrapper.querySelector('#pm-promote');\r\n-\r\n-    let selectedId = null;\r\n-\r\n-    function renderResults(items) {\r\n-      if (!items.length) {\r\n-        results.innerHTML = `<div class=\"p-3 text-gray-500\">Nenhum usuário encontrado.</div>`;\r\n-        selectedId = null;\r\n-        btnPromote.disabled = true;\r\n-        return;\r\n-      }\r\n-      results.innerHTML = items.map(u => {\r\n-        const nome = u.nomeCompleto || u.username || '(sem nome)';\r\n-        const email = u.email || '';\r\n-        const id = u._id || u.id;\r\n-        return `\r\n-          <div class=\"p-3 hover:bg-gray-50 cursor-pointer flex items-center justify-between\" data-id=\"${id}\">\r\n-            <div>\r\n-              <div class=\"font-medium\">${nome}</div>\r\n-              <div class=\"text-xs text-gray-500\">${email}</div>\r\n-            </div>\r\n-            <input type=\"radio\" name=\"selUser\" />\r\n-          </div>\r\n-        `;\r\n-      }).join('');\r\n-    }\r\n-\r\n-    let searchTimeout = null;\r\n-    async function doSearch(q) {\r\n-      try {\r\n-        const url = new URL(`${BASE}/candidatos`);\r\n-        if (q) url.searchParams.set('q', q);\r\n-        url.searchParams.set('limit', '20');\r\n-        const res = await fetch(url.toString(), {\r\n-          headers: { 'Authorization': `Bearer ${token}` }\r\n-        });\r\n-        if (!res.ok) throw new Error('Falha ao buscar candidatos');\r\n-        const data = await res.json();\r\n-        renderResults(Array.isArray(data) ? data : []);\r\n-      } catch (err) {\r\n-        console.error(err);\r\n-        results.innerHTML = `<div class=\"p-3 text-red-600\">Erro ao buscar candidatos.</div>`;\r\n-      }\r\n-    }\r\n-\r\n-    input.addEventListener('input', (e) => {\r\n-      const q = e.target.value.trim();\r\n-      clearTimeout(searchTimeout);\r\n-      searchTimeout = setTimeout(() => doSearch(q), 300);\r\n-    });\r\n-\r\n-    results.addEventListener('click', (e) => {\r\n-      const item = e.target.closest('[data-id]');\r\n-      if (!item) return;\r\n-      // marcar visualmente\r\n-      results.querySelectorAll('[data-id]').forEach(el => el.classList.remove('bg-green-50', 'ring-2', 'ring-green-300'));\r\n-      item.classList.add('bg-green-50', 'ring-2', 'ring-green-300');\r\n-      // marcar o radio do item\r\n-      const radio = item.querySelector('input[type=\"radio\"]');\r\n-      if (radio) radio.checked = true;\r\n-\r\n-      selectedId = item.getAttribute('data-id');\r\n-      btnPromote.disabled = !selectedId;\r\n-    });\r\n-\r\n-    btnCancel.addEventListener('click', () => {\r\n-      wrapper.remove();\r\n-    });\r\n-\r\n-    btnPromote.addEventListener('click', async () => {\r\n-      if (!selectedId) return;\r\n-      try {\r\n-        const res = await fetch(`${BASE}/promover`, {\r\n-          method: 'POST',\r\n-          headers: {\r\n-            'Content-Type': 'application/json',\r\n-            'Authorization': `Bearer ${token}`\r\n-          },\r\n-          body: JSON.stringify({ userId: selectedId })\r\n-        });\r\n-        if (!res.ok) {\r\n-          const t = await res.text();\r\n-          throw new Error(t || 'Falha ao promover');\r\n-        }\r\n-        wrapper.remove();\r\n-        await loadFuncionarios();\r\n-        alert('Usuário promovido a funcionário!');\r\n-      } catch (err) {\r\n-        console.error(err);\r\n-        alert('Erro ao promover usuário.');\r\n-      }\r\n-    });\r\n-\r\n-    // dispara primeira busca vazia para sugerir últimos cadastrados\r\n-    doSearch('');\r\n-  }\r\n-\r\n-  // Delegação de eventos para botões Editar/Remover da tabela\r\n+  // Delegação de eventos para botões Editar/Excluir da tabela\r\n   listContainer.addEventListener('click', async (ev) => {\r\n     const btn = ev.target.closest('button');\r\n     if (!btn) return;\r\n \r\n@@ -314,45 +229,51 @@\n       openModal('edit', dados);\r\n     }\r\n \r\n     if (action === 'delete') {\r\n-      const ok = confirm('Remover do quadro de funcionários? (o usuário voltará a ser cliente)');\r\n+      const ok = confirm('Tem certeza que deseja excluir este funcionário?');\r\n       if (!ok) return;\r\n       try {\r\n-        const res = await apiRebaixar(id);\r\n-        if (!res.ok) throw new Error('Erro ao remover do quadro');\r\n-        alert('Removido do quadro (agora cliente).');\r\n+        const res = await apiDelete(id);\r\n+        if (!res.ok) throw new Error('Erro ao excluir funcionário');\r\n+        alert('Funcionário excluído com sucesso!');\r\n         await loadFuncionarios();\r\n       } catch (err) {\r\n-        toastErro('Erro ao remover do quadro.');\r\n+        toastErro('Erro ao excluir funcionário.');\r\n       }\r\n     }\r\n   });\r\n \r\n-  // Botão \"Adicionar Funcionário\" -> abrir modal de promoção\r\n+  // Botão \"Adicionar Funcionário\"\r\n   if (btnAdd) {\r\n-    btnAdd.addEventListener('click', () => createPromoteModal());\r\n+    btnAdd.addEventListener('click', () => openModal('create'));\r\n   }\r\n \r\n-  // Submit do formulário (editar dados)\r\n+  // Submit do formulário (editar/criar)\r\n   if (form) {\r\n     form.addEventListener('submit', async (ev) => {\r\n       ev.preventDefault();\r\n \r\n       const id = inputId.value.trim();\r\n       const payload = {\r\n         nomeCompleto: inputNome.value.trim(),\r\n-        email: inputEmail.value.trim()\r\n+        email: inputEmail.value.trim(),\r\n+        role: selectRole.value\r\n       };\r\n+      // senha só vai se estiver preenchida (para criação ou redefinição)\r\n+      if (inputSenha.value.trim()) {\r\n+        payload.senha = inputSenha.value.trim();\r\n+      }\r\n \r\n       try {\r\n         let res;\r\n         if (id) {\r\n+          // Atualizar\r\n           res = await apiPut(id, payload);\r\n         } else {\r\n-          // não criamos usuários novos por aqui; fluxo é promover existente\r\n-          alert('Para adicionar funcionário, use o botão \"Adicionar\" e selecione um cliente.');\r\n-          return;\r\n+          // Criar (seu fluxo pode optar por não criar aqui e só promover existente)\r\n+          if (!payload.tipoConta) payload.tipoConta = 'pessoa_fisica';\r\n+          res = await apiPost(payload);\r\n         }\r\n \r\n         if (!res.ok) {\r\n           const errText = await res.text();\r\n@@ -360,9 +281,9 @@\n         }\r\n \r\n         closeModal();\r\n         await loadFuncionarios();\r\n-        alert('Dados atualizados com sucesso!');\r\n+        alert('Dados salvos com sucesso!');\r\n       } catch (err) {\r\n         console.error(err);\r\n         toastErro('Não foi possível salvar os dados do funcionário.');\r\n       }\r\n"
                },
                {
                    "date": 1756600194998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,11 @@\n   const inputEmail = document.getElementById('email');\r\n   const inputSenha = document.getElementById('senha');\r\n   const selectRole = document.getElementById('role');\r\n \r\n+  // Elemento auxiliar de feedback de senha (adicione <p id=\"senha-hint\" ...> no HTML)\r\n+  const senhaHint = document.getElementById('senha-hint');\r\n+\r\n   // Token do usuário logado\r\n   const loggedInUser = (() => {\r\n     try { return JSON.parse(localStorage.getItem('loggedInUser')); } catch { return null; }\r\n   })();\r\n@@ -26,8 +29,33 @@\n   // Base correta da API (rota montada no servidor como /api/admin/funcionarios)\r\n   const BASE = `${API_CONFIG.BASE_URL}/admin/funcionarios`;\r\n   console.log('admin-funcionarios BASE:', BASE);\r\n \r\n+  // ===== Regras de senha (mín. 8, letra + número + símbolo) =====\r\n+  const PWD_REGEX = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[^A-Za-z0-9]).{8,}$/;\r\n+\r\n+  function validatePasswordField() {\r\n+    if (!inputSenha) return true;\r\n+    const v = inputSenha.value.trim();\r\n+    if (!v) {\r\n+      // vazio = ok (não alterar senha)\r\n+      inputSenha.setCustomValidity('');\r\n+      senhaHint && (senhaHint.textContent = 'Preencha apenas se quiser definir/alterar a senha.');\r\n+      return true;\r\n+    }\r\n+    const ok = PWD_REGEX.test(v);\r\n+    if (!ok) {\r\n+      inputSenha.setCustomValidity('A senha deve ter ao menos 8 caracteres, incluindo letra, número e símbolo.');\r\n+      senhaHint && (senhaHint.textContent = '⚠ A senha deve ter no mínimo 8 caracteres e conter letra, número e símbolo.');\r\n+    } else {\r\n+      inputSenha.setCustomValidity('');\r\n+      senhaHint && (senhaHint.textContent = '✔ Senha forte.');\r\n+    }\r\n+    return ok;\r\n+  }\r\n+\r\n+  inputSenha && inputSenha.addEventListener('input', validatePasswordField);\r\n+\r\n   // Helpers de UI\r\n   function toastErro(msg = 'Ocorreu um erro') {\r\n     console.error(msg);\r\n     if (listContainer) listContainer.insertAdjacentHTML('afterbegin', `<p class=\"text-red-600 mb-3\">${msg}</p>`);\r\n@@ -53,9 +81,10 @@\n       inputSenha.value = ''; // senha só se o admin quiser redefinir\r\n       selectRole.value = 'funcionario';\r\n     }\r\n \r\n-    // garante o bind do botão Cancelar sempre que abrir o modal\r\n+    // feedback inicial\r\n+    validatePasswordField();\r\n     bindModalCancelButtons();\r\n   }\r\n \r\n   function closeModal() {\r\n@@ -76,52 +105,35 @@\n       closeModal();\r\n     }\r\n   });\r\n \r\n-  // === FIX: Cancelar do modal ===\r\n+  // Cancelar\r\n   function bindModalCancelButtons() {\r\n     if (!modal) return;\r\n-\r\n-    // Tente por ID conhecido, data-atributo, classe e fallback por texto\r\n     const candidates = [\r\n       modal.querySelector('#btn-cancelar-funcionario'),\r\n       modal.querySelector('[data-action=\"cancelar\"]'),\r\n       modal.querySelector('button.btn-cancelar'),\r\n-      // fallback por texto do botão:\r\n       [...modal.querySelectorAll('button')].find(\r\n         (b) => (b.textContent || '').trim().toLowerCase() === 'cancelar'\r\n       )\r\n     ].filter(Boolean);\r\n \r\n     candidates.forEach((btn) => {\r\n-      // evita duplicar listener\r\n-      btn.dataset.boundCancel = '1';\r\n       btn.addEventListener('click', (e) => {\r\n-        e.preventDefault();      // impede submit\r\n-        e.stopPropagation();     // não propaga para backdrop\r\n+        e.preventDefault();\r\n+        e.stopPropagation();\r\n         closeModal();\r\n-      }, { once: false });\r\n-      // dica: no HTML, use type=\"button\" no Cancelar\r\n+      });\r\n       if (!btn.getAttribute('type')) btn.setAttribute('type', 'button');\r\n     });\r\n   }\r\n-  // faz um bind inicial (caso o modal já venha no DOM com o botão)\r\n   bindModalCancelButtons();\r\n \r\n   // ------------------ API helpers ------------------\r\n   async function apiGet() {\r\n     return fetch(BASE, { headers: { 'Authorization': `Bearer ${token}` } });\r\n   }\r\n-  async function apiPost(body) {\r\n-    return fetch(BASE, {\r\n-      method: 'POST',\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'Authorization': `Bearer ${token}`\r\n-      },\r\n-      body: JSON.stringify(body)\r\n-    });\r\n-  }\r\n   async function apiPut(id, body) {\r\n     return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n       method: 'PUT',\r\n       headers: {\r\n@@ -130,11 +142,11 @@\n       },\r\n       body: JSON.stringify(body)\r\n     });\r\n   }\r\n-  async function apiDelete(id) {\r\n-    return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n-      method: 'DELETE',\r\n+  async function apiRebaixar(id) {\r\n+    return fetch(`${BASE}/${encodeURIComponent(id)}/rebaixar`, {\r\n+      method: 'POST',\r\n       headers: { 'Authorization': `Bearer ${token}` }\r\n     });\r\n   }\r\n \r\n@@ -162,9 +174,9 @@\n             <span class=\"inline-block px-2 py-1 text-xs rounded bg-gray-100\">${role}</span>\r\n           </td>\r\n           <td class=\"px-4 py-2 text-right\">\r\n             <button data-action=\"edit\" data-id=\"${id}\" class=\"text-blue-600 hover:underline mr-3\">Editar</button>\r\n-            <button data-action=\"delete\" data-id=\"${id}\" class=\"text-red-600 hover:underline\">Excluir</button>\r\n+            <button data-action=\"delete\" data-id=\"${id}\" class=\"text-red-600 hover:underline\">Remover do quadro</button>\r\n           </td>\r\n         </tr>\r\n       `;\r\n     }).join('');\r\n@@ -198,27 +210,25 @@\n       const res = await apiGet();\r\n       if (!res.ok) throw new Error('Erro ao carregar funcionários');\r\n \r\n       const data = await res.json();\r\n-      // Aceita tanto {items: [...]} quanto array direto\r\n       const lista = Array.isArray(data) ? data : (data.items || data.funcionarios || data.users || []);\r\n       renderTabela(lista);\r\n     } catch (err) {\r\n       console.error(err);\r\n       listContainer.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n     }\r\n   }\r\n \r\n-  // Delegação de eventos para botões Editar/Excluir da tabela\r\n+  // Delegação de eventos para botões Editar/Remover da tabela\r\n   listContainer.addEventListener('click', async (ev) => {\r\n     const btn = ev.target.closest('button');\r\n     if (!btn) return;\r\n \r\n     const action = btn.getAttribute('data-action');\r\n     const id = btn.getAttribute('data-id');\r\n \r\n     if (action === 'edit') {\r\n-      // Tentamos pegar os dados da linha (para preencher o modal)\r\n       const tr = btn.closest('tr');\r\n       const tds = tr ? tr.querySelectorAll('td') : [];\r\n       const dados = {\r\n         _id: id,\r\n@@ -229,53 +239,48 @@\n       openModal('edit', dados);\r\n     }\r\n \r\n     if (action === 'delete') {\r\n-      const ok = confirm('Tem certeza que deseja excluir este funcionário?');\r\n+      const ok = confirm('Remover do quadro de funcionários? (o usuário voltará a ser cliente)');\r\n       if (!ok) return;\r\n       try {\r\n-        const res = await apiDelete(id);\r\n-        if (!res.ok) throw new Error('Erro ao excluir funcionário');\r\n-        alert('Funcionário excluído com sucesso!');\r\n+        const res = await apiRebaixar(id);\r\n+        if (!res.ok) throw new Error('Erro ao remover do quadro');\r\n+        alert('Removido do quadro (agora cliente).');\r\n         await loadFuncionarios();\r\n       } catch (err) {\r\n-        toastErro('Erro ao excluir funcionário.');\r\n+        toastErro('Erro ao remover do quadro.');\r\n       }\r\n     }\r\n   });\r\n \r\n-  // Botão \"Adicionar Funcionário\"\r\n-  if (btnAdd) {\r\n-    btnAdd.addEventListener('click', () => openModal('create'));\r\n-  }\r\n-\r\n-  // Submit do formulário (editar/criar)\r\n+  // Submit do formulário (editar)\r\n   if (form) {\r\n     form.addEventListener('submit', async (ev) => {\r\n       ev.preventDefault();\r\n \r\n+      // valida senha (se preenchida)\r\n+      if (!validatePasswordField()) {\r\n+        inputSenha?.reportValidity();\r\n+        return;\r\n+      }\r\n+\r\n       const id = inputId.value.trim();\r\n+      if (!id) {\r\n+        alert('Para adicionar funcionário, use o botão \"Adicionar\" e selecione um cliente.');\r\n+        return;\r\n+      }\r\n+\r\n       const payload = {\r\n         nomeCompleto: inputNome.value.trim(),\r\n         email: inputEmail.value.trim(),\r\n-        role: selectRole.value\r\n+        role: 'funcionario'\r\n       };\r\n-      // senha só vai se estiver preenchida (para criação ou redefinição)\r\n-      if (inputSenha.value.trim()) {\r\n-        payload.senha = inputSenha.value.trim();\r\n-      }\r\n+      const senhaVal = (inputSenha.value || '').trim();\r\n+      if (senhaVal) payload.senha = senhaVal; // só envia se quiser alterar\r\n \r\n       try {\r\n-        let res;\r\n-        if (id) {\r\n-          // Atualizar\r\n-          res = await apiPut(id, payload);\r\n-        } else {\r\n-          // Criar (seu fluxo pode optar por não criar aqui e só promover existente)\r\n-          if (!payload.tipoConta) payload.tipoConta = 'pessoa_fisica';\r\n-          res = await apiPost(payload);\r\n-        }\r\n-\r\n+        const res = await apiPut(id, payload);\r\n         if (!res.ok) {\r\n           const errText = await res.text();\r\n           throw new Error(errText || 'Erro ao salvar funcionário');\r\n         }\r\n@@ -289,7 +294,13 @@\n       }\r\n     });\r\n   }\r\n \r\n+  // Botão \"Adicionar Funcionário\" (abre o modal de promoção — se você já implementou o fluxo de promover)\r\n+  if (btnAdd) {\r\n+    // aqui você pode chamar seu modal de promoção; deixei só abrir o modal simples\r\n+    btnAdd.addEventListener('click', () => openModal('create'));\r\n+  }\r\n+\r\n   // Carrega na entrada\r\n   loadFuncionarios();\r\n });\r\n"
                },
                {
                    "date": 1756601148961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n // scripts/admin/admin-funcionarios.js\r\n document.addEventListener('DOMContentLoaded', () => {\r\n-  // Containers/elementos da página\r\n+  // Containers e elementos\r\n   const pageContainer = document.querySelector('.bg-white.rounded-lg.shadow.p-6');\r\n   const listContainer = document.getElementById('funcionarios-container') || pageContainer;\r\n-\r\n   const btnAdd = document.getElementById('btn-add-funcionario');\r\n \r\n-  // Modal e formulário\r\n+  // Modal de edição\r\n   const modal = document.getElementById('funcionario-modal');\r\n   const modalTitle = document.getElementById('funcionario-modal-title');\r\n   const form = document.getElementById('funcionario-form');\r\n \r\n@@ -15,30 +14,36 @@\n   const inputNome = document.getElementById('nome');\r\n   const inputEmail = document.getElementById('email');\r\n   const inputSenha = document.getElementById('senha');\r\n   const selectRole = document.getElementById('role');\r\n-\r\n-  // Elemento auxiliar de feedback de senha (adicione <p id=\"senha-hint\" ...> no HTML)\r\n   const senhaHint = document.getElementById('senha-hint');\r\n \r\n-  // Token do usuário logado\r\n-  const loggedInUser = (() => {\r\n-    try { return JSON.parse(localStorage.getItem('loggedInUser')); } catch { return null; }\r\n-  })();\r\n+  // Auth\r\n+  const loggedInUser = (() => { try { return JSON.parse(localStorage.getItem('loggedInUser')); } catch { return null; } })();\r\n   const token = loggedInUser?.token || '';\r\n \r\n-  // Base correta da API (rota montada no servidor como /api/admin/funcionarios)\r\n+  // Base\r\n   const BASE = `${API_CONFIG.BASE_URL}/admin/funcionarios`;\r\n-  console.log('admin-funcionarios BASE:', BASE);\r\n \r\n-  // ===== Regras de senha (mín. 8, letra + número + símbolo) =====\r\n+  // Utilidades UI\r\n+  const toast = (msg, type = 'info') => {\r\n+    if (typeof window.showToast === 'function') return window.showToast(msg, type, 3000);\r\n+    alert(msg);\r\n+  };\r\n+  const confirmAction = ({ title = 'Confirmar', message = 'Tem certeza?', onConfirm = () => {} }) => {\r\n+    if (typeof window.showModal === 'function') {\r\n+      window.showModal({ title, message, confirmText: 'Confirmar', cancelText: 'Cancelar', onConfirm });\r\n+    } else if (confirm(message)) {\r\n+      onConfirm();\r\n+    }\r\n+  };\r\n+\r\n+  // ===== Validação de senha =====\r\n   const PWD_REGEX = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[^A-Za-z0-9]).{8,}$/;\r\n-\r\n   function validatePasswordField() {\r\n     if (!inputSenha) return true;\r\n     const v = inputSenha.value.trim();\r\n     if (!v) {\r\n-      // vazio = ok (não alterar senha)\r\n       inputSenha.setCustomValidity('');\r\n       senhaHint && (senhaHint.textContent = 'Preencha apenas se quiser definir/alterar a senha.');\r\n       return true;\r\n     }\r\n@@ -51,117 +56,85 @@\n       senhaHint && (senhaHint.textContent = '✔ Senha forte.');\r\n     }\r\n     return ok;\r\n   }\r\n-\r\n   inputSenha && inputSenha.addEventListener('input', validatePasswordField);\r\n \r\n-  // Helpers de UI\r\n-  function toastErro(msg = 'Ocorreu um erro') {\r\n-    console.error(msg);\r\n-    if (listContainer) listContainer.insertAdjacentHTML('afterbegin', `<p class=\"text-red-600 mb-3\">${msg}</p>`);\r\n-    alert(msg);\r\n-  }\r\n-\r\n-  function openModal(modo = 'create', dados = null) {\r\n+  // Abrir/fechar modal\r\n+  function openModal(modo = 'edit', dados = null) {\r\n     if (!modal) return;\r\n     modal.classList.remove('hidden');\r\n \r\n     if (modo === 'create') {\r\n       modalTitle.textContent = 'Adicionar Funcionário';\r\n-      inputId.value = '';\r\n-      inputNome.value = '';\r\n-      inputEmail.value = '';\r\n-      inputSenha.value = '';\r\n+      inputId.value = ''; inputNome.value = ''; inputEmail.value = ''; inputSenha.value = '';\r\n       selectRole.value = 'funcionario';\r\n     } else {\r\n       modalTitle.textContent = 'Editar Funcionário';\r\n       inputId.value = dados?._id || '';\r\n       inputNome.value = dados?.nomeCompleto || '';\r\n       inputEmail.value = dados?.email || '';\r\n-      inputSenha.value = ''; // senha só se o admin quiser redefinir\r\n+      inputSenha.value = '';\r\n       selectRole.value = 'funcionario';\r\n     }\r\n \r\n-    // feedback inicial\r\n     validatePasswordField();\r\n-    bindModalCancelButtons();\r\n+    bindCancel();\r\n   }\r\n+  function closeModal() { modal && modal.classList.add('hidden'); }\r\n \r\n-  function closeModal() {\r\n-    if (!modal) return;\r\n-    modal.classList.add('hidden');\r\n-  }\r\n+  // Fecha no backdrop e ESC\r\n+  modal && modal.addEventListener('click', (ev) => { if (ev.target === modal) closeModal(); });\r\n+  document.addEventListener('keydown', (ev) => { if (ev.key === 'Escape' && modal && !modal.classList.contains('hidden')) closeModal(); });\r\n \r\n-  // Fecha ao clicar fora do conteúdo\r\n-  if (modal) {\r\n-    modal.addEventListener('click', (ev) => {\r\n-      if (ev.target === modal) closeModal();\r\n-    });\r\n-  }\r\n-\r\n-  // Fecha com ESC\r\n-  document.addEventListener('keydown', (ev) => {\r\n-    if (ev.key === 'Escape' && modal && !modal.classList.contains('hidden')) {\r\n-      closeModal();\r\n-    }\r\n-  });\r\n-\r\n-  // Cancelar\r\n-  function bindModalCancelButtons() {\r\n+  // Botão Cancelar (suporta vários seletores e fallback por texto)\r\n+  function bindCancel() {\r\n     if (!modal) return;\r\n     const candidates = [\r\n+      document.getElementById('cancelar-funcionario'),\r\n       modal.querySelector('#btn-cancelar-funcionario'),\r\n       modal.querySelector('[data-action=\"cancelar\"]'),\r\n       modal.querySelector('button.btn-cancelar'),\r\n-      [...modal.querySelectorAll('button')].find(\r\n-        (b) => (b.textContent || '').trim().toLowerCase() === 'cancelar'\r\n-      )\r\n+      [...modal.querySelectorAll('button')].find(b => (b.textContent || '').trim().toLowerCase() === 'cancelar')\r\n     ].filter(Boolean);\r\n-\r\n-    candidates.forEach((btn) => {\r\n-      btn.addEventListener('click', (e) => {\r\n-        e.preventDefault();\r\n-        e.stopPropagation();\r\n-        closeModal();\r\n-      });\r\n+    candidates.forEach(btn => {\r\n+      btn.addEventListener('click', (e) => { e.preventDefault(); e.stopPropagation(); closeModal(); });\r\n       if (!btn.getAttribute('type')) btn.setAttribute('type', 'button');\r\n     });\r\n   }\r\n-  bindModalCancelButtons();\r\n+  bindCancel();\r\n \r\n-  // ------------------ API helpers ------------------\r\n-  async function apiGet() {\r\n-    return fetch(BASE, { headers: { 'Authorization': `Bearer ${token}` } });\r\n-  }\r\n+  // API helpers\r\n+  async function apiGet() { return fetch(BASE, { headers: { Authorization: `Bearer ${token}` } }); }\r\n   async function apiPut(id, body) {\r\n     return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n       method: 'PUT',\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'Authorization': `Bearer ${token}`\r\n-      },\r\n+      headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },\r\n       body: JSON.stringify(body)\r\n     });\r\n   }\r\n   async function apiRebaixar(id) {\r\n     return fetch(`${BASE}/${encodeURIComponent(id)}/rebaixar`, {\r\n+      method: 'POST', headers: { Authorization: `Bearer ${token}` }\r\n+    });\r\n+  }\r\n+  async function apiCandidatos(q = '', limit = 20) {\r\n+    const url = new URL(`${BASE}/candidatos`);\r\n+    if (q) url.searchParams.set('q', q);\r\n+    url.searchParams.set('limit', String(limit));\r\n+    return fetch(url.toString(), { headers: { Authorization: `Bearer ${token}` } });\r\n+  }\r\n+  async function apiPromover(userId) {\r\n+    return fetch(`${BASE}/promover`, {\r\n       method: 'POST',\r\n-      headers: { 'Authorization': `Bearer ${token}` }\r\n+      headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },\r\n+      body: JSON.stringify({ userId })\r\n     });\r\n   }\r\n \r\n-  // ------------------ Tabela ------------------\r\n+  // Tabela\r\n   function renderTabela(funcionarios = []) {\r\n     if (!Array.isArray(funcionarios)) funcionarios = [];\r\n-\r\n-    if (!funcionarios.length) {\r\n-      listContainer.innerHTML = `\r\n-        <div class=\"text-gray-600\">Nenhum funcionário encontrado.</div>\r\n-      `;\r\n-      return;\r\n-    }\r\n-\r\n     const rows = funcionarios.map(f => {\r\n       const nome = f.nomeCompleto || f.username || '(sem nome)';\r\n       const email = f.email || '';\r\n       const role = f.role || '-';\r\n@@ -169,19 +142,15 @@\n       return `\r\n         <tr class=\"border-b\">\r\n           <td class=\"px-4 py-2 whitespace-nowrap font-medium\">${nome}</td>\r\n           <td class=\"px-4 py-2\">${email}</td>\r\n-          <td class=\"px-4 py-2\">\r\n-            <span class=\"inline-block px-2 py-1 text-xs rounded bg-gray-100\">${role}</span>\r\n-          </td>\r\n+          <td class=\"px-4 py-2\"><span class=\"inline-block px-2 py-1 text-xs rounded bg-gray-100\">${role}</span></td>\r\n           <td class=\"px-4 py-2 text-right\">\r\n             <button data-action=\"edit\" data-id=\"${id}\" class=\"text-blue-600 hover:underline mr-3\">Editar</button>\r\n-            <button data-action=\"delete\" data-id=\"${id}\" class=\"text-red-600 hover:underline\">Remover do quadro</button>\r\n+            <button data-action=\"rebaixar\" data-id=\"${id}\" class=\"text-red-600 hover:underline\">Remover do quadro</button>\r\n           </td>\r\n-        </tr>\r\n-      `;\r\n+        </tr>`;\r\n     }).join('');\r\n-\r\n     listContainer.innerHTML = `\r\n       <div class=\"overflow-x-auto\">\r\n         <table class=\"min-w-full text-sm\">\r\n           <thead>\r\n@@ -191,26 +160,21 @@\n               <th class=\"px-4 py-2\">Cargo</th>\r\n               <th class=\"px-4 py-2 text-right\">Ações</th>\r\n             </tr>\r\n           </thead>\r\n-          <tbody>${rows}</tbody>\r\n+          <tbody>${rows || ''}</tbody>\r\n         </table>\r\n-      </div>\r\n-    `;\r\n+      </div>`;\r\n+    if (!funcionarios.length) {\r\n+      listContainer.innerHTML = `<div class=\"text-gray-600\">Nenhum funcionário encontrado.</div>`;\r\n+    }\r\n   }\r\n \r\n   async function loadFuncionarios() {\r\n-    if (!token) {\r\n-      listContainer.innerHTML = `<p class=\"text-red-600\">Sessão expirada. Faça login novamente.</p>`;\r\n-      return;\r\n-    }\r\n-\r\n     listContainer.innerHTML = `<p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n-\r\n     try {\r\n       const res = await apiGet();\r\n       if (!res.ok) throw new Error('Erro ao carregar funcionários');\r\n-\r\n       const data = await res.json();\r\n       const lista = Array.isArray(data) ? data : (data.items || data.funcionarios || data.users || []);\r\n       renderTabela(lista);\r\n     } catch (err) {\r\n@@ -218,89 +182,157 @@\n       listContainer.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n     }\r\n   }\r\n \r\n-  // Delegação de eventos para botões Editar/Remover da tabela\r\n+  // Delegação: editar e rebaixar\r\n   listContainer.addEventListener('click', async (ev) => {\r\n-    const btn = ev.target.closest('button');\r\n+    const btn = ev.target.closest('button[data-action]');\r\n     if (!btn) return;\r\n-\r\n+    const id = btn.getAttribute('data-id');\r\n     const action = btn.getAttribute('data-action');\r\n-    const id = btn.getAttribute('data-id');\r\n \r\n     if (action === 'edit') {\r\n       const tr = btn.closest('tr');\r\n       const tds = tr ? tr.querySelectorAll('td') : [];\r\n       const dados = {\r\n         _id: id,\r\n         nomeCompleto: tds[0]?.textContent?.trim() || '',\r\n-        email: tds[1]?.textContent?.trim() || '',\r\n-        role: 'funcionario'\r\n+        email: tds[1]?.textContent?.trim() || ''\r\n       };\r\n       openModal('edit', dados);\r\n     }\r\n \r\n-    if (action === 'delete') {\r\n-      const ok = confirm('Remover do quadro de funcionários? (o usuário voltará a ser cliente)');\r\n-      if (!ok) return;\r\n-      try {\r\n-        const res = await apiRebaixar(id);\r\n-        if (!res.ok) throw new Error('Erro ao remover do quadro');\r\n-        alert('Removido do quadro (agora cliente).');\r\n-        await loadFuncionarios();\r\n-      } catch (err) {\r\n-        toastErro('Erro ao remover do quadro.');\r\n-      }\r\n+    if (action === 'rebaixar') {\r\n+      confirmAction({\r\n+        title: 'Remover do quadro?',\r\n+        message: 'O usuário continuará com a conta de cliente.',\r\n+        onConfirm: async () => {\r\n+          try {\r\n+            const r = await apiRebaixar(id);\r\n+            if (!r.ok) throw new Error(await r.text());\r\n+            toast('Removido do quadro (agora cliente).', 'info');\r\n+            await loadFuncionarios();\r\n+          } catch (e) {\r\n+            console.error(e); toast('Erro ao remover do quadro.', 'error');\r\n+          }\r\n+        }\r\n+      });\r\n     }\r\n   });\r\n \r\n-  // Submit do formulário (editar)\r\n+  // Submit (salvar alterações)\r\n   if (form) {\r\n     form.addEventListener('submit', async (ev) => {\r\n       ev.preventDefault();\r\n+      if (!validatePasswordField()) { inputSenha?.reportValidity(); return; }\r\n \r\n-      // valida senha (se preenchida)\r\n-      if (!validatePasswordField()) {\r\n-        inputSenha?.reportValidity();\r\n-        return;\r\n-      }\r\n-\r\n       const id = inputId.value.trim();\r\n-      if (!id) {\r\n-        alert('Para adicionar funcionário, use o botão \"Adicionar\" e selecione um cliente.');\r\n-        return;\r\n-      }\r\n+      if (!id) { toast('Use \"Adicionar\" para promover um cliente.', 'info'); return; }\r\n \r\n       const payload = {\r\n         nomeCompleto: inputNome.value.trim(),\r\n         email: inputEmail.value.trim(),\r\n         role: 'funcionario'\r\n       };\r\n-      const senhaVal = (inputSenha.value || '').trim();\r\n-      if (senhaVal) payload.senha = senhaVal; // só envia se quiser alterar\r\n+      const s = (inputSenha.value || '').trim();\r\n+      if (s) payload.senha = s;\r\n \r\n       try {\r\n         const res = await apiPut(id, payload);\r\n-        if (!res.ok) {\r\n-          const errText = await res.text();\r\n-          throw new Error(errText || 'Erro ao salvar funcionário');\r\n-        }\r\n-\r\n-        closeModal();\r\n-        await loadFuncionarios();\r\n-        alert('Dados salvos com sucesso!');\r\n+        if (!res.ok) throw new Error(await res.text());\r\n+        closeModal(); toast('Dados salvos com sucesso!', 'success'); await loadFuncionarios();\r\n       } catch (err) {\r\n-        console.error(err);\r\n-        toastErro('Não foi possível salvar os dados do funcionário.');\r\n+        console.error(err); toast('Não foi possível salvar os dados do funcionário.', 'error');\r\n       }\r\n     });\r\n   }\r\n \r\n-  // Botão \"Adicionar Funcionário\" (abre o modal de promoção — se você já implementou o fluxo de promover)\r\n-  if (btnAdd) {\r\n-    // aqui você pode chamar seu modal de promoção; deixei só abrir o modal simples\r\n-    btnAdd.addEventListener('click', () => openModal('create'));\r\n+  // Adicionar -> promover cliente\r\n+  if (btnAdd) btnAdd.addEventListener('click', () => createPromoteModal());\r\n+\r\n+  // Modal de promoção (cliente -> funcionário)\r\n+  function createPromoteModal() {\r\n+    const wrapper = document.createElement('div');\r\n+    wrapper.id = 'promote-modal';\r\n+    wrapper.className = 'fixed inset-0 bg-black/50 flex items-center justify-center z-50';\r\n+    wrapper.innerHTML = `\r\n+      <div class=\"bg-white rounded-lg shadow-lg w-full max-w-2xl p-6\">\r\n+        <h2 class=\"text-xl font-bold mb-4\">Adicionar Funcionário (promover cliente)</h2>\r\n+        <div class=\"mb-4\">\r\n+          <label class=\"block text-sm font-medium mb-1\">Buscar usuário</label>\r\n+          <input id=\"pm-search\" type=\"text\" placeholder=\"Nome, email ou username\" class=\"w-full border rounded px-3 py-2\" />\r\n+        </div>\r\n+        <div id=\"pm-results\" class=\"border rounded max-h-72 overflow-auto divide-y\">\r\n+          <div class=\"p-3 text-gray-500\">Digite para buscar clientes...</div>\r\n+        </div>\r\n+        <div class=\"mt-5 flex justify-end gap-3\">\r\n+          <button id=\"pm-cancel\" class=\"px-4 py-2 rounded bg-gray-200 hover:bg-gray-300\">Cancelar</button>\r\n+          <button id=\"pm-promote\" class=\"px-4 py-2 rounded bg-green-600 text-white disabled:opacity-50\" disabled>Promover</button>\r\n+        </div>\r\n+      </div>`;\r\n+    document.body.appendChild(wrapper);\r\n+\r\n+    const input = wrapper.querySelector('#pm-search');\r\n+    const results = wrapper.querySelector('#pm-results');\r\n+    const btnCancel = wrapper.querySelector('#pm-cancel');\r\n+    const btnPromote = wrapper.querySelector('#pm-promote');\r\n+    let selectedId = null;\r\n+\r\n+    function renderResults(items) {\r\n+      if (!items.length) {\r\n+        results.innerHTML = `<div class=\"p-3 text-gray-500\">Nenhum usuário encontrado.</div>`;\r\n+        selectedId = null; btnPromote.disabled = true; return;\r\n+      }\r\n+      results.innerHTML = items.map(u => {\r\n+        const nome = u.nomeCompleto || u.username || '(sem nome)';\r\n+        const email = u.email || ''; const id = u._id || u.id;\r\n+        return `\r\n+          <div class=\"p-3 hover:bg-gray-50 cursor-pointer flex items-center justify-between\" data-id=\"${id}\">\r\n+            <div><div class=\"font-medium\">${nome}</div><div class=\"text-xs text-gray-500\">${email}</div></div>\r\n+            <input type=\"radio\" name=\"selUser\"/>\r\n+          </div>`;\r\n+      }).join('');\r\n+    }\r\n+\r\n+    let to = null;\r\n+    async function doSearch(q) {\r\n+      try {\r\n+        const r = await apiCandidatos(q, 20);\r\n+        if (!r.ok) throw new Error('Falha ao buscar candidatos');\r\n+        const data = await r.json();\r\n+        renderResults(Array.isArray(data) ? data : []);\r\n+      } catch (e) {\r\n+        console.error(e);\r\n+        results.innerHTML = `<div class=\"p-3 text-red-600\">Erro ao buscar candidatos.</div>`;\r\n+      }\r\n+    }\r\n+\r\n+    input.addEventListener('input', (e) => {\r\n+      const q = e.target.value.trim();\r\n+      clearTimeout(to); to = setTimeout(() => doSearch(q), 300);\r\n+    });\r\n+\r\n+    results.addEventListener('click', (e) => {\r\n+      const item = e.target.closest('[data-id]'); if (!item) return;\r\n+      results.querySelectorAll('[data-id]').forEach(el => el.classList.remove('bg-green-50','ring-2','ring-green-300'));\r\n+      item.classList.add('bg-green-50','ring-2','ring-green-300');\r\n+      const radio = item.querySelector('input[type=\"radio\"]'); if (radio) radio.checked = true;\r\n+      selectedId = item.getAttribute('data-id'); btnPromote.disabled = !selectedId;\r\n+    });\r\n+\r\n+    btnCancel.addEventListener('click', () => wrapper.remove());\r\n+\r\n+    btnPromote.addEventListener('click', async () => {\r\n+      if (!selectedId) return;\r\n+      try {\r\n+        const r = await apiPromover(selectedId);\r\n+        if (!r.ok) throw new Error(await r.text());\r\n+        wrapper.remove(); toast('Usuário promovido a funcionário!', 'success'); await loadFuncionarios();\r\n+      } catch (e) { console.error(e); toast('Erro ao promover usuário.', 'error'); }\r\n+    });\r\n+\r\n+    doSearch('');\r\n   }\r\n \r\n-  // Carrega na entrada\r\n+  // Inicial\r\n   loadFuncionarios();\r\n });\r\n"
                },
                {
                    "date": 1756744841582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,234 @@\n+// scripts/admin/admin-funcionarios.js\r\n+document.addEventListener('DOMContentLoaded', () => {\r\n+  // Containers\r\n+  const tabela = document.getElementById('tabela-funcionarios');\r\n+  const btnAdd = document.getElementById('btn-add-funcionario');\r\n+\r\n+  // Modal & form\r\n+  const modal = document.getElementById('modal-edit-funcionario');\r\n+  const modalClose = document.getElementById('modal-close');\r\n+  const modalTitle = document.getElementById('modal-title');\r\n+  const form = document.getElementById('edit-funcionario-form');\r\n+\r\n+  // Form fields\r\n+  const inputId = document.getElementById('edit-id');\r\n+  const inputNome = document.getElementById('edit-nome');\r\n+  const inputEmail = document.getElementById('edit-email');\r\n+  const inputPassword = document.getElementById('edit-password');\r\n+  const togglePassword = document.getElementById('toggle-password');\r\n+  const roleSelect = document.getElementById('edit-role');\r\n+  const passwordBar = document.getElementById('password-bar');\r\n+\r\n+  // Constantes\r\n+  const ROLE_OPTIONS = [\r\n+    { value: 'funcionario', label: 'Funcionário' },\r\n+    { value: 'admin',       label: 'Administrador' },\r\n+  ];\r\n+\r\n+  const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n+  const token = loggedInUser?.token || '';\r\n+\r\n+  const API = {\r\n+    list:   `${API_CONFIG.BASE_URL}/admin/funcionarios`,\r\n+    create: `${API_CONFIG.BASE_URL}/admin/funcionarios`,\r\n+    update: (id) => `${API_CONFIG.BASE_URL}/admin/funcionarios/${id}`,\r\n+    remove: (id) => `${API_CONFIG.BASE_URL}/admin/funcionarios/${id}`,\r\n+  };\r\n+\r\n+  // ===== helpers =====\r\n+  function authHeaders(extra = {}) {\r\n+    return {\r\n+      'Content-Type': 'application/json',\r\n+      'Authorization': `Bearer ${token}`,\r\n+      ...extra,\r\n+    };\r\n+  }\r\n+\r\n+  function openModal(mode, data = null) {\r\n+    // Popular opções de cargo SEM filtros (admin e funcionário)\r\n+    roleSelect.innerHTML = ROLE_OPTIONS\r\n+      .map(o => `<option value=\"${o.value}\">${o.label}</option>`)\r\n+      .join('');\r\n+\r\n+    if (mode === 'create') {\r\n+      modalTitle.textContent = 'Adicionar Funcionário';\r\n+      inputId.value = '';\r\n+      inputNome.value = '';\r\n+      inputEmail.value = '';\r\n+      inputPassword.value = '';\r\n+      passwordBar.style.width = '0%';\r\n+      roleSelect.value = 'funcionario';\r\n+    } else {\r\n+      modalTitle.textContent = 'Editar Funcionário';\r\n+      inputId.value = data._id;\r\n+      inputNome.value = data.nome || '';\r\n+      inputEmail.value = data.email || '';\r\n+      inputPassword.value = '';\r\n+      passwordBar.style.width = '0%';\r\n+      roleSelect.value = data.role === 'admin' ? 'admin' : 'funcionario';\r\n+    }\r\n+\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n+  }\r\n+\r\n+  function closeModal() {\r\n+    modal.classList.add('hidden');\r\n+    modal.classList.remove('flex');\r\n+  }\r\n+\r\n+  function renderTable(funcionarios) {\r\n+    if (!Array.isArray(funcionarios) || funcionarios.length === 0) {\r\n+      tabela.innerHTML = `\r\n+        <p class=\"text-gray-500\">Nenhum funcionário cadastrado.</p>\r\n+      `;\r\n+      return;\r\n+    }\r\n+\r\n+    const rows = funcionarios.map(f => `\r\n+      <tr class=\"border-b\">\r\n+        <td class=\"py-2 px-4\">${f.nome || '-'}</td>\r\n+        <td class=\"py-2 px-4\">${f.email || '-'}</td>\r\n+        <td class=\"py-2 px-4 capitalize\">${f.role || '-'}</td>\r\n+        <td class=\"py-2 px-4 text-right\">\r\n+          <button class=\"text-blue-600 hover:text-blue-800 mr-3\" data-action=\"edit\" data-id=\"${f._id}\">\r\n+            <i class=\"fa-solid fa-pen-to-square\"></i> Editar\r\n+          </button>\r\n+          <button class=\"text-red-600 hover:text-red-800\" data-action=\"delete\" data-id=\"${f._id}\">\r\n+            <i class=\"fa-solid fa-trash\"></i> Remover do quadro\r\n+          </button>\r\n+        </td>\r\n+      </tr>\r\n+    `).join('');\r\n+\r\n+    tabela.innerHTML = `\r\n+      <table class=\"min-w-full bg-white border rounded-lg overflow-hidden\">\r\n+        <thead>\r\n+          <tr class=\"bg-gray-50 text-left\">\r\n+            <th class=\"py-2 px-4\">Nome</th>\r\n+            <th class=\"py-2 px-4\">Email</th>\r\n+            <th class=\"py-2 px-4\">Cargo</th>\r\n+            <th class=\"py-2 px-4 text-right\">Ações</th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>${rows}</tbody>\r\n+      </table>\r\n+    `;\r\n+  }\r\n+\r\n+  async function loadFuncionarios() {\r\n+    tabela.innerHTML = `<p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n+    try {\r\n+      const res = await fetch(API.list, { headers: authHeaders() });\r\n+      if (!res.ok) throw new Error('Falha ao listar funcionários');\r\n+      const data = await res.json();\r\n+      renderTable(data);\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+      tabela.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n+    }\r\n+  }\r\n+\r\n+  function passwordScore(pwd) {\r\n+    if (!pwd) return 0;\r\n+    let score = 0;\r\n+    if (pwd.length >= 8) score += 25;\r\n+    if (/[A-Z]/.test(pwd) && /[a-z]/.test(pwd)) score += 25;\r\n+    if (/[0-9]/.test(pwd)) score += 25;\r\n+    if (/[^A-Za-z0-9]/.test(pwd)) score += 25;\r\n+    return Math.min(100, score);\r\n+  }\r\n+\r\n+  // ===== events =====\r\n+  btnAdd?.addEventListener('click', () => openModal('create'));\r\n+\r\n+  modalClose.addEventListener('click', closeModal);\r\n+  document.getElementById('btn-cancelar').addEventListener('click', closeModal);\r\n+  modal.addEventListener('click', (e) => {\r\n+    if (e.target === modal) closeModal();\r\n+  });\r\n+\r\n+  togglePassword.addEventListener('click', () => {\r\n+    if (inputPassword.type === 'password') {\r\n+      inputPassword.type = 'text';\r\n+      togglePassword.textContent = 'Ocultar';\r\n+    } else {\r\n+      inputPassword.type = 'password';\r\n+      togglePassword.textContent = 'Mostrar';\r\n+    }\r\n+  });\r\n+\r\n+  inputPassword.addEventListener('input', () => {\r\n+    const s = passwordScore(inputPassword.value);\r\n+    passwordBar.style.width = `${s}%`;\r\n+  });\r\n+\r\n+  tabela.addEventListener('click', async (e) => {\r\n+    const btn = e.target.closest('button[data-action]');\r\n+    if (!btn) return;\r\n+\r\n+    const id = btn.getAttribute('data-id');\r\n+    const action = btn.getAttribute('data-action');\r\n+\r\n+    if (action === 'edit') {\r\n+      // Buscar dados do funcionário para preencher o modal (ou usar dados da linha)\r\n+      try {\r\n+        // se a API listar tudo, podemos reaproveitar da linha/tabela; para robustez, peço por id\r\n+        const res = await fetch(`${API.list}/${id}`, { headers: authHeaders() });\r\n+        if (!res.ok) throw new Error('Falha ao obter funcionário');\r\n+        const data = await res.json();\r\n+        openModal('edit', data);\r\n+      } catch (err) {\r\n+        console.error(err);\r\n+        alert('Não foi possível abrir o funcionário.');\r\n+      }\r\n+    }\r\n+\r\n+    if (action === 'delete') {\r\n+      if (!confirm('Remover este funcionário?')) return;\r\n+      try {\r\n+        const res = await fetch(API.remove(id), { method: 'DELETE', headers: authHeaders() });\r\n+        if (!res.ok) throw new Error('Falha ao remover');\r\n+        await loadFuncionarios();\r\n+      } catch (err) {\r\n+        console.error(err);\r\n+        alert('Erro ao remover funcionário.');\r\n+      }\r\n+    }\r\n+  });\r\n+\r\n+  form.addEventListener('submit', async (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    const payload = {\r\n+      nome: inputNome.value.trim(),\r\n+      email: inputEmail.value.trim(),\r\n+      role: roleSelect.value,\r\n+    };\r\n+    const pwd = inputPassword.value.trim();\r\n+    if (pwd) payload.senha = pwd;\r\n+\r\n+    const id = inputId.value.trim();\r\n+    const isCreate = !id;\r\n+\r\n+    try {\r\n+      const res = await fetch(isCreate ? API.create : API.update(id), {\r\n+        method: isCreate ? 'POST' : 'PUT',\r\n+        headers: authHeaders(),\r\n+        body: JSON.stringify(payload),\r\n+      });\r\n+      if (!res.ok) {\r\n+        const errBody = await res.json().catch(() => ({}));\r\n+        throw new Error(errBody.message || 'Falha ao salvar');\r\n+      }\r\n+      closeModal();\r\n+      await loadFuncionarios();\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      alert(err.message || 'Erro ao salvar funcionário.');\r\n+    }\r\n+  });\r\n+\r\n+  // Carrega ao abrir a tela\r\n+  loadFuncionarios();\r\n+});\r\n"
                },
                {
                    "date": 1756745398758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,72 +1,71 @@\n // scripts/admin/admin-funcionarios.js\r\n document.addEventListener('DOMContentLoaded', () => {\r\n-  // Containers\r\n-  const tabela = document.getElementById('tabela-funcionarios');\r\n-  const btnAdd = document.getElementById('btn-add-funcionario');\r\n+  // Área onde fica a tabela\r\n+  const container = document.querySelector('.bg-white.rounded-lg.shadow.p-6');\r\n \r\n-  // Modal & form\r\n+  // Modal + campos\r\n   const modal = document.getElementById('modal-edit-funcionario');\r\n-  const modalClose = document.getElementById('modal-close');\r\n+  const form = document.getElementById('edit-funcionario-form');\r\n   const modalTitle = document.getElementById('modal-title');\r\n-  const form = document.getElementById('edit-funcionario-form');\r\n-\r\n-  // Form fields\r\n   const inputId = document.getElementById('edit-id');\r\n   const inputNome = document.getElementById('edit-nome');\r\n   const inputEmail = document.getElementById('edit-email');\r\n   const inputPassword = document.getElementById('edit-password');\r\n   const togglePassword = document.getElementById('toggle-password');\r\n   const roleSelect = document.getElementById('edit-role');\r\n   const passwordBar = document.getElementById('password-bar');\r\n \r\n-  // Constantes\r\n-  const ROLE_OPTIONS = [\r\n-    { value: 'funcionario', label: 'Funcionário' },\r\n-    { value: 'admin',       label: 'Administrador' },\r\n-  ];\r\n+  const btnAdd = document.getElementById('btn-add-funcionario');\r\n+  const btnCancelar = document.getElementById('btn-cancelar');\r\n+  const modalClose = document.getElementById('modal-close');\r\n \r\n+  // Aux\r\n   const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n   const token = loggedInUser?.token || '';\r\n \r\n   const API = {\r\n     list:   `${API_CONFIG.BASE_URL}/admin/funcionarios`,\r\n     create: `${API_CONFIG.BASE_URL}/admin/funcionarios`,\r\n     update: (id) => `${API_CONFIG.BASE_URL}/admin/funcionarios/${id}`,\r\n+    get:    (id) => `${API_CONFIG.BASE_URL}/admin/funcionarios/${id}`,\r\n     remove: (id) => `${API_CONFIG.BASE_URL}/admin/funcionarios/${id}`,\r\n   };\r\n \r\n-  // ===== helpers =====\r\n-  function authHeaders(extra = {}) {\r\n-    return {\r\n-      'Content-Type': 'application/json',\r\n-      'Authorization': `Bearer ${token}`,\r\n-      ...extra,\r\n-    };\r\n-  }\r\n+  const ROLE_OPTIONS = [\r\n+    { value: 'funcionario', label: 'Funcionário' },\r\n+    { value: 'admin',       label: 'Administrador' },\r\n+  ];\r\n \r\n+  // Helpers\r\n+  const headers = (extra = {}) => ({\r\n+    'Content-Type': 'application/json',\r\n+    'Authorization': `Bearer ${token}`,\r\n+    ...extra,\r\n+  });\r\n+\r\n+  const getNome = (u) =>\r\n+    (u?.nome || u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || '').trim();\r\n+\r\n   function openModal(mode, data = null) {\r\n-    // Popular opções de cargo SEM filtros (admin e funcionário)\r\n-    roleSelect.innerHTML = ROLE_OPTIONS\r\n-      .map(o => `<option value=\"${o.value}\">${o.label}</option>`)\r\n-      .join('');\r\n+    roleSelect.innerHTML = ROLE_OPTIONS.map(o => `<option value=\"${o.value}\">${o.label}</option>`).join('');\r\n \r\n     if (mode === 'create') {\r\n       modalTitle.textContent = 'Adicionar Funcionário';\r\n       inputId.value = '';\r\n       inputNome.value = '';\r\n       inputEmail.value = '';\r\n       inputPassword.value = '';\r\n+      roleSelect.value = 'funcionario';\r\n       passwordBar.style.width = '0%';\r\n-      roleSelect.value = 'funcionario';\r\n     } else {\r\n       modalTitle.textContent = 'Editar Funcionário';\r\n       inputId.value = data._id;\r\n-      inputNome.value = data.nome || '';\r\n+      inputNome.value = getNome(data);\r\n       inputEmail.value = data.email || '';\r\n       inputPassword.value = '';\r\n+      roleSelect.value = (data.role === 'admin') ? 'admin' : 'funcionario';\r\n       passwordBar.style.width = '0%';\r\n-      roleSelect.value = data.role === 'admin' ? 'admin' : 'funcionario';\r\n     }\r\n \r\n     modal.classList.remove('hidden');\r\n     modal.classList.add('flex');\r\n@@ -76,19 +75,29 @@\n     modal.classList.add('hidden');\r\n     modal.classList.remove('flex');\r\n   }\r\n \r\n-  function renderTable(funcionarios) {\r\n-    if (!Array.isArray(funcionarios) || funcionarios.length === 0) {\r\n-      tabela.innerHTML = `\r\n-        <p class=\"text-gray-500\">Nenhum funcionário cadastrado.</p>\r\n-      `;\r\n+  function passwordScore(pwd) {\r\n+    if (!pwd) return 0;\r\n+    let s = 0;\r\n+    if (pwd.length >= 8) s += 25;\r\n+    if (/[A-Z]/.test(pwd) && /[a-z]/.test(pwd)) s += 25;\r\n+    if (/\\d/.test(pwd)) s += 25;\r\n+    if (/[^A-Za-z0-9]/.test(pwd)) s += 25;\r\n+    return Math.min(100, s);\r\n+  }\r\n+\r\n+  function renderTable(items) {\r\n+    if (!Array.isArray(items) || items.length === 0) {\r\n+      container.innerHTML = `\r\n+        <h1 class=\"text-2xl font-bold mb-4\">Gerir Funcionários</h1>\r\n+        <p class=\"text-gray-500\">Nenhum funcionário cadastrado.</p>`;\r\n       return;\r\n     }\r\n \r\n-    const rows = funcionarios.map(f => `\r\n+    const rows = items.map((f) => `\r\n       <tr class=\"border-b\">\r\n-        <td class=\"py-2 px-4\">${f.nome || '-'}</td>\r\n+        <td class=\"py-2 px-4\">${getNome(f) || '-'}</td>\r\n         <td class=\"py-2 px-4\">${f.email || '-'}</td>\r\n         <td class=\"py-2 px-4 capitalize\">${f.role || '-'}</td>\r\n         <td class=\"py-2 px-4 text-right\">\r\n           <button class=\"text-blue-600 hover:text-blue-800 mr-3\" data-action=\"edit\" data-id=\"${f._id}\">\r\n@@ -100,9 +109,16 @@\n         </td>\r\n       </tr>\r\n     `).join('');\r\n \r\n-    tabela.innerHTML = `\r\n+    container.innerHTML = `\r\n+      <div class=\"flex justify-between items-center mb-4\">\r\n+        <h1 class=\"text-2xl font-bold\">Gerir Funcionários</h1>\r\n+        <button id=\"btn-add-funcionario\" class=\"inline-flex items-center gap-2 bg-emerald-600 hover:bg-emerald-700 text-white font-medium px-4 py-2 rounded-lg\">\r\n+          <i class=\"fa-solid fa-user-plus\"></i>\r\n+          Adicionar Funcionário\r\n+        </button>\r\n+      </div>\r\n       <table class=\"min-w-full bg-white border rounded-lg overflow-hidden\">\r\n         <thead>\r\n           <tr class=\"bg-gray-50 text-left\">\r\n             <th class=\"py-2 px-4\">Nome</th>\r\n@@ -113,70 +129,40 @@\n         </thead>\r\n         <tbody>${rows}</tbody>\r\n       </table>\r\n     `;\r\n+\r\n+    // Rewire botão adicionar dentro do container recém-renderizado\r\n+    container.querySelector('#btn-add-funcionario')?.addEventListener('click', () => openModal('create'));\r\n   }\r\n \r\n   async function loadFuncionarios() {\r\n-    tabela.innerHTML = `<p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n+    container.innerHTML = `\r\n+      <h1 class=\"text-2xl font-bold mb-4\">Gerir Funcionários</h1>\r\n+      <p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n     try {\r\n-      const res = await fetch(API.list, { headers: authHeaders() });\r\n+      const res = await fetch(API.list, { headers: headers() });\r\n       if (!res.ok) throw new Error('Falha ao listar funcionários');\r\n       const data = await res.json();\r\n       renderTable(data);\r\n     } catch (e) {\r\n       console.error(e);\r\n-      tabela.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n+      container.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n     }\r\n   }\r\n \r\n-  function passwordScore(pwd) {\r\n-    if (!pwd) return 0;\r\n-    let score = 0;\r\n-    if (pwd.length >= 8) score += 25;\r\n-    if (/[A-Z]/.test(pwd) && /[a-z]/.test(pwd)) score += 25;\r\n-    if (/[0-9]/.test(pwd)) score += 25;\r\n-    if (/[^A-Za-z0-9]/.test(pwd)) score += 25;\r\n-    return Math.min(100, score);\r\n-  }\r\n-\r\n-  // ===== events =====\r\n-  btnAdd?.addEventListener('click', () => openModal('create'));\r\n-\r\n-  modalClose.addEventListener('click', closeModal);\r\n-  document.getElementById('btn-cancelar').addEventListener('click', closeModal);\r\n-  modal.addEventListener('click', (e) => {\r\n-    if (e.target === modal) closeModal();\r\n-  });\r\n-\r\n-  togglePassword.addEventListener('click', () => {\r\n-    if (inputPassword.type === 'password') {\r\n-      inputPassword.type = 'text';\r\n-      togglePassword.textContent = 'Ocultar';\r\n-    } else {\r\n-      inputPassword.type = 'password';\r\n-      togglePassword.textContent = 'Mostrar';\r\n-    }\r\n-  });\r\n-\r\n-  inputPassword.addEventListener('input', () => {\r\n-    const s = passwordScore(inputPassword.value);\r\n-    passwordBar.style.width = `${s}%`;\r\n-  });\r\n-\r\n-  tabela.addEventListener('click', async (e) => {\r\n+  // Eventos\r\n+  container.addEventListener('click', async (e) => {\r\n     const btn = e.target.closest('button[data-action]');\r\n     if (!btn) return;\r\n \r\n     const id = btn.getAttribute('data-id');\r\n     const action = btn.getAttribute('data-action');\r\n \r\n     if (action === 'edit') {\r\n-      // Buscar dados do funcionário para preencher o modal (ou usar dados da linha)\r\n       try {\r\n-        // se a API listar tudo, podemos reaproveitar da linha/tabela; para robustez, peço por id\r\n-        const res = await fetch(`${API.list}/${id}`, { headers: authHeaders() });\r\n-        if (!res.ok) throw new Error('Falha ao obter funcionário');\r\n+        const res = await fetch(API.get(id), { headers: headers() });\r\n+        if (!res.ok) throw new Error('Falha ao obter funcionário.');\r\n         const data = await res.json();\r\n         openModal('edit', data);\r\n       } catch (err) {\r\n         console.error(err);\r\n@@ -186,41 +172,63 @@\n \r\n     if (action === 'delete') {\r\n       if (!confirm('Remover este funcionário?')) return;\r\n       try {\r\n-        const res = await fetch(API.remove(id), { method: 'DELETE', headers: authHeaders() });\r\n-        if (!res.ok) throw new Error('Falha ao remover');\r\n+        const res = await fetch(API.remove(id), { method: 'DELETE', headers: headers() });\r\n+        if (!res.ok) throw new Error('Falha ao remover.');\r\n         await loadFuncionarios();\r\n       } catch (err) {\r\n         console.error(err);\r\n         alert('Erro ao remover funcionário.');\r\n       }\r\n     }\r\n   });\r\n \r\n+  togglePassword.addEventListener('click', () => {\r\n+    if (inputPassword.type === 'password') {\r\n+      inputPassword.type = 'text';\r\n+      togglePassword.textContent = 'Ocultar';\r\n+    } else {\r\n+      inputPassword.type = 'password';\r\n+      togglePassword.textContent = 'Mostrar';\r\n+    }\r\n+  });\r\n+\r\n+  inputPassword.addEventListener('input', () => {\r\n+    const s = passwordScore(inputPassword.value);\r\n+    passwordBar.style.width = `${s}%`;\r\n+  });\r\n+\r\n+  btnAdd?.addEventListener('click', () => openModal('create'));\r\n+  btnCancelar?.addEventListener('click', () => closeModal());\r\n+  modalClose?.addEventListener('click', () => closeModal());\r\n+  modal?.addEventListener('click', (e) => { if (e.target === modal) closeModal(); });\r\n+\r\n   form.addEventListener('submit', async (e) => {\r\n     e.preventDefault();\r\n \r\n+    const id = (inputId.value || '').trim();\r\n+    const isCreate = !id;\r\n+\r\n     const payload = {\r\n+      // a rota aceita \"nome\" e mapeia para nomeCompleto/nomeContato\r\n       nome: inputNome.value.trim(),\r\n       email: inputEmail.value.trim(),\r\n       role: roleSelect.value,\r\n     };\r\n+\r\n     const pwd = inputPassword.value.trim();\r\n     if (pwd) payload.senha = pwd;\r\n \r\n-    const id = inputId.value.trim();\r\n-    const isCreate = !id;\r\n-\r\n     try {\r\n       const res = await fetch(isCreate ? API.create : API.update(id), {\r\n         method: isCreate ? 'POST' : 'PUT',\r\n-        headers: authHeaders(),\r\n+        headers: headers(),\r\n         body: JSON.stringify(payload),\r\n       });\r\n       if (!res.ok) {\r\n-        const errBody = await res.json().catch(() => ({}));\r\n-        throw new Error(errBody.message || 'Falha ao salvar');\r\n+        const err = await res.json().catch(() => ({}));\r\n+        throw new Error(err.message || 'Falha ao salvar');\r\n       }\r\n       closeModal();\r\n       await loadFuncionarios();\r\n     } catch (err) {\r\n@@ -228,345 +236,7 @@\n       alert(err.message || 'Erro ao salvar funcionário.');\r\n     }\r\n   });\r\n \r\n-  // Carrega ao abrir a tela\r\n+  // Start\r\n   loadFuncionarios();\r\n });\r\n-// scripts/admin/admin-funcionarios.js\r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-  // Containers e elementos\r\n-  const pageContainer = document.querySelector('.bg-white.rounded-lg.shadow.p-6');\r\n-  const listContainer = document.getElementById('funcionarios-container') || pageContainer;\r\n-  const btnAdd = document.getElementById('btn-add-funcionario');\r\n-\r\n-  // Modal de edição\r\n-  const modal = document.getElementById('funcionario-modal');\r\n-  const modalTitle = document.getElementById('funcionario-modal-title');\r\n-  const form = document.getElementById('funcionario-form');\r\n-\r\n-  const inputId = document.getElementById('funcionario-id');\r\n-  const inputNome = document.getElementById('nome');\r\n-  const inputEmail = document.getElementById('email');\r\n-  const inputSenha = document.getElementById('senha');\r\n-  const selectRole = document.getElementById('role');\r\n-  const senhaHint = document.getElementById('senha-hint');\r\n-\r\n-  // Auth\r\n-  const loggedInUser = (() => { try { return JSON.parse(localStorage.getItem('loggedInUser')); } catch { return null; } })();\r\n-  const token = loggedInUser?.token || '';\r\n-\r\n-  // Base\r\n-  const BASE = `${API_CONFIG.BASE_URL}/admin/funcionarios`;\r\n-\r\n-  // Utilidades UI\r\n-  const toast = (msg, type = 'info') => {\r\n-    if (typeof window.showToast === 'function') return window.showToast(msg, type, 3000);\r\n-    alert(msg);\r\n-  };\r\n-  const confirmAction = ({ title = 'Confirmar', message = 'Tem certeza?', onConfirm = () => {} }) => {\r\n-    if (typeof window.showModal === 'function') {\r\n-      window.showModal({ title, message, confirmText: 'Confirmar', cancelText: 'Cancelar', onConfirm });\r\n-    } else if (confirm(message)) {\r\n-      onConfirm();\r\n-    }\r\n-  };\r\n-\r\n-  // ===== Validação de senha =====\r\n-  const PWD_REGEX = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[^A-Za-z0-9]).{8,}$/;\r\n-  function validatePasswordField() {\r\n-    if (!inputSenha) return true;\r\n-    const v = inputSenha.value.trim();\r\n-    if (!v) {\r\n-      inputSenha.setCustomValidity('');\r\n-      senhaHint && (senhaHint.textContent = 'Preencha apenas se quiser definir/alterar a senha.');\r\n-      return true;\r\n-    }\r\n-    const ok = PWD_REGEX.test(v);\r\n-    if (!ok) {\r\n-      inputSenha.setCustomValidity('A senha deve ter ao menos 8 caracteres, incluindo letra, número e símbolo.');\r\n-      senhaHint && (senhaHint.textContent = '⚠ A senha deve ter no mínimo 8 caracteres e conter letra, número e símbolo.');\r\n-    } else {\r\n-      inputSenha.setCustomValidity('');\r\n-      senhaHint && (senhaHint.textContent = '✔ Senha forte.');\r\n-    }\r\n-    return ok;\r\n-  }\r\n-  inputSenha && inputSenha.addEventListener('input', validatePasswordField);\r\n-\r\n-  // Abrir/fechar modal\r\n-  function openModal(modo = 'edit', dados = null) {\r\n-    if (!modal) return;\r\n-    modal.classList.remove('hidden');\r\n-\r\n-    if (modo === 'create') {\r\n-      modalTitle.textContent = 'Adicionar Funcionário';\r\n-      inputId.value = ''; inputNome.value = ''; inputEmail.value = ''; inputSenha.value = '';\r\n-      selectRole.value = 'funcionario';\r\n-    } else {\r\n-      modalTitle.textContent = 'Editar Funcionário';\r\n-      inputId.value = dados?._id || '';\r\n-      inputNome.value = dados?.nomeCompleto || '';\r\n-      inputEmail.value = dados?.email || '';\r\n-      inputSenha.value = '';\r\n-      selectRole.value = 'funcionario';\r\n-    }\r\n-\r\n-    validatePasswordField();\r\n-    bindCancel();\r\n-  }\r\n-  function closeModal() { modal && modal.classList.add('hidden'); }\r\n-\r\n-  // Fecha no backdrop e ESC\r\n-  modal && modal.addEventListener('click', (ev) => { if (ev.target === modal) closeModal(); });\r\n-  document.addEventListener('keydown', (ev) => { if (ev.key === 'Escape' && modal && !modal.classList.contains('hidden')) closeModal(); });\r\n-\r\n-  // Botão Cancelar (suporta vários seletores e fallback por texto)\r\n-  function bindCancel() {\r\n-    if (!modal) return;\r\n-    const candidates = [\r\n-      document.getElementById('cancelar-funcionario'),\r\n-      modal.querySelector('#btn-cancelar-funcionario'),\r\n-      modal.querySelector('[data-action=\"cancelar\"]'),\r\n-      modal.querySelector('button.btn-cancelar'),\r\n-      [...modal.querySelectorAll('button')].find(b => (b.textContent || '').trim().toLowerCase() === 'cancelar')\r\n-    ].filter(Boolean);\r\n-    candidates.forEach(btn => {\r\n-      btn.addEventListener('click', (e) => { e.preventDefault(); e.stopPropagation(); closeModal(); });\r\n-      if (!btn.getAttribute('type')) btn.setAttribute('type', 'button');\r\n-    });\r\n-  }\r\n-  bindCancel();\r\n-\r\n-  // API helpers\r\n-  async function apiGet() { return fetch(BASE, { headers: { Authorization: `Bearer ${token}` } }); }\r\n-  async function apiPut(id, body) {\r\n-    return fetch(`${BASE}/${encodeURIComponent(id)}`, {\r\n-      method: 'PUT',\r\n-      headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },\r\n-      body: JSON.stringify(body)\r\n-    });\r\n-  }\r\n-  async function apiRebaixar(id) {\r\n-    return fetch(`${BASE}/${encodeURIComponent(id)}/rebaixar`, {\r\n-      method: 'POST', headers: { Authorization: `Bearer ${token}` }\r\n-    });\r\n-  }\r\n-  async function apiCandidatos(q = '', limit = 20) {\r\n-    const url = new URL(`${BASE}/candidatos`);\r\n-    if (q) url.searchParams.set('q', q);\r\n-    url.searchParams.set('limit', String(limit));\r\n-    return fetch(url.toString(), { headers: { Authorization: `Bearer ${token}` } });\r\n-  }\r\n-  async function apiPromover(userId) {\r\n-    return fetch(`${BASE}/promover`, {\r\n-      method: 'POST',\r\n-      headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },\r\n-      body: JSON.stringify({ userId })\r\n-    });\r\n-  }\r\n-\r\n-  // Tabela\r\n-  function renderTabela(funcionarios = []) {\r\n-    if (!Array.isArray(funcionarios)) funcionarios = [];\r\n-    const rows = funcionarios.map(f => {\r\n-      const nome = f.nomeCompleto || f.username || '(sem nome)';\r\n-      const email = f.email || '';\r\n-      const role = f.role || '-';\r\n-      const id = f._id || f.id || '';\r\n-      return `\r\n-        <tr class=\"border-b\">\r\n-          <td class=\"px-4 py-2 whitespace-nowrap font-medium\">${nome}</td>\r\n-          <td class=\"px-4 py-2\">${email}</td>\r\n-          <td class=\"px-4 py-2\"><span class=\"inline-block px-2 py-1 text-xs rounded bg-gray-100\">${role}</span></td>\r\n-          <td class=\"px-4 py-2 text-right\">\r\n-            <button data-action=\"edit\" data-id=\"${id}\" class=\"text-blue-600 hover:underline mr-3\">Editar</button>\r\n-            <button data-action=\"rebaixar\" data-id=\"${id}\" class=\"text-red-600 hover:underline\">Remover do quadro</button>\r\n-          </td>\r\n-        </tr>`;\r\n-    }).join('');\r\n-    listContainer.innerHTML = `\r\n-      <div class=\"overflow-x-auto\">\r\n-        <table class=\"min-w-full text-sm\">\r\n-          <thead>\r\n-            <tr class=\"text-left text-gray-500 border-b\">\r\n-              <th class=\"px-4 py-2\">Nome</th>\r\n-              <th class=\"px-4 py-2\">Email</th>\r\n-              <th class=\"px-4 py-2\">Cargo</th>\r\n-              <th class=\"px-4 py-2 text-right\">Ações</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>${rows || ''}</tbody>\r\n-        </table>\r\n-      </div>`;\r\n-    if (!funcionarios.length) {\r\n-      listContainer.innerHTML = `<div class=\"text-gray-600\">Nenhum funcionário encontrado.</div>`;\r\n-    }\r\n-  }\r\n-\r\n-  async function loadFuncionarios() {\r\n-    listContainer.innerHTML = `<p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n-    try {\r\n-      const res = await apiGet();\r\n-      if (!res.ok) throw new Error('Erro ao carregar funcionários');\r\n-      const data = await res.json();\r\n-      const lista = Array.isArray(data) ? data : (data.items || data.funcionarios || data.users || []);\r\n-      renderTabela(lista);\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      listContainer.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n-    }\r\n-  }\r\n-\r\n-  // Delegação: editar e rebaixar\r\n-  listContainer.addEventListener('click', async (ev) => {\r\n-    const btn = ev.target.closest('button[data-action]');\r\n-    if (!btn) return;\r\n-    const id = btn.getAttribute('data-id');\r\n-    const action = btn.getAttribute('data-action');\r\n-\r\n-    if (action === 'edit') {\r\n-      const tr = btn.closest('tr');\r\n-      const tds = tr ? tr.querySelectorAll('td') : [];\r\n-      const dados = {\r\n-        _id: id,\r\n-        nomeCompleto: tds[0]?.textContent?.trim() || '',\r\n-        email: tds[1]?.textContent?.trim() || ''\r\n-      };\r\n-      openModal('edit', dados);\r\n-    }\r\n-\r\n-    if (action === 'rebaixar') {\r\n-      confirmAction({\r\n-        title: 'Remover do quadro?',\r\n-        message: 'O usuário continuará com a conta de cliente.',\r\n-        onConfirm: async () => {\r\n-          try {\r\n-            const r = await apiRebaixar(id);\r\n-            if (!r.ok) throw new Error(await r.text());\r\n-            toast('Removido do quadro (agora cliente).', 'info');\r\n-            await loadFuncionarios();\r\n-          } catch (e) {\r\n-            console.error(e); toast('Erro ao remover do quadro.', 'error');\r\n-          }\r\n-        }\r\n-      });\r\n-    }\r\n-  });\r\n-\r\n-  // Submit (salvar alterações)\r\n-  if (form) {\r\n-    form.addEventListener('submit', async (ev) => {\r\n-      ev.preventDefault();\r\n-      if (!validatePasswordField()) { inputSenha?.reportValidity(); return; }\r\n-\r\n-      const id = inputId.value.trim();\r\n-      if (!id) { toast('Use \"Adicionar\" para promover um cliente.', 'info'); return; }\r\n-\r\n-      const payload = {\r\n-        nomeCompleto: inputNome.value.trim(),\r\n-        email: inputEmail.value.trim(),\r\n-        role: 'funcionario'\r\n-      };\r\n-      const s = (inputSenha.value || '').trim();\r\n-      if (s) payload.senha = s;\r\n-\r\n-      try {\r\n-        const res = await apiPut(id, payload);\r\n-        if (!res.ok) throw new Error(await res.text());\r\n-        closeModal(); toast('Dados salvos com sucesso!', 'success'); await loadFuncionarios();\r\n-      } catch (err) {\r\n-        console.error(err); toast('Não foi possível salvar os dados do funcionário.', 'error');\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  // Adicionar -> promover cliente\r\n-  if (btnAdd) btnAdd.addEventListener('click', () => createPromoteModal());\r\n-\r\n-  // Modal de promoção (cliente -> funcionário)\r\n-  function createPromoteModal() {\r\n-    const wrapper = document.createElement('div');\r\n-    wrapper.id = 'promote-modal';\r\n-    wrapper.className = 'fixed inset-0 bg-black/50 flex items-center justify-center z-50';\r\n-    wrapper.innerHTML = `\r\n-      <div class=\"bg-white rounded-lg shadow-lg w-full max-w-2xl p-6\">\r\n-        <h2 class=\"text-xl font-bold mb-4\">Adicionar Funcionário (promover cliente)</h2>\r\n-        <div class=\"mb-4\">\r\n-          <label class=\"block text-sm font-medium mb-1\">Buscar usuário</label>\r\n-          <input id=\"pm-search\" type=\"text\" placeholder=\"Nome, email ou username\" class=\"w-full border rounded px-3 py-2\" />\r\n-        </div>\r\n-        <div id=\"pm-results\" class=\"border rounded max-h-72 overflow-auto divide-y\">\r\n-          <div class=\"p-3 text-gray-500\">Digite para buscar clientes...</div>\r\n-        </div>\r\n-        <div class=\"mt-5 flex justify-end gap-3\">\r\n-          <button id=\"pm-cancel\" class=\"px-4 py-2 rounded bg-gray-200 hover:bg-gray-300\">Cancelar</button>\r\n-          <button id=\"pm-promote\" class=\"px-4 py-2 rounded bg-green-600 text-white disabled:opacity-50\" disabled>Promover</button>\r\n-        </div>\r\n-      </div>`;\r\n-    document.body.appendChild(wrapper);\r\n-\r\n-    const input = wrapper.querySelector('#pm-search');\r\n-    const results = wrapper.querySelector('#pm-results');\r\n-    const btnCancel = wrapper.querySelector('#pm-cancel');\r\n-    const btnPromote = wrapper.querySelector('#pm-promote');\r\n-    let selectedId = null;\r\n-\r\n-    function renderResults(items) {\r\n-      if (!items.length) {\r\n-        results.innerHTML = `<div class=\"p-3 text-gray-500\">Nenhum usuário encontrado.</div>`;\r\n-        selectedId = null; btnPromote.disabled = true; return;\r\n-      }\r\n-      results.innerHTML = items.map(u => {\r\n-        const nome = u.nomeCompleto || u.username || '(sem nome)';\r\n-        const email = u.email || ''; const id = u._id || u.id;\r\n-        return `\r\n-          <div class=\"p-3 hover:bg-gray-50 cursor-pointer flex items-center justify-between\" data-id=\"${id}\">\r\n-            <div><div class=\"font-medium\">${nome}</div><div class=\"text-xs text-gray-500\">${email}</div></div>\r\n-            <input type=\"radio\" name=\"selUser\"/>\r\n-          </div>`;\r\n-      }).join('');\r\n-    }\r\n-\r\n-    let to = null;\r\n-    async function doSearch(q) {\r\n-      try {\r\n-        const r = await apiCandidatos(q, 20);\r\n-        if (!r.ok) throw new Error('Falha ao buscar candidatos');\r\n-        const data = await r.json();\r\n-        renderResults(Array.isArray(data) ? data : []);\r\n-      } catch (e) {\r\n-        console.error(e);\r\n-        results.innerHTML = `<div class=\"p-3 text-red-600\">Erro ao buscar candidatos.</div>`;\r\n-      }\r\n-    }\r\n-\r\n-    input.addEventListener('input', (e) => {\r\n-      const q = e.target.value.trim();\r\n-      clearTimeout(to); to = setTimeout(() => doSearch(q), 300);\r\n-    });\r\n-\r\n-    results.addEventListener('click', (e) => {\r\n-      const item = e.target.closest('[data-id]'); if (!item) return;\r\n-      results.querySelectorAll('[data-id]').forEach(el => el.classList.remove('bg-green-50','ring-2','ring-green-300'));\r\n-      item.classList.add('bg-green-50','ring-2','ring-green-300');\r\n-      const radio = item.querySelector('input[type=\"radio\"]'); if (radio) radio.checked = true;\r\n-      selectedId = item.getAttribute('data-id'); btnPromote.disabled = !selectedId;\r\n-    });\r\n-\r\n-    btnCancel.addEventListener('click', () => wrapper.remove());\r\n-\r\n-    btnPromote.addEventListener('click', async () => {\r\n-      if (!selectedId) return;\r\n-      try {\r\n-        const r = await apiPromover(selectedId);\r\n-        if (!r.ok) throw new Error(await r.text());\r\n-        wrapper.remove(); toast('Usuário promovido a funcionário!', 'success'); await loadFuncionarios();\r\n-      } catch (e) { console.error(e); toast('Erro ao promover usuário.', 'error'); }\r\n-    });\r\n-\r\n-    doSearch('');\r\n-  }\r\n-\r\n-  // Inicial\r\n-  loadFuncionarios();\r\n-});\r\n"
                },
                {
                    "date": 1756746295968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,32 @@\n // scripts/admin/admin-funcionarios.js\r\n document.addEventListener('DOMContentLoaded', () => {\r\n-  // Área onde fica a tabela\r\n-  const container = document.querySelector('.bg-white.rounded-lg.shadow.p-6');\r\n+  // Tabela\r\n+  const tabela = document.getElementById('tabela-funcionarios');\r\n+  const btnAdd = document.getElementById('btn-add-funcionario');\r\n \r\n-  // Modal + campos\r\n+  // Modal Editar\r\n   const modal = document.getElementById('modal-edit-funcionario');\r\n+  const modalClose = document.getElementById('modal-close');\r\n+  const modalTitle = document.getElementById('modal-title');\r\n   const form = document.getElementById('edit-funcionario-form');\r\n-  const modalTitle = document.getElementById('modal-title');\r\n+\r\n   const inputId = document.getElementById('edit-id');\r\n   const inputNome = document.getElementById('edit-nome');\r\n   const inputEmail = document.getElementById('edit-email');\r\n   const inputPassword = document.getElementById('edit-password');\r\n   const togglePassword = document.getElementById('toggle-password');\r\n   const roleSelect = document.getElementById('edit-role');\r\n   const passwordBar = document.getElementById('password-bar');\r\n \r\n-  const btnAdd = document.getElementById('btn-add-funcionario');\r\n-  const btnCancelar = document.getElementById('btn-cancelar');\r\n-  const modalClose = document.getElementById('modal-close');\r\n+  // Modal Pesquisa\r\n+  const modalSearch = document.getElementById('modal-search-user');\r\n+  const modalSearchClose = document.getElementById('modal-search-close');\r\n+  const btnSearchCancel = document.getElementById('btn-search-cancel');\r\n+  const searchInput = document.getElementById('search-term');\r\n+  const searchResults = document.getElementById('search-results');\r\n \r\n-  // Aux\r\n+  // Auth\r\n   const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n   const token = loggedInUser?.token || '';\r\n \r\n   const API = {\r\n@@ -28,8 +34,13 @@\n     create: `${API_CONFIG.BASE_URL}/admin/funcionarios`,\r\n     update: (id) => `${API_CONFIG.BASE_URL}/admin/funcionarios/${id}`,\r\n     get:    (id) => `${API_CONFIG.BASE_URL}/admin/funcionarios/${id}`,\r\n     remove: (id) => `${API_CONFIG.BASE_URL}/admin/funcionarios/${id}`,\r\n+\r\n+    // novos endpoints (no mesmo router de funcionarios)\r\n+    searchUsers: (q = '', limit = 5) =>\r\n+      `${API_CONFIG.BASE_URL}/admin/funcionarios/buscar-usuarios?q=${encodeURIComponent(q)}&limit=${limit}`,\r\n+    transform: `${API_CONFIG.BASE_URL}/admin/funcionarios/transformar`,\r\n   };\r\n \r\n   const ROLE_OPTIONS = [\r\n     { value: 'funcionario', label: 'Funcionário' },\r\n@@ -75,8 +86,21 @@\n     modal.classList.add('hidden');\r\n     modal.classList.remove('flex');\r\n   }\r\n \r\n+  function openSearchModal() {\r\n+    modalSearch.classList.remove('hidden');\r\n+    modalSearch.classList.add('flex');\r\n+    searchInput.value = '';\r\n+    // carrega 5 mais recentes\r\n+    searchUsers('');\r\n+  }\r\n+\r\n+  function closeSearchModal() {\r\n+    modalSearch.classList.add('hidden');\r\n+    modalSearch.classList.remove('flex');\r\n+  }\r\n+\r\n   function passwordScore(pwd) {\r\n     if (!pwd) return 0;\r\n     let s = 0;\r\n     if (pwd.length >= 8) s += 25;\r\n@@ -85,17 +109,15 @@\n     if (/[^A-Za-z0-9]/.test(pwd)) s += 25;\r\n     return Math.min(100, s);\r\n   }\r\n \r\n-  function renderTable(items) {\r\n-    if (!Array.isArray(items) || items.length === 0) {\r\n-      container.innerHTML = `\r\n-        <h1 class=\"text-2xl font-bold mb-4\">Gerir Funcionários</h1>\r\n-        <p class=\"text-gray-500\">Nenhum funcionário cadastrado.</p>`;\r\n+  function renderTable(funcionarios) {\r\n+    if (!Array.isArray(funcionarios) || funcionarios.length === 0) {\r\n+      tabela.innerHTML = `<p class=\"text-gray-500\">Nenhum funcionário cadastrado.</p>`;\r\n       return;\r\n     }\r\n \r\n-    const rows = items.map((f) => `\r\n+    const rows = funcionarios.map(f => `\r\n       <tr class=\"border-b\">\r\n         <td class=\"py-2 px-4\">${getNome(f) || '-'}</td>\r\n         <td class=\"py-2 px-4\">${f.email || '-'}</td>\r\n         <td class=\"py-2 px-4 capitalize\">${f.role || '-'}</td>\r\n@@ -109,16 +131,9 @@\n         </td>\r\n       </tr>\r\n     `).join('');\r\n \r\n-    container.innerHTML = `\r\n-      <div class=\"flex justify-between items-center mb-4\">\r\n-        <h1 class=\"text-2xl font-bold\">Gerir Funcionários</h1>\r\n-        <button id=\"btn-add-funcionario\" class=\"inline-flex items-center gap-2 bg-emerald-600 hover:bg-emerald-700 text-white font-medium px-4 py-2 rounded-lg\">\r\n-          <i class=\"fa-solid fa-user-plus\"></i>\r\n-          Adicionar Funcionário\r\n-        </button>\r\n-      </div>\r\n+    tabela.innerHTML = `\r\n       <table class=\"min-w-full bg-white border rounded-lg overflow-hidden\">\r\n         <thead>\r\n           <tr class=\"bg-gray-50 text-left\">\r\n             <th class=\"py-2 px-4\">Nome</th>\r\n@@ -129,30 +144,126 @@\n         </thead>\r\n         <tbody>${rows}</tbody>\r\n       </table>\r\n     `;\r\n-\r\n-    // Rewire botão adicionar dentro do container recém-renderizado\r\n-    container.querySelector('#btn-add-funcionario')?.addEventListener('click', () => openModal('create'));\r\n   }\r\n \r\n   async function loadFuncionarios() {\r\n-    container.innerHTML = `\r\n-      <h1 class=\"text-2xl font-bold mb-4\">Gerir Funcionários</h1>\r\n-      <p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n+    tabela.innerHTML = `<p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n     try {\r\n       const res = await fetch(API.list, { headers: headers() });\r\n       if (!res.ok) throw new Error('Falha ao listar funcionários');\r\n       const data = await res.json();\r\n       renderTable(data);\r\n     } catch (e) {\r\n       console.error(e);\r\n-      container.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n+      tabela.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n     }\r\n   }\r\n \r\n-  // Eventos\r\n-  container.addEventListener('click', async (e) => {\r\n+  // ===== Pesquisa de usuários =====\r\n+  function renderSearchResults(items) {\r\n+    if (!Array.isArray(items) || items.length === 0) {\r\n+      searchResults.innerHTML = `<div class=\"p-4 text-gray-500\">Nenhum usuário encontrado.</div>`;\r\n+      return;\r\n+    }\r\n+\r\n+    const html = items.slice(0, 5).map(u => {\r\n+      const nome = getNome(u) || '(Sem nome)';\r\n+      const doc = u.cpf || u.cnpj || '';\r\n+      const jaFuncionario = (u.role === 'funcionario' || u.role === 'admin');\r\n+\r\n+      return `\r\n+        <div class=\"p-4 flex flex-col md:flex-row md:items-center gap-3\">\r\n+          <div class=\"flex-1\">\r\n+            <div class=\"font-medium\">${nome}</div>\r\n+            <div class=\"text-sm text-gray-600\">${u.email || '-'}</div>\r\n+            <div class=\"text-xs text-gray-500\">${doc ? `Doc: ${doc}` : ''}</div>\r\n+            ${jaFuncionario ? `<div class=\"text-xs mt-1\"><span class=\"px-2 py-0.5 rounded bg-emerald-50 text-emerald-700 border border-emerald-200\">Já é ${u.role}</span></div>` : ''}\r\n+          </div>\r\n+          <div class=\"flex items-center gap-2\">\r\n+            <select class=\"border rounded px-2 py-1\" data-role-select=\"${u._id}\">\r\n+              <option value=\"funcionario\" selected>Funcionário</option>\r\n+              <option value=\"admin\">Administrador</option>\r\n+            </select>\r\n+            <button class=\"px-3 py-2 rounded bg-emerald-600 hover:bg-emerald-700 text-white font-medium disabled:opacity-50\"\r\n+                    data-action=\"promote\" data-id=\"${u._id}\" ${jaFuncionario ? '' : ''}>\r\n+              Adicionar\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      `;\r\n+    }).join('');\r\n+\r\n+    searchResults.innerHTML = html;\r\n+  }\r\n+\r\n+  async function searchUsers(q) {\r\n+    try {\r\n+      const res = await fetch(API.searchUsers(q, 5), { headers: headers() });\r\n+      if (!res.ok) throw new Error('Falha na busca');\r\n+      const data = await res.json();\r\n+      renderSearchResults(data);\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+      searchResults.innerHTML = `<div class=\"p-4 text-red-600\">Erro ao buscar usuários.</div>`;\r\n+    }\r\n+  }\r\n+\r\n+  function debounce(fn, wait = 300) {\r\n+    let t;\r\n+    return (...args) => {\r\n+      clearTimeout(t);\r\n+      t = setTimeout(() => fn(...args), wait);\r\n+    };\r\n+  }\r\n+\r\n+  const debouncedSearch = debounce((val) => {\r\n+    const term = val.trim();\r\n+    if (term.length === 0) return searchUsers('');\r\n+    searchUsers(term);\r\n+  }, 300);\r\n+\r\n+  // ===== Eventos =====\r\n+  btnAdd?.addEventListener('click', openSearchModal);\r\n+  modalSearchClose?.addEventListener('click', closeSearchModal);\r\n+  btnSearchCancel?.addEventListener('click', closeSearchModal);\r\n+  modalSearch?.addEventListener('click', (e) => { if (e.target === modalSearch) closeSearchModal(); });\r\n+\r\n+  searchInput.addEventListener('input', (e) => {\r\n+    debouncedSearch(e.target.value || '');\r\n+  });\r\n+\r\n+  searchResults.addEventListener('click', async (e) => {\r\n+    const btn = e.target.closest('button[data-action=\"promote\"]');\r\n+    if (!btn) return;\r\n+    const userId = btn.getAttribute('data-id');\r\n+    const select = searchResults.querySelector(`select[data-role-select=\"${userId}\"]`);\r\n+    const newRole = select?.value || 'funcionario';\r\n+\r\n+    try {\r\n+      btn.disabled = true;\r\n+      const res = await fetch(API.transform, {\r\n+        method: 'POST',\r\n+        headers: headers(),\r\n+        body: JSON.stringify({ userId, role: newRole })\r\n+      });\r\n+      if (!res.ok) {\r\n+        const err = await res.json().catch(() => ({}));\r\n+        throw new Error(err.message || 'Falha ao transformar usuário.');\r\n+      }\r\n+      // atualiza lista de funcionários e fecha modal\r\n+      await loadFuncionarios();\r\n+      closeSearchModal();\r\n+    } catch (err) {\r\n+      alert(err.message || 'Erro ao transformar usuário.');\r\n+    } finally {\r\n+      btn.disabled = false;\r\n+    }\r\n+  });\r\n+\r\n+  // Tabela (editar/remover)\r\n+  tabela.addEventListener('click', async (e) => {\r\n     const btn = e.target.closest('button[data-action]');\r\n     if (!btn) return;\r\n \r\n     const id = btn.getAttribute('data-id');\r\n@@ -160,9 +271,9 @@\n \r\n     if (action === 'edit') {\r\n       try {\r\n         const res = await fetch(API.get(id), { headers: headers() });\r\n-        if (!res.ok) throw new Error('Falha ao obter funcionário.');\r\n+        if (!res.ok) throw new Error('Falha ao obter funcionário');\r\n         const data = await res.json();\r\n         openModal('edit', data);\r\n       } catch (err) {\r\n         console.error(err);\r\n@@ -173,17 +284,18 @@\n     if (action === 'delete') {\r\n       if (!confirm('Remover este funcionário?')) return;\r\n       try {\r\n         const res = await fetch(API.remove(id), { method: 'DELETE', headers: headers() });\r\n-        if (!res.ok) throw new Error('Falha ao remover.');\r\n+        if (!res.ok) throw new Error('Falha ao remover');\r\n         await loadFuncionarios();\r\n       } catch (err) {\r\n         console.error(err);\r\n         alert('Erro ao remover funcionário.');\r\n       }\r\n     }\r\n   });\r\n \r\n+  // Editar: barra de força + toggle senha\r\n   togglePassword.addEventListener('click', () => {\r\n     if (inputPassword.type === 'password') {\r\n       inputPassword.type = 'text';\r\n       togglePassword.textContent = 'Ocultar';\r\n@@ -191,44 +303,37 @@\n       inputPassword.type = 'password';\r\n       togglePassword.textContent = 'Mostrar';\r\n     }\r\n   });\r\n-\r\n   inputPassword.addEventListener('input', () => {\r\n     const s = passwordScore(inputPassword.value);\r\n     passwordBar.style.width = `${s}%`;\r\n   });\r\n \r\n-  btnAdd?.addEventListener('click', () => openModal('create'));\r\n-  btnCancelar?.addEventListener('click', () => closeModal());\r\n-  modalClose?.addEventListener('click', () => closeModal());\r\n-  modal?.addEventListener('click', (e) => { if (e.target === modal) closeModal(); });\r\n-\r\n+  // Submit editar/criar\r\n   form.addEventListener('submit', async (e) => {\r\n     e.preventDefault();\r\n \r\n-    const id = (inputId.value || '').trim();\r\n-    const isCreate = !id;\r\n-\r\n     const payload = {\r\n-      // a rota aceita \"nome\" e mapeia para nomeCompleto/nomeContato\r\n       nome: inputNome.value.trim(),\r\n       email: inputEmail.value.trim(),\r\n       role: roleSelect.value,\r\n     };\r\n-\r\n     const pwd = inputPassword.value.trim();\r\n     if (pwd) payload.senha = pwd;\r\n \r\n+    const id = inputId.value.trim();\r\n+    const isCreate = !id;\r\n+\r\n     try {\r\n       const res = await fetch(isCreate ? API.create : API.update(id), {\r\n         method: isCreate ? 'POST' : 'PUT',\r\n         headers: headers(),\r\n         body: JSON.stringify(payload),\r\n       });\r\n       if (!res.ok) {\r\n-        const err = await res.json().catch(() => ({}));\r\n-        throw new Error(err.message || 'Falha ao salvar');\r\n+        const errBody = await res.json().catch(() => ({}));\r\n+        throw new Error(errBody.message || 'Falha ao salvar');\r\n       }\r\n       closeModal();\r\n       await loadFuncionarios();\r\n     } catch (err) {\r\n"
                },
                {
                    "date": 1756747110619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n // scripts/admin/admin-funcionarios.js\r\n document.addEventListener('DOMContentLoaded', () => {\r\n-  // Tabela\r\n+  // === Tabela (lista) ===\r\n   const tabela = document.getElementById('tabela-funcionarios');\r\n   const btnAdd = document.getElementById('btn-add-funcionario');\r\n \r\n-  // Modal Editar\r\n+  // === Modal Editar/Adicionar (formulário) ===\r\n   const modal = document.getElementById('modal-edit-funcionario');\r\n-  const modalClose = document.getElementById('modal-close');\r\n   const modalTitle = document.getElementById('modal-title');\r\n   const form = document.getElementById('edit-funcionario-form');\r\n \r\n   const inputId = document.getElementById('edit-id');\r\n@@ -17,12 +16,10 @@\n   const togglePassword = document.getElementById('toggle-password');\r\n   const roleSelect = document.getElementById('edit-role');\r\n   const passwordBar = document.getElementById('password-bar');\r\n \r\n-  // Modal Pesquisa\r\n+  // === Modal de Pesquisa ===\r\n   const modalSearch = document.getElementById('modal-search-user');\r\n-  const modalSearchClose = document.getElementById('modal-search-close');\r\n-  const btnSearchCancel = document.getElementById('btn-search-cancel');\r\n   const searchInput = document.getElementById('search-term');\r\n   const searchResults = document.getElementById('search-results');\r\n \r\n   // Auth\r\n@@ -34,10 +31,8 @@\n     create: `${API_CONFIG.BASE_URL}/admin/funcionarios`,\r\n     update: (id) => `${API_CONFIG.BASE_URL}/admin/funcionarios/${id}`,\r\n     get:    (id) => `${API_CONFIG.BASE_URL}/admin/funcionarios/${id}`,\r\n     remove: (id) => `${API_CONFIG.BASE_URL}/admin/funcionarios/${id}`,\r\n-\r\n-    // novos endpoints (no mesmo router de funcionarios)\r\n     searchUsers: (q = '', limit = 5) =>\r\n       `${API_CONFIG.BASE_URL}/admin/funcionarios/buscar-usuarios?q=${encodeURIComponent(q)}&limit=${limit}`,\r\n     transform: `${API_CONFIG.BASE_URL}/admin/funcionarios/transformar`,\r\n   };\r\n@@ -46,9 +41,9 @@\n     { value: 'funcionario', label: 'Funcionário' },\r\n     { value: 'admin',       label: 'Administrador' },\r\n   ];\r\n \r\n-  // Helpers\r\n+  // ===== Helpers =====\r\n   const headers = (extra = {}) => ({\r\n     'Content-Type': 'application/json',\r\n     'Authorization': `Bearer ${token}`,\r\n     ...extra,\r\n@@ -56,8 +51,12 @@\n \r\n   const getNome = (u) =>\r\n     (u?.nome || u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || '').trim();\r\n \r\n+  function isModalOpen(m) {\r\n+    return m && !m.classList.contains('hidden');\r\n+  }\r\n+\r\n   function openModal(mode, data = null) {\r\n     roleSelect.innerHTML = ROLE_OPTIONS.map(o => `<option value=\"${o.value}\">${o.label}</option>`).join('');\r\n \r\n     if (mode === 'create') {\r\n@@ -90,9 +89,8 @@\n   function openSearchModal() {\r\n     modalSearch.classList.remove('hidden');\r\n     modalSearch.classList.add('flex');\r\n     searchInput.value = '';\r\n-    // carrega 5 mais recentes\r\n     searchUsers('');\r\n   }\r\n \r\n   function closeSearchModal() {\r\n@@ -184,10 +182,10 @@\n             <select class=\"border rounded px-2 py-1\" data-role-select=\"${u._id}\">\r\n               <option value=\"funcionario\" selected>Funcionário</option>\r\n               <option value=\"admin\">Administrador</option>\r\n             </select>\r\n-            <button class=\"px-3 py-2 rounded bg-emerald-600 hover:bg-emerald-700 text-white font-medium disabled:opacity-50\"\r\n-                    data-action=\"promote\" data-id=\"${u._id}\" ${jaFuncionario ? '' : ''}>\r\n+            <button class=\"px-3 py-2 rounded bg-emerald-600 hover:bg-emerald-700 text-white font-medium\"\r\n+                    data-action=\"promote\" data-id=\"${u._id}\">\r\n               Adicionar\r\n             </button>\r\n           </div>\r\n         </div>\r\n@@ -215,28 +213,75 @@\n       clearTimeout(t);\r\n       t = setTimeout(() => fn(...args), wait);\r\n     };\r\n   }\r\n-\r\n   const debouncedSearch = debounce((val) => {\r\n     const term = val.trim();\r\n     if (term.length === 0) return searchUsers('');\r\n     searchUsers(term);\r\n   }, 300);\r\n \r\n-  // ===== Eventos =====\r\n+  // ===== Eventos globais =====\r\n   btnAdd?.addEventListener('click', openSearchModal);\r\n-  modalSearchClose?.addEventListener('click', closeSearchModal);\r\n-  btnSearchCancel?.addEventListener('click', closeSearchModal);\r\n-  modalSearch?.addEventListener('click', (e) => { if (e.target === modalSearch) closeSearchModal(); });\r\n \r\n+  // === Fechamento do MODAL EDIT por delegação (+ ESC + backdrop) ===\r\n+  modal.addEventListener('click', (e) => {\r\n+    const clickedBackdrop = (e.target === modal);\r\n+    const clickedCloseX = e.target.closest('#modal-close');\r\n+    const clickedCancel = e.target.closest('#btn-cancelar');\r\n+\r\n+    if (clickedBackdrop || clickedCloseX || clickedCancel) {\r\n+      e.preventDefault();\r\n+      closeModal();\r\n+    }\r\n+  });\r\n+\r\n+  // Fecha com ESC quando o modal estiver aberto\r\n+  document.addEventListener('keydown', (e) => {\r\n+    if (e.key === 'Escape' && isModalOpen(modal)) {\r\n+      e.preventDefault();\r\n+      closeModal();\r\n+    }\r\n+    if (e.key === 'Escape' && isModalOpen(modalSearch)) {\r\n+      e.preventDefault();\r\n+      closeSearchModal();\r\n+    }\r\n+  });\r\n+\r\n+  // Toggle senha + barra de força\r\n+  togglePassword.addEventListener('click', () => {\r\n+    if (inputPassword.type === 'password') {\r\n+      inputPassword.type = 'text';\r\n+      togglePassword.textContent = 'Ocultar';\r\n+    } else {\r\n+      inputPassword.type = 'password';\r\n+      togglePassword.textContent = 'Mostrar';\r\n+    }\r\n+  });\r\n+  inputPassword.addEventListener('input', () => {\r\n+    const s = passwordScore(inputPassword.value);\r\n+    passwordBar.style.width = `${s}%`;\r\n+  });\r\n+\r\n+  // ===== Eventos do modal de pesquisa =====\r\n+  modalSearch.addEventListener('click', (e) => {\r\n+    const clickedBackdrop = (e.target === modalSearch);\r\n+    const clickedClose = e.target.closest('#modal-search-close');\r\n+    const clickedCancel = e.target.closest('#btn-search-cancel');\r\n+    if (clickedBackdrop || clickedClose || clickedCancel) {\r\n+      e.preventDefault();\r\n+      closeSearchModal();\r\n+    }\r\n+  });\r\n+\r\n   searchInput.addEventListener('input', (e) => {\r\n     debouncedSearch(e.target.value || '');\r\n   });\r\n \r\n   searchResults.addEventListener('click', async (e) => {\r\n     const btn = e.target.closest('button[data-action=\"promote\"]');\r\n     if (!btn) return;\r\n+\r\n     const userId = btn.getAttribute('data-id');\r\n     const select = searchResults.querySelector(`select[data-role-select=\"${userId}\"]`);\r\n     const newRole = select?.value || 'funcionario';\r\n \r\n@@ -250,9 +295,8 @@\n       if (!res.ok) {\r\n         const err = await res.json().catch(() => ({}));\r\n         throw new Error(err.message || 'Falha ao transformar usuário.');\r\n       }\r\n-      // atualiza lista de funcionários e fecha modal\r\n       await loadFuncionarios();\r\n       closeSearchModal();\r\n     } catch (err) {\r\n       alert(err.message || 'Erro ao transformar usuário.');\r\n@@ -260,9 +304,9 @@\n       btn.disabled = false;\r\n     }\r\n   });\r\n \r\n-  // Tabela (editar/remover)\r\n+  // ===== Ações da tabela (editar/remover) =====\r\n   tabela.addEventListener('click', async (e) => {\r\n     const btn = e.target.closest('button[data-action]');\r\n     if (!btn) return;\r\n \r\n@@ -293,24 +337,9 @@\n       }\r\n     }\r\n   });\r\n \r\n-  // Editar: barra de força + toggle senha\r\n-  togglePassword.addEventListener('click', () => {\r\n-    if (inputPassword.type === 'password') {\r\n-      inputPassword.type = 'text';\r\n-      togglePassword.textContent = 'Ocultar';\r\n-    } else {\r\n-      inputPassword.type = 'password';\r\n-      togglePassword.textContent = 'Mostrar';\r\n-    }\r\n-  });\r\n-  inputPassword.addEventListener('input', () => {\r\n-    const s = passwordScore(inputPassword.value);\r\n-    passwordBar.style.width = `${s}%`;\r\n-  });\r\n-\r\n-  // Submit editar/criar\r\n+  // ===== Submit do formulário (editar/criar) =====\r\n   form.addEventListener('submit', async (e) => {\r\n     e.preventDefault();\r\n \r\n     const payload = {\r\n"
                },
                {
                    "date": 1756762549489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,30 @@\n // scripts/admin/admin-funcionarios.js\r\n document.addEventListener('DOMContentLoaded', () => {\r\n-  // === Tabela (lista) ===\r\n   const tabela = document.getElementById('tabela-funcionarios');\r\n   const btnAdd = document.getElementById('btn-add-funcionario');\r\n \r\n-  // === Modal Editar/Adicionar (formulário) ===\r\n+  // Modal Edit\r\n   const modal = document.getElementById('modal-edit-funcionario');\r\n   const modalTitle = document.getElementById('modal-title');\r\n   const form = document.getElementById('edit-funcionario-form');\r\n-\r\n   const inputId = document.getElementById('edit-id');\r\n   const inputNome = document.getElementById('edit-nome');\r\n   const inputEmail = document.getElementById('edit-email');\r\n   const inputPassword = document.getElementById('edit-password');\r\n   const togglePassword = document.getElementById('toggle-password');\r\n   const roleSelect = document.getElementById('edit-role');\r\n   const passwordBar = document.getElementById('password-bar');\r\n \r\n-  // === Modal de Pesquisa ===\r\n+  // Modal Search\r\n   const modalSearch = document.getElementById('modal-search-user');\r\n   const searchInput = document.getElementById('search-term');\r\n   const searchResults = document.getElementById('search-results');\r\n \r\n   // Auth\r\n-  const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n-  const token = loggedInUser?.token || '';\r\n+  const cached = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n+  const token = cached?.token || '';\r\n+  let ACTOR_ROLE = cached?.role || null;\r\n \r\n   const API = {\r\n     list:   `${API_CONFIG.BASE_URL}/admin/funcionarios`,\r\n     create: `${API_CONFIG.BASE_URL}/admin/funcionarios`,\r\n@@ -34,47 +33,83 @@\n     remove: (id) => `${API_CONFIG.BASE_URL}/admin/funcionarios/${id}`,\r\n     searchUsers: (q = '', limit = 5) =>\r\n       `${API_CONFIG.BASE_URL}/admin/funcionarios/buscar-usuarios?q=${encodeURIComponent(q)}&limit=${limit}`,\r\n     transform: `${API_CONFIG.BASE_URL}/admin/funcionarios/transformar`,\r\n+    authCheck: `${API_CONFIG.BASE_URL}/auth/check`,\r\n   };\r\n \r\n-  const ROLE_OPTIONS = [\r\n-    { value: 'funcionario', label: 'Funcionário' },\r\n-    { value: 'admin',       label: 'Administrador' },\r\n-  ];\r\n+  const ROLE_LABEL = {\r\n+    funcionario: 'Funcionário',\r\n+    admin: 'Administrador',\r\n+    admin_master: 'Admin Master',\r\n+  };\r\n \r\n-  // ===== Helpers =====\r\n-  const headers = (extra = {}) => ({\r\n-    'Content-Type': 'application/json',\r\n-    'Authorization': `Bearer ${token}`,\r\n-    ...extra,\r\n-  });\r\n+  function headers(extra = {}) {\r\n+    return {\r\n+      'Content-Type': 'application/json',\r\n+      'Authorization': `Bearer ${token}`,\r\n+      ...extra,\r\n+    };\r\n+  }\r\n \r\n+  async function ensureActorRole() {\r\n+    if (ACTOR_ROLE) return ACTOR_ROLE;\r\n+    try {\r\n+      const resp = await fetch(API.authCheck, { headers: headers() });\r\n+      if (resp.ok) {\r\n+        const data = await resp.json();\r\n+        ACTOR_ROLE = data?.role || null;\r\n+        const cur = JSON.parse(localStorage.getItem('loggedInUser') || 'null') || {};\r\n+        localStorage.setItem('loggedInUser', JSON.stringify({ ...cur, role: ACTOR_ROLE }));\r\n+      }\r\n+    } catch {}\r\n+    return ACTOR_ROLE;\r\n+  }\r\n+\r\n   const getNome = (u) =>\r\n     (u?.nome || u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || '').trim();\r\n \r\n   function isModalOpen(m) {\r\n     return m && !m.classList.contains('hidden');\r\n   }\r\n \r\n+  function optionsForActor(actorRole) {\r\n+    if (actorRole === 'admin_master') {\r\n+      return ['funcionario', 'admin', 'admin_master'];\r\n+    }\r\n+    if (actorRole === 'admin') {\r\n+      return ['funcionario']; // admin só pode definir funcionario\r\n+    }\r\n+    return [];\r\n+  }\r\n+\r\n+  function roleTag(role) {\r\n+    const base = 'px-2 py-0.5 rounded border text-xs';\r\n+    if (role === 'admin_master') return `<span class=\"${base} bg-amber-50 text-amber-700 border-amber-200\">Já é admin master</span>`;\r\n+    if (role === 'admin')       return `<span class=\"${base} bg-blue-50 text-blue-700 border-blue-200\">Já é admin</span>`;\r\n+    if (role === 'funcionario') return `<span class=\"${base} bg-emerald-50 text-emerald-700 border-emerald-200\">Já é funcionário</span>`;\r\n+    return '';\r\n+  }\r\n+\r\n   function openModal(mode, data = null) {\r\n-    roleSelect.innerHTML = ROLE_OPTIONS.map(o => `<option value=\"${o.value}\">${o.label}</option>`).join('');\r\n+    const opts = optionsForActor(ACTOR_ROLE);\r\n+    roleSelect.innerHTML = opts.map(v => `<option value=\"${v}\">${ROLE_LABEL[v]}</option>`).join('');\r\n \r\n     if (mode === 'create') {\r\n       modalTitle.textContent = 'Adicionar Funcionário';\r\n       inputId.value = '';\r\n       inputNome.value = '';\r\n       inputEmail.value = '';\r\n       inputPassword.value = '';\r\n-      roleSelect.value = 'funcionario';\r\n+      roleSelect.value = opts[0] || 'funcionario';\r\n       passwordBar.style.width = '0%';\r\n     } else {\r\n       modalTitle.textContent = 'Editar Funcionário';\r\n       inputId.value = data._id;\r\n       inputNome.value = getNome(data);\r\n       inputEmail.value = data.email || '';\r\n       inputPassword.value = '';\r\n-      roleSelect.value = (data.role === 'admin') ? 'admin' : 'funcionario';\r\n+      roleSelect.value = opts.includes(data.role) ? data.role : (opts[0] || 'funcionario');\r\n       passwordBar.style.width = '0%';\r\n     }\r\n \r\n     modal.classList.remove('hidden');\r\n@@ -117,9 +152,9 @@\n     const rows = funcionarios.map(f => `\r\n       <tr class=\"border-b\">\r\n         <td class=\"py-2 px-4\">${getNome(f) || '-'}</td>\r\n         <td class=\"py-2 px-4\">${f.email || '-'}</td>\r\n-        <td class=\"py-2 px-4 capitalize\">${f.role || '-'}</td>\r\n+        <td class=\"py-2 px-4 capitalize\">${ROLE_LABEL[f.role] || f.role}</td>\r\n         <td class=\"py-2 px-4 text-right\">\r\n           <button class=\"text-blue-600 hover:text-blue-800 mr-3\" data-action=\"edit\" data-id=\"${f._id}\">\r\n             <i class=\"fa-solid fa-pen-to-square\"></i> Editar\r\n           </button>\r\n@@ -164,28 +199,37 @@\n       searchResults.innerHTML = `<div class=\"p-4 text-gray-500\">Nenhum usuário encontrado.</div>`;\r\n       return;\r\n     }\r\n \r\n+    const allowed = optionsForActor(ACTOR_ROLE);\r\n+\r\n     const html = items.slice(0, 5).map(u => {\r\n       const nome = getNome(u) || '(Sem nome)';\r\n       const doc = u.cpf || u.cnpj || '';\r\n-      const jaFuncionario = (u.role === 'funcionario' || u.role === 'admin');\r\n+      const currentRole = u.role || 'cliente';\r\n \r\n+      // select options conforme ator\r\n+      const opts = allowed.map(v => `<option value=\"${v}\" ${v === currentRole ? 'selected' : ''}>${ROLE_LABEL[v]}</option>`).join('');\r\n+\r\n+      // se ator for admin e alvo for admin/admin_master -> disable\r\n+      const disabledByPolicy = (ACTOR_ROLE === 'admin') && (currentRole === 'admin' || currentRole === 'admin_master');\r\n+\r\n+      // botão desabilitado se política bloquear ou se selecionar o mesmo cargo\r\n+      // (checamos em tempo de clique também)\r\n       return `\r\n         <div class=\"p-4 flex flex-col md:flex-row md:items-center gap-3\">\r\n           <div class=\"flex-1\">\r\n             <div class=\"font-medium\">${nome}</div>\r\n             <div class=\"text-sm text-gray-600\">${u.email || '-'}</div>\r\n             <div class=\"text-xs text-gray-500\">${doc ? `Doc: ${doc}` : ''}</div>\r\n-            ${jaFuncionario ? `<div class=\"text-xs mt-1\"><span class=\"px-2 py-0.5 rounded bg-emerald-50 text-emerald-700 border border-emerald-200\">Já é ${u.role}</span></div>` : ''}\r\n+            <div class=\"mt-1\">${roleTag(currentRole)}</div>\r\n           </div>\r\n           <div class=\"flex items-center gap-2\">\r\n             <select class=\"border rounded px-2 py-1\" data-role-select=\"${u._id}\">\r\n-              <option value=\"funcionario\" selected>Funcionário</option>\r\n-              <option value=\"admin\">Administrador</option>\r\n+              ${opts}\r\n             </select>\r\n             <button class=\"px-3 py-2 rounded bg-emerald-600 hover:bg-emerald-700 text-white font-medium\"\r\n-                    data-action=\"promote\" data-id=\"${u._id}\">\r\n+                    data-action=\"promote\" data-id=\"${u._id}\" ${disabledByPolicy ? 'disabled' : ''}>\r\n               Adicionar\r\n             </button>\r\n           </div>\r\n         </div>\r\n@@ -208,80 +252,54 @@\n   }\r\n \r\n   function debounce(fn, wait = 300) {\r\n     let t;\r\n-    return (...args) => {\r\n-      clearTimeout(t);\r\n-      t = setTimeout(() => fn(...args), wait);\r\n-    };\r\n+    return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), wait); };\r\n   }\r\n   const debouncedSearch = debounce((val) => {\r\n-    const term = val.trim();\r\n+    const term = (val || '').trim();\r\n     if (term.length === 0) return searchUsers('');\r\n     searchUsers(term);\r\n   }, 300);\r\n \r\n   // ===== Eventos globais =====\r\n   btnAdd?.addEventListener('click', openSearchModal);\r\n \r\n-  // === Fechamento do MODAL EDIT por delegação (+ ESC + backdrop) ===\r\n+  // Fechar modais (delegação + ESC)\r\n   modal.addEventListener('click', (e) => {\r\n-    const clickedBackdrop = (e.target === modal);\r\n-    const clickedCloseX = e.target.closest('#modal-close');\r\n-    const clickedCancel = e.target.closest('#btn-cancelar');\r\n-\r\n-    if (clickedBackdrop || clickedCloseX || clickedCancel) {\r\n-      e.preventDefault();\r\n-      closeModal();\r\n-    }\r\n+    const back = e.target === modal;\r\n+    const x = e.target.closest('#modal-close');\r\n+    const cancel = e.target.closest('#btn-cancelar');\r\n+    if (back || x || cancel) { e.preventDefault(); closeModal(); }\r\n   });\r\n-\r\n-  // Fecha com ESC quando o modal estiver aberto\r\n+  modalSearch.addEventListener('click', (e) => {\r\n+    const back = e.target === modalSearch;\r\n+    const x = e.target.closest('#modal-search-close');\r\n+    const cancel = e.target.closest('#btn-search-cancel');\r\n+    if (back || x || cancel) { e.preventDefault(); closeSearchModal(); }\r\n+  });\r\n   document.addEventListener('keydown', (e) => {\r\n-    if (e.key === 'Escape' && isModalOpen(modal)) {\r\n-      e.preventDefault();\r\n-      closeModal();\r\n-    }\r\n-    if (e.key === 'Escape' && isModalOpen(modalSearch)) {\r\n-      e.preventDefault();\r\n-      closeSearchModal();\r\n-    }\r\n+    if (e.key === 'Escape' && isModalOpen(modal)) closeModal();\r\n+    if (e.key === 'Escape' && isModalOpen(modalSearch)) closeSearchModal();\r\n   });\r\n \r\n-  // Toggle senha + barra de força\r\n+  // Toggle senha + força\r\n   togglePassword.addEventListener('click', () => {\r\n-    if (inputPassword.type === 'password') {\r\n-      inputPassword.type = 'text';\r\n-      togglePassword.textContent = 'Ocultar';\r\n-    } else {\r\n-      inputPassword.type = 'password';\r\n-      togglePassword.textContent = 'Mostrar';\r\n-    }\r\n+    if (inputPassword.type === 'password') { inputPassword.type = 'text'; togglePassword.textContent = 'Ocultar'; }\r\n+    else { inputPassword.type = 'password'; togglePassword.textContent = 'Mostrar'; }\r\n   });\r\n   inputPassword.addEventListener('input', () => {\r\n     const s = passwordScore(inputPassword.value);\r\n     passwordBar.style.width = `${s}%`;\r\n   });\r\n \r\n-  // ===== Eventos do modal de pesquisa =====\r\n-  modalSearch.addEventListener('click', (e) => {\r\n-    const clickedBackdrop = (e.target === modalSearch);\r\n-    const clickedClose = e.target.closest('#modal-search-close');\r\n-    const clickedCancel = e.target.closest('#btn-search-cancel');\r\n-    if (clickedBackdrop || clickedClose || clickedCancel) {\r\n-      e.preventDefault();\r\n-      closeSearchModal();\r\n-    }\r\n-  });\r\n+  // Pesquisa\r\n+  searchInput.addEventListener('input', (e) => debouncedSearch(e.target.value));\r\n \r\n-  searchInput.addEventListener('input', (e) => {\r\n-    debouncedSearch(e.target.value || '');\r\n-  });\r\n-\r\n+  // Aplicar transformação\r\n   searchResults.addEventListener('click', async (e) => {\r\n     const btn = e.target.closest('button[data-action=\"promote\"]');\r\n     if (!btn) return;\r\n-\r\n     const userId = btn.getAttribute('data-id');\r\n     const select = searchResults.querySelector(`select[data-role-select=\"${userId}\"]`);\r\n     const newRole = select?.value || 'funcionario';\r\n \r\n@@ -304,13 +322,12 @@\n       btn.disabled = false;\r\n     }\r\n   });\r\n \r\n-  // ===== Ações da tabela (editar/remover) =====\r\n+  // Tabela\r\n   tabela.addEventListener('click', async (e) => {\r\n     const btn = e.target.closest('button[data-action]');\r\n     if (!btn) return;\r\n-\r\n     const id = btn.getAttribute('data-id');\r\n     const action = btn.getAttribute('data-action');\r\n \r\n     if (action === 'edit') {\r\n@@ -328,18 +345,21 @@\n     if (action === 'delete') {\r\n       if (!confirm('Remover este funcionário?')) return;\r\n       try {\r\n         const res = await fetch(API.remove(id), { method: 'DELETE', headers: headers() });\r\n-        if (!res.ok) throw new Error('Falha ao remover');\r\n+        if (!res.ok) {\r\n+          const j = await res.json().catch(() => ({}));\r\n+          throw new Error(j.message || 'Falha ao remover');\r\n+        }\r\n         await loadFuncionarios();\r\n       } catch (err) {\r\n         console.error(err);\r\n-        alert('Erro ao remover funcionário.');\r\n+        alert(err.message || 'Erro ao remover funcionário.');\r\n       }\r\n     }\r\n   });\r\n \r\n-  // ===== Submit do formulário (editar/criar) =====\r\n+  // Submit Edit\r\n   form.addEventListener('submit', async (e) => {\r\n     e.preventDefault();\r\n \r\n     const payload = {\r\n@@ -370,7 +390,10 @@\n       alert(err.message || 'Erro ao salvar funcionário.');\r\n     }\r\n   });\r\n \r\n-  // Start\r\n-  loadFuncionarios();\r\n+  // Init\r\n+  (async () => {\r\n+    await ensureActorRole();\r\n+    await loadFuncionarios();\r\n+  })();\r\n });\r\n"
                },
                {
                    "date": 1756762995562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,10 @@\n     admin: 'Administrador',\r\n     admin_master: 'Admin Master',\r\n   };\r\n \r\n+  const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n+\r\n   function headers(extra = {}) {\r\n     return {\r\n       'Content-Type': 'application/json',\r\n       'Authorization': `Bearer ${token}`,\r\n@@ -72,25 +74,13 @@\n     return m && !m.classList.contains('hidden');\r\n   }\r\n \r\n   function optionsForActor(actorRole) {\r\n-    if (actorRole === 'admin_master') {\r\n-      return ['funcionario', 'admin', 'admin_master'];\r\n-    }\r\n-    if (actorRole === 'admin') {\r\n-      return ['funcionario']; // admin só pode definir funcionario\r\n-    }\r\n+    if (actorRole === 'admin_master') return ['funcionario', 'admin', 'admin_master'];\r\n+    if (actorRole === 'admin')        return ['funcionario'];\r\n     return [];\r\n   }\r\n \r\n-  function roleTag(role) {\r\n-    const base = 'px-2 py-0.5 rounded border text-xs';\r\n-    if (role === 'admin_master') return `<span class=\"${base} bg-amber-50 text-amber-700 border-amber-200\">Já é admin master</span>`;\r\n-    if (role === 'admin')       return `<span class=\"${base} bg-blue-50 text-blue-700 border-blue-200\">Já é admin</span>`;\r\n-    if (role === 'funcionario') return `<span class=\"${base} bg-emerald-50 text-emerald-700 border-emerald-200\">Já é funcionário</span>`;\r\n-    return '';\r\n-  }\r\n-\r\n   function openModal(mode, data = null) {\r\n     const opts = optionsForActor(ACTOR_ROLE);\r\n     roleSelect.innerHTML = opts.map(v => `<option value=\"${v}\">${ROLE_LABEL[v]}</option>`).join('');\r\n \r\n@@ -142,14 +132,22 @@\n     if (/[^A-Za-z0-9]/.test(pwd)) s += 25;\r\n     return Math.min(100, s);\r\n   }\r\n \r\n+  // Render do quadro (confia na ordenação do backend; mantém fallback)\r\n   function renderTable(funcionarios) {\r\n     if (!Array.isArray(funcionarios) || funcionarios.length === 0) {\r\n       tabela.innerHTML = `<p class=\"text-gray-500\">Nenhum funcionário cadastrado.</p>`;\r\n       return;\r\n     }\r\n \r\n+    // fallback local (se vier fora de ordem)\r\n+    funcionarios.sort((a, b) => {\r\n+      const r = (roleRank[b.role] ?? -1) - (roleRank[a.role] ?? -1);\r\n+      if (r !== 0) return r;\r\n+      return getNome(a).localeCompare(getNome(b), 'pt-BR');\r\n+    });\r\n+\r\n     const rows = funcionarios.map(f => `\r\n       <tr class=\"border-b\">\r\n         <td class=\"py-2 px-4\">${getNome(f) || '-'}</td>\r\n         <td class=\"py-2 px-4\">${f.email || '-'}</td>\r\n@@ -192,9 +190,9 @@\n       tabela.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n     }\r\n   }\r\n \r\n-  // ===== Pesquisa de usuários =====\r\n+  // ===== Pesquisa de usuários (agora backend já não retorna quem está no quadro) =====\r\n   function renderSearchResults(items) {\r\n     if (!Array.isArray(items) || items.length === 0) {\r\n       searchResults.innerHTML = `<div class=\"p-4 text-gray-500\">Nenhum usuário encontrado.</div>`;\r\n       return;\r\n@@ -204,32 +202,24 @@\n \r\n     const html = items.slice(0, 5).map(u => {\r\n       const nome = getNome(u) || '(Sem nome)';\r\n       const doc = u.cpf || u.cnpj || '';\r\n-      const currentRole = u.role || 'cliente';\r\n \r\n-      // select options conforme ator\r\n-      const opts = allowed.map(v => `<option value=\"${v}\" ${v === currentRole ? 'selected' : ''}>${ROLE_LABEL[v]}</option>`).join('');\r\n+      const opts = allowed.map(v => `<option value=\"${v}\">${ROLE_LABEL[v]}</option>`).join('');\r\n \r\n-      // se ator for admin e alvo for admin/admin_master -> disable\r\n-      const disabledByPolicy = (ACTOR_ROLE === 'admin') && (currentRole === 'admin' || currentRole === 'admin_master');\r\n-\r\n-      // botão desabilitado se política bloquear ou se selecionar o mesmo cargo\r\n-      // (checamos em tempo de clique também)\r\n       return `\r\n         <div class=\"p-4 flex flex-col md:flex-row md:items-center gap-3\">\r\n           <div class=\"flex-1\">\r\n             <div class=\"font-medium\">${nome}</div>\r\n             <div class=\"text-sm text-gray-600\">${u.email || '-'}</div>\r\n             <div class=\"text-xs text-gray-500\">${doc ? `Doc: ${doc}` : ''}</div>\r\n-            <div class=\"mt-1\">${roleTag(currentRole)}</div>\r\n           </div>\r\n           <div class=\"flex items-center gap-2\">\r\n             <select class=\"border rounded px-2 py-1\" data-role-select=\"${u._id}\">\r\n               ${opts}\r\n             </select>\r\n             <button class=\"px-3 py-2 rounded bg-emerald-600 hover:bg-emerald-700 text-white font-medium\"\r\n-                    data-action=\"promote\" data-id=\"${u._id}\" ${disabledByPolicy ? 'disabled' : ''}>\r\n+                    data-action=\"promote\" data-id=\"${u._id}\">\r\n               Adicionar\r\n             </button>\r\n           </div>\r\n         </div>\r\n"
                },
                {
                    "date": 1756763481310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,17 +41,12 @@\n     funcionario: 'Funcionário',\r\n     admin: 'Administrador',\r\n     admin_master: 'Admin Master',\r\n   };\r\n-\r\n   const roleRank = { cliente: 0, funcionario: 1, admin: 2, admin_master: 3 };\r\n \r\n   function headers(extra = {}) {\r\n-    return {\r\n-      'Content-Type': 'application/json',\r\n-      'Authorization': `Bearer ${token}`,\r\n-      ...extra,\r\n-    };\r\n+    return { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`, ...extra };\r\n   }\r\n \r\n   async function ensureActorRole() {\r\n     if (ACTOR_ROLE) return ACTOR_ROLE;\r\n@@ -69,28 +64,38 @@\n \r\n   const getNome = (u) =>\r\n     (u?.nome || u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || '').trim();\r\n \r\n-  function isModalOpen(m) {\r\n-    return m && !m.classList.contains('hidden');\r\n-  }\r\n+  function isModalOpen(m) { return m && !m.classList.contains('hidden'); }\r\n \r\n   function optionsForActor(actorRole) {\r\n     if (actorRole === 'admin_master') return ['funcionario', 'admin', 'admin_master'];\r\n     if (actorRole === 'admin')        return ['funcionario'];\r\n     return [];\r\n   }\r\n \r\n+  // helpers bonitos\r\n+  async function confirmAction({ title = 'Atenção', message = 'Tem certeza?', confirmText = 'Confirmar', cancelText = 'Cancelar' }) {\r\n+    return new Promise((resolve) => {\r\n+      // showModal vem de scripts/ui.js\r\n+      window.showModal?.({\r\n+        title, message, confirmText, cancelText,\r\n+        onConfirm: () => resolve(true),\r\n+        onCancel:  () => resolve(false),\r\n+      }) || resolve(window.confirm(message)); // fallback\r\n+    });\r\n+  }\r\n+  function toastOk(msg)    { (window.showToast?.(msg, 'success') ?? alert(msg)); }\r\n+  function toastWarn(msg)  { (window.showToast?.(msg, 'warning') ?? alert(msg)); }\r\n+  function toastError(msg) { (window.showToast?.(msg, 'error') ?? alert(msg)); }\r\n+\r\n   function openModal(mode, data = null) {\r\n     const opts = optionsForActor(ACTOR_ROLE);\r\n     roleSelect.innerHTML = opts.map(v => `<option value=\"${v}\">${ROLE_LABEL[v]}</option>`).join('');\r\n \r\n     if (mode === 'create') {\r\n       modalTitle.textContent = 'Adicionar Funcionário';\r\n-      inputId.value = '';\r\n-      inputNome.value = '';\r\n-      inputEmail.value = '';\r\n-      inputPassword.value = '';\r\n+      inputId.value = ''; inputNome.value = ''; inputEmail.value = ''; inputPassword.value = '';\r\n       roleSelect.value = opts[0] || 'funcionario';\r\n       passwordBar.style.width = '0%';\r\n     } else {\r\n       modalTitle.textContent = 'Editar Funcionário';\r\n@@ -100,48 +105,29 @@\n       inputPassword.value = '';\r\n       roleSelect.value = opts.includes(data.role) ? data.role : (opts[0] || 'funcionario');\r\n       passwordBar.style.width = '0%';\r\n     }\r\n-\r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n+    modal.classList.remove('hidden'); modal.classList.add('flex');\r\n   }\r\n+  function closeModal()      { modal.classList.add('hidden'); modal.classList.remove('flex'); }\r\n+  function openSearchModal() { modalSearch.classList.remove('hidden'); modalSearch.classList.add('flex'); searchInput.value = ''; searchUsers(''); }\r\n+  function closeSearchModal(){ modalSearch.classList.add('hidden'); modalSearch.classList.remove('flex'); }\r\n \r\n-  function closeModal() {\r\n-    modal.classList.add('hidden');\r\n-    modal.classList.remove('flex');\r\n-  }\r\n-\r\n-  function openSearchModal() {\r\n-    modalSearch.classList.remove('hidden');\r\n-    modalSearch.classList.add('flex');\r\n-    searchInput.value = '';\r\n-    searchUsers('');\r\n-  }\r\n-\r\n-  function closeSearchModal() {\r\n-    modalSearch.classList.add('hidden');\r\n-    modalSearch.classList.remove('flex');\r\n-  }\r\n-\r\n   function passwordScore(pwd) {\r\n-    if (!pwd) return 0;\r\n-    let s = 0;\r\n+    if (!pwd) return 0; let s = 0;\r\n     if (pwd.length >= 8) s += 25;\r\n     if (/[A-Z]/.test(pwd) && /[a-z]/.test(pwd)) s += 25;\r\n     if (/\\d/.test(pwd)) s += 25;\r\n     if (/[^A-Za-z0-9]/.test(pwd)) s += 25;\r\n     return Math.min(100, s);\r\n   }\r\n \r\n-  // Render do quadro (confia na ordenação do backend; mantém fallback)\r\n+  // Render com fallback de ordenação (servidor já manda ordenado)\r\n   function renderTable(funcionarios) {\r\n     if (!Array.isArray(funcionarios) || funcionarios.length === 0) {\r\n       tabela.innerHTML = `<p class=\"text-gray-500\">Nenhum funcionário cadastrado.</p>`;\r\n       return;\r\n     }\r\n-\r\n-    // fallback local (se vier fora de ordem)\r\n     funcionarios.sort((a, b) => {\r\n       const r = (roleRank[b.role] ?? -1) - (roleRank[a.role] ?? -1);\r\n       if (r !== 0) return r;\r\n       return getNome(a).localeCompare(getNome(b), 'pt-BR');\r\n@@ -182,31 +168,28 @@\n     tabela.innerHTML = `<p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n     try {\r\n       const res = await fetch(API.list, { headers: headers() });\r\n       if (!res.ok) throw new Error('Falha ao listar funcionários');\r\n-      const data = await res.json();\r\n-      renderTable(data);\r\n+      renderTable(await res.json());\r\n     } catch (e) {\r\n       console.error(e);\r\n       tabela.innerHTML = `<p class=\"text-red-600\">Erro ao carregar funcionários.</p>`;\r\n+      toastError('Não foi possível carregar os funcionários.');\r\n     }\r\n   }\r\n \r\n-  // ===== Pesquisa de usuários (agora backend já não retorna quem está no quadro) =====\r\n+  // ===== Pesquisa (backend já não retorna quem está no quadro) =====\r\n   function renderSearchResults(items) {\r\n     if (!Array.isArray(items) || items.length === 0) {\r\n       searchResults.innerHTML = `<div class=\"p-4 text-gray-500\">Nenhum usuário encontrado.</div>`;\r\n       return;\r\n     }\r\n-\r\n     const allowed = optionsForActor(ACTOR_ROLE);\r\n \r\n     const html = items.slice(0, 5).map(u => {\r\n       const nome = getNome(u) || '(Sem nome)';\r\n       const doc = u.cpf || u.cnpj || '';\r\n-\r\n       const opts = allowed.map(v => `<option value=\"${v}\">${ROLE_LABEL[v]}</option>`).join('');\r\n-\r\n       return `\r\n         <div class=\"p-4 flex flex-col md:flex-row md:items-center gap-3\">\r\n           <div class=\"flex-1\">\r\n             <div class=\"font-medium\">${nome}</div>\r\n@@ -224,38 +207,31 @@\n           </div>\r\n         </div>\r\n       `;\r\n     }).join('');\r\n-\r\n     searchResults.innerHTML = html;\r\n   }\r\n \r\n   async function searchUsers(q) {\r\n     try {\r\n       const res = await fetch(API.searchUsers(q, 5), { headers: headers() });\r\n       if (!res.ok) throw new Error('Falha na busca');\r\n-      const data = await res.json();\r\n-      renderSearchResults(data);\r\n+      renderSearchResults(await res.json());\r\n     } catch (e) {\r\n       console.error(e);\r\n       searchResults.innerHTML = `<div class=\"p-4 text-red-600\">Erro ao buscar usuários.</div>`;\r\n+      toastError('Não foi possível buscar usuários.');\r\n     }\r\n   }\r\n \r\n   function debounce(fn, wait = 300) {\r\n-    let t;\r\n-    return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), wait); };\r\n+    let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), wait); };\r\n   }\r\n-  const debouncedSearch = debounce((val) => {\r\n-    const term = (val || '').trim();\r\n-    if (term.length === 0) return searchUsers('');\r\n-    searchUsers(term);\r\n-  }, 300);\r\n+  const debouncedSearch = debounce((val) => searchUsers((val || '').trim()), 300);\r\n \r\n-  // ===== Eventos globais =====\r\n+  // ===== Eventos globais / modais =====\r\n   btnAdd?.addEventListener('click', openSearchModal);\r\n \r\n-  // Fechar modais (delegação + ESC)\r\n   modal.addEventListener('click', (e) => {\r\n     const back = e.target === modal;\r\n     const x = e.target.closest('#modal-close');\r\n     const cancel = e.target.closest('#btn-cancelar');\r\n@@ -271,80 +247,78 @@\n     if (e.key === 'Escape' && isModalOpen(modal)) closeModal();\r\n     if (e.key === 'Escape' && isModalOpen(modalSearch)) closeSearchModal();\r\n   });\r\n \r\n-  // Toggle senha + força\r\n   togglePassword.addEventListener('click', () => {\r\n     if (inputPassword.type === 'password') { inputPassword.type = 'text'; togglePassword.textContent = 'Ocultar'; }\r\n     else { inputPassword.type = 'password'; togglePassword.textContent = 'Mostrar'; }\r\n   });\r\n-  inputPassword.addEventListener('input', () => {\r\n-    const s = passwordScore(inputPassword.value);\r\n-    passwordBar.style.width = `${s}%`;\r\n-  });\r\n+  inputPassword.addEventListener('input', () => passwordBar.style.width = `${passwordScore(inputPassword.value)}%`);\r\n \r\n-  // Pesquisa\r\n   searchInput.addEventListener('input', (e) => debouncedSearch(e.target.value));\r\n \r\n-  // Aplicar transformação\r\n+  // transformar usuário (selecionado na busca)\r\n   searchResults.addEventListener('click', async (e) => {\r\n     const btn = e.target.closest('button[data-action=\"promote\"]');\r\n     if (!btn) return;\r\n     const userId = btn.getAttribute('data-id');\r\n     const select = searchResults.querySelector(`select[data-role-select=\"${userId}\"]`);\r\n     const newRole = select?.value || 'funcionario';\r\n \r\n+    btn.disabled = true;\r\n     try {\r\n-      btn.disabled = true;\r\n-      const res = await fetch(API.transform, {\r\n-        method: 'POST',\r\n-        headers: headers(),\r\n-        body: JSON.stringify({ userId, role: newRole })\r\n-      });\r\n+      const res = await fetch(API.transform, { method: 'POST', headers: headers(), body: JSON.stringify({ userId, role: newRole }) });\r\n       if (!res.ok) {\r\n         const err = await res.json().catch(() => ({}));\r\n         throw new Error(err.message || 'Falha ao transformar usuário.');\r\n       }\r\n+      toastOk(`Usuário adicionado ao quadro como ${ROLE_LABEL[newRole]}.`);\r\n       await loadFuncionarios();\r\n       closeSearchModal();\r\n     } catch (err) {\r\n-      alert(err.message || 'Erro ao transformar usuário.');\r\n+      console.error(err);\r\n+      toastError(err.message || 'Erro ao transformar usuário.');\r\n     } finally {\r\n       btn.disabled = false;\r\n     }\r\n   });\r\n \r\n-  // Tabela\r\n+  // Ações da tabela (editar/remover)\r\n   tabela.addEventListener('click', async (e) => {\r\n     const btn = e.target.closest('button[data-action]');\r\n     if (!btn) return;\r\n+\r\n     const id = btn.getAttribute('data-id');\r\n     const action = btn.getAttribute('data-action');\r\n \r\n     if (action === 'edit') {\r\n       try {\r\n         const res = await fetch(API.get(id), { headers: headers() });\r\n         if (!res.ok) throw new Error('Falha ao obter funcionário');\r\n-        const data = await res.json();\r\n-        openModal('edit', data);\r\n+        openModal('edit', await res.json());\r\n       } catch (err) {\r\n         console.error(err);\r\n-        alert('Não foi possível abrir o funcionário.');\r\n+        toastError('Não foi possível abrir o funcionário.');\r\n       }\r\n     }\r\n \r\n     if (action === 'delete') {\r\n-      if (!confirm('Remover este funcionário?')) return;\r\n+      const ok = await confirmAction({\r\n+        title: 'Remover do quadro',\r\n+        message: 'Tem certeza que deseja remover este funcionário do quadro? (o usuário volta a ser cliente)',\r\n+        confirmText: 'Remover', cancelText: 'Cancelar'\r\n+      });\r\n+      if (!ok) return;\r\n+\r\n       try {\r\n         const res = await fetch(API.remove(id), { method: 'DELETE', headers: headers() });\r\n-        if (!res.ok) {\r\n-          const j = await res.json().catch(() => ({}));\r\n-          throw new Error(j.message || 'Falha ao remover');\r\n-        }\r\n+        const body = await res.json().catch(() => ({}));\r\n+        if (!res.ok) throw new Error(body.message || 'Falha ao remover');\r\n+        toastOk('Funcionário removido com sucesso.');\r\n         await loadFuncionarios();\r\n       } catch (err) {\r\n         console.error(err);\r\n-        alert(err.message || 'Erro ao remover funcionário.');\r\n+        toastError(err.message || 'Erro ao remover funcionário.');\r\n       }\r\n     }\r\n   });\r\n \r\n@@ -368,17 +342,17 @@\n         method: isCreate ? 'POST' : 'PUT',\r\n         headers: headers(),\r\n         body: JSON.stringify(payload),\r\n       });\r\n-      if (!res.ok) {\r\n-        const errBody = await res.json().catch(() => ({}));\r\n-        throw new Error(errBody.message || 'Falha ao salvar');\r\n-      }\r\n+      const body = await res.json().catch(() => ({}));\r\n+      if (!res.ok) throw new Error(body.message || 'Falha ao salvar');\r\n+\r\n       closeModal();\r\n+      toastOk('Dados do funcionário salvos.');\r\n       await loadFuncionarios();\r\n     } catch (err) {\r\n       console.error(err);\r\n-      alert(err.message || 'Erro ao salvar funcionário.');\r\n+      toastError(err.message || 'Erro ao salvar funcionário.');\r\n     }\r\n   });\r\n \r\n   // Init\r\n"
                },
                {
                    "date": 1756763806753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,22 +73,54 @@\n     return [];\r\n   }\r\n \r\n   // helpers bonitos\r\n-  async function confirmAction({ title = 'Atenção', message = 'Tem certeza?', confirmText = 'Confirmar', cancelText = 'Cancelar' }) {\r\n+  async function confirmAction({\r\n+    title = 'Atenção',\r\n+    message = 'Tem certeza?',\r\n+    confirmText = 'Confirmar',\r\n+    cancelText = 'Cancelar'\r\n+  }) {\r\n     return new Promise((resolve) => {\r\n-      // showModal vem de scripts/ui.js\r\n-      window.showModal?.({\r\n-        title, message, confirmText, cancelText,\r\n-        onConfirm: () => resolve(true),\r\n-        onCancel:  () => resolve(false),\r\n-      }) || resolve(window.confirm(message)); // fallback\r\n+      if (typeof window.showModal === 'function') {\r\n+        window.showModal({\r\n+          title,\r\n+          message,\r\n+          confirmText,\r\n+          cancelText,\r\n+          onConfirm: () => resolve(true),\r\n+          onCancel:  () => resolve(false),\r\n+        });\r\n+      } else {\r\n+        // Fallback só se showModal NÃO existir\r\n+        resolve(window.confirm(message));\r\n+      }\r\n     });\r\n   }\r\n-  function toastOk(msg)    { (window.showToast?.(msg, 'success') ?? alert(msg)); }\r\n-  function toastWarn(msg)  { (window.showToast?.(msg, 'warning') ?? alert(msg)); }\r\n-  function toastError(msg) { (window.showToast?.(msg, 'error') ?? alert(msg)); }\r\n \r\n+  function toastOk(msg) {\r\n+    if (typeof window.showToast === 'function') {\r\n+      window.showToast(msg, 'success');\r\n+    } else {\r\n+      // Fallback só se showToast NÃO existir\r\n+      alert(msg);\r\n+    }\r\n+  }\r\n+  function toastWarn(msg) {\r\n+    if (typeof window.showToast === 'function') {\r\n+      window.showToast(msg, 'warning');\r\n+    } else {\r\n+      alert(msg);\r\n+    }\r\n+  }\r\n+  function toastError(msg) {\r\n+    if (typeof window.showToast === 'function') {\r\n+      window.showToast(msg, 'error');\r\n+    } else {\r\n+      alert(msg);\r\n+    }\r\n+  }\r\n+\r\n   function openModal(mode, data = null) {\r\n     const opts = optionsForActor(ACTOR_ROLE);\r\n     roleSelect.innerHTML = opts.map(v => `<option value=\"${v}\">${ROLE_LABEL[v]}</option>`).join('');\r\n \r\n"
                },
                {
                    "date": 1757177578251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// scripts/admin/admin-funcionarios.js\r\n document.addEventListener('DOMContentLoaded', () => {\r\n   const tabela = document.getElementById('tabela-funcionarios');\r\n   const btnAdd = document.getElementById('btn-add-funcionario');\r\n \r\n"
                },
                {
                    "date": 1757178304698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n   const inputPassword = document.getElementById('edit-password');\r\n   const togglePassword = document.getElementById('toggle-password');\r\n   const roleSelect = document.getElementById('edit-role');\r\n   const passwordBar = document.getElementById('password-bar');\r\n+  const gruposBox = document.getElementById('edit-grupos');\r\n \r\n   // Modal Search\r\n   const modalSearch = document.getElementById('modal-search-user');\r\n   const searchInput = document.getElementById('search-term');\r\n"
                },
                {
                    "date": 1757178401733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,22 +123,24 @@\n   function openModal(mode, data = null) {\r\n     const opts = optionsForActor(ACTOR_ROLE);\r\n     roleSelect.innerHTML = opts.map(v => `<option value=\"${v}\">${ROLE_LABEL[v]}</option>`).join('');\r\n \r\n-    if (mode === 'create') {\r\n-      modalTitle.textContent = 'Adicionar Funcionário';\r\n-      inputId.value = ''; inputNome.value = ''; inputEmail.value = ''; inputPassword.value = '';\r\n-      roleSelect.value = opts[0] || 'funcionario';\r\n-      passwordBar.style.width = '0%';\r\n-    } else {\r\n-      modalTitle.textContent = 'Editar Funcionário';\r\n-      inputId.value = data._id;\r\n-      inputNome.value = getNome(data);\r\n-      inputEmail.value = data.email || '';\r\n-      inputPassword.value = '';\r\n-      roleSelect.value = opts.includes(data.role) ? data.role : (opts[0] || 'funcionario');\r\n-      passwordBar.style.width = '0%';\r\n-    }\r\n+  if (mode === 'create') {\r\n+    modalTitle.textContent = 'Adicionar Funcionário';\r\n+    inputId.value = ''; inputNome.value = ''; inputEmail.value = ''; inputPassword.value = '';\r\n+    roleSelect.value = opts[0] || 'funcionario';\r\n+    passwordBar.style.width = '0%';\r\n+    setGruposSelected([]); // NOVO\r\n+  } else {\r\n+    modalTitle.textContent = 'Editar Funcionário';\r\n+    inputId.value = data._id;\r\n+    inputNome.value = getNome(data);\r\n+    inputEmail.value = data.email || '';\r\n+    inputPassword.value = '';\r\n+    roleSelect.value = opts.includes(data.role) ? data.role : (opts[0] || 'funcionario');\r\n+    passwordBar.style.width = '0%';\r\n+    setGruposSelected(Array.isArray(data.grupos) ? data.grupos : []); // NOVO\r\n+  }\r\n     modal.classList.remove('hidden'); modal.classList.add('flex');\r\n   }\r\n   function closeModal()      { modal.classList.add('hidden'); modal.classList.remove('flex'); }\r\n   function openSearchModal() { modalSearch.classList.remove('hidden'); modalSearch.classList.add('flex'); searchInput.value = ''; searchUsers(''); }\r\n@@ -285,8 +287,18 @@\n     else { inputPassword.type = 'password'; togglePassword.textContent = 'Mostrar'; }\r\n   });\r\n   inputPassword.addEventListener('input', () => passwordBar.style.width = `${passwordScore(inputPassword.value)}%`);\r\n \r\n+  function getSelectedGrupos() {\r\n+    if (!gruposBox) return [];\r\n+    return Array.from(gruposBox.querySelectorAll('input[type=\"checkbox\"]:checked')).map(cb => cb.value);\r\n+  }\r\n+  function setGruposSelected(arr) {\r\n+    if (!gruposBox) return;\r\n+    const sel = new Set(arr || []);\r\n+    gruposBox.querySelectorAll('input[type=\"checkbox\"]').forEach(cb => cb.checked = sel.has(cb.value));\r\n+  }\r\n+\r\n   searchInput.addEventListener('input', (e) => debouncedSearch(e.target.value));\r\n \r\n   // transformar usuário (selecionado na busca)\r\n   searchResults.addEventListener('click', async (e) => {\r\n@@ -361,8 +373,9 @@\n     const payload = {\r\n       nome: inputNome.value.trim(),\r\n       email: inputEmail.value.trim(),\r\n       role: roleSelect.value,\r\n+      grupos: getSelectedGrupos(),\r\n     };\r\n     const pwd = inputPassword.value.trim();\r\n     if (pwd) payload.senha = pwd;\r\n \r\n"
                },
                {
                    "date": 1757197780020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n   const togglePassword = document.getElementById('toggle-password');\r\n   const roleSelect = document.getElementById('edit-role');\r\n   const passwordBar = document.getElementById('password-bar');\r\n   const gruposBox = document.getElementById('edit-grupos');\r\n+  const empresasBox = document.getElementById('edit-empresas');\r\n \r\n   // Modal Search\r\n   const modalSearch = document.getElementById('modal-search-user');\r\n   const searchInput = document.getElementById('search-term');\r\n"
                },
                {
                    "date": 1757197807204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,8 +298,36 @@\n     const sel = new Set(arr || []);\r\n     gruposBox.querySelectorAll('input[type=\"checkbox\"]').forEach(cb => cb.checked = sel.has(cb.value));\r\n   }\r\n \r\n+  // --- Empresas (Lojas) ---\r\n+  async function loadEmpresasOptions() {\r\n+    if (!empresasBox) return;\r\n+    try {\r\n+      const res = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+      if (!res.ok) throw new Error('Falha ao carregar empresas');\r\n+      const stores = await res.json();\r\n+      empresasBox.innerHTML = (stores || []).map(s => `\r\n+        <label class=\"inline-flex items-center gap-2\">\r\n+          <input type=\"checkbox\" value=\"${s._id}\" class=\"rounded border-gray-300\">\r\n+          <span>${s.nome || 'Sem nome'}</span>\r\n+        </label>\r\n+      `).join('');\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      empresasBox.innerHTML = '<p class=\"text-sm text-red-600\">Erro ao carregar empresas.</p>';\r\n+    }\r\n+  }\r\n+  function getSelectedEmpresas() {\r\n+    if (!empresasBox) return [];\r\n+    return Array.from(empresasBox.querySelectorAll('input[type=\"checkbox\"]:checked')).map(cb => cb.value);\r\n+  }\r\n+  function setEmpresasSelected(arr) {\r\n+    if (!empresasBox) return;\r\n+    const sel = new Set(arr || []);\r\n+    empresasBox.querySelectorAll('input[type=\"checkbox\"]').forEach(cb => cb.checked = sel.has(cb.value));\r\n+  }\r\n+\r\n   searchInput.addEventListener('input', (e) => debouncedSearch(e.target.value));\r\n \r\n   // transformar usuário (selecionado na busca)\r\n   searchResults.addEventListener('click', async (e) => {\r\n"
                },
                {
                    "date": 1757197843913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,10 @@\n     modalTitle.textContent = 'Adicionar Funcionário';\r\n     inputId.value = ''; inputNome.value = ''; inputEmail.value = ''; inputPassword.value = '';\r\n     roleSelect.value = opts[0] || 'funcionario';\r\n     passwordBar.style.width = '0%';\r\n-    setGruposSelected([]); // NOVO\r\n+    setGruposSelected([]);\r\n+    setEmpresasSelected([]);\r\n   } else {\r\n     modalTitle.textContent = 'Editar Funcionário';\r\n     inputId.value = data._id;\r\n     inputNome.value = getNome(data);\r\n"
                },
                {
                    "date": 1757197885348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,10 @@\n     inputEmail.value = data.email || '';\r\n     inputPassword.value = '';\r\n     roleSelect.value = opts.includes(data.role) ? data.role : (opts[0] || 'funcionario');\r\n     passwordBar.style.width = '0%';\r\n-    setGruposSelected(Array.isArray(data.grupos) ? data.grupos : []); // NOVO\r\n+    setGruposSelected(Array.isArray(data.grupos) ? data.grupos : []);\r\n+    setEmpresasSelected(Array.isArray(data.empresas) ? data.empresas : []);\r\n   }\r\n     modal.classList.remove('hidden'); modal.classList.add('flex');\r\n   }\r\n   function closeModal()      { modal.classList.add('hidden'); modal.classList.remove('flex'); }\r\n@@ -404,8 +405,9 @@\n       nome: inputNome.value.trim(),\r\n       email: inputEmail.value.trim(),\r\n       role: roleSelect.value,\r\n       grupos: getSelectedGrupos(),\r\n+      empresas: getSelectedEmpresas(),\r\n     };\r\n     const pwd = inputPassword.value.trim();\r\n     if (pwd) payload.senha = pwd;\r\n \r\n"
                },
                {
                    "date": 1757197904080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -434,7 +434,8 @@\n \r\n   // Init\r\n   (async () => {\r\n     await ensureActorRole();\r\n+    await loadEmpresasOptions();\r\n     await loadFuncionarios();\r\n-  })();\r\n+  })()\r\n });\r\n"
                }
            ],
            "date": 1756594569512,
            "name": "Commit-0",
            "content": "document.addEventListener('DOMContentLoaded', () => {\r\n  const container = document.querySelector('.bg-white.rounded-lg.shadow.p-6');\r\n\r\n  async function loadFuncionarios() {\r\n    container.innerHTML = `<h1 class=\"text-2xl font-bold mb-4\">Gerir Funcionários</h1>\r\n      <p class=\"text-gray-600\">Carregando funcionários...</p>`;\r\n\r\n    try {\r\n      const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n      const token = loggedInUser?.token;\r\n\r\n      const res = await fetch(`${API_CONFIG.BASE_URL}/funcionarios`, {\r\n        headers: { 'Authorization': `Bearer ${token}` }\r\n      });\r\n\r\n      if (!res.ok) throw new Error(\"Erro ao carregar funcionários\");\r\n      const funcionarios = await res.json();\r\n\r\n      if (funcionarios.length === 0) {\r\n        container.innerHTML = `<h1 class=\"text-2xl font-bold mb-4\">Gerir Funcionários</h1>\r\n          <p class=\"text-gray-500\">Nenhum funcionário cadastrado.</p>`;\r\n        return;\r\n      }\r\n\r\n      let html = `\r\n        <h1 class=\"text-2xl font-bold mb-4\">Gerir Funcionários</h1>\r\n        <table class=\"min-w-full bg-white border rounded-lg shadow\">\r\n          <thead>\r\n            <tr class=\"bg-gray-200 text-left text-sm font-semibold text-gray-600\">\r\n              <th class=\"py-2 px-4\">Nome</th>\r\n              <th class=\"py-2 px-4\">Email</th>\r\n              <th class=\"py-2 px-4\">Cargo</th>\r\n              <th class=\"py-2 px-4 text-right\">Ações</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            ${funcionarios.map(f => `\r\n              <tr class=\"border-b\">\r\n                <td class=\"py-2 px-4\">${f.nome}</td>\r\n                <td class=\"py-2 px-4\">${f.email}</td>\r\n                <td class=\"py-2 px-4\">${f.role}</td>\r\n                <td class=\"py-2 px-4 text-right\">\r\n                  <button class=\"text-blue-500 hover:text-blue-700 mr-2\" data-id=\"${f._id}\" data-action=\"edit\"><i class=\"fas fa-edit\"></i></button>\r\n                  <button class=\"text-red-500 hover:text-red-700\" data-id=\"${f._id}\" data-action=\"delete\"><i class=\"fas fa-trash\"></i></button>\r\n                </td>\r\n              </tr>\r\n            `).join('')}\r\n          </tbody>\r\n        </table>\r\n      `;\r\n      container.innerHTML = html;\r\n\r\n    } catch (err) {\r\n      console.error(err);\r\n      container.innerHTML = `<p class=\"text-red-500\">Erro ao carregar funcionários.</p>`;\r\n    }\r\n  }\r\n\r\n  // Eventos futuros (editar, excluir)\r\n  container.addEventListener('click', async (e) => {\r\n    const btn = e.target.closest('button[data-action]');\r\n    if (!btn) return;\r\n    const id = btn.dataset.id;\r\n    const action = btn.dataset.action;\r\n\r\n    if (action === 'delete') {\r\n      if (!confirm(\"Deseja realmente excluir este funcionário?\")) return;\r\n      try {\r\n        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n        const token = loggedInUser?.token;\r\n        const res = await fetch(`${API_CONFIG.BASE_URL}/funcionarios/${id}`, {\r\n          method: 'DELETE',\r\n          headers: { 'Authorization': `Bearer ${token}` }\r\n        });\r\n        if (!res.ok) throw new Error(\"Erro ao excluir funcionário\");\r\n        alert(\"Funcionário excluído com sucesso!\");\r\n        loadFuncionarios();\r\n      } catch (err) {\r\n        alert(\"Erro ao excluir funcionário\");\r\n      }\r\n    }\r\n  });\r\n\r\n  loadFuncionarios();\r\n});\r\n"
        }
    ]
}