{
    "sourceFile": "scripts/admin/admin-categorias.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756594184895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756594184895,
            "name": "Commit-0",
            "content": "// Ficheiro: admin-categorias.js (VERSÃO COM CHAMADA DE FUNÇÃO CORRIGIDA)\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // --- Referências ao DOM ---\r\n    const tableBody = document.getElementById('categories-table-body');\r\n    const addCategoryBtn = document.getElementById('add-category-btn');\r\n    const modal = document.getElementById('category-modal');\r\n    const form = document.getElementById('category-form');\r\n    const cancelBtn = document.getElementById('cancel-category-modal-btn');\r\n    const modalTitle = document.getElementById('category-modal-title');\r\n    const categoryNameInput = document.getElementById('category-name');\r\n    const categoryParentSelect = document.getElementById('category-parent');\r\n    const searchInput = document.getElementById('search-category-input');\r\n\r\n    let hierarchicalCategories = [];\r\n    let choicesInstance = null;\r\n    let isEditMode = false;\r\n    let currentEditingId = null;\r\n\r\n    // --- Inicialização do Choices.js ---\r\n    if (categoryParentSelect) {\r\n        choicesInstance = new Choices(categoryParentSelect, {\r\n            removeItemButton: true,\r\n            placeholder: true,\r\n            placeholderValue: 'Selecione uma ou mais categorias',\r\n            searchPlaceholderValue: 'Digite para pesquisar',\r\n            searchFn: (search, record) => {\r\n                if (!window.fuzzysort) return Choices.defaults.searchFn(search, record);\r\n                const results = fuzzysort.go(search, [record.label], {\r\n                    threshold: -10000\r\n                });\r\n                return results.length > 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    // --- Funções do Modal de Edição/Criação ---\r\n    const openModalForNew = () => {\r\n        isEditMode = false;\r\n        currentEditingId = null;\r\n        form.reset();\r\n        modalTitle.textContent = 'Adicionar Nova Categoria';\r\n        choicesInstance.clearStore();\r\n        populateParentCategorySelect();\r\n        choicesInstance.setChoiceByValue([]);\r\n        modal.classList.remove('hidden');\r\n    };\r\n\r\n    const openModalForEdit = (category) => {\r\n        isEditMode = true;\r\n        currentEditingId = category.id;\r\n        form.reset();\r\n        modalTitle.textContent = 'Editar Categoria';\r\n        categoryNameInput.value = category.name;\r\n        choicesInstance.clearStore();\r\n        populateParentCategorySelect();\r\n        const parentId = category.parentId || '';\r\n        choicesInstance.setChoiceByValue(parentId);\r\n        modal.classList.remove('hidden');\r\n    };\r\n\r\n    const closeModal = () => modal.classList.add('hidden');\r\n\r\n    const populateParentCategorySelect = () => {\r\n        const options = [];\r\n        const createOptions = (categories, parentPath = []) => {\r\n            for (const category of categories) {\r\n                if (isEditMode && category._id === currentEditingId) continue;\r\n                const currentPath = [...parentPath, category.nome];\r\n                options.push({\r\n                    value: category._id,\r\n                    label: currentPath.join(' > ')\r\n                });\r\n                if (category.children && category.children.length > 0) {\r\n                    createOptions(category.children, currentPath);\r\n                }\r\n            }\r\n        };\r\n        createOptions(hierarchicalCategories);\r\n        choicesInstance.setChoices(options, 'value', 'label', false);\r\n    };\r\n\r\n    // --- Lógica de Renderização e Filtragem da Tabela ---\r\n    const renderRows = (categories, depth = 0) => {\r\n        for (const category of categories) {\r\n            const row = document.createElement('tr');\r\n            row.className = 'bg-white border-b hover:bg-gray-50';\r\n            const parentId = category.parent ? String(category.parent) : '';\r\n            row.innerHTML = `\r\n                <th scope=\"row\" class=\"px-6 py-4 font-medium text-gray-900 whitespace-nowrap\" style=\"padding-left: ${1.5 + depth * 1.5}rem;\">\r\n                    ${'—'.repeat(depth)} ${category.nome}\r\n                </th>\r\n                <td class=\"px-6 py-4 text-center\">\r\n                    <button class=\"edit-btn font-medium text-blue-600 hover:underline mr-3\" \r\n                            data-id=\"${category._id}\" \r\n                            data-name=\"${category.nome}\" \r\n                            data-parent-id=\"${parentId}\">\r\n                        Editar\r\n                    </button>\r\n                    <button class=\"delete-btn font-medium text-red-600 hover:underline\"\r\n                            data-id=\"${category._id}\"\r\n                            data-name=\"${category.nome}\">\r\n                        Apagar\r\n                    </button>\r\n                </td>\r\n            `;\r\n            tableBody.appendChild(row);\r\n            if (category.children && category.children.length > 0) {\r\n                renderRows(category.children, depth + 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    const filterCategories = (categories, searchTerm) => {\r\n        return categories.reduce((acc, category) => {\r\n            const nameMatches = category.nome.toLowerCase().includes(searchTerm);\r\n            const filteredChildren = category.children ? filterCategories(category.children, searchTerm) : [];\r\n            if (nameMatches || filteredChildren.length > 0) {\r\n                acc.push({ ...category,\r\n                    children: filteredChildren\r\n                });\r\n            }\r\n            return acc;\r\n        }, []);\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        const searchTerm = searchInput.value.toLowerCase().trim();\r\n        tableBody.innerHTML = '';\r\n        if (!searchTerm) {\r\n            renderRows(hierarchicalCategories);\r\n            return;\r\n        }\r\n        const filteredData = filterCategories(hierarchicalCategories, searchTerm);\r\n        renderRows(filteredData);\r\n    };\r\n\r\n    // --- Lógica de Carregamento Inicial ---\r\n    async function fetchAndDisplayCategories() {\r\n        if (!tableBody) return;\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.BASE_URL}/categories/hierarchical`);\r\n            if (!response.ok) throw new Error('Falha ao buscar as categorias.');\r\n            hierarchicalCategories = await response.json();\r\n            handleSearch();\r\n        } catch (error) {\r\n            console.error(error);\r\n            tableBody.innerHTML = `<tr><td colspan=\"2\" class=\"text-center py-4 text-red-500\">Erro ao carregar categorias.</td></tr>`;\r\n        }\r\n    }\r\n\r\n    // --- Lógica de Submissão do Formulário ---\r\n    form.addEventListener('submit', async (event) => {\r\n        event.preventDefault();\r\n        const submitButton = document.getElementById('save-category-modal-btn');\r\n        submitButton.disabled = true;\r\n        const selectedParent = choicesInstance.getValue(true);\r\n        const parentId = Array.isArray(selectedParent) ? selectedParent[0] : selectedParent;\r\n        const categoryData = {\r\n            nome: categoryNameInput.value,\r\n            parent: parentId || null\r\n        };\r\n        try {\r\n            if (isEditMode) {\r\n                const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                const token = loggedInUser?.token;\r\n                const response = await fetch(`${API_CONFIG.BASE_URL}/categories/${currentEditingId}`, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${token}`\r\n                    },\r\n                    body: JSON.stringify(categoryData)\r\n                });\r\n                const result = await response.json();\r\n                if (!response.ok) throw new Error(result.message);\r\n            } else {\r\n                const selectedParentIds = choicesInstance.getValue(true);\r\n                if (selectedParentIds.length === 0) {\r\n                    await createCategory(categoryData.nome, null);\r\n                } else {\r\n                    const creationPromises = selectedParentIds.map(pid => createCategory(categoryData.nome, pid));\r\n                    await Promise.all(creationPromises);\r\n                }\r\n            }\r\n            const successMessage = isEditMode ? 'Categoria atualizada com sucesso!' : 'Categoria(s) adicionada(s) com sucesso!';\r\n            showModal({\r\n                title: 'Sucesso!',\r\n                message: successMessage,\r\n                confirmText: 'OK'\r\n            });\r\n            closeModal();\r\n            fetchAndDisplayCategories();\r\n        } catch (error) {\r\n            showModal({\r\n                title: 'Erro',\r\n                message: error.message,\r\n                confirmText: 'Tentar Novamente'\r\n            });\r\n        } finally {\r\n            submitButton.disabled = false;\r\n        }\r\n    });\r\n\r\n    async function createCategory(name, parentId) {\r\n        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n        const token = loggedInUser?.token;\r\n        const response = await fetch(`${API_CONFIG.BASE_URL}/categories`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({\r\n                nome: name,\r\n                parent: parentId\r\n            })\r\n        });\r\n        const result = await response.json();\r\n        if (!response.ok) {\r\n            if (result.message && result.message.includes('duplicada')) {\r\n                throw new Error(`A categoria \"${name}\" já existe nesse grupo.`);\r\n            }\r\n            throw new Error(result.message || 'Falha ao criar categoria.');\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // --- Event Listeners ---\r\n    addCategoryBtn.addEventListener('click', openModalForNew);\r\n    cancelBtn.addEventListener('click', closeModal);\r\n    searchInput.addEventListener('input', handleSearch);\r\n\r\n    tableBody.addEventListener('click', (event) => {\r\n        const editButton = event.target.closest('.edit-btn');\r\n        const deleteButton = event.target.closest('.delete-btn');\r\n        if (editButton) {\r\n            const category = {\r\n                id: editButton.dataset.id,\r\n                name: editButton.dataset.name,\r\n                parentId: editButton.dataset.parentId,\r\n            };\r\n            openModalForEdit(category);\r\n        } else if (deleteButton) {\r\n            const categoryId = deleteButton.dataset.id;\r\n            const categoryName = deleteButton.dataset.name;\r\n            \r\n            // CORREÇÃO AQUI: Chamando a função showModal com o nome correto\r\n            showModal({\r\n                title: 'Confirmar Exclusão',\r\n                message: `Tem a certeza de que deseja apagar a categoria \"${categoryName}\"? Esta ação não pode ser desfeita.`,\r\n                confirmText: 'Apagar',\r\n                cancelText: 'Cancelar',\r\n                onConfirm: async () => {\r\n                    try {\r\n                        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                        const token = loggedInUser?.token;\r\n                        const response = await fetch(`${API_CONFIG.BASE_URL}/categories/${categoryId}`, {\r\n                            method: 'DELETE',\r\n                            headers: {\r\n                                'Authorization': `Bearer ${token}`\r\n                            }\r\n                        });\r\n                        const result = await response.json();\r\n                        if (!response.ok) {\r\n                            throw new Error(result.message);\r\n                        }\r\n                        showModal({\r\n                            title: 'Sucesso!',\r\n                            message: result.message,\r\n                            confirmText: 'OK'\r\n                        });\r\n                        fetchAndDisplayCategories();\r\n                    } catch (error) {\r\n                        showModal({\r\n                            title: 'Erro ao Apagar',\r\n                            message: error.message,\r\n                            confirmText: 'OK'\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    // --- Carga Inicial ---\r\n    fetchAndDisplayCategories();\r\n});"
        }
    ]
}