{
    "sourceFile": "scripts/admin/admin-entregas.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756594095377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756594095377,
            "name": "Commit-0",
            "content": "document.addEventListener('DOMContentLoaded', () => {\r\n    // --- REFERÊNCIAS GERAIS E LÓGICA DAS ABAS ---\r\n    const tabs = document.querySelectorAll('.tab-link');\r\n    const contents = {\r\n        veiculos: document.getElementById('content-veiculos'),\r\n        mapa: document.getElementById('content-mapa')\r\n    };\r\n\r\n    if (tabs.length > 0) {\r\n        tabs.forEach(tab => {\r\n            tab.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                tabs.forEach(t => {\r\n                    t.classList.remove('border-primary', 'text-primary');\r\n                    t.classList.add('border-transparent', 'text-gray-500', 'hover:border-gray-300');\r\n                });\r\n                e.target.classList.add('border-primary', 'text-primary');\r\n                e.target.classList.remove('border-transparent', 'text-gray-500', 'hover:border-gray-300');\r\n                \r\n                Object.values(contents).forEach(c => {\r\n                    if(c) c.classList.add('hidden');\r\n                });\r\n                \r\n                const contentId = e.target.id.replace('tab-', 'content-');\r\n                const contentElement = document.getElementById(contentId);\r\n                if(contentElement) contentElement.classList.remove('hidden');\r\n\r\n                if (contentId === 'content-mapa' && map) {\r\n                    setTimeout(() => {\r\n                        map.invalidateSize();\r\n                    }, 100);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // ==========================================================\r\n    // ================= LÓGICA ABA VEÍCULOS ====================\r\n    // ==========================================================\r\n    const vehiclesTableBody = document.getElementById('vehicles-table-body');\r\n    const vehicleModal = document.getElementById('vehicle-modal');\r\n    const vehicleForm = document.getElementById('vehicle-form');\r\n    const addVehicleBtn = document.getElementById('add-vehicle-btn');\r\n    const cancelVehicleBtn = document.getElementById('cancel-vehicle-modal-btn');\r\n    const vehicleModalTitle = document.getElementById('vehicle-modal-title');\r\n    const hiddenVehicleId = document.getElementById('vehicle-id');\r\n\r\n    const openVehicleModal = (vehicle = null) => {\r\n        if (!vehicleForm) return;\r\n        vehicleForm.reset();\r\n        if (vehicle) {\r\n            vehicleModalTitle.textContent = 'Editar Veículo';\r\n            hiddenVehicleId.value = vehicle._id;\r\n            document.getElementById('vehicle-tipo').value = vehicle.tipo;\r\n            document.getElementById('vehicle-pesoMax').value = vehicle.pesoMax;\r\n            document.getElementById('vehicle-taxaMin').value = vehicle.taxaMin;\r\n            document.getElementById('vehicle-taxaKm').value = vehicle.taxaKm;\r\n        } else {\r\n            vehicleModalTitle.textContent = 'Adicionar Veículo';\r\n            hiddenVehicleId.value = '';\r\n        }\r\n        vehicleModal.classList.remove('hidden');\r\n    };\r\n    const closeVehicleModal = () => vehicleModal.classList.add('hidden');\r\n\r\n    async function fetchAndRenderVehicles() {\r\n        if (!vehiclesTableBody) return;\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.BASE_URL}/vehicles`);\r\n            const vehicles = await response.json();\r\n            vehiclesTableBody.innerHTML = '';\r\n            if (vehicles.length === 0) {\r\n                vehiclesTableBody.innerHTML = `<tr><td colspan=\"5\" class=\"text-center py-10 text-gray-400\">Nenhum veículo cadastrado.</td></tr>`;\r\n                return;\r\n            }\r\n            vehicles.forEach(v => {\r\n                const row = `\r\n                    <tr class=\"bg-white border-b hover:bg-gray-50\">\r\n                        <td class=\"px-6 py-4 font-medium\">${v.tipo}</td>\r\n                        <td class=\"px-6 py-4\">${v.pesoMax} kg</td>\r\n                        <td class=\"px-6 py-4\">R$ ${v.taxaMin.toFixed(2).replace('.', ',')}</td>\r\n                        <td class=\"px-6 py-4\">R$ ${v.taxaKm.toFixed(2).replace('.', ',')}</td>\r\n                        <td class=\"px-6 py-4 text-center\">\r\n                            <button data-action=\"edit-vehicle\" data-vehicle='${JSON.stringify(v)}' class=\"font-medium text-blue-600 hover:underline mr-3\">Editar</button>\r\n                            <button data-action=\"delete-vehicle\" data-id=\"${v._id}\" class=\"font-medium text-red-600 hover:underline\">Apagar</button>\r\n                        </td>\r\n                    </tr>`;\r\n                vehiclesTableBody.innerHTML += row;\r\n            });\r\n        } catch (error) { console.error('Erro ao buscar veículos:', error); }\r\n    }\r\n\r\n    if(vehicleForm) {\r\n        vehicleForm.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            const id = hiddenVehicleId.value;\r\n            const method = id ? 'PUT' : 'POST';\r\n            const url = id ? `${API_CONFIG.BASE_URL}/vehicles/${id}` : `${API_CONFIG.BASE_URL}/vehicles`;\r\n            const body = {\r\n                tipo: document.getElementById('vehicle-tipo').value,\r\n                pesoMax: document.getElementById('vehicle-pesoMax').value,\r\n                taxaMin: document.getElementById('vehicle-taxaMin').value,\r\n                taxaKm: document.getElementById('vehicle-taxaKm').value\r\n            };\r\n            const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n            const token = loggedInUser?.token;\r\n            await fetch(url, { method, headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify(body) });\r\n            closeVehicleModal();\r\n            fetchAndRenderVehicles();\r\n        });\r\n    }\r\n\r\n    if (addVehicleBtn) addVehicleBtn.addEventListener('click', () => openVehicleModal());\r\n    if (cancelVehicleBtn) cancelVehicleBtn.addEventListener('click', closeVehicleModal);\r\n    if (vehiclesTableBody) {\r\n        vehiclesTableBody.addEventListener('click', (e) => {\r\n            const action = e.target.dataset.action;\r\n            if (action === 'edit-vehicle') {\r\n                openVehicleModal(JSON.parse(e.target.dataset.vehicle));\r\n            } else if (action === 'delete-vehicle') {\r\n                showModal({\r\n                    title: 'Confirmar Exclusão', message: 'Tem a certeza de que deseja apagar este veículo?', confirmText: 'Sim, apagar', cancelText: 'Cancelar',\r\n                    onConfirm: async () => {\r\n                        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                        const token = loggedInUser?.token;\r\n                        await fetch(`${API_CONFIG.BASE_URL}/vehicles/${e.target.dataset.id}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${token}` } });\r\n                        fetchAndRenderVehicles();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    // ==========================================================\r\n    // =================== LÓGICA ABA MAPA ======================\r\n    // ==========================================================\r\n    const storeSelect = document.getElementById('store-select');\r\n    const raioInput = document.getElementById('raio-input');\r\n    const raioControls = document.getElementById('raio-controls');\r\n    const bairroControls = document.getElementById('bairro-controls');\r\n    const saveZoneBtn = document.getElementById('save-zone-btn');\r\n    const cancelZoneBtn = document.getElementById('cancel-zone-btn'); // botão que deve existir no HTML\r\n    const areaTypeRadios = document.querySelectorAll('input[name=\"area_type\"]');\r\n    const bairroSearchInput = document.getElementById('bairro-search');\r\n    const bairrosListContainer = document.getElementById('bairros-list');\r\n    const selectAllBtn = document.getElementById('select-all-bairros');\r\n    const deselectAllBtn = document.getElementById('deselect-all-bairros');\r\n    \r\n    let map = null;\r\n    let marker = null;\r\n    let allStores = [];\r\n    let allBairrosFeatures = [];\r\n    let bairrosLayerGroup = null;\r\n    let raiosLayerGroup = null;\r\n    let editingZoneId = null; // null = criar; id = editar\r\n\r\n    function resetZoneForm() {\r\n        const nomeInput = document.getElementById('zone-name');\r\n        if (nomeInput) nomeInput.value = '';\r\n        const gratisCheckbox = document.getElementById('zone-free');\r\n        if (gratisCheckbox) gratisCheckbox.checked = false;\r\n        document.querySelectorAll('.bairro-checkbox').forEach(cb => cb.checked = false);\r\n        if (raioInput) raioInput.value = '';\r\n\r\n        if (raiosLayerGroup) raiosLayerGroup.clearLayers();\r\n        if (bairrosLayerGroup) bairrosLayerGroup.clearLayers();\r\n\r\n        // volta pro modo padrão (Raio)\r\n        const radioRaio = document.querySelector('input[name=\"area_type\"][value=\"raio\"]');\r\n        if (radioRaio) radioRaio.checked = true;\r\n        raioControls.classList.remove('hidden');\r\n        bairroControls.classList.add('hidden');\r\n\r\n        editingZoneId = null;\r\n    }\r\n\r\n    async function initializeMapaTab() {\r\n        if (!document.getElementById('map')) return;\r\n\r\n        map = L.map('map').setView([-22.9068, -43.1729], 11);\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        }).addTo(map);\r\n\r\n        bairrosLayerGroup = L.layerGroup().addTo(map);\r\n        raiosLayerGroup = L.layerGroup().addTo(map);\r\n\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n            allStores = await response.json();\r\n            if (storeSelect) {\r\n                storeSelect.innerHTML = '<option value=\"\">Selecione uma loja...</option>';\r\n                allStores.forEach(store => {\r\n                    storeSelect.innerHTML += `<option value=\"${store._id}\">${store.nome}</option>`;\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error('Erro ao buscar lojas:', error);\r\n        }\r\n\r\n        await loadBairrosData();\r\n    }\r\n\r\n    async function loadBairrosData() {\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.SERVER_URL}/data/bairros_rio.geojson`);\r\n            const geojsonData = await response.json();\r\n\r\n            allBairrosFeatures = (geojsonData.features || []).filter(\r\n                feature => feature.properties && feature.properties.NOME\r\n            );\r\n            allBairrosFeatures.sort((a, b) =>\r\n                a.properties.NOME.localeCompare(b.properties.NOME)\r\n            );\r\n\r\n            populateBairrosList();\r\n        } catch (error) {\r\n            console.error(\"Erro ao carregar o ficheiro GeoJSON dos bairros:\", error);\r\n            if (bairrosListContainer) {\r\n                bairrosListContainer.innerHTML = '<p class=\"text-red-500\">Falha ao carregar bairros.</p>';\r\n            }\r\n        }\r\n    }\r\n\r\n    function populateBairrosList() {\r\n        if (!bairrosListContainer) return;\r\n        bairrosListContainer.innerHTML = '';\r\n\r\n        allBairrosFeatures.forEach(bairro => {\r\n            const bairroName = bairro.properties.NOME;\r\n            // escapando valores simples pode ser necessário se nomes tiverem aspas; assumimos nomes simples\r\n            const checkboxHtml = `\r\n                <label class=\"flex items-center cursor-pointer bairro-item\">\r\n                    <input type=\"checkbox\" data-bairro-name=\"${bairroName}\" class=\"form-checkbox h-4 w-4 text-primary rounded bairro-checkbox\">\r\n                    <span class=\"ml-2 text-gray-800\">${bairroName}</span>\r\n                </label>\r\n            `;\r\n            bairrosListContainer.innerHTML += checkboxHtml;\r\n        });\r\n    }\r\n\r\n    function updateBairroOnMap(bairroName, isSelected) {\r\n        const feature = allBairrosFeatures.find(f => f.properties.NOME === bairroName);\r\n        if (!feature) return;\r\n\r\n        if (isSelected) {\r\n            const layer = L.geoJSON(feature, {\r\n                style: { color: '#007BFF', weight: 2, fillOpacity: 0.3 }\r\n            });\r\n            // marcar o layer com o nome do bairro para permitir remoção posterior\r\n            layer.bairroName = bairroName;\r\n            bairrosLayerGroup.addLayer(layer);\r\n        } else {\r\n            // remove layers correspondentes\r\n            bairrosLayerGroup.eachLayer(layer => {\r\n                if (layer.bairroName === bairroName) {\r\n                    bairrosLayerGroup.removeLayer(layer);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    async function geocodeCep(store) {\r\n        const fullAddress = `${store.endereco || ''}, ${store.cep || ''}`;\r\n        if (fullAddress.trim() === ',') return null;\r\n        const queryString = encodeURIComponent(fullAddress);\r\n        const url = `https://nominatim.openstreetmap.org/search?q=${queryString}&countrycodes=br&format=json&limit=1`;\r\n\r\n        try {\r\n            const response = await fetch(url);\r\n            if (!response.ok) return null;\r\n            const data = await response.json();\r\n            if (data && data.length > 0) {\r\n                return { lat: parseFloat(data[0].lat), lng: parseFloat(data[0].lon) };\r\n            }\r\n            return null;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async function renderZones(storeId) {\r\n        const container = document.getElementById('zones-list');\r\n        if (!container) return;\r\n\r\n        container.innerHTML = '';\r\n        if (!storeId) {\r\n            container.innerHTML = '<p class=\"text-gray-500\">Selecione uma loja para ver as zonas configuradas.</p>';\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.BASE_URL}/delivery-zones/by-store/${storeId}`);\r\n            if (!response.ok) {\r\n                container.innerHTML = '<p class=\"text-gray-500\">Nenhuma zona configurada ainda.</p>';\r\n                return;\r\n            }\r\n\r\n            const json = await response.json();\r\n            const zones = Array.isArray(json) ? json : (json ? [json] : []);\r\n\r\n            if (zones.length === 0) {\r\n                container.innerHTML = '<p class=\"text-gray-500\">Nenhuma zona configurada ainda.</p>';\r\n                return;\r\n            }\r\n\r\n            zones.forEach(zone => {\r\n                const row = document.createElement('div');\r\n                row.className = 'p-2 border-b flex justify-between items-center text-sm';\r\n                row.innerHTML = `\r\n                    <div>\r\n                        <div><b>Nome:</b> ${zone.nome}</div>\r\n                        <div><b>Tipo:</b> ${zone.tipo}</div>\r\n                        ${zone.tipo === 'raio'\r\n                            ? `<div><b>Raio:</b> ${Number(zone.raioKm) || 0} km</div>`\r\n                            : `<div><b>Bairros:</b> ${Array.isArray(zone.bairros) ? zone.bairros.join(', ') : ''}</div>`\r\n                        }\r\n                        <div><b>Entrega:</b> ${zone.gratis ? 'Grátis' : 'Paga'}</div>\r\n                    </div>\r\n                    <div class=\"flex items-center gap-3\">\r\n                        <button class=\"text-blue-600 hover:underline\" \r\n                            data-action=\"edit\" \r\n                            data-zone='${JSON.stringify(zone)}'>Editar</button>\r\n                        <button class=\"text-red-600 hover:underline\" \r\n                            data-id=\"${zone._id}\" \r\n                            data-action=\"delete\">Excluir</button>\r\n                    </div>\r\n                `;\r\n                container.appendChild(row);\r\n            });\r\n\r\n            // DELETE\r\n            container.querySelectorAll('button[data-action=\"delete\"]').forEach(btn => {\r\n                btn.addEventListener('click', async () => {\r\n                    const id = btn.dataset.id;\r\n                    showModal({\r\n                        title: 'Confirmar Exclusão',\r\n                        message: 'Tem certeza que deseja excluir esta zona?',\r\n                        confirmText: 'Sim, excluir',\r\n                        cancelText: 'Cancelar',\r\n                        onConfirm: async () => {\r\n                            const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                            const token = loggedInUser?.token;\r\n                            await fetch(`${API_CONFIG.BASE_URL}/delivery-zones/${id}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${token}` } });\r\n                            await renderZones(storeId);\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n\r\n            // EDITAR\r\n            container.querySelectorAll('button[data-action=\"edit\"]').forEach(btn => {\r\n                btn.addEventListener('click', async () => {\r\n                    const zone = JSON.parse(btn.dataset.zone);\r\n                    editingZoneId = zone._id;\r\n\r\n                    // reset mínimo e limpa camadas antigas antes de preencher\r\n                    document.getElementById('zone-name').value = zone.nome || '';\r\n                    document.getElementById('zone-free').checked = !!zone.gratis;\r\n                    document.querySelectorAll('.bairro-checkbox').forEach(cb => cb.checked = false);\r\n                    if (raioInput) raioInput.value = '';\r\n\r\n                    if (raiosLayerGroup) raiosLayerGroup.clearLayers();\r\n                    if (bairrosLayerGroup) bairrosLayerGroup.clearLayers();\r\n\r\n                    // marca o tipo e ajusta controles\r\n                    const tipoRadio = document.querySelector(`input[name=\"area_type\"][value=\"${zone.tipo}\"]`);\r\n                    if (tipoRadio) tipoRadio.checked = true;\r\n                    raioControls.classList.toggle('hidden', zone.tipo !== 'raio');\r\n                    bairroControls.classList.toggle('hidden', zone.tipo !== 'bairro');\r\n\r\n                    // caso raio\r\n                    if (zone.tipo === 'raio') {\r\n                        if (raioInput) raioInput.value = zone.raioKm || 0;\r\n\r\n                        if (marker && Number(zone.raioKm) > 0) {\r\n                            const rMeters = Number(zone.raioKm) * 1000;\r\n                            const circleLayer = L.circle(marker.getLatLng(), { radius: rMeters, color: '#007BFF' });\r\n                            raiosLayerGroup.addLayer(circleLayer);\r\n                            map.fitBounds(circleLayer.getBounds());\r\n                        }\r\n                    }\r\n\r\n                    // caso bairros\r\n                    if (zone.tipo === 'bairro' && Array.isArray(zone.bairros)) {\r\n                        zone.bairros.forEach(bairroName => {\r\n                            const checkbox = document.querySelector(`.bairro-checkbox[data-bairro-name=\"${bairroName}\"]`);\r\n                            if (checkbox) {\r\n                                checkbox.checked = true;\r\n                            }\r\n                            updateBairroOnMap(bairroName, true);\r\n                        });\r\n\r\n                        // centraliza para os layers adicionados\r\n                        const layers = bairrosLayerGroup.getLayers();\r\n                        if (layers.length > 0) {\r\n                            const group = L.featureGroup(layers);\r\n                            map.fitBounds(group.getBounds());\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n        } catch (err) {\r\n            console.error('Erro ao carregar zonas:', err);\r\n            container.innerHTML = '<p class=\"text-red-500\">Erro ao carregar zonas.</p>';\r\n        }\r\n    }\r\n\r\n\r\n    if (storeSelect) {\r\n        storeSelect.addEventListener('change', async () => {\r\n            const storeId = storeSelect.value;\r\n\r\n            // RESET TOTAL do formulário para começar nova zona (sempre Raio + zerado)\r\n            resetZoneForm();\r\n\r\n            if (!storeId) {\r\n                if (marker) {\r\n                    map.removeLayer(marker);\r\n                    marker = null;\r\n                }\r\n                await renderZones('');\r\n                return;\r\n            }\r\n\r\n            // encontra a loja\r\n            const selectedStore = allStores.find(s => s._id === storeId);\r\n            let coords = null;\r\n\r\n            if (selectedStore && selectedStore.latitude && selectedStore.longitude) {\r\n                coords = { lat: selectedStore.latitude, lng: selectedStore.longitude };\r\n            } else if (selectedStore) {\r\n                coords = await geocodeCep(selectedStore);\r\n            }\r\n\r\n            if (!coords) {\r\n                showModal({\r\n                    title: 'Atenção',\r\n                    message: 'Não foi possível encontrar a localização para esta loja.',\r\n                    confirmText: 'OK'\r\n                });\r\n                // ainda renderiza a lista para gerenciamento\r\n                await renderZones(storeId);\r\n                return;\r\n            }\r\n\r\n            // posiciona no mapa\r\n            map.setView([coords.lat, coords.lng], 15);\r\n            if (marker) {\r\n                marker.setLatLng([coords.lat, coords.lng]);\r\n            } else {\r\n                marker = L.marker([coords.lat, coords.lng]).addTo(map);\r\n            }\r\n            marker.bindPopup(`<b>${selectedStore.nome}</b>`).openPopup();\r\n\r\n            // NÃO desenhar automaticamente zonas existentes aqui: apenas exibir lista.\r\n            await renderZones(storeId);\r\n        });\r\n    }\r\n\r\n\r\n    function updateMapVisualization() {\r\n        if (raiosLayerGroup) raiosLayerGroup.clearLayers();\r\n\r\n        const tipoRaio = document.querySelector('input[name=\"area_type\"][value=\"raio\"]');\r\n        if (tipoRaio && tipoRaio.checked && marker) {\r\n            const radius = parseFloat(raioInput.value) * 1000;\r\n            if (radius > 0) {\r\n                const circleLayer = L.circle(marker.getLatLng(), { radius: radius });\r\n                raiosLayerGroup.addLayer(circleLayer);\r\n                map.fitBounds(circleLayer.getBounds());\r\n            }\r\n        }\r\n    }\r\n\r\n    if (raioInput) raioInput.addEventListener('input', updateMapVisualization);\r\n    if (areaTypeRadios) {\r\n        areaTypeRadios.forEach(radio => radio.addEventListener('change', (e) => {\r\n            // alterna UI\r\n            raioControls.classList.toggle('hidden', e.target.value !== 'raio');\r\n            bairroControls.classList.toggle('hidden', e.target.value !== 'bairro');\r\n\r\n            // limpa camadas do tipo não selecionado\r\n            if (e.target.value === 'raio') {\r\n                if (bairrosLayerGroup) bairrosLayerGroup.clearLayers();\r\n            } else {\r\n                if (raiosLayerGroup) raiosLayerGroup.clearLayers();\r\n            }\r\n\r\n            updateMapVisualization();\r\n        }));\r\n    }\r\n    \r\n    if (bairroSearchInput) {\r\n        bairroSearchInput.addEventListener('input', () => {\r\n            const searchTerm = bairroSearchInput.value.toLowerCase();\r\n            document.querySelectorAll('.bairro-item').forEach(item => {\r\n                const name = item.querySelector('span').textContent.toLowerCase();\r\n                item.style.display = name.includes(searchTerm) ? '' : 'none';\r\n            });\r\n        });\r\n    }\r\n\r\n    if (selectAllBtn) {\r\n        selectAllBtn.addEventListener('click', () => {\r\n            document.querySelectorAll('.bairro-checkbox').forEach(cb => {\r\n                if (!cb.checked) {\r\n                    cb.checked = true;\r\n                    updateBairroOnMap(cb.dataset.bairroName, true);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    if (deselectAllBtn) {\r\n        deselectAllBtn.addEventListener('click', () => {\r\n            if (bairrosLayerGroup) bairrosLayerGroup.clearLayers();\r\n            document.querySelectorAll('.bairro-checkbox').forEach(cb => {\r\n                cb.checked = false;\r\n            });\r\n        });\r\n    }\r\n\r\n    if (bairrosListContainer) {\r\n        bairrosListContainer.addEventListener('change', (e) => {\r\n            if (e.target.classList.contains('bairro-checkbox')) {\r\n                const name = e.target.dataset.bairroName;\r\n                const isSelected = e.target.checked;\r\n                updateBairroOnMap(name, isSelected);\r\n            }\r\n        });\r\n    }\r\n\r\n    // SALVAR ZONA (POST ou PUT dependendo do modo)\r\n    if (saveZoneBtn) {\r\n        saveZoneBtn.addEventListener('click', async () => {\r\n            const storeId = storeSelect ? storeSelect.value : '';\r\n            if (!storeId) {\r\n                return showModal({ title: 'Atenção', message: 'Selecione uma loja primeiro.', confirmText: 'OK' });\r\n            }\r\n\r\n            const nomeInput = document.getElementById('zone-name');\r\n            const nome = nomeInput ? nomeInput.value.trim() : '';\r\n            if (!nome) {\r\n                return showModal({ title: 'Atenção', message: 'Informe um nome para a zona.', confirmText: 'OK' });\r\n            }\r\n\r\n            const tipoSelecionado = document.querySelector('input[name=\"area_type\"]:checked');\r\n            const tipo = tipoSelecionado ? tipoSelecionado.value : 'raio';\r\n\r\n            const selectedBairros = [];\r\n            if (tipo === 'bairro') {\r\n                document.querySelectorAll('.bairro-checkbox:checked').forEach(cb => {\r\n                    selectedBairros.push(cb.dataset.bairroName);\r\n                });\r\n                if (selectedBairros.length === 0) {\r\n                    return showModal({ title: 'Atenção', message: 'Selecione ao menos um bairro.', confirmText: 'OK' });\r\n                }\r\n            }\r\n\r\n            const payload = {\r\n                store: storeId,\r\n                nome: nome,\r\n                tipo: tipo,\r\n                raioKm: tipo === 'raio' ? (parseFloat(raioInput.value) || 0) : 0,\r\n                bairros: tipo === 'bairro' ? selectedBairros : [],\r\n                gratis: document.getElementById('zone-free').checked\r\n            };\r\n\r\n            try {\r\n                let resp;\r\n                if (editingZoneId) {\r\n                    // EDITAR\r\n                    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                    const token = loggedInUser?.token;\r\n                    resp = await fetch(`${API_CONFIG.BASE_URL}/delivery-zones/${editingZoneId}`, {\r\n                        method: 'PUT',\r\n                        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n                        body: JSON.stringify(payload)\r\n                    });\r\n                } else {\r\n                    // CRIAR\r\n                    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                    const token = loggedInUser?.token;\r\n                    resp = await fetch(`${API_CONFIG.BASE_URL}/delivery-zones`, {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n                        body: JSON.stringify(payload)\r\n                    });\r\n                }\r\n\r\n                if (!resp.ok) throw new Error('Falha ao salvar a zona.');\r\n\r\n                showModal({ title: 'Sucesso!', message: editingZoneId ? 'Zona atualizada com sucesso.' : 'Zona criada com sucesso.', confirmText: 'OK' });\r\n\r\n                await renderZones(storeId);\r\n                resetZoneForm();\r\n            } catch (e) {\r\n                console.error(e);\r\n                showModal({ title: 'Erro', message: 'Não foi possível salvar a zona.', confirmText: 'OK' });\r\n            }\r\n        });\r\n    }\r\n\r\n    // CANCELAR edição / limpar formulário\r\n    if (cancelZoneBtn) {\r\n        cancelZoneBtn.addEventListener('click', () => {\r\n            resetZoneForm();\r\n        });\r\n    }\r\n\r\n    // --- CARGA INICIAL ---\r\n    if(document.getElementById('map')) {\r\n        initializeMapaTab();\r\n    }\r\n    if(vehiclesTableBody) {\r\n        fetchAndRenderVehicles();\r\n    }\r\n});\r\n"
        }
    ]
}