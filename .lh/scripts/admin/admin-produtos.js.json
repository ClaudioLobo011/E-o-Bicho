{
    "sourceFile": "scripts/admin/admin-produtos.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756593796811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756593796811,
            "name": "Commit-0",
            "content": "document.addEventListener('DOMContentLoaded', () => {\r\n    // --- Estado da Página ---\r\n    let currentPage = 1;\r\n    let currentLimit = 20;\r\n    let currentSearch = '';\r\n    let totalPages = 1;\r\n    let debounceTimer;\r\n    let allFlatCategories = [];\r\n    let selectedProductIds = new Set(); // Usaremos um Set para gerir os IDs selecionados de forma eficiente\r\n\r\n    // --- Referências aos elementos do DOM ---\r\n    const tableBody = document.getElementById('products-table-body');\r\n    const limitSelect = document.getElementById('limit-select');\r\n    const searchInput = document.getElementById('search-input');\r\n    const prevPageBtn = document.getElementById('prev-page-btn');\r\n    const nextPageBtn = document.getElementById('next-page-btn');\r\n    const pageInfo = document.getElementById('page-info');\r\n    const bulkActionsToolbar = document.getElementById('bulk-actions-toolbar');\r\n    const selectionCount = document.getElementById('selection-count');\r\n    const bulkCategorySelect = document.getElementById('bulk-category-select');\r\n    const bulkApplyBtn = document.getElementById('apply-bulk-action-btn');\r\n    const selectAllCheckbox = document.getElementById('select-all-checkbox');\r\n\r\n    // --- Lógica de Busca e Renderização ---\r\n\r\n    /**\r\n     * Busca os produtos da API e orquestra a renderização da tabela e da paginação.\r\n     */\r\n    async function fetchAndDisplayProducts() {\r\n        if (!tableBody) return;\r\n        tableBody.innerHTML = `<tr><td colspan=\"6\" class=\"text-center py-4\"><i class=\"fas fa-spinner fa-spin mr-2\"></i>A carregar produtos...</td></tr>`;\r\n        const url = `${API_CONFIG.BASE_URL}/products?page=${currentPage}&limit=${currentLimit}&search=${currentSearch}`;\r\n\r\n        try {\r\n            const response = await fetch(url);\r\n            if (!response.ok) throw new Error('Falha ao buscar os produtos.');\r\n            \r\n            const data = await response.json();\r\n            const { products, page, pages } = data;\r\n\r\n            currentPage = page;\r\n            totalPages = pages;\r\n            \r\n            renderTable(products);\r\n            updatePaginationControls();\r\n            updateBulkActionsToolbar();\r\n\r\n        } catch (error) {\r\n            console.error('Erro ao buscar e exibir produtos:', error);\r\n            tableBody.innerHTML = `<tr><td colspan=\"6\" class=\"text-center py-4 text-red-500\">Erro ao carregar produtos.</td></tr>`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renderiza as linhas da tabela com os dados dos produtos.\r\n     * @param {Array} products - A lista de produtos a serem exibidos.\r\n     */\r\n    function renderTable(products) {\r\n        tableBody.innerHTML = '';\r\n        if (products.length === 0) {\r\n            tableBody.innerHTML = `<tr><td colspan=\"6\" class=\"text-center py-4\">Nenhum produto encontrado.</td></tr>`;\r\n            return;\r\n        }\r\n\r\n        const rowsHtml = products.map(product => {\r\n            const precoVenda = product.venda.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n            const isChecked = selectedProductIds.has(product._id) ? 'checked' : '';\r\n\r\n            const categoryTagsHtml = product.categorias && product.categorias.length > 0\r\n                ? product.categorias.map(cat => \r\n                    `<span class=\"inline-flex items-center bg-gray-200 text-gray-700 text-xs font-medium px-2 py-0.5 rounded-full mr-1 mb-1\">\r\n                        ${cat.nome}\r\n                        <button type=\"button\" class=\"remove-category-btn flex-shrink-0 ml-1.5 h-4 w-4 rounded-full inline-flex items-center justify-center text-gray-400 hover:bg-gray-300 hover:text-gray-500 focus:outline-none\" data-product-id=\"${product._id}\" data-category-id=\"${cat._id}\">\r\n                            <svg class=\"h-2 w-2\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 8 8\"><path stroke-linecap=\"round\" stroke-width=\"1.5\" d=\"M1 1l6 6m0-6L1 7\" /></svg>\r\n                        </button>\r\n                    </span>`\r\n                ).join('')\r\n                : '<span class=\"text-xs text-gray-400\">Sem categoria</span>';\r\n            \r\n            return `\r\n                <tr class=\"bg-white border-b hover:bg-gray-50\">\r\n                    <td class=\"p-4\">\r\n                        <input type=\"checkbox\" class=\"product-checkbox form-checkbox h-4 w-4 text-primary rounded border-gray-300\" data-id=\"${product._id}\" ${isChecked}>\r\n                    </td>\r\n                    <td class=\"px-6 py-4\">\r\n                        <img src=\"${API_CONFIG.SERVER_URL}${product.imagemPrincipal}\" alt=\"${product.nome}\" class=\"w-16 h-16 object-cover rounded-md bg-gray-200 border\">\r\n                    </td>\r\n                    <th scope=\"row\" class=\"px-6 py-4 font-medium text-gray-900 whitespace-nowrap\">\r\n                        <div>${product.nome}</div>\r\n                        <div class=\"mt-1 flex flex-wrap items-center\">${categoryTagsHtml}</div>\r\n                    </th>\r\n                    <td class=\"px-6 py-4\">${precoVenda}</td>\r\n                    <td class=\"px-6 py-4\">${product.stock}</td>\r\n                    <td class=\"px-6 py-4 text-center\">\r\n                        <a href=\"admin-produto-editar.html?id=${product._id}\" class=\"font-medium text-blue-600 hover:underline mr-3\">Editar</a>\r\n                        <a href=\"#\" class=\"font-medium text-red-600 hover:underline\">Apagar</a>\r\n                    </td>\r\n                </tr>\r\n            `;\r\n        }).join('');\r\n        tableBody.innerHTML = rowsHtml;\r\n    }\r\n\r\n    /**\r\n     * Busca as categorias da API e preenche o dropdown de seleção em massa.\r\n     */\r\n    async function fetchCategoriesForDropdown() {\r\n        try {\r\n            const [hierarchicalRes, flatRes] = await Promise.all([\r\n                fetch(`${API_CONFIG.BASE_URL}/categories/hierarchical`),\r\n                fetch(`${API_CONFIG.BASE_URL}/categories`)\r\n            ]);\r\n            if (!hierarchicalRes.ok || !flatRes.ok) throw new Error('Falha ao buscar categorias');\r\n\r\n            const hierarchicalCategories = await hierarchicalRes.json();\r\n            allFlatCategories = await flatRes.json(); \r\n            \r\n            bulkCategorySelect.innerHTML = '<option value=\"\">Selecione uma categoria para aplicar</option>';\r\n\r\n            const createOptions = (categories, parentLabel = '') => {\r\n                for (const category of categories) {\r\n                    const label = parentLabel ? `${parentLabel} > ${category.nome}` : category.nome;\r\n                    if (category.children && category.children.length > 0) {\r\n                        const optgroup = document.createElement('optgroup');\r\n                        optgroup.label = label;\r\n                        bulkCategorySelect.appendChild(optgroup);\r\n                        createOptions(category.children, label);\r\n                    } else {\r\n                        const option = document.createElement('option');\r\n                        option.value = category._id;\r\n                        option.textContent = label;\r\n                        bulkCategorySelect.appendChild(option);\r\n                    }\r\n                }\r\n            };\r\n            createOptions(hierarchicalCategories);\r\n        } catch (error) {\r\n            console.error('Erro ao buscar categorias:', error);\r\n        }\r\n    }\r\n\r\n    // --- Lógica de UI (Paginação e Ações em Massa) ---\r\n\r\n    /**\r\n     * Verifica quantos produtos estão selecionados e mostra/esconde a barra de ações.\r\n     */\r\n    function updateBulkActionsToolbar() {\r\n        const count = selectedProductIds.size;\r\n        const totalVisibleCheckboxes = document.querySelectorAll('.product-checkbox').length;\r\n\r\n        if (count > 0) {\r\n            selectionCount.textContent = `${count} produto(s) selecionado(s)`;\r\n            bulkActionsToolbar.classList.remove('hidden');\r\n        } else {\r\n            bulkActionsToolbar.classList.add('hidden');\r\n        }\r\n        \r\n        selectAllCheckbox.checked = totalVisibleCheckboxes > 0 && count === totalVisibleCheckboxes;\r\n    }\r\n\r\n    /**\r\n     * Atualiza a visibilidade e o estado dos botões de paginação.\r\n     */\r\n    function updatePaginationControls() {\r\n        pageInfo.textContent = `Página ${currentPage} de ${totalPages}`;\r\n        prevPageBtn.disabled = currentPage <= 1;\r\n        nextPageBtn.disabled = currentPage >= totalPages;\r\n    }\r\n\r\n    // --- Event Listeners ---\r\n\r\n    function initializeEventListeners() {\r\n        limitSelect.addEventListener('change', (event) => {\r\n            currentLimit = Number(event.target.value);\r\n            currentPage = 1;\r\n            fetchAndDisplayProducts();\r\n        });\r\n        \r\n        searchInput.addEventListener('input', (event) => {\r\n            clearTimeout(debounceTimer);\r\n            debounceTimer = setTimeout(() => {\r\n                currentSearch = event.target.value;\r\n                currentPage = 1;\r\n                fetchAndDisplayProducts();\r\n            }, 500);\r\n        });\r\n\r\n        prevPageBtn.addEventListener('click', () => {\r\n            if (currentPage > 1) {\r\n                currentPage--;\r\n                fetchAndDisplayProducts();\r\n            }\r\n        });\r\n\r\n        nextPageBtn.addEventListener('click', () => {\r\n            if (currentPage < totalPages) {\r\n                currentPage++;\r\n                fetchAndDisplayProducts();\r\n            }\r\n        });\r\n\r\n        selectAllCheckbox.addEventListener('change', () => {\r\n            document.querySelectorAll('.product-checkbox').forEach(checkbox => {\r\n                checkbox.checked = selectAllCheckbox.checked;\r\n                const id = checkbox.dataset.id;\r\n                if (selectAllCheckbox.checked) {\r\n                    selectedProductIds.add(id);\r\n                } else {\r\n                    selectedProductIds.delete(id);\r\n                }\r\n            });\r\n            updateBulkActionsToolbar();\r\n        });\r\n\r\n        tableBody.addEventListener('change', (event) => {\r\n            if (event.target.classList.contains('product-checkbox')) {\r\n                const id = event.target.dataset.id;\r\n                if (event.target.checked) {\r\n                    selectedProductIds.add(id);\r\n                } else {\r\n                    selectedProductIds.delete(id);\r\n                }\r\n                updateBulkActionsToolbar();\r\n            }\r\n        });\r\n\r\n        bulkApplyBtn.addEventListener('click', async () => {\r\n            const productIds = Array.from(selectedProductIds);\r\n            const newCategoryId = bulkCategorySelect.value;\r\n            let brandNameToUpdate = null;\r\n\r\n            if (productIds.length === 0 || !newCategoryId) {\r\n                showModal({ title: 'Atenção', message: 'Selecione pelo menos um produto e uma categoria.', confirmText: 'OK' });\r\n                return;\r\n            }\r\n\r\n            const categoryMap = new Map(allFlatCategories.map(cat => [cat._id.toString(), cat]));\r\n            let selectedCat = categoryMap.get(newCategoryId);\r\n            \r\n            while (selectedCat && selectedCat.parent) {\r\n                const parent = categoryMap.get(selectedCat.parent.toString());\r\n                if (parent && parent.nome === 'Marcas') {\r\n                    brandNameToUpdate = categoryMap.get(newCategoryId).nome;\r\n                    break;\r\n                }\r\n                selectedCat = parent;\r\n            }\r\n\r\n            const requestBody = { productIds, newCategoryId };\r\n            if (brandNameToUpdate) {\r\n                requestBody.brandName = brandNameToUpdate;\r\n            }\r\n\r\n            try {\r\n                const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                const token = loggedInUser?.token;\r\n                const response = await fetch(`${API_CONFIG.BASE_URL}/products/bulk-update-category`, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${token}`\r\n                    },\r\n                    body: JSON.stringify(requestBody)\r\n                });\r\n                const result = await response.json();\r\n                if (!response.ok) throw new Error(result.message);\r\n                \r\n                showModal({ title: 'Sucesso!', message: result.message, confirmText: 'OK', onConfirm: () => fetchAndDisplayProducts() });\r\n            } catch (error) {\r\n                showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n            }\r\n        });\r\n\r\n        tableBody.addEventListener('click', async (event) => {\r\n            const removeButton = event.target.closest('button.remove-category-btn');\r\n            if (removeButton) {\r\n                const productId = removeButton.dataset.productId;\r\n                const categoryId = removeButton.dataset.categoryId;\r\n                const categoryName = removeButton.closest('span').firstChild.textContent.trim();\r\n                const productName = removeButton.closest('tr').querySelector('th[scope=\"row\"] > div').textContent.trim();\r\n\r\n                showModal({\r\n                    title: 'Confirmar Remoção',\r\n                    message: `Tem a certeza que deseja remover a categoria \"${categoryName}\" do produto \"${productName}\"?`,\r\n                    confirmText: 'Remover',\r\n                    cancelText: 'Cancelar',\r\n                    onConfirm: async () => {\r\n                        try {\r\n                            const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                            const token = loggedInUser?.token;\r\n                            const response = await fetch(`${API_CONFIG.BASE_URL}/products/${productId}/categories/${categoryId}`, {\r\n                                method: 'DELETE',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                    'Authorization': `Bearer ${token}`\r\n                                }\r\n                            });\r\n                            const result = await response.json();\r\n                            if (!response.ok) throw new Error(result.message);\r\n\r\n                            showModal({ title: 'Sucesso!', message: 'Categoria removida do produto.', confirmText: 'OK' });\r\n                            fetchAndDisplayProducts();\r\n                        } catch (error) {\r\n                            showModal({ title: 'Erro', message: `Não foi possível remover a categoria: ${error.message}`, confirmText: 'OK' });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    // --- CARGA INICIAL ---\r\n    fetchAndDisplayProducts();\r\n    fetchCategoriesForDropdown();\r\n    initializeEventListeners();\r\n});"
        }
    ]
}