{
    "sourceFile": "scripts/admin/admin-destaques.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756594141308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756594141308,
            "name": "Commit-0",
            "content": "document.addEventListener('DOMContentLoaded', () => {\r\n    // Referências aos elementos do DOM\r\n    const availableList = document.getElementById('available-products-list');\r\n    const featuredList = document.getElementById('featured-products-list');\r\n    const searchInput = document.getElementById('search-available');\r\n\r\n    // Variáveis para guardar o estado dos produtos\r\n    let allProducts = [];\r\n    let featuredProducts = [];\r\n\r\n    /**\r\n     * Atualiza ambas as listas com base no estado atual e no filtro de busca.\r\n     */\r\n    const updateLists = () => {\r\n        const searchTerm = searchInput.value.toLowerCase();\r\n        const filteredProducts = allProducts.filter(p => p.nome.toLowerCase().includes(searchTerm));\r\n        \r\n        renderAvailableProducts(filteredProducts);\r\n        renderFeaturedProducts();\r\n    };\r\n\r\n    /**\r\n     * Renderiza a lista de produtos disponíveis (à esquerda).\r\n     * @param {Array} productsToRender - A lista de produtos a serem exibidos.\r\n     */\r\n    const renderAvailableProducts = (productsToRender) => {\r\n        availableList.innerHTML = '';\r\n        const featuredIds = new Set(featuredProducts.map(p => p._id));\r\n        \r\n        const availableToRender = productsToRender.filter(p => !featuredIds.has(p._id));\r\n\r\n        if (availableToRender.length === 0) {\r\n            availableList.innerHTML = '<li class=\"p-2 border rounded-md text-center text-gray-500\">Nenhum produto encontrado.</li>';\r\n            return;\r\n        }\r\n\r\n        availableToRender.forEach(product => {\r\n            const li = document.createElement('li');\r\n            li.className = 'flex items-center justify-between p-2 border rounded-md bg-white';\r\n            li.innerHTML = `\r\n                <span class=\"text-sm\">${product.nome}</span>\r\n                <button data-id=\"${product._id}\" class=\"add-btn text-green-600 hover:text-green-800 text-sm font-bold\">Adicionar</button>\r\n            `;\r\n            availableList.appendChild(li);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Renderiza a lista de produtos em destaque (à direita).\r\n     */\r\n    const renderFeaturedProducts = () => {\r\n        featuredList.innerHTML = '';\r\n        if (featuredProducts.length === 0) {\r\n            featuredList.innerHTML = '<li class=\"p-2 border rounded-md text-center text-gray-500\">Arraste um produto para aqui ou clique em \"Adicionar\".</li>';\r\n            return;\r\n        }\r\n\r\n        featuredProducts.forEach(product => {\r\n            const li = document.createElement('li');\r\n            li.className = 'flex items-center justify-between p-2 border rounded-md bg-green-50 cursor-grab';\r\n            li.dataset.id = product._id;\r\n            li.innerHTML = `\r\n                <div class=\"flex items-center\">\r\n                    <i class=\"fas fa-grip-vertical mr-2 text-gray-400\"></i>\r\n                    <span class=\"text-sm font-semibold\">${product.nome}</span>\r\n                </div>\r\n                <button data-id=\"${product._id}\" class=\"remove-btn text-red-500 hover:text-red-700\">\r\n                    <i class=\"fas fa-times\"></i>\r\n                </button>\r\n            `;\r\n            featuredList.appendChild(li);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Busca todos os dados do servidor e inicializa a página.\r\n     */\r\n    const initializePage = async () => {\r\n        try {\r\n            const [productsRes, featuredRes] = await Promise.all([\r\n                fetch(`${API_CONFIG.BASE_URL}/products?limit=2000`),\r\n                fetch(`${API_CONFIG.BASE_URL}/products/destaques`)\r\n            ]);\r\n\r\n            if (!productsRes.ok || !featuredRes.ok) {\r\n                throw new Error('Falha ao carregar os dados do servidor.');\r\n            }\r\n\r\n            const productsData = await productsRes.json();\r\n            const featuredData = await featuredRes.json();\r\n\r\n            allProducts = productsData.products;\r\n            featuredProducts = featuredData;\r\n            \r\n            updateLists();\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n            showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n        }\r\n    };\r\n    \r\n    // --- Event Listeners ---\r\n\r\n    // Filtro de busca\r\n    searchInput.addEventListener('input', () => {\r\n        updateLists();\r\n    });\r\n\r\n    // Adicionar um produto aos destaques\r\n    availableList.addEventListener('click', async (e) => {\r\n        if (e.target.classList.contains('add-btn')) {\r\n            const productId = e.target.dataset.id;\r\n            try {\r\n                const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                const token = loggedInUser?.token;\r\n                const response = await fetch(`${API_CONFIG.BASE_URL}/products/${productId}/destaque`, { method: 'POST', headers: { 'Authorization': `Bearer ${token}` } });\r\n                const addedProduct = allProducts.find(p => p._id === productId);\r\n                if (!response.ok) throw new Error('Falha ao adicionar destaque.');\r\n\r\n                // --- LÓGICA DE ATUALIZAÇÃO INTELIGENTE ---\r\n                featuredProducts.push(addedProduct); // Adiciona o produto à lista local de destaques\r\n                updateLists(); // Re-renderiza as listas mantendo o filtro\r\n                \r\n            } catch (error) {\r\n                 showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n            }\r\n        }\r\n    });\r\n\r\n    // Remover um produto dos destaques\r\n    featuredList.addEventListener('click', async (e) => {\r\n        const removeButton = e.target.closest('.remove-btn');\r\n        if (removeButton) {\r\n            const productId = removeButton.dataset.id;\r\n            try {\r\n                const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                const token = loggedInUser?.token;\r\n                const response = await fetch(`${API_CONFIG.BASE_URL}/products/${productId}/destaque`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${token}` } });\r\n                if (!response.ok) throw new Error('Falha ao remover destaque.');\r\n\r\n                // --- LÓGICA DE ATUALIZAÇÃO INTELIGENTE ---\r\n                featuredProducts = featuredProducts.filter(p => p._id !== productId); // Remove o produto da lista local\r\n                updateLists(); // Re-renderiza as listas mantendo o filtro\r\n\r\n            } catch (error) {\r\n                 showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n            }\r\n        }\r\n    });\r\n\r\n    // Inicialização da funcionalidade de arrastar e soltar\r\n    new Sortable(featuredList, {\r\n        animation: 150,\r\n        ghostClass: 'bg-green-100',\r\n        handle: '.fa-grip-vertical',\r\n        onEnd: async function (evt) {\r\n            const orderedIds = Array.from(evt.target.children).map(li => li.dataset.id);\r\n            // Atualiza a ordem da nossa lista local para consistência visual imediata\r\n            featuredProducts.sort((a, b) => orderedIds.indexOf(a._id) - orderedIds.indexOf(b._id));\r\n            try {\r\n                const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                const token = loggedInUser?.token;\r\n                const response = await fetch(`${API_CONFIG.BASE_URL}/products/destaques/order`, {\r\n                    method: 'PUT',\r\n                    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n                    body: JSON.stringify({ orderedIds })\r\n                });\r\n                if (!response.ok) throw new Error('Falha ao salvar a nova ordem.');\r\n            } catch (error) {\r\n                 showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n            }\r\n        }\r\n    });\r\n\r\n    // --- Carga Inicial ---\r\n    initializePage();\r\n});"
        }
    ]
}