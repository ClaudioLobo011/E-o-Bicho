{
    "sourceFile": "scripts/checkout.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1756586640606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756586687291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,11 @@\n document.addEventListener('DOMContentLoaded', () => {\r\n+\r\n+    function getAuthHeaders() {\r\n+        const user = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+        return user?.token ? { 'Authorization': `Bearer ${user.token}` } : {};\r\n+    }\r\n+\r\n     const tableBody = document.getElementById('checkout-items-body');\r\n     if (!tableBody) return;\r\n     let selectedDelivery = {\r\n         cost: 0,\r\n@@ -553,9 +559,14 @@\n         const url = new URL(`${API_BASE}/shipping/quote`, window.location.origin);\r\n         url.searchParams.set('cep', cep);\r\n         if (opts.bairro) url.searchParams.set('bairro', opts.bairro);\r\n \r\n-        const resp = await fetch(url.toString(), { credentials: 'same-origin' });\r\n+        const resp = await fetch(url.toString(), {\r\n+            headers: {\r\n+                'Content-Type': 'application/json',\r\n+                ...getAuthHeaders()\r\n+            }\r\n+        });\r\n         if (!resp.ok) throw new Error('Falha ao calcular o frete.');\r\n         const quote = await resp.json();\r\n \r\n         applyQuoteToExistingPanel(quote);\r\n"
                },
                {
                    "date": 1756769972010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,10 +239,25 @@\n                 const cartButton = event.target.closest('.add-to-cart');\r\n                 if (cartButton) {\r\n                     event.preventDefault();\r\n                     const productId = cartButton.dataset.productId;\r\n-                    await CartManager.addItem(productId); // <-- ADICIONADO AWAIT AQUI\r\n-                    showModal({ title: 'Adicionado!', message: 'Produto adicionado à sacola com sucesso.', confirmText: 'OK' });\r\n+                    container.addEventListener('click', async (event) => {\r\n+                    const cartButton = event.target.closest('.add-to-cart');\r\n+                    if (!cartButton) return;\r\n+\r\n+                    event.preventDefault();\r\n+                    const productId = cartButton.dataset.productId;\r\n+\r\n+                    await CartManager.addItem(productId);\r\n+\r\n+                    // aviso não-bloqueante (opcional)\r\n+                    if (typeof showToast === 'function') {\r\n+                        showToast('Produto adicionado à sacola.', 'success');\r\n+                    }\r\n+                    // se quiser abrir a mini-sacola automaticamente, descomente:\r\n+                    // const btn = document.getElementById('open-cart-btn');\r\n+                    // if (btn) btn.click();\r\n+                    });\r\n                 }\r\n             });\r\n \r\n             // Lógica de navegação do slider\r\n"
                },
                {
                    "date": 1756770054197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,31 +234,24 @@\n \r\n                 container.innerHTML += productCard;\r\n             });\r\n \r\n-            container.addEventListener('click', async (event) => { // <-- ADICIONADO ASYNC AQUI\r\n-                const cartButton = event.target.closest('.add-to-cart');\r\n-                if (cartButton) {\r\n-                    event.preventDefault();\r\n-                    const productId = cartButton.dataset.productId;\r\n-                    container.addEventListener('click', async (event) => {\r\n-                    const cartButton = event.target.closest('.add-to-cart');\r\n-                    if (!cartButton) return;\r\n+            container.addEventListener('click', async (event) => {\r\n+            const cartButton = event.target.closest('.add-to-cart');\r\n+            if (!cartButton) return;\r\n \r\n-                    event.preventDefault();\r\n-                    const productId = cartButton.dataset.productId;\r\n+            event.preventDefault();\r\n+            const productId = cartButton.dataset.productId;\r\n \r\n-                    await CartManager.addItem(productId);\r\n+            await CartManager.addItem(productId);\r\n \r\n-                    // aviso não-bloqueante (opcional)\r\n-                    if (typeof showToast === 'function') {\r\n-                        showToast('Produto adicionado à sacola.', 'success');\r\n-                    }\r\n-                    // se quiser abrir a mini-sacola automaticamente, descomente:\r\n-                    // const btn = document.getElementById('open-cart-btn');\r\n-                    // if (btn) btn.click();\r\n-                    });\r\n-                }\r\n+            // aviso não-bloqueante (opcional)\r\n+            if (typeof showToast === 'function') {\r\n+                showToast('Produto adicionado à sacola.', 'success');\r\n+            }\r\n+            // se quiser abrir a mini-sacola automaticamente, descomente:\r\n+            // const btn = document.getElementById('open-cart-btn');\r\n+            // if (btn) btn.click();\r\n             });\r\n \r\n             // Lógica de navegação do slider\r\n             let currentIndex = 0;\r\n"
                },
                {
                    "date": 1756770472933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,23 @@\n document.addEventListener('DOMContentLoaded', () => {\r\n \r\n+    // Atualiza toda a UI do checkout após mudanças no carrinho\r\n+    async function refreshCheckoutUI() {\r\n+    try {\r\n+        // re-renderiza itens, resumo e barra de frete grátis\r\n+        await loadAndRenderPage();\r\n+\r\n+        // recalcula o frete para o CEP atual (se houver)\r\n+        if (typeof findCepInput === 'function' && typeof triggerFreteRecalc === 'function') {\r\n+        const cepEl = findCepInput();\r\n+        const cep = cepEl?.value?.replace(/\\D/g, '');\r\n+        if (cep) triggerFreteRecalc(cep);\r\n+        }\r\n+    } catch (err) {\r\n+        console.error('[checkout] refreshCheckoutUI error:', err);\r\n+    }\r\n+    }\r\n+\r\n     function getAuthHeaders() {\r\n         const user = JSON.parse(localStorage.getItem('loggedInUser'));\r\n         return user?.token ? { 'Authorization': `Bearer ${user.token}` } : {};\r\n     }\r\n@@ -235,23 +252,27 @@\n                 container.innerHTML += productCard;\r\n             });\r\n \r\n             container.addEventListener('click', async (event) => {\r\n-            const cartButton = event.target.closest('.add-to-cart');\r\n-            if (!cartButton) return;\r\n+            const btn = event.target.closest('.add-to-cart');\r\n+            if (!btn) return;\r\n \r\n             event.preventDefault();\r\n-            const productId = cartButton.dataset.productId;\r\n+            const productId = btn.dataset.productId;\r\n \r\n-            await CartManager.addItem(productId);\r\n-\r\n-            // aviso não-bloqueante (opcional)\r\n-            if (typeof showToast === 'function') {\r\n+            try {\r\n+                await CartManager.addItem(productId);               // adiciona no carrinho (já atualiza o badge)\r\n+                if (typeof showToast === 'function') {\r\n                 showToast('Produto adicionado à sacola.', 'success');\r\n+                }\r\n+                await refreshCheckoutUI();                          // << re-render da página do checkout\r\n+                // opcional: rolar até o topo da tabela para o usuário ver o item novo\r\n+                const tbl = document.getElementById('checkout-items');\r\n+                if (tbl) tbl.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n+            } catch (err) {\r\n+                console.error(err);\r\n+                if (typeof showToast === 'function') showToast('Não foi possível adicionar o produto.', 'error');\r\n             }\r\n-            // se quiser abrir a mini-sacola automaticamente, descomente:\r\n-            // const btn = document.getElementById('open-cart-btn');\r\n-            // if (btn) btn.click();\r\n             });\r\n \r\n             // Lógica de navegação do slider\r\n             let currentIndex = 0;\r\n"
                }
            ],
            "date": 1756586640606,
            "name": "Commit-0",
            "content": "document.addEventListener('DOMContentLoaded', () => {\r\n    const tableBody = document.getElementById('checkout-items-body');\r\n    if (!tableBody) return;\r\n    let selectedDelivery = {\r\n        cost: 0,\r\n        type: 'Padrão' \r\n    };\r\n    const freeShippingGoal = 100;\r\n\r\n    // --- FUNÇÕES DE RENDERIZAÇÃO ---\r\n    function renderCheckoutItems(cart) {\r\n        tableBody.innerHTML = '';\r\n        if (!cart || cart.length === 0) {\r\n            tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center py-10 text-gray-500\">O seu carrinho está vazio.</td></tr>';\r\n            return;\r\n        }\r\n\r\n        cart.forEach(cartItem => {\r\n            const product = cartItem.product;\r\n            if (!product) return;\r\n            \r\n            const itemTotal = cartItem.effectivePrice * cartItem.quantity;\r\n\r\n            const isSubscribed = cartItem.isSubscribed;\r\n            const switchBg = isSubscribed ? 'bg-primary' : 'bg-gray-200';\r\n            const switchTranslate = isSubscribed ? 'translate-x-5' : 'translate-x-0';\r\n\r\n            const rowHtml = `\r\n                <tr class=\"border-b\">\r\n                    <td class=\"py-4 px-4 align-top\">\r\n                        <div class=\"flex items-start space-x-3\">\r\n                            <img src=\"${API_CONFIG.SERVER_URL}${product.imagemPrincipal}\" alt=\"${product.nome}\" class=\"w-16 h-16 object-contain border rounded-md\">\r\n                            <div>\r\n                                <p class=\"font-semibold text-gray-800\">${product.nome}</p>\r\n                                \r\n                                <div class=\"mt-2\">\r\n                                    <button data-action=\"toggle-subscription\" data-product-id=\"${product._id}\" class=\"${switchBg} relative inline-flex h-6 w-11 items-center rounded-full transition-colors\">\r\n                                        <span class=\"${switchTranslate} inline-block h-4 w-4 transform rounded-full bg-white transition-transform\"></span>\r\n                                    </button>\r\n                                    <span class=\"ml-2 text-sm font-medium ${isSubscribed ? 'text-primary' : 'text-gray-600'}\">\r\n                                        Assinatura Recorrente\r\n                                    </span>\r\n                                </div>\r\n\r\n                                <div class=\"mt-2 ${!isSubscribed ? 'hidden' : ''}\">\r\n                                    <label class=\"text-xs text-gray-500\">Envio a cada</label>\r\n                                    <select data-action=\"update-frequency\" data-product-id=\"${product._id}\" class=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md\">\r\n                                        <option value=\"30\" ${cartItem.subscriptionFrequency === 30 ? 'selected' : ''}>30 dias</option>\r\n                                        <option value=\"45\" ${cartItem.subscriptionFrequency === 45 ? 'selected' : ''}>45 dias</option>\r\n                                        <option value=\"60\" ${cartItem.subscriptionFrequency === 60 ? 'selected' : ''}>60 dias</option>\r\n                                        <option value=\"90\" ${cartItem.subscriptionFrequency === 90 ? 'selected' : ''}>90 dias</option>\r\n                                        <option value=\"custom\">Personalizar</option>\r\n                                    </select>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n                    <td class=\"py-4 px-2 text-center\">\r\n                        ${(product.venda - cartItem.effectivePrice > 0.01) ? `<span class=\"line-through text-gray-400\">R$ ${product.venda.toFixed(2).replace('.', ',')}</span>` : ''}\r\n                        <span class=\"block font-medium\">R$ ${cartItem.effectivePrice.toFixed(2).replace('.', ',')}</span>\r\n                    </td>\r\n                    <td class=\"py-4 px-2 text-center\">\r\n                        <div class=\"flex items-center justify-center\">\r\n                            <button data-action=\"decrease-qty\" data-product-id=\"${product._id}\" class=\"w-7 h-7 flex items-center justify-center border rounded-l hover:bg-gray-100\">-</button>\r\n                            <span class=\"w-8 h-7 flex items-center justify-center border-t border-b\">${cartItem.quantity}</span>\r\n                            <button data-action=\"increase-qty\" data-product-id=\"${product._id}\" class=\"w-7 h-7 flex items-center justify-center border rounded-r hover:bg-gray-100\">+</button>\r\n                        </div>\r\n                    </td>\r\n                    <td class=\"py-4 px-2 text-center font-bold\">R$ ${itemTotal.toFixed(2).replace('.', ',')}</td>\r\n                    <td class=\"py-4 px-2 text-center\">\r\n                        <button data-action=\"remove-item\" data-product-id=\"${product._id}\" class=\"text-gray-400 hover:text-red-500\"><i class=\"far fa-trash-alt\"></i></button>\r\n                    </td>\r\n                </tr>\r\n            `;\r\n            tableBody.innerHTML += rowHtml;\r\n        });\r\n    }\r\n\r\n    function updateDeliveryOptionsUI(isFreeShipping) {\r\n        const allButtons = document.querySelectorAll('.delivery-option-btn');\r\n        allButtons.forEach(btn => {\r\n            // Agora procuramos pela classe específica, tornando o código mais seguro\r\n            const priceSpan = btn.querySelector('.delivery-price-span'); \r\n            if (!priceSpan) return;\r\n\r\n            // Se o frete for grátis para o total da compra, todas as opções ficam \"Grátis\"\r\n            if (isFreeShipping) {\r\n                priceSpan.textContent = 'Grátis';\r\n                priceSpan.classList.add('text-primary'); // Garante que fique verde\r\n                priceSpan.classList.remove('text-gray-500');\r\n            } else {\r\n                // Se não, volta a mostrar o preço original guardado no data-cost\r\n                const originalCost = parseFloat(btn.dataset.cost);\r\n                if (originalCost === 0) {\r\n                    priceSpan.textContent = 'Grátis';\r\n                    priceSpan.classList.add('text-primary');\r\n                    priceSpan.classList.remove('text-gray-500');\r\n                } else {\r\n                    priceSpan.textContent = `R$ ${originalCost.toFixed(2).replace('.', ',')}`;\r\n                    priceSpan.classList.remove('text-primary', 'text-gray-500'); // Remove cores especiais se não for grátis\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function updateSummary(cart) {\r\n        const itemCountEl = document.getElementById('summary-item-count');\r\n        const subtotalEl = document.getElementById('summary-subtotal');\r\n        const discountsEl = document.getElementById('summary-discounts');\r\n        const deliveryEl = document.getElementById('summary-delivery');\r\n        const totalEl = document.getElementById('summary-total');\r\n\r\n        const itemCount = cart.reduce((sum, item) => sum + item.quantity, 0);\r\n        const subtotal = cart.reduce((sum, item) => sum + (item.product.venda * item.quantity), 0);\r\n        const totalEffective = cart.reduce((sum, item) => sum + (item.effectivePrice * item.quantity), 0);\r\n        const totalDiscounts = subtotal - totalEffective;\r\n        \r\n        // Lógica de Frete Grátis\r\n        const hasFreeShipping = totalEffective >= freeShippingGoal;\r\n        const finalDeliveryCost = hasFreeShipping ? 0 : selectedDelivery.cost;\r\n\r\n        const finalTotal = totalEffective + finalDeliveryCost;\r\n\r\n        itemCountEl.textContent = itemCount;\r\n        subtotalEl.textContent = `R$ ${subtotal.toFixed(2).replace('.', ',')}`;\r\n        discountsEl.textContent = `- R$ ${totalDiscounts.toFixed(2).replace('.', ',')}`;\r\n        if(deliveryEl) deliveryEl.textContent = finalDeliveryCost > 0 ? `R$ ${finalDeliveryCost.toFixed(2).replace('.', ',')}` : 'Grátis';\r\n        totalEl.textContent = `R$ ${finalTotal.toFixed(2).replace('.', ',')}`;\r\n        \r\n        // Chama a nova função para atualizar a aparência dos botões\r\n        updateDeliveryOptionsUI(hasFreeShipping);\r\n    }\r\n\r\n    async function loadFeaturedProducts() {\r\n        const container = document.getElementById('featured-products-container');\r\n        const wrapper = document.getElementById('featured-slider-wrapper');\r\n        const prevButton = document.getElementById('prev-featured-btn');\r\n        const nextButton = document.getElementById('next-featured-btn');\r\n\r\n        // Se os elementos do slider não existirem na página, a função para.\r\n        if (!container || !wrapper || !prevButton || !nextButton) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.BASE_URL}/products/destaques`);\r\n            if (!response.ok) throw new Error('Não foi possível buscar os produtos em destaque.');\r\n            \r\n            const products = await response.json();\r\n\r\n            if (products.length === 0) {\r\n                wrapper.innerHTML = '<p class=\"text-center text-gray-500 col-span-full\">Nenhum produto em destaque no momento.</p>';\r\n                return;\r\n            }\r\n\r\n            container.innerHTML = ''; \r\n\r\n            products.forEach(product => {\r\n                // A lógica de preços que já definimos continua igual\r\n                let priceHtml = '';\r\n                if (product.promocao && product.promocao.ativa && product.promocao.porcentagem > 0) {\r\n                    const discountedPrice = product.venda * (1 - product.promocao.porcentagem / 100);\r\n                    priceHtml = `\r\n                        <div>\r\n                            <span class=\"block text-sm text-gray-500 line-through\">R$ ${product.venda.toFixed(2).replace('.', ',')}</span>\r\n                            <div class=\"flex items-center\">\r\n                                <span class=\"text-lg font-bold text-primary\">R$ ${discountedPrice.toFixed(2).replace('.', ',')}</span>\r\n                                <span class=\"ml-2 text-xs font-bold text-white bg-primary rounded-full px-2 py-0.5\">Promo</span>\r\n                            </div>\r\n                        </div>\r\n                    `;\r\n                } else if (product.promocaoCondicional && product.promocaoCondicional.ativa) {\r\n                    let promoText = 'Oferta Especial';\r\n                    if (product.promocaoCondicional.tipo === 'leve_pague') {\r\n                        promoText = `Leve ${product.promocaoCondicional.leve} Pague ${product.promocaoCondicional.pague}`;\r\n                    } else if (product.promocaoCondicional.tipo === 'acima_de') {\r\n                        promoText = `+${product.promocaoCondicional.quantidadeMinima} un. com ${product.promocaoCondicional.descontoPorcentagem}%`;\r\n                    }\r\n                    priceHtml = `\r\n                        <div>\r\n                            <span class=\"block text-lg font-bold text-gray-800\">R$ ${product.venda.toFixed(2).replace('.', ',')}</span>\r\n                            <div class=\"flex items-center\">\r\n                                <span class=\"text-xs font-bold text-white bg-primary rounded-full px-2 py-1\">${promoText}</span>\r\n                            </div>\r\n                        </div>\r\n                    `;\r\n                } else if (product.precoClube && product.precoClube < product.venda) {\r\n                    priceHtml = `\r\n                        <div>\r\n                            <span class=\"block text-lg font-bold text-gray-950\">R$ ${product.venda.toFixed(2).replace('.', ',')}</span>\r\n                            <div class=\"flex items-center\">\r\n                                <span class=\"text-lg font-bold text-primary\">R$ ${product.precoClube.toFixed(2).replace('.', ',')}</span>\r\n                                <span class=\"ml-2 text-xs font-bold text-white bg-primary rounded-full px-2 py-0.5\">Club</span>\r\n                            </div>\r\n                        </div>\r\n                    `;\r\n                } else {\r\n                    priceHtml = `<span class=\"block text-lg font-bold text-gray-950\">R$ ${product.venda.toFixed(2).replace('.', ',')}</span>`;\r\n                }\r\n\r\n                // Criação do card completo do produto\r\n                const productCard = `\r\n                    <a href=\"${basePath}pages/menu-departments-item/product.html?id=${product._id}\" class=\"relative block bg-white rounded-lg shadow product-card transition duration-300 group overflow-hidden w-60 sm:w-64 flex-shrink-0\">\r\n                        \r\n                        ${product.promocao && product.promocao.ativa && product.promocao.porcentagem > 0 ? `\r\n                            <div class=\"absolute top-3 left-0 w-auto bg-primary text-white text-xs font-bold py-1 pl-2 pr-3 rounded-r z-10\">\r\n                                -${product.promocao.porcentagem}% DE DESCONTO\r\n                            </div>\r\n                        ` : ''}\r\n\r\n                        <div class=\"p-4 product-info flex flex-col h-full\">\r\n                            <div class=\"relative w-full h-48 mb-4\">\r\n                                <img src=\"${API_CONFIG.SERVER_URL}${product.imagemPrincipal}\" alt=\"${product.nome}\" class=\"w-full h-full object-cover rounded-md\">\r\n                                \r\n                                <div class=\"add-to-cart absolute bottom-3 right-3 w-[55px] h-[55px] flex items-center justify-center rounded-full transition-all duration-300 opacity-0 group-hover:opacity-100 hover:bg-secondary\" data-product-id=\"${product._id}\">\r\n                                    <div data-icon=\"sacola\" class=\"w-[55px] h-[55px]\"></div>\r\n                                    <span class=\"sr-only\">Adicionar ao Carrinho</span>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"product-details flex flex-col flex-grow\">\r\n                                <h3 class=\"font-normal text-base h-12 line-clamp-2\">${product.nome}</h3>\r\n                                <div class=\"product-price flex items-center mb-2 mt-auto min-h-[2.5rem]\">${priceHtml}</div>\r\n                            </div>\r\n                        </div>\r\n                    </a>\r\n                `;\r\n\r\n                container.innerHTML += productCard;\r\n            });\r\n\r\n            container.addEventListener('click', async (event) => { // <-- ADICIONADO ASYNC AQUI\r\n                const cartButton = event.target.closest('.add-to-cart');\r\n                if (cartButton) {\r\n                    event.preventDefault();\r\n                    const productId = cartButton.dataset.productId;\r\n                    await CartManager.addItem(productId); // <-- ADICIONADO AWAIT AQUI\r\n                    showModal({ title: 'Adicionado!', message: 'Produto adicionado à sacola com sucesso.', confirmText: 'OK' });\r\n                }\r\n            });\r\n\r\n            // Lógica de navegação do slider\r\n            let currentIndex = 0;\r\n            const totalItems = products.length;\r\n            const updateSlider = () => {\r\n                const card = container.querySelector('.product-card');\r\n                if (!card) return;\r\n                const cardWidth = card.offsetWidth;\r\n                const gap = 24;\r\n                const itemsVisible = Math.floor(wrapper.offsetWidth / (cardWidth + gap));\r\n                const maxIndex = Math.max(0, totalItems - itemsVisible);\r\n                if (currentIndex > maxIndex) currentIndex = maxIndex;\r\n                if (currentIndex < 0) currentIndex = 0;\r\n                const moveDistance = (cardWidth + gap) * currentIndex;\r\n                container.style.transform = `translateX(-${moveDistance}px)`;\r\n                prevButton.disabled = currentIndex === 0;\r\n                nextButton.disabled = currentIndex >= maxIndex;\r\n            };\r\n            nextButton.addEventListener('click', () => {\r\n                const card = container.querySelector('.product-card');\r\n                if (!card) return;\r\n                const cardWidth = card.offsetWidth;\r\n                const gap = 24;\r\n                const itemsVisible = Math.floor(wrapper.offsetWidth / (cardWidth + gap));\r\n                const maxIndex = Math.max(0, totalItems - itemsVisible);\r\n                currentIndex = Math.min(currentIndex + itemsVisible, maxIndex);\r\n                updateSlider();\r\n            });\r\n            prevButton.addEventListener('click', () => {\r\n                const card = container.querySelector('.product-card');\r\n                if (!card) return;\r\n                const cardWidth = card.offsetWidth;\r\n                const gap = 24;\r\n                const itemsVisible = Math.floor(wrapper.offsetWidth / (cardWidth + gap));\r\n                currentIndex = Math.max(currentIndex - itemsVisible, 0);\r\n                updateSlider();\r\n            });\r\n            let resizeTimer;\r\n            window.addEventListener('resize', () => {\r\n                clearTimeout(resizeTimer);\r\n                resizeTimer = setTimeout(updateSlider, 250);\r\n            });\r\n            updateSlider();\r\n            if (typeof loadIcons === 'function') {\r\n                await loadIcons();\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Erro ao carregar produtos em destaque:', error);\r\n            wrapper.innerHTML = '<p class=\"text-center text-red-500\">Ocorreu um erro ao carregar os produtos.</p>';\r\n        }\r\n    }\r\n\r\n    function updateFreeShippingProgress(total) {\r\n        const freeShippingGoal = 100; // Define o valor para frete grátis (R$ 100)\r\n        const progressBarContainer = document.getElementById('free-shipping-progress-bar');\r\n        const progressText = document.getElementById('free-shipping-text');\r\n        const progressValues = document.getElementById('free-shipping-values');\r\n        const progressFill = document.getElementById('free-shipping-fill');\r\n\r\n        if (!progressBarContainer) return;\r\n\r\n        if (total >= freeShippingGoal) {\r\n            // Se já atingiu o frete grátis\r\n            progressBarContainer.classList.remove('hidden');\r\n            progressText.innerHTML = '<span class=\"text-primary font-bold\">Você conseguiu Frete Grátis!</span> 🎉';\r\n            progressValues.textContent = `R$ ${total.toFixed(2)} / R$ ${freeShippingGoal.toFixed(2)}`;\r\n            progressFill.style.width = '100%';\r\n        } else if (total > 0) {\r\n            // Se está a caminho\r\n            const remaining = freeShippingGoal - total;\r\n            const percentage = (total / freeShippingGoal) * 100;\r\n            progressBarContainer.classList.remove('hidden');\r\n            progressText.innerHTML = `Faltam <span class=\"font-bold text-primary\">R$ ${remaining.toFixed(2).replace('.', ',')}</span> para <span class=\"font-bold\">Frete Grátis</span>`;\r\n            progressValues.textContent = `R$ ${total.toFixed(2)} / R$ ${freeShippingGoal.toFixed(2)}`;\r\n            progressFill.style.width = `${percentage}%`;\r\n        } else {\r\n            // Se o carrinho estiver vazio\r\n            progressBarContainer.classList.add('hidden');\r\n        }\r\n    }\r\n\r\n    async function loadAndRenderPage() {\r\n        const cart = await CartManager.getCart();\r\n        renderCheckoutItems(cart);\r\n        updateSummary(cart);\r\n\r\n        const total = cart.reduce((sum, item) => sum + (item.effectivePrice * item.quantity), 0);\r\n        updateFreeShippingProgress(total);\r\n    }\r\n\r\n    // --- EVENT LISTENERS ---\r\n    tableBody.addEventListener('click', async (event) => {\r\n        const target = event.target.closest('button[data-action]');\r\n        if (!target) return;\r\n\r\n        const action = target.dataset.action;\r\n        const productId = target.dataset.productId;\r\n        if (!action || !productId) return;\r\n\r\n        const cart = await CartManager.getCart();\r\n        const currentItem = cart.find(item => item.product._id === productId);\r\n\r\n        if (action === 'remove-item') {\r\n            await CartManager.removeItem(productId);\r\n        } else if (currentItem) {\r\n            if (action === 'increase-qty') {\r\n                await CartManager.updateQuantity(productId, currentItem.quantity + 1);\r\n            } else if (action === 'decrease-qty') {\r\n                await CartManager.updateQuantity(productId, currentItem.quantity - 1);\r\n            } else if (action === 'toggle-subscription') {\r\n                await CartManager.updateSubscription(productId, !currentItem.isSubscribed);\r\n            }\r\n        }\r\n        \r\n        loadAndRenderPage(); // Recarrega e renderiza tudo para mostrar o novo preço\r\n    });\r\n\r\n    const deliveryContainer = document.getElementById('delivery-options-container');\r\n    if (deliveryContainer) {\r\n        deliveryContainer.addEventListener('click', (event) => {\r\n            const selectedButton = event.target.closest('.delivery-option-btn');\r\n            if (!selectedButton) return;\r\n\r\n            // 1. Atualiza a opção de entrega selecionada na variável\r\n            selectedDelivery = {\r\n                cost: parseFloat(selectedButton.dataset.cost),\r\n                type: selectedButton.dataset.type\r\n            };\r\n            \r\n            // 2. Remove o destaque de TODOS os botões, restaurando para o estado padrão\r\n            deliveryContainer.querySelectorAll('.delivery-option-btn').forEach(btn => {\r\n                btn.classList.remove('border-primary', 'bg-primary/10'); // Remove classes de seleção\r\n                btn.classList.add('border-gray-200', 'bg-transparent');   // Adiciona classes padrão\r\n            });\r\n\r\n            // 3. Adiciona o destaque APENAS ao botão que foi clicado\r\n            selectedButton.classList.remove('border-gray-200', 'bg-transparent'); // Remove classes padrão\r\n            selectedButton.classList.add('border-primary', 'bg-primary/10');      // Adiciona classes de seleção\r\n            \r\n            // 4. Recalcula o sumário com a nova seleção\r\n            loadAndRenderPage();\r\n        });\r\n    }\r\n\r\n    (function () {\r\n    // Helpers locais (não colidem com o seu código existente)\r\n    function onlyDigits(v) { return (v || '').replace(/\\D/g, ''); }\r\n    function formatCEP(v) {\r\n        const d = onlyDigits(v).slice(0, 8);\r\n        return d.length > 5 ? d.slice(0, 5) + '-' + d.slice(5) : d;\r\n    }\r\n\r\n    // Procura o input do CEP na seção \"Calcular frete e prazo\"\r\n    function findCepInput() {\r\n        return (\r\n        document.getElementById('cep-input') ||\r\n        document.querySelector('input[placeholder*=\"CEP\" i]') ||\r\n        (function () {\r\n            const label = Array.from(document.querySelectorAll('label'))\r\n            .find(l => /Calcular\\s+frete\\s+e\\s+prazo/i.test(l.textContent || ''));\r\n            if (!label) return null;\r\n            const box = label.closest('div');\r\n            return box ? (box.querySelector('input[type=\"text\"], input') || null) : null;\r\n        })()\r\n        );\r\n    }\r\n\r\n    // Caixa (opcional) para mostrar o resumo do endereço no checkout\r\n    function ensureAddressSummaryBox() {\r\n        let box = document.getElementById('selected-address-summary');\r\n        if (box) return box;\r\n        const label = Array.from(document.querySelectorAll('label'))\r\n        .find(l => /Calcular\\s+frete\\s+e\\s+prazo/i.test(l.textContent || ''));\r\n        const container = label ? label.parentElement : document.body;\r\n        box = document.createElement('div');\r\n        box.id = 'selected-address-summary';\r\n        box.className = 'mt-3 text-sm bg-green-50 border border-green-200 text-green-800 rounded p-3';\r\n        container.appendChild(box);\r\n        return box;\r\n    }\r\n    function updateAddressSummary(address) {\r\n        const box = ensureAddressSummaryBox();\r\n        const line1 = [address.logradouro, address.numero].filter(Boolean).join(', ');\r\n        const line2 = [address.bairro, address.cidade, address.uf].filter(Boolean).join(' - ');\r\n        const comp  = address.complemento ? ` (${address.complemento})` : '';\r\n        box.innerHTML = `\r\n        <div class=\"font-semibold\">Entrega para:</div>\r\n        <div>${line1}${comp}</div>\r\n        <div>${line2}</div>\r\n        <div>CEP: <strong>${address.cep}</strong></div>\r\n        `;\r\n    }\r\n\r\n    // Chama sua rotina de frete, seja qual for o nome\r\n    function triggerFreteRecalc(cep) {\r\n        if (typeof window.recalculateDelivery === 'function') {\r\n        window.recalculateDelivery(cep);\r\n        } else if (typeof window.calculateFrete === 'function') {\r\n        window.calculateFrete(cep);\r\n        } else if (typeof window.updateShippingForCep === 'function') {\r\n        window.updateShippingForCep(cep);\r\n        } else {\r\n        // opcional: mensagem discreta\r\n        try { window.showToast && window.showToast('Frete será calculado ao finalizar.', 'info', 1500); } catch(_) {}\r\n        console.debug('[checkout] Sem função de frete registrada. CEP:', cep);\r\n        }\r\n    }\r\n\r\n    // === Handler chamado pelo \"Usar este\" do sidebar ===\r\n    window.onAddressSelected = function (address) {\r\n        // 1) Preenche o CEP no checkout\r\n        const cepInput = findCepInput();\r\n        if (cepInput) {\r\n        cepInput.value = formatCEP(address.cep || '');\r\n        try { cepInput.dispatchEvent(new Event('input',  { bubbles: true })); } catch(_) {}\r\n        try { cepInput.dispatchEvent(new Event('change', { bubbles: true })); } catch(_) {}\r\n        }\r\n\r\n        // 2) Atualiza resumo visual (opcional)\r\n        updateAddressSummary(address);\r\n\r\n        // 3) Recalcula frete usando sua rotina\r\n        triggerFreteRecalc(address.cep);\r\n\r\n        // 4) Dispara um evento para quem mais quiser ouvir\r\n        document.dispatchEvent(new CustomEvent('checkout:cep-selected', { detail: { address } }));\r\n\r\n        // 5) Feedback\r\n        try { window.showToast && window.showToast('CEP atualizado no checkout.', 'success', 1200); } catch(_) {}\r\n    };\r\n\r\n    // Garante formatação do CEP se o usuário digitar manualmente\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n        const cepInput = findCepInput();\r\n        if (cepInput) {\r\n        cepInput.addEventListener('input', () => {\r\n            cepInput.value = formatCEP(cepInput.value);\r\n        });\r\n        }\r\n    });\r\n    })();\r\n\r\n    (function () {\r\n    const API_BASE = (typeof API_CONFIG !== 'undefined' && API_CONFIG.BASE_URL) ? API_CONFIG.BASE_URL : '/api';\r\n\r\n    function money(n) {\r\n        n = Number(n || 0);\r\n        return n.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n    }\r\n\r\n    // Atualiza os botões do painel existente (#delivery-options-container)\r\n    function applyQuoteToExistingPanel(quote) {\r\n        const cont = document.getElementById('delivery-options-container');\r\n        if (!cont) return;\r\n\r\n        const map = {\r\n        'Padrão':          quote?.methods?.padrao?.price,\r\n        'Express':         quote?.methods?.express?.price,\r\n        'Agendada':        quote?.methods?.agendada?.price,\r\n        'Retire na loja':  quote?.methods?.pickup?.price,\r\n        'Retire na Loja':  quote?.methods?.pickup?.price, // variação de capitalização\r\n        };\r\n\r\n        // Atualiza cada botão pelo data-type\r\n        cont.querySelectorAll('.delivery-option-btn').forEach(btn => {\r\n        const type = (btn.dataset.type || '').trim();\r\n        if (!(type in map)) return;\r\n\r\n        const price = Number(map[type]);\r\n        // 1) grava valor no data-cost\r\n        btn.dataset.cost = isFinite(price) ? price.toFixed(2) : '0.00';\r\n\r\n        // 2) atualiza o texto do preço\r\n        const span = btn.querySelector('.delivery-price-span');\r\n        if (span) {\r\n            if (price <= 0) {\r\n            span.textContent = 'Grátis';\r\n            span.classList.add('text-primary');\r\n            span.classList.remove('text-gray-500');\r\n            } else {\r\n            span.textContent = money(price);\r\n            span.classList.remove('text-primary');\r\n            }\r\n        }\r\n        });\r\n\r\n        // Mantém a seleção atual; se nenhuma, escolhe “Padrão” (ou “Retire na loja” se quiser)\r\n        const selectedBtn =\r\n        cont.querySelector('.delivery-option-btn.border-primary') ||\r\n        cont.querySelector('.delivery-option-btn[data-type=\"Padrão\"]') ||\r\n        cont.querySelector('.delivery-option-btn[data-type=\"Retire na loja\"]') ||\r\n        cont.querySelector('.delivery-option-btn');\r\n\r\n        if (selectedBtn) {\r\n        // Atualiza o objeto local usado pelo resumo de valores\r\n        selectedDelivery = {\r\n            cost: parseFloat(selectedBtn.dataset.cost || '0') || 0,\r\n            type: selectedBtn.dataset.type\r\n        };\r\n        }\r\n\r\n        // Se quiser exibir a loja base/distância em algum canto, você tem em quote.store e quote.distanceKm\r\n        // console.debug('Loja base:', quote.store?.nome, 'Distância:', quote.distanceKm, 'km');\r\n\r\n        // Re-renderiza totais com o novo preço da opção selecionada\r\n        loadAndRenderPage();\r\n    }\r\n\r\n    // >>> Esta é a função chamada quando muda o CEP/endereço <<<\r\n    window.recalculateDelivery = async function(cep, opts = {}) {\r\n        try {\r\n        const url = new URL(`${API_BASE}/shipping/quote`, window.location.origin);\r\n        url.searchParams.set('cep', cep);\r\n        if (opts.bairro) url.searchParams.set('bairro', opts.bairro);\r\n\r\n        const resp = await fetch(url.toString(), { credentials: 'same-origin' });\r\n        if (!resp.ok) throw new Error('Falha ao calcular o frete.');\r\n        const quote = await resp.json();\r\n\r\n        applyQuoteToExistingPanel(quote);\r\n        } catch (e) {\r\n        console.error(e);\r\n        if (typeof showModal === 'function') {\r\n            showModal({ title: 'Frete', message: e.message || 'Não foi possível calcular o frete agora.', confirmText: 'OK' });\r\n        } else {\r\n            alert(e.message || 'Não foi possível calcular o frete agora.');\r\n        }\r\n        }\r\n    };\r\n    })();\r\n\r\n    // === AUTO: usar o endereço principal ao entrar no checkout ===\r\n    (function () {\r\n    const API_BASE = (typeof API_CONFIG !== 'undefined' && API_CONFIG.BASE_URL) ? API_CONFIG.BASE_URL : '/api';\r\n\r\n    function getLoggedUserId() {\r\n        try { const u = JSON.parse(localStorage.getItem('loggedInUser')); return u && u.id ? u.id : null; }\r\n        catch { return null; }\r\n    }\r\n    function onlyDigits(v){ return (v||'').replace(/\\D/g,''); }\r\n    function formatCEP(v){ const d=onlyDigits(v).slice(0,8); return d.length>5?d.slice(0,5)+'-'+d.slice(5):d; }\r\n\r\n    function findCepInput() {\r\n        return (\r\n        document.getElementById('cep-input') ||\r\n        document.querySelector('input[placeholder*=\"CEP\" i]') ||\r\n        null\r\n        );\r\n    }\r\n    function updateAddressSummary(address) {\r\n        let box = document.getElementById('selected-address-summary');\r\n        if (!box) {\r\n        const label = Array.from(document.querySelectorAll('label'))\r\n            .find(l => /Calcular\\s+frete\\s+e\\s+prazo/i.test(l.textContent || ''));\r\n        const container = label ? label.parentElement : document.body;\r\n        box = document.createElement('div');\r\n        box.id = 'selected-address-summary';\r\n        box.className = 'mt-3 text-sm bg-green-50 border border-green-200 text-green-800 rounded p-3';\r\n        container.appendChild(box);\r\n        }\r\n        const line1 = [address.logradouro, address.numero].filter(Boolean).join(', ');\r\n        const line2 = [address.bairro, address.cidade, address.uf].filter(Boolean).join(' - ');\r\n        const comp  = address.complemento ? ` (${address.complemento})` : '';\r\n        box.innerHTML = `\r\n        <div class=\"font-semibold\">Entrega para:</div>\r\n        <div>${line1}${comp}</div>\r\n        <div>${line2}</div>\r\n        <div>CEP: <strong>${address.cep}</strong></div>\r\n        `;\r\n    }\r\n\r\n    async function getUserAddresses(userId) {\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            ...getAuthHeaders()\r\n        };\r\n        const r = await fetch(`${API_BASE}/addresses/${userId}`, { headers });\r\n        if (!r.ok) throw new Error('Não foi possível carregar seus endereços.');\r\n        return r.json();\r\n    }\r\n\r\n    // **Executa já** (estamos dentro do DOMContentLoaded principal deste arquivo)\r\n    (async function autoSelectDefaultAddress() {\r\n        const userId = getLoggedUserId();\r\n        if (!userId) return;\r\n\r\n        try {\r\n        const addresses = await getUserAddresses(userId);\r\n\r\n        if (!addresses || addresses.length === 0) {\r\n            // Sem endereços → abrir o sidebar direto no formulário\r\n            if (typeof window.openAddressSidebarForNewAddress === 'function') {\r\n            window.openAddressSidebarForNewAddress();\r\n            } else if (typeof showModal === 'function') {\r\n            showModal({ title: 'Endereço', message: 'Cadastre um endereço para continuar.', confirmText: 'OK' });\r\n            } else {\r\n            alert('Cadastre um endereço para continuar.');\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Usa o principal (ou primeiro)\r\n        const main = addresses.find(a => a.isDefault) || addresses[0];\r\n\r\n        // Preenche o input do CEP\r\n        const cepInput = findCepInput();\r\n        if (cepInput) {\r\n            cepInput.value = formatCEP(main.cep || '');\r\n            try { cepInput.dispatchEvent(new Event('input',  { bubbles: true })); } catch (_) {}\r\n            try { cepInput.dispatchEvent(new Event('change', { bubbles: true })); } catch (_) {}\r\n        }\r\n\r\n        // Resumo + cálculo de frete no seu painel existente\r\n        updateAddressSummary(main);\r\n        if (typeof window.recalculateDelivery === 'function') {\r\n            window.recalculateDelivery(main.cep, { bairro: main.bairro });\r\n        }\r\n        } catch (e) {\r\n        console.error(e);\r\n        }\r\n    })();\r\n    })();\r\n\r\n\r\n\r\n    // --- CARGA INICIAL ---\r\n    \r\n    loadAndRenderPage();\r\n    loadFeaturedProducts();\r\n    \r\n});"
        }
    ]
}