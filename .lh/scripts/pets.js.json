{
    "sourceFile": "scripts/pets.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1756584058770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756585269387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,12 +80,24 @@\n     // --- Funções de Edição, Exclusão e Submissão ---\r\n \r\n     window.handleEditPet = async (petId) => {\r\n         try {\r\n-            const response = await fetch(`${API_CONFIG.BASE_URL}/pets/${petId}`);\r\n-            if (!response.ok) throw new Error('Pet não encontrado.');\r\n-            const petData = await response.json();\r\n+        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+        if (!loggedInUser?.token) {\r\n+            showModal({ title: 'Erro', message: 'Você precisa estar logado.', confirmText: 'OK' });\r\n+            return;\r\n+        }\r\n \r\n+        const response = await fetch(`${API_CONFIG.BASE_URL}/pets/${petId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${loggedInUser.token}`,\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+\r\n+        if (!response.ok) throw new Error('Pet não encontrado.');\r\n+        const petData = await response.json();\r\n+\r\n             hiddenPetIdInput.value = petData._id;\r\n             petForm.querySelector('#pet-name').value = petData.nome;\r\n             petForm.querySelector('#pet-type').value = petData.tipo;\r\n             petForm.querySelector('#pet-raca').value = petData.raca;\r\n"
                },
                {
                    "date": 1756585316994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,10 +130,20 @@\n             confirmText: 'Excluir',\r\n             cancelText: 'Cancelar',\r\n             onConfirm: async () => {\r\n                 try {\r\n+                    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+                    if (!loggedInUser?.token) {\r\n+                        showModal({ title: 'Erro', message: 'Você precisa estar logado.', confirmText: 'OK' });\r\n+                        return;\r\n+                    }\r\n+\r\n                     const response = await fetch(`${API_CONFIG.BASE_URL}/pets/${petId}`, {\r\n                         method: 'DELETE',\r\n+                        headers: {\r\n+                            'Authorization': `Bearer ${loggedInUser.token}`,\r\n+                            'Content-Type': 'application/json'\r\n+                        }\r\n                     });\r\n \r\n                     if (!response.ok) {\r\n                         const result = await response.json();\r\n"
                },
                {
                    "date": 1756585437090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,11 +192,20 @@\n                 petData.owner = loggedInUser.id;\r\n             }\r\n \r\n             try {\r\n+                const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+                if (!loggedInUser?.token) {\r\n+                    showModal({ title: 'Erro', message: 'Token não fornecido.', confirmText: 'OK' });\r\n+                    return;\r\n+                }\r\n+\r\n                 const response = await fetch(url, {\r\n                     method: method,\r\n-                    headers: { 'Content-Type': 'application/json' },\r\n+                    headers: { \r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${loggedInUser.token}`\r\n+                    },\r\n                     body: JSON.stringify(petData),\r\n                 });\r\n \r\n                 const result = await response.json();\r\n"
                },
                {
                    "date": 1757701278692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,140 @@\n document.addEventListener('DOMContentLoaded', () => {\r\n-    // --- Referências aos elementos do DOM ---\r\n+    // --- ReferÃƒÂªncias aos elementos do DOM ---\r\n     const petsListContainer = document.getElementById('pets-list-container');\r\n     const addPetBtnContainer = document.getElementById('add-pet-button-container');\r\n     const petFormContainer = document.getElementById('pet-form-container');\r\n     const addPetBtn = document.getElementById('add-pet-btn');\r\n     const petForm = document.getElementById('new-pet-form');\r\n     const cancelPetBtn = document.getElementById('cancel-pet-btn');\r\n     const petTypeSelect = document.getElementById('pet-type');\r\n     const breedInput = document.getElementById('pet-raca');\r\n+    const porteSelect = document.getElementById('pet-porte');\r\n     const hiddenPetIdInput = document.getElementById('pet-id');\r\n     let awesompleteInstance;\r\n+    let SPECIES_MAP = null;         // { cachorro:{portes:{mini:[],...}, all:[], map:{breed->porte}}, gato:[...], passaro:[...], peixe:[...], roedor:[...], lagarto:[...], tartaruga:[...] }\r\n \r\n-    // --- Funções de Visibilidade do Formulário ---\r\n+    // Helpers para normalizar strings (ignora acentos/maiÃƒÂºsculas)\r\n+    const norm = (s) => String(s || '')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase();\r\n+    const normSize = (s) => {\r\n+      const k = norm(s);\r\n+      if (k.startsWith('mini')) return 'mini';\r\n+      if (k.startsWith('peq')) return 'pequeno';\r\n+      if (k.startsWith('med')) return 'medio';\r\n+      if (k.startsWith('gra')) return 'grande';\r\n+      if (k.startsWith('gig')) return 'gigante';\r\n+      return 'medio';\r\n+    };\r\n \r\n+    // Corrige sequÃªncias comuns de texto corrompidas por encoding (UTF-8 vs ISO-8859-1)\r\n+    function fixEncoding(s) {\r\n+      if (!s) return s;\r\n+      return String(s)\r\n+        .replace(/ÃƒÂ¡/g,'Ã¡').replace(/ÃƒÂ¢/g,'Ã¢').replace(/ÃƒÂ£/g,'Ã£').replace(/ÃƒÂ¤/g,'Ã¤')\r\n+        .replace(/ÃƒÂ/g,'Ã').replace(/Ãƒâ€š/g,'Ã‚').replace(/ÃƒÆ’/g,'Ãƒ')\r\n+        .replace(/ÃƒÂ©/g,'Ã©').replace(/ÃƒÂª/g,'Ãª').replace(/ÃƒÂ¨/g,'Ã¨').replace(/Ãƒâ€°/g,'Ã‰').replace(/ÃƒÅ /g,'ÃŠ')\r\n+        .replace(/ÃƒÂ­/g,'Ã­').replace(/ÃƒÂ¬/g,'Ã¬').replace(/ÃƒÂ/g,'Ã')\r\n+        .replace(/ÃƒÂ³/g,'Ã³').replace(/ÃƒÂ´/g,'Ã´').replace(/ÃƒÂµ/g,'Ãµ').replace(/Ãƒâ€œ/g,'Ã“').replace(/Ãƒâ€/g,'Ã”')\r\n+        .replace(/ÃƒÂº/g,'Ãº').replace(/ÃƒÂ¼/g,'Ã¼').replace(/ÃƒÅ¡/g,'Ãš')\r\n+        .replace(/ÃƒÂ§/g,'Ã§').replace(/ÃƒÂ‡/g,'Ã‡')\r\n+        .replace(/ÃƒÂ /g,'Ã ').replace(/ÃƒÂ¸/g,'Ã¸')\r\n+        .replace(/Ã‚Âº/g,'Âº').replace(/Ã‚Âª/g,'Âª')\r\n+        .replace(/ÃƒÂ¢Ã¢â€šÂ¬Ã¢â‚¬Å“/g,'â€“').replace(/Ã¢â‚¬â€œ/g,'â€“').replace(/Ã¢â‚¬â€/g,'â€”')\r\n+        .replace(/Ã¢â‚¬Ëœ/g,'â€˜').replace(/Ã¢â‚¬â„¢/g,'â€™').replace(/Ã¢â‚¬Å“/g,'â€œ').replace(/Ã¢â‚¬Â/g,'â€')\r\n+        .replace(/Ã¢â‚¬Â¢/g,'â€¢').replace(/Ã¢â‚¬Â¦/g,'â€¦');\r\n+    }\r\n+\r\n+    async function loadSpeciesMap() {\r\n+      if (SPECIES_MAP) return SPECIES_MAP;\r\n+      const base = (window.basePath || '../');\r\n+      const url = base + 'data/Racas-leitura.js';\r\n+      try {\r\n+        const txt = await fetch(url).then(r => r.text());\r\n+        const species = {};\r\n+\r\n+        // Extrai seÃƒÂ§ÃƒÂ£o cachorro{ ... }\r\n+        const dogSectionMatch = txt.match(/cachorro\\s*{([\\s\\S]*?)}/i);\r\n+        let dogMap = { mini:[], pequeno:[], medio:[], grande:[], gigante:[] };\r\n+        if (dogSectionMatch) {\r\n+          const dogBody = dogSectionMatch[1];\r\n+          const reDog = /porte[_\\s-]?(mini|pequeno|medio|grande|gigante)\\s*{([\\s\\S]*?)}/gi;\r\n+          let m;\r\n+          while ((m = reDog.exec(dogBody))) {\r\n+            const key = m[1].toLowerCase();\r\n+            const body = m[2];\r\n+            const list = body.split(/\\n+/).map(x => x.trim())\r\n+              .filter(x => x && !x.startsWith('//'))\r\n+              .map(x => x.replace(/\\*.*?\\*/g, ''))\r\n+              .map(x => x.replace(/\\s*\\(duplicata.*$/i, ''))\r\n+              .map(x => x.replace(/\\s*[Ã¢â‚¬â€-].*$/,'').replace(/\\s*-\\s*registro.*$/i,''));\r\n+            dogMap[key] = Array.from(new Set(list));\r\n+          }\r\n+        } else {\r\n+          // retrocompatibilidade: blocos porte_... no topo\r\n+          const reDogLegacy = /porte[_\\s-]?(mini|pequeno|medio|grande|gigante)\\s*{([\\s\\S]*?)}/gi;\r\n+          let m2; const legacy = { mini:[], pequeno:[], medio:[], grande:[], gigante:[] };\r\n+          while ((m2 = reDogLegacy.exec(txt))) {\r\n+            const key = m2[1].toLowerCase();\r\n+            const body = m2[2];\r\n+            const list = body.split(/\\n+/).map(x => x.trim()).filter(Boolean);\r\n+            legacy[key] = Array.from(new Set(list));\r\n+          }\r\n+          dogMap = legacy;\r\n+        }\r\n+        const dogAll = Array.from(new Set([ ...dogMap.mini, ...dogMap.pequeno, ...dogMap.medio, ...dogMap.grande, ...dogMap.gigante ]));\r\n+        const dogLookup = {}; dogAll.forEach(n => dogLookup[norm(n)] = (dogMap.mini.includes(n) ? 'mini' : dogMap.pequeno.includes(n) ? 'pequeno' : dogMap.medio.includes(n) ? 'medio' : dogMap.grande.includes(n) ? 'grande' : 'gigante'));\r\n+        species.cachorro = { portes: dogMap, all: dogAll, map: dogLookup };\r\n+\r\n+        // Outras espÃƒÂ©cies simples (sem porte)\r\n+        const simpleSpecies = ['gatos','gato','passaros','passaro','peixes','peixe','roedores','roedor','lagartos','lagarto','tartarugas','tartaruga'];\r\n+        for (const sp of simpleSpecies) {\r\n+          const m = new RegExp(sp + \"\\\\s*{([\\\\s\\\\S]*?)}\",\"i\").exec(txt);\r\n+          if (m) {\r\n+            const list = m[1].split(/\\n+/).map(s=>s.trim()).filter(x=>x && !x.startsWith('//'));\r\n+            const key = sp.replace(/s$/,''); // singular\r\n+            species[key] = list;\r\n+          }\r\n+        }\r\n+        SPECIES_MAP = species;\r\n+        return species;\r\n+      } catch (e) {\r\n+        console.warn('Falha ao ler Racas-leitura.js', e);\r\n+        SPECIES_MAP = null;\r\n+        return null;\r\n+      }\r\n+    }\r\n+\r\n+    function setPorteFromBreedIfDog() {\r\n+      if (!porteSelect) return;\r\n+      const isDog = petTypeSelect && norm(petTypeSelect.value) === 'cachorro';\r\n+      if (!isDog) return;\r\n+      const map = SPECIES_MAP?.cachorro?.map;\r\n+      const b = norm(breedInput?.value || '');\r\n+      const k = map ? map[b] : null;\r\n+      const desired = k || 'medio';\r\n+      // encontra a option pelo texto (normalizado)\r\n+      const opts = Array.from(porteSelect.options || []);\r\n+      const match = opts.find(o => normSize(o.textContent) === desired);\r\n+      if (match) porteSelect.value = match.value || match.textContent;\r\n+    }\r\n+\r\n+    function syncPorteDisabled() {\r\n+      if (!porteSelect) return;\r\n+      const isDog = petTypeSelect && norm(petTypeSelect.value) === 'cachorro';\r\n+      // Nunca esconder; apenas bloquear com o valor apropriado\r\n+      porteSelect.disabled = true;\r\n+      if (isDog) {\r\n+        setPorteFromBreedIfDog();\r\n+      } else {\r\n+        const none = Array.from(porteSelect.options).find(o => (o.textContent||'').toLowerCase().includes('sem porte'));\r\n+        if (none) porteSelect.value = none.value || none.textContent;\r\n+      }\r\n+    }\r\n+\r\n+    // --- FunÃƒÂ§ÃƒÂµes de Visibilidade do FormulÃƒÂ¡rio ---\r\n+\r\n     const showForm = () => {\r\n         if (addPetBtnContainer && petFormContainer) {\r\n             addPetBtnContainer.classList.add('hidden');\r\n             petFormContainer.classList.remove('hidden');\r\n@@ -28,10 +149,52 @@\n             hiddenPetIdInput.value = '';\r\n         }\r\n     };\r\n \r\n-    // --- Função Principal para Exibir os Pets ---\r\n+    function normalizeStaticLabels() {\r\n+        try {\r\n+            const sexoSel = document.getElementById('pet-sexo');\r\n+            if (sexoSel) {\r\n+                Array.from(sexoSel.options).forEach(o => {\r\n+                    if (/F.?mea/i.test(o.textContent)) o.textContent = 'FÃƒÂªmea';\r\n+                });\r\n+            }\r\n+            if (porteSelect) {\r\n+                let none = Array.from(porteSelect.options).find(o => (o.textContent||'').toLowerCase().includes('sem porte'));\r\n+                if (!none) {\r\n+                    none = document.createElement('option');\r\n+                    none.textContent = 'Sem porte definido';\r\n+                    none.value = 'Sem porte definido';\r\n+                    porteSelect.insertBefore(none, porteSelect.firstChild);\r\n+                }\r\n+                Array.from(porteSelect.options).forEach(o => {\r\n+                    if (/M.?dio/i.test(o.textContent)) o.textContent = 'MÃƒÂ©dio';\r\n+                });\r\n+            }\r\n+        } catch(_) {}\r\n+    }\r\n \r\n+    // Garante que o select de tipos tenha todas as opÃƒÂ§ÃƒÂµes desejadas\r\n+    function ensurePetTypeOptions() {\r\n+        if (!petTypeSelect) return;\r\n+        const want = [\r\n+          ['cachorro','Cachorro'],\r\n+          ['gato','Gato'],\r\n+          ['passaro','Pássaro'],\r\n+          ['peixe','Peixe'],\r\n+          ['roedor','Roedor'],\r\n+          ['lagarto','Lagarto'],\r\n+          ['tartaruga','Tartaruga']\r\n+        ];\r\n+        const existing = new Set(Array.from(petTypeSelect.options).map(o => (o.value||'').toLowerCase()));\r\n+        for (const [val,label] of want) {\r\n+          if (!existing.has(val)) { const op=document.createElement('option'); op.value=val; op.textContent=label; petTypeSelect.appendChild(op); }\r\n+        }\r\n+        Array.from(petTypeSelect.options).forEach(o => { if ((o.value||'').toLowerCase()==='passaro') o.textContent='PÃƒÂ¡ssaro'; });\r\n+    }\r\n+\r\n+    // --- FunÃƒÂ§ÃƒÂ£o Principal para Exibir os Pets ---\r\n+\r\n     async function fetchAndDisplayPets() {\r\n         const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n         if (!loggedInUser?.id || !loggedInUser.token || !petsListContainer) return;\r\n \r\n@@ -42,19 +205,19 @@\n                     'Content-Type': 'application/json'\r\n                 }\r\n             });\r\n \r\n-            if (!response.ok) throw new Error('Não foi possível buscar os pets.');\r\n+            if (!response.ok) throw new Error('NÃƒÂ£o foi possÃƒÂ­vel buscar os pets.');\r\n             const pets = await response.json();\r\n \r\n             petsListContainer.innerHTML = '';\r\n \r\n             pets.forEach(pet => {\r\n                 const petCard = `\r\n                 <div class=\"bg-white px-4 py-3 border rounded-lg shadow-sm flex items-center w-full max-w-md\">\r\n                     <div class=\"flex-grow pr-4\">\r\n-                    <h3 class=\"font-bold text-lg text-primary\">${pet.nome}</h3>\r\n-                    <p class=\"text-sm text-gray-600\">${pet.raca} | ${pet.tipo}</p>\r\n+                    <h3 class=\"font-bold text-lg text-primary\">${fixEncoding(pet.nome)}</h3>\r\n+                    <p class=\"text-sm text-gray-600\">${fixEncoding(pet.raca)} | ${fixEncoding(pet.tipo)}</p>\r\n                     </div>\r\n                     <div class=\"flex flex-col space-y-1\">\r\n                     <button onclick=\"handleEditPet('${pet._id}')\" class=\"text-blue-500 hover:text-blue-700 transition-colors w-10 h-10 flex items-center justify-center rounded-full hover:bg-blue-500/10\">\r\n                         <div data-icon=\"edit\" class=\"w-10 h-10\"></div>\r\n@@ -76,15 +239,15 @@\n             showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n         }\r\n     }\r\n \r\n-    // --- Funções de Edição, Exclusão e Submissão ---\r\n+    // --- FunÃƒÂ§ÃƒÂµes de EdiÃƒÂ§ÃƒÂ£o, ExclusÃƒÂ£o e SubmissÃƒÂ£o ---\r\n \r\n     window.handleEditPet = async (petId) => {\r\n         try {\r\n         const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n         if (!loggedInUser?.token) {\r\n-            showModal({ title: 'Erro', message: 'Você precisa estar logado.', confirmText: 'OK' });\r\n+            showModal({ title: 'Erro', message: 'VocÃƒÂª precisa estar logado.', confirmText: 'OK' });\r\n             return;\r\n         }\r\n \r\n         const response = await fetch(`${API_CONFIG.BASE_URL}/pets/${petId}`, {\r\n@@ -93,9 +256,9 @@\n                 'Content-Type': 'application/json'\r\n             }\r\n         });\r\n \r\n-        if (!response.ok) throw new Error('Pet não encontrado.');\r\n+        if (!response.ok) throw new Error('Pet nÃƒÂ£o encontrado.');\r\n         const petData = await response.json();\r\n \r\n             hiddenPetIdInput.value = petData._id;\r\n             petForm.querySelector('#pet-name').value = petData.nome;\r\n@@ -112,29 +275,33 @@\n             petForm.querySelector('#pet-peso').value = petData.peso || '';\r\n \r\n             updateBreedOptions();\r\n             showForm();\r\n+            // aplica bloqueio/porte automÃƒÂ¡tico se cachorro\r\n+            syncPorteDisabled();\r\n+            await loadDogBreedsByPorte().catch(()=>{});\r\n+            setPorteFromBreedIfDog();\r\n         } catch (error) {\r\n             showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n         }\r\n     };\r\n \r\n     /**\r\n-     * NOVA FUNÇÃO: Lida com a exclusão de um pet, pedindo confirmação.\r\n-     * @param {string} petId O ID do pet a ser excluído.\r\n-     * @param {string} petName O nome do pet para usar na mensagem de confirmação.\r\n+     * NOVA FUNÃƒâ€¡ÃƒÆ’O: Lida com a exclusÃƒÂ£o de um pet, pedindo confirmaÃƒÂ§ÃƒÂ£o.\r\n+     * @param {string} petId O ID do pet a ser excluÃƒÂ­do.\r\n+     * @param {string} petName O nome do pet para usar na mensagem de confirmaÃƒÂ§ÃƒÂ£o.\r\n      */\r\n     window.handleDeletePet = (petId, petName) => {\r\n         showModal({\r\n-            title: 'Confirmar Exclusão',\r\n-            message: `Tem a certeza que deseja excluir o pet \"${petName}\"? Esta ação não pode ser desfeita.`,\r\n+            title: 'Confirmar ExclusÃƒÂ£o',\r\n+            message: `Tem a certeza que deseja excluir o pet \"${petName}\"? Esta aÃƒÂ§ÃƒÂ£o nÃƒÂ£o pode ser desfeita.`,\r\n             confirmText: 'Excluir',\r\n             cancelText: 'Cancelar',\r\n             onConfirm: async () => {\r\n                 try {\r\n                     const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                     if (!loggedInUser?.token) {\r\n-                        showModal({ title: 'Erro', message: 'Você precisa estar logado.', confirmText: 'OK' });\r\n+                        showModal({ title: 'Erro', message: 'VocÃƒÂª precisa estar logado.', confirmText: 'OK' });\r\n                         return;\r\n                     }\r\n \r\n                     const response = await fetch(`${API_CONFIG.BASE_URL}/pets/${petId}`, {\r\n@@ -146,14 +313,14 @@\n                     });\r\n \r\n                     if (!response.ok) {\r\n                         const result = await response.json();\r\n-                        throw new Error(result.message || 'Não foi possível excluir o pet.');\r\n+                        throw new Error(result.message || 'NÃƒÂ£o foi possÃƒÂ­vel excluir o pet.');\r\n                     }\r\n                     \r\n                     showModal({\r\n                         title: 'Sucesso!',\r\n-                        message: `O pet \"${petName}\" foi excluído.`,\r\n+                        message: `O pet \"${petName}\" foi excluÃƒÂ­do.`,\r\n                         confirmText: 'OK',\r\n                         onConfirm: () => window.location.reload()\r\n                     });\r\n \r\n@@ -174,14 +341,17 @@\n             submitButton.innerHTML = `<i class=\"fas fa-spinner fa-spin mr-2\"></i>A Salvar...`;\r\n \r\n             const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n             if (!loggedInUser) {\r\n-                alert('Utilizador não está logado!');\r\n+                alert('Utilizador nÃƒÂ£o estÃƒÂ¡ logado!');\r\n                 return;\r\n             }\r\n \r\n             const formData = new FormData(petForm);\r\n             const petData = Object.fromEntries(formData.entries());\r\n+            if (porteSelect && porteSelect.disabled) {\r\n+                petData['pet_porte'] = porteSelect.value;\r\n+            }\r\n             \r\n             const petId = hiddenPetIdInput.value;\r\n             const isEditing = !!petId;\r\n \r\n@@ -194,9 +364,9 @@\n \r\n             try {\r\n                 const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                 if (!loggedInUser?.token) {\r\n-                    showModal({ title: 'Erro', message: 'Token não fornecido.', confirmText: 'OK' });\r\n+                    showModal({ title: 'Erro', message: 'Token nÃƒÂ£o fornecido.', confirmText: 'OK' });\r\n                     return;\r\n                 }\r\n \r\n                 const response = await fetch(url, {\r\n@@ -218,22 +388,36 @@\n                     onConfirm: () => window.location.reload()\r\n                 });\r\n \r\n             } catch (error) {\r\n-                showModal({ title: 'Erro', message: `Não foi possível salvar o pet: ${error.message}`, confirmText: 'Tentar Novamente' });\r\n+                showModal({ title: 'Erro', message: `NÃƒÂ£o foi possÃƒÂ­vel salvar o pet: ${error.message}`, confirmText: 'Tentar novamente' });\r\n             } finally {\r\n                 submitButton.disabled = false;\r\n                 submitButton.innerHTML = originalButtonHtml;\r\n             }\r\n         });\r\n     }\r\n \r\n-    // --- Lógica para Sugestão de Raças (Awesomplete) ---\r\n+    // --- LÃƒÂ³gica para SugestÃƒÂ£o de RaÃƒÂ§as (Awesomplete) ---\r\n \r\n-    function updateBreedOptions() {\r\n+    async function updateBreedOptions() {\r\n         if (!petTypeSelect || !breedInput) return;\r\n         const selectedType = petTypeSelect.value;\r\n-        const breeds = BREED_DATA[selectedType] || [];\r\n+        await loadSpeciesMap().catch(()=>{});\r\n+        let breeds = [];\r\n+        const typeKey = norm(selectedType);\r\n+        if (typeKey === 'cachorro') {\r\n+          breeds = (SPECIES_MAP?.cachorro?.all || []).slice().map(fixEncoding).sort((a,b)=> a.localeCompare(b));\r\n+        } else if (typeKey === 'gato') {\r\n+          breeds = (SPECIES_MAP?.gato || SPECIES_MAP?.gatos || BREED_DATA?.gato || []).slice().map(fixEncoding).sort((a,b)=> a.localeCompare(b));\r\n+        } else if (typeKey === 'passaro') {\r\n+          breeds = (SPECIES_MAP?.passaro || SPECIES_MAP?.passaros || BREED_DATA?.passaro || []).slice().map(fixEncoding).sort((a,b)=> a.localeCompare(b));\r\n+        } else if (['peixe','roedor','lagarto','tartaruga'].includes(typeKey)) {\r\n+          breeds = (SPECIES_MAP?.[typeKey] || []).slice().map(fixEncoding).sort((a,b)=> a.localeCompare(b));\r\n+        } else {\r\n+          // fallback antigo\r\n+          breeds = (BREED_DATA && BREED_DATA[selectedType]) ? BREED_DATA[selectedType].map(fixEncoding) : [];\r\n+        }\r\n         \r\n         if (awesompleteInstance) {\r\n             awesompleteInstance.list = breeds;\r\n         } else {\r\n@@ -242,21 +426,41 @@\n                 minChars: 1,\r\n                 maxItems: 7,\r\n             });\r\n         }\r\n+        syncPorteDisabled();\r\n+        // placeholder corrigido\r\n+        try { if (breedInput && (!breedInput.placeholder || /raÃƒÂ§a|raï¿½ï¿½a/i.test(breedInput.placeholder))) breedInput.placeholder = 'Comece a digitar a raÃ§a...'; } catch(_){ }\r\n     }\r\n \r\n     // --- Event Listeners Iniciais ---\r\n \r\n     if (addPetBtn) addPetBtn.addEventListener('click', () => {\r\n         petForm.reset();\r\n         hiddenPetIdInput.value = '';\r\n         updateBreedOptions();\r\n+        syncPorteDisabled();\r\n         showForm();\r\n+        ensurePetTypeOptions();\r\n+        normalizeStaticLabels();\r\n     });\r\n     if (cancelPetBtn) cancelPetBtn.addEventListener('click', hideForm);\r\n\\ No newline at end of file\n-    if (petTypeSelect) petTypeSelect.addEventListener('change', updateBreedOptions);\r\n+    if (petTypeSelect) petTypeSelect.addEventListener('change', async () => {\r\n+      await updateBreedOptions();\r\n+      syncPorteDisabled();\r\n+      setPorteFromBreedIfDog();\r\n+    });\r\n \r\n-    // --- Execução Inicial ---\r\n+    // Atualiza porte ao escolher uma raÃƒÂ§a (para cachorro)\r\n+    if (breedInput) {\r\n+      breedInput.addEventListener('change', () => setTimeout(setPorteFromBreedIfDog, 0));\r\n+      breedInput.addEventListener('blur', () => setTimeout(setPorteFromBreedIfDog, 0));\r\n+      breedInput.addEventListener('awesomplete-selectcomplete', () => setTimeout(setPorteFromBreedIfDog, 0));\r\n+    }\r\n+\r\n+    // --- ExecuÃƒÂ§ÃƒÂ£o Inicial ---\r\n     fetchAndDisplayPets();\r\n+    ensurePetTypeOptions();\r\n+    normalizeStaticLabels();\r\n     updateBreedOptions();\r\n-});\n+    syncPorteDisabled();\r\n+});\r\n"
                },
                {
                    "date": 1757701339356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n         if (none) porteSelect.value = none.value || none.textContent;\r\n       }\r\n     }\r\n \r\n-    // --- FunÃƒÂ§ÃƒÂµes de Visibilidade do FormulÃƒÂ¡rio ---\r\n+    // --- Funções de Visibilidade do Formulário ---\r\n \r\n     const showForm = () => {\r\n         if (addPetBtnContainer && petFormContainer) {\r\n             addPetBtnContainer.classList.add('hidden');\r\n@@ -172,9 +172,9 @@\n             }\r\n         } catch(_) {}\r\n     }\r\n \r\n-    // Garante que o select de tipos tenha todas as opÃƒÂ§ÃƒÂµes desejadas\r\n+    // Garante que o select de tipos tenha todas as opções desejadas\r\n     function ensurePetTypeOptions() {\r\n         if (!petTypeSelect) return;\r\n         const want = [\r\n           ['cachorro','Cachorro'],\r\n@@ -188,12 +188,12 @@\n         const existing = new Set(Array.from(petTypeSelect.options).map(o => (o.value||'').toLowerCase()));\r\n         for (const [val,label] of want) {\r\n           if (!existing.has(val)) { const op=document.createElement('option'); op.value=val; op.textContent=label; petTypeSelect.appendChild(op); }\r\n         }\r\n-        Array.from(petTypeSelect.options).forEach(o => { if ((o.value||'').toLowerCase()==='passaro') o.textContent='PÃƒÂ¡ssaro'; });\r\n+        Array.from(petTypeSelect.options).forEach(o => { if ((o.value||'').toLowerCase()==='passaro') o.textContent='Pássaro'; });\r\n     }\r\n \r\n-    // --- FunÃƒÂ§ÃƒÂ£o Principal para Exibir os Pets ---\r\n+    // --- Função Principal para Exibir os Pets ---\r\n \r\n     async function fetchAndDisplayPets() {\r\n         const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n         if (!loggedInUser?.id || !loggedInUser.token || !petsListContainer) return;\r\n@@ -462,5 +462,5 @@\n     ensurePetTypeOptions();\r\n     normalizeStaticLabels();\r\n     updateBreedOptions();\r\n     syncPorteDisabled();\r\n-});\n\\ No newline at end of file\n+});\r\n"
                },
                {
                    "date": 1757702028057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n         try {\r\n             const sexoSel = document.getElementById('pet-sexo');\r\n             if (sexoSel) {\r\n                 Array.from(sexoSel.options).forEach(o => {\r\n-                    if (/F.?mea/i.test(o.textContent)) o.textContent = 'FÃƒÂªmea';\r\n+                    if (/F.?mea/i.test(o.textContent)) o.textContent = 'Fêmea';\r\n                 });\r\n             }\r\n             if (porteSelect) {\r\n                 let none = Array.from(porteSelect.options).find(o => (o.textContent||'').toLowerCase().includes('sem porte'));\r\n"
                },
                {
                    "date": 1757702050033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,9 @@\n                     none.value = 'Sem porte definido';\r\n                     porteSelect.insertBefore(none, porteSelect.firstChild);\r\n                 }\r\n                 Array.from(porteSelect.options).forEach(o => {\r\n-                    if (/M.?dio/i.test(o.textContent)) o.textContent = 'MÃƒÂ©dio';\r\n+                    if (/Médio/i.test(o.textContent)) o.textContent = 'Médio';\r\n                 });\r\n             }\r\n         } catch(_) {}\r\n     }\r\n"
                },
                {
                    "date": 1757702087137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n         try {\r\n             const sexoSel = document.getElementById('pet-sexo');\r\n             if (sexoSel) {\r\n                 Array.from(sexoSel.options).forEach(o => {\r\n-                    if (/F.?mea/i.test(o.textContent)) o.textContent = 'Fêmea';\r\n+                    if (/Fêmea/i.test(o.textContent)) o.textContent = 'Fêmea';\r\n                 });\r\n             }\r\n             if (porteSelect) {\r\n                 let none = Array.from(porteSelect.options).find(o => (o.textContent||'').toLowerCase().includes('sem porte'));\r\n"
                },
                {
                    "date": 1757702228924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,9 +205,9 @@\n                     'Content-Type': 'application/json'\r\n                 }\r\n             });\r\n \r\n-            if (!response.ok) throw new Error('NÃƒÂ£o foi possÃƒÂ­vel buscar os pets.');\r\n+            if (!response.ok) throw new Error('Não foi possível buscar os pets.');\r\n             const pets = await response.json();\r\n \r\n             petsListContainer.innerHTML = '';\r\n \r\n@@ -239,15 +239,15 @@\n             showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n         }\r\n     }\r\n \r\n-    // --- FunÃƒÂ§ÃƒÂµes de EdiÃƒÂ§ÃƒÂ£o, ExclusÃƒÂ£o e SubmissÃƒÂ£o ---\r\n+    // --- Funções de Edição, Exclusão e Submissão ---\r\n \r\n     window.handleEditPet = async (petId) => {\r\n         try {\r\n         const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n         if (!loggedInUser?.token) {\r\n-            showModal({ title: 'Erro', message: 'VocÃƒÂª precisa estar logado.', confirmText: 'OK' });\r\n+            showModal({ title: 'Erro', message: 'Você precisa estar logado.', confirmText: 'OK' });\r\n             return;\r\n         }\r\n \r\n         const response = await fetch(`${API_CONFIG.BASE_URL}/pets/${petId}`, {\r\n@@ -256,9 +256,9 @@\n                 'Content-Type': 'application/json'\r\n             }\r\n         });\r\n \r\n-        if (!response.ok) throw new Error('Pet nÃƒÂ£o encontrado.');\r\n+        if (!response.ok) throw new Error('Pet não encontrado.');\r\n         const petData = await response.json();\r\n \r\n             hiddenPetIdInput.value = petData._id;\r\n             petForm.querySelector('#pet-name').value = petData.nome;\r\n@@ -275,9 +275,9 @@\n             petForm.querySelector('#pet-peso').value = petData.peso || '';\r\n \r\n             updateBreedOptions();\r\n             showForm();\r\n-            // aplica bloqueio/porte automÃƒÂ¡tico se cachorro\r\n+            // aplica bloqueio/porte automático se cachorro\r\n             syncPorteDisabled();\r\n             await loadDogBreedsByPorte().catch(()=>{});\r\n             setPorteFromBreedIfDog();\r\n         } catch (error) {\r\n@@ -285,16 +285,16 @@\n         }\r\n     };\r\n \r\n     /**\r\n-     * NOVA FUNÃƒâ€¡ÃƒÆ’O: Lida com a exclusÃƒÂ£o de um pet, pedindo confirmaÃƒÂ§ÃƒÂ£o.\r\n-     * @param {string} petId O ID do pet a ser excluÃƒÂ­do.\r\n-     * @param {string} petName O nome do pet para usar na mensagem de confirmaÃƒÂ§ÃƒÂ£o.\r\n+     * NOVA FUNÇÃO: Lida com a exclusão de um pet, pedindo confirmação.\r\n+     * @param {string} petId O ID do pet a ser excluído.\r\n+     * @param {string} petName O nome do pet para usar na mensagem de confirmação.\r\n      */\r\n     window.handleDeletePet = (petId, petName) => {\r\n         showModal({\r\n-            title: 'Confirmar ExclusÃƒÂ£o',\r\n-            message: `Tem a certeza que deseja excluir o pet \"${petName}\"? Esta aÃƒÂ§ÃƒÂ£o nÃƒÂ£o pode ser desfeita.`,\r\n+            title: 'Confirmar Exclusão',\r\n+            message: `Tem a certeza que deseja excluir o pet \"${petName}\"? Esta ação não pode ser desfeita.`,\r\n             confirmText: 'Excluir',\r\n             cancelText: 'Cancelar',\r\n             onConfirm: async () => {\r\n                 try {\r\n@@ -313,14 +313,14 @@\n                     });\r\n \r\n                     if (!response.ok) {\r\n                         const result = await response.json();\r\n-                        throw new Error(result.message || 'NÃƒÂ£o foi possÃƒÂ­vel excluir o pet.');\r\n+                        throw new Error(result.message || 'Não foi possível excluir o pet.');\r\n                     }\r\n                     \r\n                     showModal({\r\n                         title: 'Sucesso!',\r\n-                        message: `O pet \"${petName}\" foi excluÃƒÂ­do.`,\r\n+                        message: `O pet \"${petName}\" foi excluído.`,\r\n                         confirmText: 'OK',\r\n                         onConfirm: () => window.location.reload()\r\n                     });\r\n \r\n@@ -341,9 +341,9 @@\n             submitButton.innerHTML = `<i class=\"fas fa-spinner fa-spin mr-2\"></i>A Salvar...`;\r\n \r\n             const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n             if (!loggedInUser) {\r\n-                alert('Utilizador nÃƒÂ£o estÃƒÂ¡ logado!');\r\n+                alert('Utilizador não está logado!');\r\n                 return;\r\n             }\r\n \r\n             const formData = new FormData(petForm);\r\n@@ -364,9 +364,9 @@\n \r\n             try {\r\n                 const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                 if (!loggedInUser?.token) {\r\n-                    showModal({ title: 'Erro', message: 'Token nÃƒÂ£o fornecido.', confirmText: 'OK' });\r\n+                    showModal({ title: 'Erro', message: 'Token não fornecido.', confirmText: 'OK' });\r\n                     return;\r\n                 }\r\n \r\n                 const response = await fetch(url, {\r\n@@ -388,9 +388,9 @@\n                     onConfirm: () => window.location.reload()\r\n                 });\r\n \r\n             } catch (error) {\r\n-                showModal({ title: 'Erro', message: `NÃƒÂ£o foi possÃƒÂ­vel salvar o pet: ${error.message}`, confirmText: 'Tentar novamente' });\r\n+                showModal({ title: 'Erro', message: `Não foi possível salvar o pet: ${error.message}`, confirmText: 'Tentar novamente' });\r\n             } finally {\r\n                 submitButton.disabled = false;\r\n                 submitButton.innerHTML = originalButtonHtml;\r\n             }\r\n@@ -428,9 +428,9 @@\n             });\r\n         }\r\n         syncPorteDisabled();\r\n         // placeholder corrigido\r\n-        try { if (breedInput && (!breedInput.placeholder || /raÃƒÂ§a|raï¿½ï¿½a/i.test(breedInput.placeholder))) breedInput.placeholder = 'Comece a digitar a raÃ§a...'; } catch(_){ }\r\n+        try { if (breedInput && (!breedInput.placeholder || /raça|raça/i.test(breedInput.placeholder))) breedInput.placeholder = 'Comece a digitar a raça...'; } catch(_){ }\r\n     }\r\n \r\n     // --- Event Listeners Iniciais ---\r\n \r\n"
                },
                {
                    "date": 1757702318686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,9 +299,9 @@\n             onConfirm: async () => {\r\n                 try {\r\n                     const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n                     if (!loggedInUser?.token) {\r\n-                        showModal({ title: 'Erro', message: 'VocÃƒÂª precisa estar logado.', confirmText: 'OK' });\r\n+                        showModal({ title: 'Erro', message: 'Você precisa estar logado.', confirmText: 'OK' });\r\n                         return;\r\n                     }\r\n \r\n                     const response = await fetch(`${API_CONFIG.BASE_URL}/pets/${petId}`, {\r\n@@ -396,9 +396,9 @@\n             }\r\n         });\r\n     }\r\n \r\n-    // --- LÃƒÂ³gica para SugestÃƒÂ£o de RaÃƒÂ§as (Awesomplete) ---\r\n+    // --- Lógica para Sugestão de Raças (Awesomplete) ---\r\n \r\n     async function updateBreedOptions() {\r\n         if (!petTypeSelect || !breedInput) return;\r\n         const selectedType = petTypeSelect.value;\r\n"
                },
                {
                    "date": 1757702432809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n             const list = body.split(/\\n+/).map(x => x.trim())\r\n               .filter(x => x && !x.startsWith('//'))\r\n               .map(x => x.replace(/\\*.*?\\*/g, ''))\r\n               .map(x => x.replace(/\\s*\\(duplicata.*$/i, ''))\r\n-              .map(x => x.replace(/\\s*[Ã¢â‚¬â€-].*$/,'').replace(/\\s*-\\s*registro.*$/i,''));\r\n+              .map(x => x.replace(/\\s*[â€“-].*$/,'').replace(/\\s*-\\s*registro.*$/i,''));\r\n             dogMap[key] = Array.from(new Set(list));\r\n           }\r\n         } else {\r\n           // retrocompatibilidade: blocos porte_... no topo\r\n"
                },
                {
                    "date": 1757702459570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n       try {\r\n         const txt = await fetch(url).then(r => r.text());\r\n         const species = {};\r\n \r\n-        // Extrai seÃƒÂ§ÃƒÂ£o cachorro{ ... }\r\n+        // Extrai seção cachorro{ ... }\r\n         const dogSectionMatch = txt.match(/cachorro\\s*{([\\s\\S]*?)}/i);\r\n         let dogMap = { mini:[], pequeno:[], medio:[], grande:[], gigante:[] };\r\n         if (dogSectionMatch) {\r\n           const dogBody = dogSectionMatch[1];\r\n"
                },
                {
                    "date": 1757703804695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,51 +52,46 @@\n       try {\r\n         const txt = await fetch(url).then(r => r.text());\r\n         const species = {};\r\n \r\n-        // Extrai seção cachorro{ ... }\r\n-        const dogSectionMatch = txt.match(/cachorro\\s*{([\\s\\S]*?)}/i);\r\n+        // Construção robusta do mapa de portes do cachorro: varre todos os blocos porte...\r\n         let dogMap = { mini:[], pequeno:[], medio:[], grande:[], gigante:[] };\r\n-        if (dogSectionMatch) {\r\n-          const dogBody = dogSectionMatch[1];\r\n-          const reDog = /porte[_\\s-]?(mini|pequeno|medio|grande|gigante)\\s*{([\\s\\S]*?)}/gi;\r\n-          let m;\r\n-          while ((m = reDog.exec(dogBody))) {\r\n-            const key = m[1].toLowerCase();\r\n-            const body = m[2];\r\n-            const list = body.split(/\\n+/).map(x => x.trim())\r\n-              .filter(x => x && !x.startsWith('//'))\r\n-              .map(x => x.replace(/\\*.*?\\*/g, ''))\r\n-              .map(x => x.replace(/\\s*\\(duplicata.*$/i, ''))\r\n-              .map(x => x.replace(/\\s*[â€“-].*$/,'').replace(/\\s*-\\s*registro.*$/i,''));\r\n-            dogMap[key] = Array.from(new Set(list));\r\n-          }\r\n-        } else {\r\n-          // retrocompatibilidade: blocos porte_... no topo\r\n-          const reDogLegacy = /porte[_\\s-]?(mini|pequeno|medio|grande|gigante)\\s*{([\\s\\S]*?)}/gi;\r\n-          let m2; const legacy = { mini:[], pequeno:[], medio:[], grande:[], gigante:[] };\r\n-          while ((m2 = reDogLegacy.exec(txt))) {\r\n-            const key = m2[1].toLowerCase();\r\n-            const body = m2[2];\r\n-            const list = body.split(/\\n+/).map(x => x.trim()).filter(Boolean);\r\n-            legacy[key] = Array.from(new Set(list));\r\n-          }\r\n-          dogMap = legacy;\r\n+        const reDogGlobal = /porte[_\\s-]?(mini|pequeno|medio|grande|gigante)\\s*{([\\s\\S]*?)}\\s*/gi;\r\n+        let m;\r\n+        while ((m = reDogGlobal.exec(txt))) {\r\n+        const key = m[1].toLowerCase();\r\n+        const body = m[2];\r\n+        const list = body.split(/\\n+/).map(x => x.trim())\r\n+            .filter(x => x && !x.startsWith('//') && x !== '...')\r\n+            .map(x => x.replace(/\\*.*?\\*/g, ''))\r\n+            .map(x => x.replace(/\\s*\\(duplicata.*$/i, ''))\r\n+            .map(x => x.replace(/\\s*[—-].*$/,'').replace(/\\s*-\\s*registro.*$/i,''));\r\n+        dogMap[key] = Array.from(new Set(list));\r\n         }\r\n-        const dogAll = Array.from(new Set([ ...dogMap.mini, ...dogMap.pequeno, ...dogMap.medio, ...dogMap.grande, ...dogMap.gigante ]));\r\n-        const dogLookup = {}; dogAll.forEach(n => dogLookup[norm(n)] = (dogMap.mini.includes(n) ? 'mini' : dogMap.pequeno.includes(n) ? 'pequeno' : dogMap.medio.includes(n) ? 'medio' : dogMap.grande.includes(n) ? 'grande' : 'gigante'));\r\n+\r\n+        const dogAll = Array.from(new Set([\r\n+        ...dogMap.mini, ...dogMap.pequeno, ...dogMap.medio, ...dogMap.grande, ...dogMap.gigante\r\n+        ]));\r\n+        const dogLookup = {};\r\n+        dogAll.forEach(n => {\r\n+        const k = norm(n);\r\n+        dogLookup[k] =\r\n+            dogMap.mini.includes(n)    ? 'mini'    :\r\n+            dogMap.pequeno.includes(n) ? 'pequeno' :\r\n+            dogMap.medio.includes(n)   ? 'medio'   :\r\n+            dogMap.grande.includes(n)  ? 'grande'  : 'gigante';\r\n+        });\r\n         species.cachorro = { portes: dogMap, all: dogAll, map: dogLookup };\r\n \r\n-        // Outras espÃƒÂ©cies simples (sem porte)\r\n+        // Outras espécies simples (sem porte)\r\n         const simpleSpecies = ['gatos','gato','passaros','passaro','peixes','peixe','roedores','roedor','lagartos','lagarto','tartarugas','tartaruga'];\r\n         for (const sp of simpleSpecies) {\r\n-          const m = new RegExp(sp + \"\\\\s*{([\\\\s\\\\S]*?)}\",\"i\").exec(txt);\r\n-          if (m) {\r\n-            const list = m[1].split(/\\n+/).map(s=>s.trim()).filter(x=>x && !x.startsWith('//'));\r\n-            const key = sp.replace(/s$/,''); // singular\r\n-            species[key] = list;\r\n-          }\r\n+        const m2 = new RegExp(sp + \"\\\\s*{([\\\\s\\\\S]*?)}\",\"i\").exec(txt);\r\n+        if (m2) {\r\n+            const list = m2[1].split(/\\n+/).map(x => x.trim()).filter(x => x && !x.startsWith('//') && x !== '...');\r\n+            species[sp.replace(/s$/,'')] = Array.from(new Set(list));\r\n         }\r\n+        }\r\n         SPECIES_MAP = species;\r\n         return species;\r\n       } catch (e) {\r\n         console.warn('Falha ao ler Racas-leitura.js', e);\r\n"
                },
                {
                    "date": 1757705188380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,11 @@\n         for (const sp of simpleSpecies) {\r\n         const m2 = new RegExp(sp + \"\\\\s*{([\\\\s\\\\S]*?)}\",\"i\").exec(txt);\r\n         if (m2) {\r\n             const list = m2[1].split(/\\n+/).map(x => x.trim()).filter(x => x && !x.startsWith('//') && x !== '...');\r\n-            species[sp.replace(/s$/,'')] = Array.from(new Set(list));\r\n+            // Singularização robusta: corrige 'roedores' -> 'roedor' e mantém demais por remoção do 's' final\r\n+            const singular = /roedores$/i.test(sp) ? 'roedor' : sp.replace(/s$/,'');\r\n+            species[singular] = Array.from(new Set(list));\r\n         }\r\n         }\r\n         SPECIES_MAP = species;\r\n         return species;\r\n"
                },
                {
                    "date": 1757705216138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -411,9 +411,11 @@\n         } else if (['peixe','roedor','lagarto','tartaruga'].includes(typeKey)) {\r\n           breeds = (SPECIES_MAP?.[typeKey] || []).slice().map(fixEncoding).sort((a,b)=> a.localeCompare(b));\r\n         } else {\r\n           // fallback antigo\r\n-          breeds = (BREED_DATA && BREED_DATA[selectedType]) ? BREED_DATA[selectedType].map(fixEncoding) : [];\r\n+            breeds = (typeof BREED_DATA !== 'undefined' && BREED_DATA?.[typeKey])\r\n+            ? BREED_DATA[typeKey].map(fixEncoding)\r\n+            : [];\r\n         }\r\n         \r\n         if (awesompleteInstance) {\r\n             awesompleteInstance.list = breeds;\r\n"
                },
                {
                    "date": 1757705778647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,474 @@\n+document.addEventListener('DOMContentLoaded', () => {\r\n+    // --- ReferÃƒÂªncias aos elementos do DOM ---\r\n+    const petsListContainer = document.getElementById('pets-list-container');\r\n+    const addPetBtnContainer = document.getElementById('add-pet-button-container');\r\n+    const petFormContainer = document.getElementById('pet-form-container');\r\n+    const addPetBtn = document.getElementById('add-pet-btn');\r\n+    const petForm = document.getElementById('new-pet-form');\r\n+    const cancelPetBtn = document.getElementById('cancel-pet-btn');\r\n+    const petTypeSelect = document.getElementById('pet-type');\r\n+    const breedInput = document.getElementById('pet-raca');\r\n+    const porteSelect = document.getElementById('pet-porte');\r\n+    const hiddenPetIdInput = document.getElementById('pet-id');\r\n+    let awesompleteInstance;\r\n+    let SPECIES_MAP = null;         // { cachorro:{portes:{mini:[],...}, all:[], map:{breed->porte}}, gato:[...], passaro:[...], peixe:[...], roedor:[...], lagarto:[...], tartaruga:[...] }\r\n+\r\n+    // Helpers para normalizar strings (ignora acentos/maiÃƒÂºsculas)\r\n+    const norm = (s) => String(s || '')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase();\r\n+    const normSize = (s) => {\r\n+      const k = norm(s);\r\n+      if (k.startsWith('mini')) return 'mini';\r\n+      if (k.startsWith('peq')) return 'pequeno';\r\n+      if (k.startsWith('med')) return 'medio';\r\n+      if (k.startsWith('gra')) return 'grande';\r\n+      if (k.startsWith('gig')) return 'gigante';\r\n+      return 'medio';\r\n+    };\r\n+\r\n+    // Corrige sequÃªncias comuns de texto corrompidas por encoding (UTF-8 vs ISO-8859-1)\r\n+    function fixEncoding(s) {\r\n+      if (!s) return s;\r\n+      return String(s)\r\n+        .replace(/ÃƒÂ¡/g,'Ã¡').replace(/ÃƒÂ¢/g,'Ã¢').replace(/ÃƒÂ£/g,'Ã£').replace(/ÃƒÂ¤/g,'Ã¤')\r\n+        .replace(/ÃƒÂ/g,'Ã').replace(/Ãƒâ€š/g,'Ã‚').replace(/ÃƒÆ’/g,'Ãƒ')\r\n+        .replace(/ÃƒÂ©/g,'Ã©').replace(/ÃƒÂª/g,'Ãª').replace(/ÃƒÂ¨/g,'Ã¨').replace(/Ãƒâ€°/g,'Ã‰').replace(/ÃƒÅ /g,'ÃŠ')\r\n+        .replace(/ÃƒÂ­/g,'Ã­').replace(/ÃƒÂ¬/g,'Ã¬').replace(/ÃƒÂ/g,'Ã')\r\n+        .replace(/ÃƒÂ³/g,'Ã³').replace(/ÃƒÂ´/g,'Ã´').replace(/ÃƒÂµ/g,'Ãµ').replace(/Ãƒâ€œ/g,'Ã“').replace(/Ãƒâ€/g,'Ã”')\r\n+        .replace(/ÃƒÂº/g,'Ãº').replace(/ÃƒÂ¼/g,'Ã¼').replace(/ÃƒÅ¡/g,'Ãš')\r\n+        .replace(/ÃƒÂ§/g,'Ã§').replace(/ÃƒÂ‡/g,'Ã‡')\r\n+        .replace(/ÃƒÂ /g,'Ã ').replace(/ÃƒÂ¸/g,'Ã¸')\r\n+        .replace(/Ã‚Âº/g,'Âº').replace(/Ã‚Âª/g,'Âª')\r\n+        .replace(/ÃƒÂ¢Ã¢â€šÂ¬Ã¢â‚¬Å“/g,'â€“').replace(/Ã¢â‚¬â€œ/g,'â€“').replace(/Ã¢â‚¬â€/g,'â€”')\r\n+        .replace(/Ã¢â‚¬Ëœ/g,'â€˜').replace(/Ã¢â‚¬â„¢/g,'â€™').replace(/Ã¢â‚¬Å“/g,'â€œ').replace(/Ã¢â‚¬Â/g,'â€')\r\n+        .replace(/Ã¢â‚¬Â¢/g,'â€¢').replace(/Ã¢â‚¬Â¦/g,'â€¦');\r\n+    }\r\n+\r\n+    async function loadSpeciesMap() {\r\n+      if (SPECIES_MAP) return SPECIES_MAP;\r\n+      const base = (window.basePath || '../');\r\n+      const url = base + 'data/Racas-leitura.js';\r\n+      try {\r\n+        const txt = await fetch(url).then(r => r.text());\r\n+        const species = {};\r\n+\r\n+        // Construção robusta do mapa de portes do cachorro: varre todos os blocos porte...\r\n+        let dogMap = { mini:[], pequeno:[], medio:[], grande:[], gigante:[] };\r\n+        const reDogGlobal = /porte[_\\s-]?(mini|pequeno|medio|grande|gigante)\\s*{([\\s\\S]*?)}\\s*/gi;\r\n+        let m;\r\n+        while ((m = reDogGlobal.exec(txt))) {\r\n+        const key = m[1].toLowerCase();\r\n+        const body = m[2];\r\n+        const list = body.split(/\\n+/).map(x => x.trim())\r\n+            .filter(x => x && !x.startsWith('//') && x !== '...')\r\n+            .map(x => x.replace(/\\*.*?\\*/g, ''))\r\n+            .map(x => x.replace(/\\s*\\(duplicata.*$/i, ''))\r\n+            .map(x => x.replace(/\\s*[—-].*$/,'').replace(/\\s*-\\s*registro.*$/i,''));\r\n+        dogMap[key] = Array.from(new Set(list));\r\n+        }\r\n+\r\n+        const dogAll = Array.from(new Set([\r\n+        ...dogMap.mini, ...dogMap.pequeno, ...dogMap.medio, ...dogMap.grande, ...dogMap.gigante\r\n+        ]));\r\n+        const dogLookup = {};\r\n+        dogAll.forEach(n => {\r\n+        const k = norm(n);\r\n+        dogLookup[k] =\r\n+            dogMap.mini.includes(n)    ? 'mini'    :\r\n+            dogMap.pequeno.includes(n) ? 'pequeno' :\r\n+            dogMap.medio.includes(n)   ? 'medio'   :\r\n+            dogMap.grande.includes(n)  ? 'grande'  : 'gigante';\r\n+        });\r\n+        species.cachorro = { portes: dogMap, all: dogAll, map: dogLookup };\r\n+\r\n+        // Outras espécies simples (sem porte)\r\n+        const simpleSpecies = ['gatos','gato','passaros','passaro','peixes','peixe','roedores','roedor','lagartos','lagarto','tartarugas','tartaruga'];\r\n+        for (const sp of simpleSpecies) {\r\n+        const m2 = new RegExp(sp + \"\\\\s*{([\\\\s\\\\S]*?)}\",\"i\").exec(txt);\r\n+        if (m2) {\r\n+            const list = m2[1]\r\n+            .split(/\\n+/)\r\n+            .map(x => x.trim())\r\n+            .filter(x => x && !x.startsWith('//') && x !== '...')\r\n+            .map(x => x.replace(/\\*.*?\\*/g, ''))\r\n+            .map(x => x.replace(/\\s*\\(duplicata.*$/i, ''))\r\n+            .map(x => x.replace(/\\s*[—-].*$/, '').replace(/\\s*-\\s*registro.*$/i, ''));\r\n+            const singular =\r\n+                /roedores$/i.test(sp)   ? 'roedor'     :\r\n+                /gatos$/i.test(sp)      ? 'gato'       :\r\n+                /passaros$/i.test(sp)   ? 'passaro'    :\r\n+                /peixes$/i.test(sp)     ? 'peixe'      :\r\n+                /lagartos$/i.test(sp)   ? 'lagarto'    :\r\n+                /tartarugas$/i.test(sp) ? 'tartaruga'  :\r\n+                sp.replace(/s$/, '');\r\n+            species[singular] = Array.from(new Set(list));\r\n+        }\r\n+        }\r\n+        SPECIES_MAP = species;\r\n+        return species;\r\n+      } catch (e) {\r\n+        console.warn('Falha ao ler Racas-leitura.js', e);\r\n+        SPECIES_MAP = null;\r\n+        return null;\r\n+      }\r\n+    }\r\n+\r\n+    function setPorteFromBreedIfDog() {\r\n+      if (!porteSelect) return;\r\n+      const isDog = petTypeSelect && norm(petTypeSelect.value) === 'cachorro';\r\n+      if (!isDog) return;\r\n+      const map = SPECIES_MAP?.cachorro?.map;\r\n+      const b = norm(breedInput?.value || '');\r\n+      const k = map ? map[b] : null;\r\n+      const desired = k || 'medio';\r\n+      // encontra a option pelo texto (normalizado)\r\n+      const opts = Array.from(porteSelect.options || []);\r\n+      const match = opts.find(o => normSize(o.textContent) === desired);\r\n+      if (match) porteSelect.value = match.value || match.textContent;\r\n+    }\r\n+\r\n+    function syncPorteDisabled() {\r\n+      if (!porteSelect) return;\r\n+      const isDog = petTypeSelect && norm(petTypeSelect.value) === 'cachorro';\r\n+      // Nunca esconder; apenas bloquear com o valor apropriado\r\n+      porteSelect.disabled = true;\r\n+      if (isDog) {\r\n+        setPorteFromBreedIfDog();\r\n+      } else {\r\n+        const none = Array.from(porteSelect.options).find(o => (o.textContent||'').toLowerCase().includes('sem porte'));\r\n+        if (none) porteSelect.value = none.value || none.textContent;\r\n+      }\r\n+    }\r\n+\r\n+    // --- Funções de Visibilidade do Formulário ---\r\n+\r\n+    const showForm = () => {\r\n+        if (addPetBtnContainer && petFormContainer) {\r\n+            addPetBtnContainer.classList.add('hidden');\r\n+            petFormContainer.classList.remove('hidden');\r\n+        }\r\n+    };\r\n+\r\n+    const hideForm = () => {\r\n+        if (addPetBtnContainer && petFormContainer) {\r\n+            petFormContainer.classList.add('hidden');\r\n+            addPetBtnContainer.classList.remove('hidden');\r\n+            petForm.reset();\r\n+            hiddenPetIdInput.value = '';\r\n+        }\r\n+    };\r\n+\r\n+    function normalizeStaticLabels() {\r\n+        try {\r\n+            const sexoSel = document.getElementById('pet-sexo');\r\n+            if (sexoSel) {\r\n+                Array.from(sexoSel.options).forEach(o => {\r\n+                    if (/Fêmea/i.test(o.textContent)) o.textContent = 'Fêmea';\r\n+                });\r\n+            }\r\n+            if (porteSelect) {\r\n+                let none = Array.from(porteSelect.options).find(o => (o.textContent||'').toLowerCase().includes('sem porte'));\r\n+                if (!none) {\r\n+                    none = document.createElement('option');\r\n+                    none.textContent = 'Sem porte definido';\r\n+                    none.value = 'Sem porte definido';\r\n+                    porteSelect.insertBefore(none, porteSelect.firstChild);\r\n+                }\r\n+                Array.from(porteSelect.options).forEach(o => {\r\n+                    if (/Médio/i.test(o.textContent)) o.textContent = 'Médio';\r\n+                });\r\n+            }\r\n+        } catch(_) {}\r\n+    }\r\n+\r\n+    // Garante que o select de tipos tenha todas as opções desejadas\r\n+    function ensurePetTypeOptions() {\r\n+        if (!petTypeSelect) return;\r\n+        const want = [\r\n+          ['cachorro','Cachorro'],\r\n+          ['gato','Gato'],\r\n+          ['passaro','Pássaro'],\r\n+          ['peixe','Peixe'],\r\n+          ['roedor','Roedor'],\r\n+          ['lagarto','Lagarto'],\r\n+          ['tartaruga','Tartaruga']\r\n+        ];\r\n+        const existing = new Set(Array.from(petTypeSelect.options).map(o => (o.value||'').toLowerCase()));\r\n+        for (const [val,label] of want) {\r\n+          if (!existing.has(val)) { const op=document.createElement('option'); op.value=val; op.textContent=label; petTypeSelect.appendChild(op); }\r\n+        }\r\n+        Array.from(petTypeSelect.options).forEach(o => { if ((o.value||'').toLowerCase()==='passaro') o.textContent='Pássaro'; });\r\n+    }\r\n+\r\n+    // --- Função Principal para Exibir os Pets ---\r\n+\r\n+    async function fetchAndDisplayPets() {\r\n+        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+        if (!loggedInUser?.id || !loggedInUser.token || !petsListContainer) return;\r\n+\r\n+        try {\r\n+            const response = await fetch(`${API_CONFIG.BASE_URL}/pets/user/${loggedInUser.id}`, {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${loggedInUser.token}`,\r\n+                    'Content-Type': 'application/json'\r\n+                }\r\n+            });\r\n+\r\n+            if (!response.ok) throw new Error('Não foi possível buscar os pets.');\r\n+            const pets = await response.json();\r\n+\r\n+            petsListContainer.innerHTML = '';\r\n+\r\n+            pets.forEach(pet => {\r\n+                const petCard = `\r\n+                <div class=\"bg-white px-4 py-3 border rounded-lg shadow-sm flex items-center w-full max-w-md\">\r\n+                    <div class=\"flex-grow pr-4\">\r\n+                    <h3 class=\"font-bold text-lg text-primary\">${fixEncoding(pet.nome)}</h3>\r\n+                    <p class=\"text-sm text-gray-600\">${fixEncoding(pet.raca)} | ${fixEncoding(pet.tipo)}</p>\r\n+                    </div>\r\n+                    <div class=\"flex flex-col space-y-1\">\r\n+                    <button onclick=\"handleEditPet('${pet._id}')\" class=\"text-blue-500 hover:text-blue-700 transition-colors w-10 h-10 flex items-center justify-center rounded-full hover:bg-blue-500/10\">\r\n+                        <div data-icon=\"edit\" class=\"w-10 h-10\"></div>\r\n+                        <span class=\"sr-only\">Editar</span>\r\n+                    </button>\r\n+                    <button onclick=\"handleDeletePet('${pet._id}', '${pet.nome}')\" class=\"text-red-500 hover:text-red-700 transition-colors w-10 h-10 flex items-center justify-center rounded-full hover:bg-red-500/10\">\r\n+                        <div data-icon=\"trash-pet\" class=\"w-10 h-10\"></div>\r\n+                        <span class=\"sr-only\">Excluir</span>\r\n+                    </button>\r\n+                    </div>\r\n+                </div>\r\n+                `;\r\n+                petsListContainer.innerHTML += petCard;\r\n+            });\r\n+            \r\n+            await loadIcons();\r\n+        } catch (error) {\r\n+            console.error('Erro ao buscar pets:', error);\r\n+            showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n+        }\r\n+    }\r\n+\r\n+    // --- Funções de Edição, Exclusão e Submissão ---\r\n+\r\n+    window.handleEditPet = async (petId) => {\r\n+        try {\r\n+        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+        if (!loggedInUser?.token) {\r\n+            showModal({ title: 'Erro', message: 'Você precisa estar logado.', confirmText: 'OK' });\r\n+            return;\r\n+        }\r\n+\r\n+        const response = await fetch(`${API_CONFIG.BASE_URL}/pets/${petId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${loggedInUser.token}`,\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+\r\n+        if (!response.ok) throw new Error('Pet não encontrado.');\r\n+        const petData = await response.json();\r\n+\r\n+            hiddenPetIdInput.value = petData._id;\r\n+            petForm.querySelector('#pet-name').value = petData.nome;\r\n+            petForm.querySelector('#pet-type').value = petData.tipo;\r\n+            petForm.querySelector('#pet-raca').value = petData.raca;\r\n+            petForm.querySelector('#pet-porte').value = petData.porte;\r\n+            petForm.querySelector('#pet-sexo').value = petData.sexo;\r\n+            if (petData.dataNascimento) {\r\n+                petForm.querySelector('#pet-nascimento').value = new Date(petData.dataNascimento).toISOString().split('T')[0];\r\n+            }\r\n+            petForm.querySelector('#pet-microchip').value = petData.microchip || '';\r\n+            petForm.querySelector('#pet-pelagem').value = petData.pelagemCor || '';\r\n+            petForm.querySelector('#pet-rga').value = petData.rga || '';\r\n+            petForm.querySelector('#pet-peso').value = petData.peso || '';\r\n+\r\n+            updateBreedOptions();\r\n+            showForm();\r\n+            // aplica bloqueio/porte automático se cachorro\r\n+            syncPorteDisabled();\r\n+            await loadDogBreedsByPorte().catch(()=>{});\r\n+            setPorteFromBreedIfDog();\r\n+        } catch (error) {\r\n+            showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n+        }\r\n+    };\r\n+\r\n+    /**\r\n+     * NOVA FUNÇÃO: Lida com a exclusão de um pet, pedindo confirmação.\r\n+     * @param {string} petId O ID do pet a ser excluído.\r\n+     * @param {string} petName O nome do pet para usar na mensagem de confirmação.\r\n+     */\r\n+    window.handleDeletePet = (petId, petName) => {\r\n+        showModal({\r\n+            title: 'Confirmar Exclusão',\r\n+            message: `Tem a certeza que deseja excluir o pet \"${petName}\"? Esta ação não pode ser desfeita.`,\r\n+            confirmText: 'Excluir',\r\n+            cancelText: 'Cancelar',\r\n+            onConfirm: async () => {\r\n+                try {\r\n+                    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+                    if (!loggedInUser?.token) {\r\n+                        showModal({ title: 'Erro', message: 'Você precisa estar logado.', confirmText: 'OK' });\r\n+                        return;\r\n+                    }\r\n+\r\n+                    const response = await fetch(`${API_CONFIG.BASE_URL}/pets/${petId}`, {\r\n+                        method: 'DELETE',\r\n+                        headers: {\r\n+                            'Authorization': `Bearer ${loggedInUser.token}`,\r\n+                            'Content-Type': 'application/json'\r\n+                        }\r\n+                    });\r\n+\r\n+                    if (!response.ok) {\r\n+                        const result = await response.json();\r\n+                        throw new Error(result.message || 'Não foi possível excluir o pet.');\r\n+                    }\r\n+                    \r\n+                    showModal({\r\n+                        title: 'Sucesso!',\r\n+                        message: `O pet \"${petName}\" foi excluído.`,\r\n+                        confirmText: 'OK',\r\n+                        onConfirm: () => window.location.reload()\r\n+                    });\r\n+\r\n+                } catch (error) {\r\n+                    showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n+                }\r\n+            }\r\n+        });\r\n+    };\r\n+\r\n+    if (petForm) {\r\n+        petForm.addEventListener('submit', async (event) => {\r\n+            event.preventDefault();\r\n+\r\n+            const submitButton = petForm.querySelector('button[type=\"submit\"]');\r\n+            const originalButtonHtml = submitButton.innerHTML;\r\n+            submitButton.disabled = true;\r\n+            submitButton.innerHTML = `<i class=\"fas fa-spinner fa-spin mr-2\"></i>A Salvar...`;\r\n+\r\n+            const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+            if (!loggedInUser) {\r\n+                alert('Utilizador não está logado!');\r\n+                return;\r\n+            }\r\n+\r\n+            const formData = new FormData(petForm);\r\n+            const petData = Object.fromEntries(formData.entries());\r\n+            if (porteSelect && porteSelect.disabled) {\r\n+                petData['pet_porte'] = porteSelect.value;\r\n+            }\r\n+            \r\n+            const petId = hiddenPetIdInput.value;\r\n+            const isEditing = !!petId;\r\n+\r\n+            const method = isEditing ? 'PUT' : 'POST';\r\n+            const url = isEditing ? `${API_CONFIG.BASE_URL}/pets/${petId}` : `${API_CONFIG.BASE_URL}/pets`;\r\n+\r\n+            if (!isEditing) {\r\n+                petData.owner = loggedInUser.id;\r\n+            }\r\n+\r\n+            try {\r\n+                const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+                if (!loggedInUser?.token) {\r\n+                    showModal({ title: 'Erro', message: 'Token não fornecido.', confirmText: 'OK' });\r\n+                    return;\r\n+                }\r\n+\r\n+                const response = await fetch(url, {\r\n+                    method: method,\r\n+                    headers: { \r\n+                        'Content-Type': 'application/json',\r\n+                        'Authorization': `Bearer ${loggedInUser.token}`\r\n+                    },\r\n+                    body: JSON.stringify(petData),\r\n+                });\r\n+\r\n+                const result = await response.json();\r\n+                if (!response.ok) throw new Error(result.message);\r\n+                \r\n+                showModal({\r\n+                    title: 'Sucesso!',\r\n+                    message: isEditing ? 'Os dados do seu pet foram atualizados.' : 'O seu novo pet foi adicionado.',\r\n+                    confirmText: 'OK',\r\n+                    onConfirm: () => window.location.reload()\r\n+                });\r\n+\r\n+            } catch (error) {\r\n+                showModal({ title: 'Erro', message: `Não foi possível salvar o pet: ${error.message}`, confirmText: 'Tentar novamente' });\r\n+            } finally {\r\n+                submitButton.disabled = false;\r\n+                submitButton.innerHTML = originalButtonHtml;\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    // --- Lógica para Sugestão de Raças (Awesomplete) ---\r\n+\r\n+    async function updateBreedOptions() {\r\n+    if (!petTypeSelect || !breedInput) return;\r\n+    const selectedType = petTypeSelect.value;\r\n+    await loadSpeciesMap().catch(()=>{});\r\n+    let breeds = [];\r\n+    const typeKey = norm(selectedType);\r\n+\r\n+    if (typeKey === 'cachorro') {\r\n+        breeds = (SPECIES_MAP?.cachorro?.all || []).slice();\r\n+    } else if (typeKey === 'gato') {\r\n+        breeds = (SPECIES_MAP?.gato || SPECIES_MAP?.gatos || []).slice();\r\n+    } else if (typeKey === 'passaro') {\r\n+        breeds = (SPECIES_MAP?.passaro || SPECIES_MAP?.passaros || []).slice();\r\n+    } else if (['peixe','roedor','lagarto','tartaruga'].includes(typeKey)) {\r\n+        breeds = (SPECIES_MAP?.[typeKey] || []).slice();\r\n+    } else {\r\n+        breeds = [];\r\n+    }\r\n+\r\n+    breeds = breeds.map(fixEncoding).sort((a,b)=> a.localeCompare(b));\r\n+\r\n+    if (awesompleteInstance) {\r\n+        awesompleteInstance.list = breeds;\r\n+    } else {\r\n+        awesompleteInstance = new Awesomplete(breedInput, {\r\n+        minChars: 1,\r\n+        list: breeds,\r\n+        autoFirst: true\r\n+        });\r\n+    }\r\n+    }\r\n+\r\n+    // --- Event Listeners Iniciais ---\r\n+\r\n+    if (addPetBtn) addPetBtn.addEventListener('click', () => {\r\n+        petForm.reset();\r\n+        hiddenPetIdInput.value = '';\r\n+        updateBreedOptions();\r\n+        syncPorteDisabled();\r\n+        showForm();\r\n+        ensurePetTypeOptions();\r\n+        normalizeStaticLabels();\r\n+    });\r\n+    if (cancelPetBtn) cancelPetBtn.addEventListener('click', hideForm);\r\n+    if (petTypeSelect) petTypeSelect.addEventListener('change', async () => {\r\n+      await updateBreedOptions();\r\n+      syncPorteDisabled();\r\n+      setPorteFromBreedIfDog();\r\n+    });\r\n+\r\n+    // Atualiza porte ao escolher uma raÃƒÂ§a (para cachorro)\r\n+    if (breedInput) {\r\n+      breedInput.addEventListener('change', () => setTimeout(setPorteFromBreedIfDog, 0));\r\n+      breedInput.addEventListener('blur', () => setTimeout(setPorteFromBreedIfDog, 0));\r\n+      breedInput.addEventListener('awesomplete-selectcomplete', () => setTimeout(setPorteFromBreedIfDog, 0));\r\n+    }\r\n+\r\n+    // --- ExecuÃƒÂ§ÃƒÂ£o Inicial ---\r\n+    fetchAndDisplayPets();\r\n+    ensurePetTypeOptions();\r\n+    normalizeStaticLabels();\r\n+    updateBreedOptions();\r\n+    syncPorteDisabled();\r\n+});\r\n"
                },
                {
                    "date": 1757706767490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,25 +27,10 @@\n       return 'medio';\r\n     };\r\n \r\n     // Corrige sequÃªncias comuns de texto corrompidas por encoding (UTF-8 vs ISO-8859-1)\r\n-    function fixEncoding(s) {\r\n-      if (!s) return s;\r\n-      return String(s)\r\n-        .replace(/ÃƒÂ¡/g,'Ã¡').replace(/ÃƒÂ¢/g,'Ã¢').replace(/ÃƒÂ£/g,'Ã£').replace(/ÃƒÂ¤/g,'Ã¤')\r\n-        .replace(/ÃƒÂ/g,'Ã').replace(/Ãƒâ€š/g,'Ã‚').replace(/ÃƒÆ’/g,'Ãƒ')\r\n-        .replace(/ÃƒÂ©/g,'Ã©').replace(/ÃƒÂª/g,'Ãª').replace(/ÃƒÂ¨/g,'Ã¨').replace(/Ãƒâ€°/g,'Ã‰').replace(/ÃƒÅ /g,'ÃŠ')\r\n-        .replace(/ÃƒÂ­/g,'Ã­').replace(/ÃƒÂ¬/g,'Ã¬').replace(/ÃƒÂ/g,'Ã')\r\n-        .replace(/ÃƒÂ³/g,'Ã³').replace(/ÃƒÂ´/g,'Ã´').replace(/ÃƒÂµ/g,'Ãµ').replace(/Ãƒâ€œ/g,'Ã“').replace(/Ãƒâ€/g,'Ã”')\r\n-        .replace(/ÃƒÂº/g,'Ãº').replace(/ÃƒÂ¼/g,'Ã¼').replace(/ÃƒÅ¡/g,'Ãš')\r\n-        .replace(/ÃƒÂ§/g,'Ã§').replace(/ÃƒÂ‡/g,'Ã‡')\r\n-        .replace(/ÃƒÂ /g,'Ã ').replace(/ÃƒÂ¸/g,'Ã¸')\r\n-        .replace(/Ã‚Âº/g,'Âº').replace(/Ã‚Âª/g,'Âª')\r\n-        .replace(/ÃƒÂ¢Ã¢â€šÂ¬Ã¢â‚¬Å“/g,'â€“').replace(/Ã¢â‚¬â€œ/g,'â€“').replace(/Ã¢â‚¬â€/g,'â€”')\r\n-        .replace(/Ã¢â‚¬Ëœ/g,'â€˜').replace(/Ã¢â‚¬â„¢/g,'â€™').replace(/Ã¢â‚¬Å“/g,'â€œ').replace(/Ã¢â‚¬Â/g,'â€')\r\n-        .replace(/Ã¢â‚¬Â¢/g,'â€¢').replace(/Ã¢â‚¬Â¦/g,'â€¦');\r\n-    }\r\n \r\n+\r\n     async function loadSpeciesMap() {\r\n       if (SPECIES_MAP) return SPECIES_MAP;\r\n       const base = (window.basePath || '../');\r\n       const url = base + 'data/Racas-leitura.js';\r\n@@ -471,469 +456,4 @@\n     normalizeStaticLabels();\r\n     updateBreedOptions();\r\n     syncPorteDisabled();\r\n });\r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-    // --- ReferÃƒÂªncias aos elementos do DOM ---\r\n-    const petsListContainer = document.getElementById('pets-list-container');\r\n-    const addPetBtnContainer = document.getElementById('add-pet-button-container');\r\n-    const petFormContainer = document.getElementById('pet-form-container');\r\n-    const addPetBtn = document.getElementById('add-pet-btn');\r\n-    const petForm = document.getElementById('new-pet-form');\r\n-    const cancelPetBtn = document.getElementById('cancel-pet-btn');\r\n-    const petTypeSelect = document.getElementById('pet-type');\r\n-    const breedInput = document.getElementById('pet-raca');\r\n-    const porteSelect = document.getElementById('pet-porte');\r\n-    const hiddenPetIdInput = document.getElementById('pet-id');\r\n-    let awesompleteInstance;\r\n-    let SPECIES_MAP = null;         // { cachorro:{portes:{mini:[],...}, all:[], map:{breed->porte}}, gato:[...], passaro:[...], peixe:[...], roedor:[...], lagarto:[...], tartaruga:[...] }\r\n-\r\n-    // Helpers para normalizar strings (ignora acentos/maiÃƒÂºsculas)\r\n-    const norm = (s) => String(s || '')\r\n-      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-      .trim().toLowerCase();\r\n-    const normSize = (s) => {\r\n-      const k = norm(s);\r\n-      if (k.startsWith('mini')) return 'mini';\r\n-      if (k.startsWith('peq')) return 'pequeno';\r\n-      if (k.startsWith('med')) return 'medio';\r\n-      if (k.startsWith('gra')) return 'grande';\r\n-      if (k.startsWith('gig')) return 'gigante';\r\n-      return 'medio';\r\n-    };\r\n-\r\n-    // Corrige sequÃªncias comuns de texto corrompidas por encoding (UTF-8 vs ISO-8859-1)\r\n-    function fixEncoding(s) {\r\n-      if (!s) return s;\r\n-      return String(s)\r\n-        .replace(/ÃƒÂ¡/g,'Ã¡').replace(/ÃƒÂ¢/g,'Ã¢').replace(/ÃƒÂ£/g,'Ã£').replace(/ÃƒÂ¤/g,'Ã¤')\r\n-        .replace(/ÃƒÂ/g,'Ã').replace(/Ãƒâ€š/g,'Ã‚').replace(/ÃƒÆ’/g,'Ãƒ')\r\n-        .replace(/ÃƒÂ©/g,'Ã©').replace(/ÃƒÂª/g,'Ãª').replace(/ÃƒÂ¨/g,'Ã¨').replace(/Ãƒâ€°/g,'Ã‰').replace(/ÃƒÅ /g,'ÃŠ')\r\n-        .replace(/ÃƒÂ­/g,'Ã­').replace(/ÃƒÂ¬/g,'Ã¬').replace(/ÃƒÂ/g,'Ã')\r\n-        .replace(/ÃƒÂ³/g,'Ã³').replace(/ÃƒÂ´/g,'Ã´').replace(/ÃƒÂµ/g,'Ãµ').replace(/Ãƒâ€œ/g,'Ã“').replace(/Ãƒâ€/g,'Ã”')\r\n-        .replace(/ÃƒÂº/g,'Ãº').replace(/ÃƒÂ¼/g,'Ã¼').replace(/ÃƒÅ¡/g,'Ãš')\r\n-        .replace(/ÃƒÂ§/g,'Ã§').replace(/ÃƒÂ‡/g,'Ã‡')\r\n-        .replace(/ÃƒÂ /g,'Ã ').replace(/ÃƒÂ¸/g,'Ã¸')\r\n-        .replace(/Ã‚Âº/g,'Âº').replace(/Ã‚Âª/g,'Âª')\r\n-        .replace(/ÃƒÂ¢Ã¢â€šÂ¬Ã¢â‚¬Å“/g,'â€“').replace(/Ã¢â‚¬â€œ/g,'â€“').replace(/Ã¢â‚¬â€/g,'â€”')\r\n-        .replace(/Ã¢â‚¬Ëœ/g,'â€˜').replace(/Ã¢â‚¬â„¢/g,'â€™').replace(/Ã¢â‚¬Å“/g,'â€œ').replace(/Ã¢â‚¬Â/g,'â€')\r\n-        .replace(/Ã¢â‚¬Â¢/g,'â€¢').replace(/Ã¢â‚¬Â¦/g,'â€¦');\r\n-    }\r\n-\r\n-    async function loadSpeciesMap() {\r\n-      if (SPECIES_MAP) return SPECIES_MAP;\r\n-      const base = (window.basePath || '../');\r\n-      const url = base + 'data/Racas-leitura.js';\r\n-      try {\r\n-        const txt = await fetch(url).then(r => r.text());\r\n-        const species = {};\r\n-\r\n-        // Construção robusta do mapa de portes do cachorro: varre todos os blocos porte...\r\n-        let dogMap = { mini:[], pequeno:[], medio:[], grande:[], gigante:[] };\r\n-        const reDogGlobal = /porte[_\\s-]?(mini|pequeno|medio|grande|gigante)\\s*{([\\s\\S]*?)}\\s*/gi;\r\n-        let m;\r\n-        while ((m = reDogGlobal.exec(txt))) {\r\n-        const key = m[1].toLowerCase();\r\n-        const body = m[2];\r\n-        const list = body.split(/\\n+/).map(x => x.trim())\r\n-            .filter(x => x && !x.startsWith('//') && x !== '...')\r\n-            .map(x => x.replace(/\\*.*?\\*/g, ''))\r\n-            .map(x => x.replace(/\\s*\\(duplicata.*$/i, ''))\r\n-            .map(x => x.replace(/\\s*[—-].*$/,'').replace(/\\s*-\\s*registro.*$/i,''));\r\n-        dogMap[key] = Array.from(new Set(list));\r\n-        }\r\n-\r\n-        const dogAll = Array.from(new Set([\r\n-        ...dogMap.mini, ...dogMap.pequeno, ...dogMap.medio, ...dogMap.grande, ...dogMap.gigante\r\n-        ]));\r\n-        const dogLookup = {};\r\n-        dogAll.forEach(n => {\r\n-        const k = norm(n);\r\n-        dogLookup[k] =\r\n-            dogMap.mini.includes(n)    ? 'mini'    :\r\n-            dogMap.pequeno.includes(n) ? 'pequeno' :\r\n-            dogMap.medio.includes(n)   ? 'medio'   :\r\n-            dogMap.grande.includes(n)  ? 'grande'  : 'gigante';\r\n-        });\r\n-        species.cachorro = { portes: dogMap, all: dogAll, map: dogLookup };\r\n-\r\n-        // Outras espécies simples (sem porte)\r\n-        const simpleSpecies = ['gatos','gato','passaros','passaro','peixes','peixe','roedores','roedor','lagartos','lagarto','tartarugas','tartaruga'];\r\n-        for (const sp of simpleSpecies) {\r\n-        const m2 = new RegExp(sp + \"\\\\s*{([\\\\s\\\\S]*?)}\",\"i\").exec(txt);\r\n-        if (m2) {\r\n-            const list = m2[1].split(/\\n+/).map(x => x.trim()).filter(x => x && !x.startsWith('//') && x !== '...');\r\n-            // Singularização robusta: corrige 'roedores' -> 'roedor' e mantém demais por remoção do 's' final\r\n-            const singular = /roedores$/i.test(sp) ? 'roedor' : sp.replace(/s$/,'');\r\n-            species[singular] = Array.from(new Set(list));\r\n-        }\r\n-        }\r\n-        SPECIES_MAP = species;\r\n-        return species;\r\n-      } catch (e) {\r\n-        console.warn('Falha ao ler Racas-leitura.js', e);\r\n-        SPECIES_MAP = null;\r\n-        return null;\r\n-      }\r\n-    }\r\n-\r\n-    function setPorteFromBreedIfDog() {\r\n-      if (!porteSelect) return;\r\n-      const isDog = petTypeSelect && norm(petTypeSelect.value) === 'cachorro';\r\n-      if (!isDog) return;\r\n-      const map = SPECIES_MAP?.cachorro?.map;\r\n-      const b = norm(breedInput?.value || '');\r\n-      const k = map ? map[b] : null;\r\n-      const desired = k || 'medio';\r\n-      // encontra a option pelo texto (normalizado)\r\n-      const opts = Array.from(porteSelect.options || []);\r\n-      const match = opts.find(o => normSize(o.textContent) === desired);\r\n-      if (match) porteSelect.value = match.value || match.textContent;\r\n-    }\r\n-\r\n-    function syncPorteDisabled() {\r\n-      if (!porteSelect) return;\r\n-      const isDog = petTypeSelect && norm(petTypeSelect.value) === 'cachorro';\r\n-      // Nunca esconder; apenas bloquear com o valor apropriado\r\n-      porteSelect.disabled = true;\r\n-      if (isDog) {\r\n-        setPorteFromBreedIfDog();\r\n-      } else {\r\n-        const none = Array.from(porteSelect.options).find(o => (o.textContent||'').toLowerCase().includes('sem porte'));\r\n-        if (none) porteSelect.value = none.value || none.textContent;\r\n-      }\r\n-    }\r\n-\r\n-    // --- Funções de Visibilidade do Formulário ---\r\n-\r\n-    const showForm = () => {\r\n-        if (addPetBtnContainer && petFormContainer) {\r\n-            addPetBtnContainer.classList.add('hidden');\r\n-            petFormContainer.classList.remove('hidden');\r\n-        }\r\n-    };\r\n-\r\n-    const hideForm = () => {\r\n-        if (addPetBtnContainer && petFormContainer) {\r\n-            petFormContainer.classList.add('hidden');\r\n-            addPetBtnContainer.classList.remove('hidden');\r\n-            petForm.reset();\r\n-            hiddenPetIdInput.value = '';\r\n-        }\r\n-    };\r\n-\r\n-    function normalizeStaticLabels() {\r\n-        try {\r\n-            const sexoSel = document.getElementById('pet-sexo');\r\n-            if (sexoSel) {\r\n-                Array.from(sexoSel.options).forEach(o => {\r\n-                    if (/Fêmea/i.test(o.textContent)) o.textContent = 'Fêmea';\r\n-                });\r\n-            }\r\n-            if (porteSelect) {\r\n-                let none = Array.from(porteSelect.options).find(o => (o.textContent||'').toLowerCase().includes('sem porte'));\r\n-                if (!none) {\r\n-                    none = document.createElement('option');\r\n-                    none.textContent = 'Sem porte definido';\r\n-                    none.value = 'Sem porte definido';\r\n-                    porteSelect.insertBefore(none, porteSelect.firstChild);\r\n-                }\r\n-                Array.from(porteSelect.options).forEach(o => {\r\n-                    if (/Médio/i.test(o.textContent)) o.textContent = 'Médio';\r\n-                });\r\n-            }\r\n-        } catch(_) {}\r\n-    }\r\n-\r\n-    // Garante que o select de tipos tenha todas as opções desejadas\r\n-    function ensurePetTypeOptions() {\r\n-        if (!petTypeSelect) return;\r\n-        const want = [\r\n-          ['cachorro','Cachorro'],\r\n-          ['gato','Gato'],\r\n-          ['passaro','Pássaro'],\r\n-          ['peixe','Peixe'],\r\n-          ['roedor','Roedor'],\r\n-          ['lagarto','Lagarto'],\r\n-          ['tartaruga','Tartaruga']\r\n-        ];\r\n-        const existing = new Set(Array.from(petTypeSelect.options).map(o => (o.value||'').toLowerCase()));\r\n-        for (const [val,label] of want) {\r\n-          if (!existing.has(val)) { const op=document.createElement('option'); op.value=val; op.textContent=label; petTypeSelect.appendChild(op); }\r\n-        }\r\n-        Array.from(petTypeSelect.options).forEach(o => { if ((o.value||'').toLowerCase()==='passaro') o.textContent='Pássaro'; });\r\n-    }\r\n-\r\n-    // --- Função Principal para Exibir os Pets ---\r\n-\r\n-    async function fetchAndDisplayPets() {\r\n-        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n-        if (!loggedInUser?.id || !loggedInUser.token || !petsListContainer) return;\r\n-\r\n-        try {\r\n-            const response = await fetch(`${API_CONFIG.BASE_URL}/pets/user/${loggedInUser.id}`, {\r\n-                headers: {\r\n-                    'Authorization': `Bearer ${loggedInUser.token}`,\r\n-                    'Content-Type': 'application/json'\r\n-                }\r\n-            });\r\n-\r\n-            if (!response.ok) throw new Error('Não foi possível buscar os pets.');\r\n-            const pets = await response.json();\r\n-\r\n-            petsListContainer.innerHTML = '';\r\n-\r\n-            pets.forEach(pet => {\r\n-                const petCard = `\r\n-                <div class=\"bg-white px-4 py-3 border rounded-lg shadow-sm flex items-center w-full max-w-md\">\r\n-                    <div class=\"flex-grow pr-4\">\r\n-                    <h3 class=\"font-bold text-lg text-primary\">${fixEncoding(pet.nome)}</h3>\r\n-                    <p class=\"text-sm text-gray-600\">${fixEncoding(pet.raca)} | ${fixEncoding(pet.tipo)}</p>\r\n-                    </div>\r\n-                    <div class=\"flex flex-col space-y-1\">\r\n-                    <button onclick=\"handleEditPet('${pet._id}')\" class=\"text-blue-500 hover:text-blue-700 transition-colors w-10 h-10 flex items-center justify-center rounded-full hover:bg-blue-500/10\">\r\n-                        <div data-icon=\"edit\" class=\"w-10 h-10\"></div>\r\n-                        <span class=\"sr-only\">Editar</span>\r\n-                    </button>\r\n-                    <button onclick=\"handleDeletePet('${pet._id}', '${pet.nome}')\" class=\"text-red-500 hover:text-red-700 transition-colors w-10 h-10 flex items-center justify-center rounded-full hover:bg-red-500/10\">\r\n-                        <div data-icon=\"trash-pet\" class=\"w-10 h-10\"></div>\r\n-                        <span class=\"sr-only\">Excluir</span>\r\n-                    </button>\r\n-                    </div>\r\n-                </div>\r\n-                `;\r\n-                petsListContainer.innerHTML += petCard;\r\n-            });\r\n-            \r\n-            await loadIcons();\r\n-        } catch (error) {\r\n-            console.error('Erro ao buscar pets:', error);\r\n-            showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n-        }\r\n-    }\r\n-\r\n-    // --- Funções de Edição, Exclusão e Submissão ---\r\n-\r\n-    window.handleEditPet = async (petId) => {\r\n-        try {\r\n-        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n-        if (!loggedInUser?.token) {\r\n-            showModal({ title: 'Erro', message: 'Você precisa estar logado.', confirmText: 'OK' });\r\n-            return;\r\n-        }\r\n-\r\n-        const response = await fetch(`${API_CONFIG.BASE_URL}/pets/${petId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${loggedInUser.token}`,\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-\r\n-        if (!response.ok) throw new Error('Pet não encontrado.');\r\n-        const petData = await response.json();\r\n-\r\n-            hiddenPetIdInput.value = petData._id;\r\n-            petForm.querySelector('#pet-name').value = petData.nome;\r\n-            petForm.querySelector('#pet-type').value = petData.tipo;\r\n-            petForm.querySelector('#pet-raca').value = petData.raca;\r\n-            petForm.querySelector('#pet-porte').value = petData.porte;\r\n-            petForm.querySelector('#pet-sexo').value = petData.sexo;\r\n-            if (petData.dataNascimento) {\r\n-                petForm.querySelector('#pet-nascimento').value = new Date(petData.dataNascimento).toISOString().split('T')[0];\r\n-            }\r\n-            petForm.querySelector('#pet-microchip').value = petData.microchip || '';\r\n-            petForm.querySelector('#pet-pelagem').value = petData.pelagemCor || '';\r\n-            petForm.querySelector('#pet-rga').value = petData.rga || '';\r\n-            petForm.querySelector('#pet-peso').value = petData.peso || '';\r\n-\r\n-            updateBreedOptions();\r\n-            showForm();\r\n-            // aplica bloqueio/porte automático se cachorro\r\n-            syncPorteDisabled();\r\n-            await loadDogBreedsByPorte().catch(()=>{});\r\n-            setPorteFromBreedIfDog();\r\n-        } catch (error) {\r\n-            showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n-        }\r\n-    };\r\n-\r\n-    /**\r\n-     * NOVA FUNÇÃO: Lida com a exclusão de um pet, pedindo confirmação.\r\n-     * @param {string} petId O ID do pet a ser excluído.\r\n-     * @param {string} petName O nome do pet para usar na mensagem de confirmação.\r\n-     */\r\n-    window.handleDeletePet = (petId, petName) => {\r\n-        showModal({\r\n-            title: 'Confirmar Exclusão',\r\n-            message: `Tem a certeza que deseja excluir o pet \"${petName}\"? Esta ação não pode ser desfeita.`,\r\n-            confirmText: 'Excluir',\r\n-            cancelText: 'Cancelar',\r\n-            onConfirm: async () => {\r\n-                try {\r\n-                    const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n-                    if (!loggedInUser?.token) {\r\n-                        showModal({ title: 'Erro', message: 'Você precisa estar logado.', confirmText: 'OK' });\r\n-                        return;\r\n-                    }\r\n-\r\n-                    const response = await fetch(`${API_CONFIG.BASE_URL}/pets/${petId}`, {\r\n-                        method: 'DELETE',\r\n-                        headers: {\r\n-                            'Authorization': `Bearer ${loggedInUser.token}`,\r\n-                            'Content-Type': 'application/json'\r\n-                        }\r\n-                    });\r\n-\r\n-                    if (!response.ok) {\r\n-                        const result = await response.json();\r\n-                        throw new Error(result.message || 'Não foi possível excluir o pet.');\r\n-                    }\r\n-                    \r\n-                    showModal({\r\n-                        title: 'Sucesso!',\r\n-                        message: `O pet \"${petName}\" foi excluído.`,\r\n-                        confirmText: 'OK',\r\n-                        onConfirm: () => window.location.reload()\r\n-                    });\r\n-\r\n-                } catch (error) {\r\n-                    showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n-                }\r\n-            }\r\n-        });\r\n-    };\r\n-\r\n-    if (petForm) {\r\n-        petForm.addEventListener('submit', async (event) => {\r\n-            event.preventDefault();\r\n-\r\n-            const submitButton = petForm.querySelector('button[type=\"submit\"]');\r\n-            const originalButtonHtml = submitButton.innerHTML;\r\n-            submitButton.disabled = true;\r\n-            submitButton.innerHTML = `<i class=\"fas fa-spinner fa-spin mr-2\"></i>A Salvar...`;\r\n-\r\n-            const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n-            if (!loggedInUser) {\r\n-                alert('Utilizador não está logado!');\r\n-                return;\r\n-            }\r\n-\r\n-            const formData = new FormData(petForm);\r\n-            const petData = Object.fromEntries(formData.entries());\r\n-            if (porteSelect && porteSelect.disabled) {\r\n-                petData['pet_porte'] = porteSelect.value;\r\n-            }\r\n-            \r\n-            const petId = hiddenPetIdInput.value;\r\n-            const isEditing = !!petId;\r\n-\r\n-            const method = isEditing ? 'PUT' : 'POST';\r\n-            const url = isEditing ? `${API_CONFIG.BASE_URL}/pets/${petId}` : `${API_CONFIG.BASE_URL}/pets`;\r\n-\r\n-            if (!isEditing) {\r\n-                petData.owner = loggedInUser.id;\r\n-            }\r\n-\r\n-            try {\r\n-                const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n-                if (!loggedInUser?.token) {\r\n-                    showModal({ title: 'Erro', message: 'Token não fornecido.', confirmText: 'OK' });\r\n-                    return;\r\n-                }\r\n-\r\n-                const response = await fetch(url, {\r\n-                    method: method,\r\n-                    headers: { \r\n-                        'Content-Type': 'application/json',\r\n-                        'Authorization': `Bearer ${loggedInUser.token}`\r\n-                    },\r\n-                    body: JSON.stringify(petData),\r\n-                });\r\n-\r\n-                const result = await response.json();\r\n-                if (!response.ok) throw new Error(result.message);\r\n-                \r\n-                showModal({\r\n-                    title: 'Sucesso!',\r\n-                    message: isEditing ? 'Os dados do seu pet foram atualizados.' : 'O seu novo pet foi adicionado.',\r\n-                    confirmText: 'OK',\r\n-                    onConfirm: () => window.location.reload()\r\n-                });\r\n-\r\n-            } catch (error) {\r\n-                showModal({ title: 'Erro', message: `Não foi possível salvar o pet: ${error.message}`, confirmText: 'Tentar novamente' });\r\n-            } finally {\r\n-                submitButton.disabled = false;\r\n-                submitButton.innerHTML = originalButtonHtml;\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    // --- Lógica para Sugestão de Raças (Awesomplete) ---\r\n-\r\n-    async function updateBreedOptions() {\r\n-        if (!petTypeSelect || !breedInput) return;\r\n-        const selectedType = petTypeSelect.value;\r\n-        await loadSpeciesMap().catch(()=>{});\r\n-        let breeds = [];\r\n-        const typeKey = norm(selectedType);\r\n-        if (typeKey === 'cachorro') {\r\n-          breeds = (SPECIES_MAP?.cachorro?.all || []).slice().map(fixEncoding).sort((a,b)=> a.localeCompare(b));\r\n-        } else if (typeKey === 'gato') {\r\n-          breeds = (SPECIES_MAP?.gato || SPECIES_MAP?.gatos || BREED_DATA?.gato || []).slice().map(fixEncoding).sort((a,b)=> a.localeCompare(b));\r\n-        } else if (typeKey === 'passaro') {\r\n-          breeds = (SPECIES_MAP?.passaro || SPECIES_MAP?.passaros || BREED_DATA?.passaro || []).slice().map(fixEncoding).sort((a,b)=> a.localeCompare(b));\r\n-        } else if (['peixe','roedor','lagarto','tartaruga'].includes(typeKey)) {\r\n-          breeds = (SPECIES_MAP?.[typeKey] || []).slice().map(fixEncoding).sort((a,b)=> a.localeCompare(b));\r\n-        } else {\r\n-          // fallback antigo\r\n-            breeds = (typeof BREED_DATA !== 'undefined' && BREED_DATA?.[typeKey])\r\n-            ? BREED_DATA[typeKey].map(fixEncoding)\r\n-            : [];\r\n-        }\r\n-        \r\n-        if (awesompleteInstance) {\r\n-            awesompleteInstance.list = breeds;\r\n-        } else {\r\n-            awesompleteInstance = new Awesomplete(breedInput, {\r\n-                list: breeds,\r\n-                minChars: 1,\r\n-                maxItems: 7,\r\n-            });\r\n-        }\r\n-        syncPorteDisabled();\r\n-        // placeholder corrigido\r\n-        try { if (breedInput && (!breedInput.placeholder || /raça|raça/i.test(breedInput.placeholder))) breedInput.placeholder = 'Comece a digitar a raça...'; } catch(_){ }\r\n-    }\r\n-\r\n-    // --- Event Listeners Iniciais ---\r\n-\r\n-    if (addPetBtn) addPetBtn.addEventListener('click', () => {\r\n-        petForm.reset();\r\n-        hiddenPetIdInput.value = '';\r\n-        updateBreedOptions();\r\n-        syncPorteDisabled();\r\n-        showForm();\r\n-        ensurePetTypeOptions();\r\n-        normalizeStaticLabels();\r\n-    });\r\n-    if (cancelPetBtn) cancelPetBtn.addEventListener('click', hideForm);\r\n-    if (petTypeSelect) petTypeSelect.addEventListener('change', async () => {\r\n-      await updateBreedOptions();\r\n-      syncPorteDisabled();\r\n-      setPorteFromBreedIfDog();\r\n-    });\r\n-\r\n-    // Atualiza porte ao escolher uma raÃƒÂ§a (para cachorro)\r\n-    if (breedInput) {\r\n-      breedInput.addEventListener('change', () => setTimeout(setPorteFromBreedIfDog, 0));\r\n-      breedInput.addEventListener('blur', () => setTimeout(setPorteFromBreedIfDog, 0));\r\n-      breedInput.addEventListener('awesomplete-selectcomplete', () => setTimeout(setPorteFromBreedIfDog, 0));\r\n-    }\r\n-\r\n-    // --- ExecuÃƒÂ§ÃƒÂ£o Inicial ---\r\n-    fetchAndDisplayPets();\r\n-    ensurePetTypeOptions();\r\n-    normalizeStaticLabels();\r\n-    updateBreedOptions();\r\n-    syncPorteDisabled();\r\n-});\r\n"
                },
                {
                    "date": 1757706873612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,10 +27,25 @@\n       return 'medio';\r\n     };\r\n \r\n     // Corrige sequÃªncias comuns de texto corrompidas por encoding (UTF-8 vs ISO-8859-1)\r\n+    function fixEncoding(s) {\r\n+      if (!s) return s;\r\n+      return String(s)\r\n+        .replace(/ÃƒÂ¡/g,'Ã¡').replace(/ÃƒÂ¢/g,'Ã¢').replace(/ÃƒÂ£/g,'Ã£').replace(/ÃƒÂ¤/g,'Ã¤')\r\n+        .replace(/ÃƒÂ/g,'Ã').replace(/Ãƒâ€š/g,'Ã‚').replace(/ÃƒÆ’/g,'Ãƒ')\r\n+        .replace(/ÃƒÂ©/g,'Ã©').replace(/ÃƒÂª/g,'Ãª').replace(/ÃƒÂ¨/g,'Ã¨').replace(/Ãƒâ€°/g,'Ã‰').replace(/ÃƒÅ /g,'ÃŠ')\r\n+        .replace(/ÃƒÂ­/g,'Ã­').replace(/ÃƒÂ¬/g,'Ã¬').replace(/ÃƒÂ/g,'Ã')\r\n+        .replace(/ÃƒÂ³/g,'Ã³').replace(/ÃƒÂ´/g,'Ã´').replace(/ÃƒÂµ/g,'Ãµ').replace(/Ãƒâ€œ/g,'Ã“').replace(/Ãƒâ€/g,'Ã”')\r\n+        .replace(/ÃƒÂº/g,'Ãº').replace(/ÃƒÂ¼/g,'Ã¼').replace(/ÃƒÅ¡/g,'Ãš')\r\n+        .replace(/ÃƒÂ§/g,'Ã§').replace(/ÃƒÂ‡/g,'Ã‡')\r\n+        .replace(/ÃƒÂ /g,'Ã ').replace(/ÃƒÂ¸/g,'Ã¸')\r\n+        .replace(/Ã‚Âº/g,'Âº').replace(/Ã‚Âª/g,'Âª')\r\n+        .replace(/ÃƒÂ¢Ã¢â€šÂ¬Ã¢â‚¬Å“/g,'â€“').replace(/Ã¢â‚¬â€œ/g,'â€“').replace(/Ã¢â‚¬â€/g,'â€”')\r\n+        .replace(/Ã¢â‚¬Ëœ/g,'â€˜').replace(/Ã¢â‚¬â„¢/g,'â€™').replace(/Ã¢â‚¬Å“/g,'â€œ').replace(/Ã¢â‚¬Â/g,'â€')\r\n+        .replace(/Ã¢â‚¬Â¢/g,'â€¢').replace(/Ã¢â‚¬Â¦/g,'â€¦');\r\n+    }\r\n \r\n-\r\n     async function loadSpeciesMap() {\r\n       if (SPECIES_MAP) return SPECIES_MAP;\r\n       const base = (window.basePath || '../');\r\n       const url = base + 'data/Racas-leitura.js';\r\n"
                },
                {
                    "date": 1757706959901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,9 +286,8 @@\n             updateBreedOptions();\r\n             showForm();\r\n             // aplica bloqueio/porte automático se cachorro\r\n             syncPorteDisabled();\r\n-            await loadDogBreedsByPorte().catch(()=>{});\r\n             setPorteFromBreedIfDog();\r\n         } catch (error) {\r\n             showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n         }\r\n"
                }
            ],
            "date": 1756584058770,
            "name": "Commit-0",
            "content": "document.addEventListener('DOMContentLoaded', () => {\r\n    // --- Referências aos elementos do DOM ---\r\n    const petsListContainer = document.getElementById('pets-list-container');\r\n    const addPetBtnContainer = document.getElementById('add-pet-button-container');\r\n    const petFormContainer = document.getElementById('pet-form-container');\r\n    const addPetBtn = document.getElementById('add-pet-btn');\r\n    const petForm = document.getElementById('new-pet-form');\r\n    const cancelPetBtn = document.getElementById('cancel-pet-btn');\r\n    const petTypeSelect = document.getElementById('pet-type');\r\n    const breedInput = document.getElementById('pet-raca');\r\n    const hiddenPetIdInput = document.getElementById('pet-id');\r\n    let awesompleteInstance;\r\n\r\n    // --- Funções de Visibilidade do Formulário ---\r\n\r\n    const showForm = () => {\r\n        if (addPetBtnContainer && petFormContainer) {\r\n            addPetBtnContainer.classList.add('hidden');\r\n            petFormContainer.classList.remove('hidden');\r\n        }\r\n    };\r\n\r\n    const hideForm = () => {\r\n        if (addPetBtnContainer && petFormContainer) {\r\n            petFormContainer.classList.add('hidden');\r\n            addPetBtnContainer.classList.remove('hidden');\r\n            petForm.reset();\r\n            hiddenPetIdInput.value = '';\r\n        }\r\n    };\r\n\r\n    // --- Função Principal para Exibir os Pets ---\r\n\r\n    async function fetchAndDisplayPets() {\r\n        const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n        if (!loggedInUser?.id || !loggedInUser.token || !petsListContainer) return;\r\n\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.BASE_URL}/pets/user/${loggedInUser.id}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${loggedInUser.token}`,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            if (!response.ok) throw new Error('Não foi possível buscar os pets.');\r\n            const pets = await response.json();\r\n\r\n            petsListContainer.innerHTML = '';\r\n\r\n            pets.forEach(pet => {\r\n                const petCard = `\r\n                <div class=\"bg-white px-4 py-3 border rounded-lg shadow-sm flex items-center w-full max-w-md\">\r\n                    <div class=\"flex-grow pr-4\">\r\n                    <h3 class=\"font-bold text-lg text-primary\">${pet.nome}</h3>\r\n                    <p class=\"text-sm text-gray-600\">${pet.raca} | ${pet.tipo}</p>\r\n                    </div>\r\n                    <div class=\"flex flex-col space-y-1\">\r\n                    <button onclick=\"handleEditPet('${pet._id}')\" class=\"text-blue-500 hover:text-blue-700 transition-colors w-10 h-10 flex items-center justify-center rounded-full hover:bg-blue-500/10\">\r\n                        <div data-icon=\"edit\" class=\"w-10 h-10\"></div>\r\n                        <span class=\"sr-only\">Editar</span>\r\n                    </button>\r\n                    <button onclick=\"handleDeletePet('${pet._id}', '${pet.nome}')\" class=\"text-red-500 hover:text-red-700 transition-colors w-10 h-10 flex items-center justify-center rounded-full hover:bg-red-500/10\">\r\n                        <div data-icon=\"trash-pet\" class=\"w-10 h-10\"></div>\r\n                        <span class=\"sr-only\">Excluir</span>\r\n                    </button>\r\n                    </div>\r\n                </div>\r\n                `;\r\n                petsListContainer.innerHTML += petCard;\r\n            });\r\n            \r\n            await loadIcons();\r\n        } catch (error) {\r\n            console.error('Erro ao buscar pets:', error);\r\n            showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n        }\r\n    }\r\n\r\n    // --- Funções de Edição, Exclusão e Submissão ---\r\n\r\n    window.handleEditPet = async (petId) => {\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.BASE_URL}/pets/${petId}`);\r\n            if (!response.ok) throw new Error('Pet não encontrado.');\r\n            const petData = await response.json();\r\n\r\n            hiddenPetIdInput.value = petData._id;\r\n            petForm.querySelector('#pet-name').value = petData.nome;\r\n            petForm.querySelector('#pet-type').value = petData.tipo;\r\n            petForm.querySelector('#pet-raca').value = petData.raca;\r\n            petForm.querySelector('#pet-porte').value = petData.porte;\r\n            petForm.querySelector('#pet-sexo').value = petData.sexo;\r\n            if (petData.dataNascimento) {\r\n                petForm.querySelector('#pet-nascimento').value = new Date(petData.dataNascimento).toISOString().split('T')[0];\r\n            }\r\n            petForm.querySelector('#pet-microchip').value = petData.microchip || '';\r\n            petForm.querySelector('#pet-pelagem').value = petData.pelagemCor || '';\r\n            petForm.querySelector('#pet-rga').value = petData.rga || '';\r\n            petForm.querySelector('#pet-peso').value = petData.peso || '';\r\n\r\n            updateBreedOptions();\r\n            showForm();\r\n        } catch (error) {\r\n            showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * NOVA FUNÇÃO: Lida com a exclusão de um pet, pedindo confirmação.\r\n     * @param {string} petId O ID do pet a ser excluído.\r\n     * @param {string} petName O nome do pet para usar na mensagem de confirmação.\r\n     */\r\n    window.handleDeletePet = (petId, petName) => {\r\n        showModal({\r\n            title: 'Confirmar Exclusão',\r\n            message: `Tem a certeza que deseja excluir o pet \"${petName}\"? Esta ação não pode ser desfeita.`,\r\n            confirmText: 'Excluir',\r\n            cancelText: 'Cancelar',\r\n            onConfirm: async () => {\r\n                try {\r\n                    const response = await fetch(`${API_CONFIG.BASE_URL}/pets/${petId}`, {\r\n                        method: 'DELETE',\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        const result = await response.json();\r\n                        throw new Error(result.message || 'Não foi possível excluir o pet.');\r\n                    }\r\n                    \r\n                    showModal({\r\n                        title: 'Sucesso!',\r\n                        message: `O pet \"${petName}\" foi excluído.`,\r\n                        confirmText: 'OK',\r\n                        onConfirm: () => window.location.reload()\r\n                    });\r\n\r\n                } catch (error) {\r\n                    showModal({ title: 'Erro', message: error.message, confirmText: 'OK' });\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    if (petForm) {\r\n        petForm.addEventListener('submit', async (event) => {\r\n            event.preventDefault();\r\n\r\n            const submitButton = petForm.querySelector('button[type=\"submit\"]');\r\n            const originalButtonHtml = submitButton.innerHTML;\r\n            submitButton.disabled = true;\r\n            submitButton.innerHTML = `<i class=\"fas fa-spinner fa-spin mr-2\"></i>A Salvar...`;\r\n\r\n            const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));\r\n            if (!loggedInUser) {\r\n                alert('Utilizador não está logado!');\r\n                return;\r\n            }\r\n\r\n            const formData = new FormData(petForm);\r\n            const petData = Object.fromEntries(formData.entries());\r\n            \r\n            const petId = hiddenPetIdInput.value;\r\n            const isEditing = !!petId;\r\n\r\n            const method = isEditing ? 'PUT' : 'POST';\r\n            const url = isEditing ? `${API_CONFIG.BASE_URL}/pets/${petId}` : `${API_CONFIG.BASE_URL}/pets`;\r\n\r\n            if (!isEditing) {\r\n                petData.owner = loggedInUser.id;\r\n            }\r\n\r\n            try {\r\n                const response = await fetch(url, {\r\n                    method: method,\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(petData),\r\n                });\r\n\r\n                const result = await response.json();\r\n                if (!response.ok) throw new Error(result.message);\r\n                \r\n                showModal({\r\n                    title: 'Sucesso!',\r\n                    message: isEditing ? 'Os dados do seu pet foram atualizados.' : 'O seu novo pet foi adicionado.',\r\n                    confirmText: 'OK',\r\n                    onConfirm: () => window.location.reload()\r\n                });\r\n\r\n            } catch (error) {\r\n                showModal({ title: 'Erro', message: `Não foi possível salvar o pet: ${error.message}`, confirmText: 'Tentar Novamente' });\r\n            } finally {\r\n                submitButton.disabled = false;\r\n                submitButton.innerHTML = originalButtonHtml;\r\n            }\r\n        });\r\n    }\r\n\r\n    // --- Lógica para Sugestão de Raças (Awesomplete) ---\r\n\r\n    function updateBreedOptions() {\r\n        if (!petTypeSelect || !breedInput) return;\r\n        const selectedType = petTypeSelect.value;\r\n        const breeds = BREED_DATA[selectedType] || [];\r\n        \r\n        if (awesompleteInstance) {\r\n            awesompleteInstance.list = breeds;\r\n        } else {\r\n            awesompleteInstance = new Awesomplete(breedInput, {\r\n                list: breeds,\r\n                minChars: 1,\r\n                maxItems: 7,\r\n            });\r\n        }\r\n    }\r\n\r\n    // --- Event Listeners Iniciais ---\r\n\r\n    if (addPetBtn) addPetBtn.addEventListener('click', () => {\r\n        petForm.reset();\r\n        hiddenPetIdInput.value = '';\r\n        updateBreedOptions();\r\n        showForm();\r\n    });\r\n    if (cancelPetBtn) cancelPetBtn.addEventListener('click', hideForm);\r\n    if (petTypeSelect) petTypeSelect.addEventListener('change', updateBreedOptions);\r\n\r\n    // --- Execução Inicial ---\r\n    fetchAndDisplayPets();\r\n    updateBreedOptions();\r\n});"
        }
    ]
}