{
    "sourceFile": "scripts/funcionarios/banho-e-tosa.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 183,
            "patches": [
                {
                    "date": 1757167909223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757345181558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,12 @@\n   const listEl = document.getElementById('agenda-list');\r\n   const dateInput = document.getElementById('agenda-date');\r\n   const dateLabel = document.getElementById('agenda-date-label');\r\n   const addBtn = document.getElementById('add-service-btn');\r\n+  const storeSelect = document.getElementById('agenda-store');\r\n+  const storeLabel  = document.getElementById('agenda-store-label');\r\n+  let storesCache = [];\r\n+  let selectedStoreId = null;\r\n \r\n   if (!listEl || !dateInput || !dateLabel) return;\r\n \r\n   // Define a data inicial como \"hoje\" no fuso do browser\r\n@@ -13,8 +17,40 @@\n   function formatPtBr(d) {\r\n     return d.toLocaleDateString('pt-BR', { weekday: 'long', day: '2-digit', month: '2-digit', year: 'numeric' });\r\n   }\r\n \r\n+  async function loadStores() {\r\n+    if (!storeSelect) return;\r\n+    try {\r\n+      const res = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+      if (!res.ok) throw new Error('Falha ao carregar empresas');\r\n+      storesCache = await res.json() || [];\r\n+      if (storesCache.length === 0) {\r\n+        storeSelect.innerHTML = `<option value=\"\">Nenhuma empresa cadastrada</option>`;\r\n+        selectedStoreId = null;\r\n+        updateStoreLabel();\r\n+        return;\r\n+      }\r\n+      storeSelect.innerHTML = storesCache.map(s => `<option value=\"${s._id}\">${s.nome || 'Sem nome'}</option>`).join('');\r\n+      // Seleção padrão: última usada ou a primeira da lista\r\n+      const saved = localStorage.getItem('bt_selected_store');\r\n+      selectedStoreId = storesCache.find(s => s._id === saved)?._id || storesCache[0]._id;\r\n+      storeSelect.value = selectedStoreId;\r\n+      updateStoreLabel();\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      storeSelect.innerHTML = `<option value=\"\">Erro ao carregar</option>`;\r\n+      selectedStoreId = null;\r\n+      updateStoreLabel();\r\n+    }\r\n+  }\r\n+\r\n+  function updateStoreLabel() {\r\n+    if (!storeLabel) return;\r\n+    const s = storesCache.find(x => x._id === selectedStoreId);\r\n+    storeLabel.textContent = s ? s.nome : '—';\r\n+  }\r\n+\r\n   function getDateFromInput() {\r\n     const [y, m, d] = (dateInput.value || todayISO).split('-').map(Number);\r\n     return new Date(y, (m - 1), d);\r\n   }\r\n"
                },
                {
                    "date": 1757345210433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,9 @@\n \r\n   function renderAgenda() {\r\n     const date = getDateFromInput();\r\n     dateLabel.textContent = `(${formatPtBr(date)})`;\r\n+    updateStoreLabel();\r\n \r\n     // Limpa a lista\r\n     listEl.innerHTML = '';\r\n \r\n"
                },
                {
                    "date": 1757345246501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,16 @@\n \r\n   // Ações\r\n   dateInput.addEventListener('change', renderAgenda);\r\n \r\n+  if (storeSelect) {\r\n+    storeSelect.addEventListener('change', () => {\r\n+      selectedStoreId = storeSelect.value || null;\r\n+      if (selectedStoreId) localStorage.setItem('bt_selected_store', selectedStoreId);\r\n+      renderAgenda();\r\n+    });\r\n+  }\r\n+\r\n   if (addBtn) {\r\n     addBtn.addEventListener('click', () => {\r\n       // Integração futura com modal/CRUD.\r\n       // Por ora, apenas informa que a ação será implementada.\r\n"
                },
                {
                    "date": 1757345284580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,7 +107,12 @@\n       alert('Adicionar Serviços: em construção.');\r\n     });\r\n   }\r\n \r\n-  // Primeira renderização\r\n-  renderAgenda();\r\n+  // Primeira renderização (carrega empresas antes)\r\n+  if (storeSelect) {\r\n+    loadStores().finally(renderAgenda);\r\n+  } else {\r\n+    renderAgenda();\r\n+  }\r\n+  \r\n })();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757347387285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,179 @@\n   function formatPtBr(d) {\r\n     return d.toLocaleDateString('pt-BR', { weekday: 'long', day: '2-digit', month: '2-digit', year: 'numeric' });\r\n   }\r\n \r\n+  // ---------- Modal: Adicionar Serviço ----------\r\n+  const modal = document.getElementById('modal-add-servico');\r\n+  const modalClose = document.getElementById('modal-add-close');\r\n+  const modalCancel = document.getElementById('modal-add-cancel');\r\n+  const modalSave = document.getElementById('modal-add-save');\r\n+\r\n+  const cliInput = document.getElementById('add-cli-input');\r\n+  const cliHiddenId = document.getElementById('add-cli-id');\r\n+  const cliSug = document.getElementById('add-cli-suggestions');\r\n+\r\n+  const petSelect = document.getElementById('add-pet-select');\r\n+\r\n+  const servInput = document.getElementById('add-serv-input');\r\n+  const servHiddenId = document.getElementById('add-serv-id');\r\n+  const servSug = document.getElementById('add-serv-suggestions');\r\n+\r\n+  const valorInput = document.getElementById('add-valor');\r\n+  const horaInput = document.getElementById('add-hora');\r\n+\r\n+  const profSelect = document.getElementById('add-pro-select');\r\n+\r\n+  const cachedUser = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n+  const token = cachedUser?.token || '';\r\n+  function headers(extra = {}) {\r\n+    return { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`, ...extra };\r\n+  }\r\n+\r\n+  const API = {\r\n+    buscarClientes: (q = '', limit = 8) => `${API_CONFIG.BASE_URL}/func/clientes/buscar?q=${encodeURIComponent(q)}&limit=${limit}`,\r\n+    petsDoCliente: (id) => `${API_CONFIG.BASE_URL}/func/clientes/${id}/pets`,\r\n+    buscarServicos: (q = '', limit = 8) => `${API_CONFIG.BASE_URL}/func/servicos/buscar?q=${encodeURIComponent(q)}&limit=${limit}`,\r\n+    esteticistas: (storeId) => `${API_CONFIG.BASE_URL}/func/profissionais/esteticistas${typeof storeId !== 'undefined' && storeId ? `?storeId=${storeId}` : ''}`,\r\n+  };\r\n+\r\n+  function openAddModal() {\r\n+    if (!modal) return;\r\n+    const now = new Date();\r\n+    const hh = String(now.getHours()).padStart(2, '0');\r\n+    const mm = String(now.getMinutes()).padStart(2, '0');\r\n+    if (horaInput) horaInput.value = `${hh}:${mm}`;\r\n+\r\n+    if (cliInput) cliInput.value = '';\r\n+    if (cliHiddenId) cliHiddenId.value = '';\r\n+    if (cliSug) cliSug.innerHTML = '';\r\n+    if (petSelect) petSelect.innerHTML = '<option value=\"\">Selecione um cliente</option>';\r\n+\r\n+    if (servInput) servInput.value = '';\r\n+    if (servHiddenId) servHiddenId.value = '';\r\n+    if (servSug) servSug.innerHTML = '';\r\n+    if (valorInput) valorInput.value = '';\r\n+\r\n+    loadEsteticistas();\r\n+\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n+    cliInput?.focus();\r\n+  }\r\n+  function closeAddModal() {\r\n+    modal.classList.add('hidden');\r\n+    modal.classList.remove('flex');\r\n+  }\r\n+  function debounce(fn, delay = 300) {\r\n+    let t = null;\r\n+    return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); };\r\n+  }\r\n+  async function loadEsteticistas() {\r\n+    try {\r\n+      const res = await fetch(API.esteticistas(typeof selectedStoreId !== 'undefined' ? selectedStoreId : ''), { headers: headers() });\r\n+      if (!res.ok) throw new Error('Erro ao carregar profissionais');\r\n+      const list = await res.json();\r\n+      profSelect.innerHTML = (list || []).map(p => `<option value=\"${p._id}\">${p.nome || 'Sem nome'}</option>`).join('') || '<option value=\"\">Nenhum profissional</option>';\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+      profSelect.innerHTML = '<option value=\"\">Erro ao carregar</option>';\r\n+    }\r\n+  }\r\n+  async function carregarPetsDoCliente(clienteId) {\r\n+    petSelect.disabled = true;\r\n+    petSelect.innerHTML = '<option value=\"\">Carregando pets...</option>';\r\n+    try {\r\n+      const res = await fetch(API.petsDoCliente(clienteId), { headers: headers() });\r\n+      if (!res.ok) throw new Error('Falha ao buscar pets');\r\n+      const pets = await res.json();\r\n+      if (!pets || pets.length === 0) {\r\n+        petSelect.innerHTML = '<option value=\"\">Cliente sem pets</option>';\r\n+      } else if (pets.length === 1) {\r\n+        const p = pets[0];\r\n+        petSelect.innerHTML = `<option value=\"${p._id}\">${p.nome} — ${p.tipo}/${p.raca || '-'}</option>`;\r\n+        petSelect.value = p._id;\r\n+      } else {\r\n+        petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome} — ${p.tipo}/${p.raca || '-'}</option>`).join('');\r\n+      }\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+      petSelect.innerHTML = '<option value=\"\">Erro ao carregar pets</option>';\r\n+    } finally {\r\n+      petSelect.disabled = false;\r\n+    }\r\n+  }\r\n+  const onClienteInput = debounce(async () => {\r\n+    const q = cliInput.value.trim();\r\n+    cliHiddenId.value = '';\r\n+    cliSug.innerHTML = '';\r\n+    if (q.length < 2) return;\r\n+    try {\r\n+      const res = await fetch(API.buscarClientes(q), { headers: headers() });\r\n+      if (!res.ok) throw new Error('Falha ao buscar clientes');\r\n+      const items = await res.json();\r\n+      if (!Array.isArray(items) || items.length === 0) {\r\n+        cliSug.innerHTML = '<div class=\"px-3 py-2 text-sm text-gray-500\">Nenhum cliente encontrado.</div>';\r\n+        return;\r\n+      }\r\n+      cliSug.innerHTML = items.map(u => `\r\n+        <button type=\"button\" data-id=\"${u._id}\" data-nome=\"${(u.nome || '').replace(/\"/g,'&quot;')}\"\r\n+          class=\"w-full text-left px-3 py-2 hover:bg-gray-100\">\r\n+          <div class=\"font-medium\">${u.nome || '(Sem nome)'}</div>\r\n+          <div class=\"text-xs text-gray-600\">${u.email || u.cpf || u.cnpj || ''}</div>\r\n+        </button>\r\n+      `).join('');\r\n+      Array.from(cliSug.querySelectorAll('button[data-id]')).forEach(btn => {\r\n+        btn.addEventListener('click', () => {\r\n+          const id = btn.getAttribute('data-id');\r\n+          const nome = btn.getAttribute('data-nome');\r\n+          cliHiddenId.value = id;\r\n+          cliInput.value = nome;\r\n+          cliSug.innerHTML = '';\r\n+          carregarPetsDoCliente(id);\r\n+        });\r\n+      });\r\n+    } catch (e) { console.error(e); }\r\n+  }, 300);\r\n+  cliInput?.addEventListener('input', onClienteInput);\r\n+  cliInput?.addEventListener('focus', onClienteInput);\r\n+\r\n+  const onServicoInput = debounce(async () => {\r\n+    const q = servInput.value.trim();\r\n+    servHiddenId.value = '';\r\n+    valorInput.value = '';\r\n+    servSug.innerHTML = '';\r\n+    if (q.length < 2) return;\r\n+    try {\r\n+      const res = await fetch(API.buscarServicos(q), { headers: headers() });\r\n+      if (!res.ok) throw new Error('Falha ao buscar serviços');\r\n+      const items = await res.json();\r\n+      if (!Array.isArray(items) || items.length === 0) {\r\n+        servSug.innerHTML = '<div class=\"px-3 py-2 text-sm text-gray-500\">Nenhum serviço encontrado.</div>';\r\n+        return;\r\n+      }\r\n+      servSug.innerHTML = items.map(s => `\r\n+        <button type=\"button\" data-id=\"${s._id}\" data-nome=\"${(s.nome || '').replace(/\"/g,'&quot;')}\" data-valor=\"${Number(s.valor||0)}\"\r\n+          class=\"w-full text-left px-3 py-2 hover:bg-gray-100\">\r\n+          <div class=\"font-medium\">${s.nome}</div>\r\n+          <div class=\"text-xs text-gray-600\">R$ ${Number(s.valor||0).toFixed(2).replace('.', ',')}</div>\r\n+        </button>\r\n+      `).join('');\r\n+      Array.from(servSug.querySelectorAll('button[data-id]')).forEach(btn => {\r\n+        btn.addEventListener('click', () => {\r\n+          const id = btn.getAttribute('data-id');\r\n+          const nome = btn.getAttribute('data-nome');\r\n+          const valor = btn.getAttribute('data-valor');\r\n+          servHiddenId.value = id;\r\n+          servInput.value = nome;\r\n+          valorInput.value = Number(valor).toFixed(2);\r\n+          servSug.innerHTML = '';\r\n+        });\r\n+      });\r\n+    } catch (e) { console.error(e); }\r\n+  }, 300);\r\n+  servInput?.addEventListener('input', onServicoInput);\r\n+  servInput?.addEventListener('focus', onServicoInput);\r\n+\r\n   async function loadStores() {\r\n     if (!storeSelect) return;\r\n     try {\r\n       const res = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n@@ -113,6 +284,6 @@\n     loadStores().finally(renderAgenda);\r\n   } else {\r\n     renderAgenda();\r\n   }\r\n-  \r\n+\r\n })();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757347437085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,11 +272,9 @@\n   }\r\n \r\n   if (addBtn) {\r\n     addBtn.addEventListener('click', () => {\r\n-      // Integração futura com modal/CRUD.\r\n-      // Por ora, apenas informa que a ação será implementada.\r\n-      alert('Adicionar Serviços: em construção.');\r\n+      openAddModal();\r\n     });\r\n   }\r\n \r\n   // Primeira renderização (carrega empresas antes)\r\n"
                },
                {
                    "date": 1757350216134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n   const dateLabel = document.getElementById('agenda-date-label');\r\n   const addBtn = document.getElementById('add-service-btn');\r\n   const storeSelect = document.getElementById('agenda-store');\r\n   const storeLabel  = document.getElementById('agenda-store-label');\r\n+  const agendaList  = document.getElementById('agenda-list');\r\n   let storesCache = [];\r\n   let selectedStoreId = null;\r\n \r\n   if (!listEl || !dateInput || !dateLabel) return;\r\n"
                },
                {
                    "date": 1757350237955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,13 @@\n   const valorInput = document.getElementById('add-valor');\r\n   const horaInput = document.getElementById('add-hora');\r\n \r\n   const profSelect = document.getElementById('add-pro-select');\r\n+  const pagoCheck  = document.getElementById('add-pago');\r\n \r\n+  modalClose?.addEventListener('click', () => closeAddModal());\r\n+  modalCancel?.addEventListener('click', () => closeAddModal());\r\n+\r\n   const cachedUser = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n   const token = cachedUser?.token || '';\r\n   function headers(extra = {}) {\r\n     return { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`, ...extra };\r\n"
                },
                {
                    "date": 1757350254123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,10 @@\n     buscarClientes: (q = '', limit = 8) => `${API_CONFIG.BASE_URL}/func/clientes/buscar?q=${encodeURIComponent(q)}&limit=${limit}`,\r\n     petsDoCliente: (id) => `${API_CONFIG.BASE_URL}/func/clientes/${id}/pets`,\r\n     buscarServicos: (q = '', limit = 8) => `${API_CONFIG.BASE_URL}/func/servicos/buscar?q=${encodeURIComponent(q)}&limit=${limit}`,\r\n     esteticistas: (storeId) => `${API_CONFIG.BASE_URL}/func/profissionais/esteticistas${typeof storeId !== 'undefined' && storeId ? `?storeId=${storeId}` : ''}`,\r\n+    listarAgendamentos: (date, storeId) => `${API_CONFIG.BASE_URL}/func/agendamentos?date=${date}${storeId ? `&storeId=${storeId}` : ''}`,\r\n+    criarAgendamento: () => `${API_CONFIG.BASE_URL}/func/agendamentos`,\r\n   };\r\n \r\n   function openAddModal() {\r\n     if (!modal) return;\r\n"
                },
                {
                    "date": 1757350308383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,35 +237,23 @@\n     const date = getDateFromInput();\r\n     dateLabel.textContent = `(${formatPtBr(date)})`;\r\n     updateStoreLabel();\r\n \r\n-    // Limpa a lista\r\n-    listEl.innerHTML = '';\r\n+    // Monta a lista base 00:00 - 23:00\r\n+    if (!agendaList) return;\r\n+    const hours = Array.from({ length: 24 }, (_, h) => `${String(h).padStart(2,'0')}:00`);\r\n+    agendaList.innerHTML = hours.map(hh => `\r\n+      <div class=\"flex items-center gap-4 px-4 py-3\">\r\n+        <div class=\"w-16 text-sm text-gray-600\">${hh}</div>\r\n+        <div class=\"flex-1 min-h-[32px]\" data-slot=\"${hh}\">\r\n+          <span class=\"text-sm text-gray-400\">Sem agendamentos</span>\r\n+        </div>\r\n+      </div>\r\n+    `).join('');\r\n \r\n-    // Cria 24 linhas (00:00 a 23:00)\r\n-    for (let h = 0; h < 24; h++) {\r\n-      const hh = String(h).padStart(2, '0');\r\n-      const li = document.createElement('li');\r\n-      li.className = 'grid grid-cols-12 hover:bg-gray-50';\r\n-\r\n-      const hourCol = document.createElement('div');\r\n-      hourCol.className = 'col-span-3 md:col-span-2 lg:col-span-1 px-4 py-3 text-sm font-semibold text-gray-500';\r\n-      hourCol.textContent = `${hh}:00`;\r\n-\r\n-      const itemsCol = document.createElement('div');\r\n-      itemsCol.className = 'col-span-9 md:col-span-10 lg:col-span-11 px-4 py-3';\r\n-      itemsCol.setAttribute('data-timeslot', `${hh}:00`);\r\n-\r\n-      // placeholder vazio (a lista fica pronta para receber cards de agendamentos futuramente)\r\n-      const empty = document.createElement('div');\r\n-      empty.className = 'text-gray-400 text-sm italic';\r\n-      empty.textContent = 'Sem agendamentos';\r\n-      itemsCol.appendChild(empty);\r\n-\r\n-      li.appendChild(hourCol);\r\n-      li.appendChild(itemsCol);\r\n-      listEl.appendChild(li);\r\n-    }\r\n+    // Carrega agendamentos do dia p/ empresa\r\n+    const dateStr = dateInput.value; // YYYY-MM-DD\r\n+    loadAppointments(dateStr, selectedStoreId);\r\n   }\r\n \r\n   // Ações\r\n   dateInput.addEventListener('change', renderAgenda);\r\n"
                },
                {
                    "date": 1757350359704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,8 +254,58 @@\n     const dateStr = dateInput.value; // YYYY-MM-DD\r\n     loadAppointments(dateStr, selectedStoreId);\r\n   }\r\n \r\n+  async function loadAppointments(dateStr, storeId) {\r\n+    try {\r\n+      const res = await fetch(API.listarAgendamentos(dateStr, storeId), { headers: headers() });\r\n+      if (!res.ok) throw new Error('Falha ao carregar agendamentos');\r\n+      const items = await res.json();\r\n+\r\n+      // Limpa os \"Sem agendamentos\"\r\n+      const clear = new Set();\r\n+      items.forEach(a => {\r\n+        const d = new Date(a.h);\r\n+        const hh = String(d.getHours()).padStart(2, '0');\r\n+        const mm = String(d.getMinutes()).padStart(2, '0');\r\n+        const slotEl = agendaList.querySelector(`[data-slot=\"${hh}:00\"]`);\r\n+        if (!slotEl) return;\r\n+\r\n+        if (!clear.has(hh)) {\r\n+          slotEl.innerHTML = ''; // remove placeholder do primeiro\r\n+          clear.add(hh);\r\n+        }\r\n+        slotEl.appendChild(buildAppointmentCard({\r\n+          pet: a.pet, servico: a.servico, valor: a.valor, pago: a.pago, hora: `${hh}:${mm}`\r\n+        }));\r\n+      });\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+    }\r\n+  }\r\n+\r\n+  function buildAppointmentCard({ pet, servico, valor, pago, hora }) {\r\n+    const el = document.createElement('div');\r\n+    el.className = 'inline-flex items-center gap-2 rounded-md border border-gray-200 bg-white px-2 py-1 text-xs shadow-sm mr-2';\r\n+    el.innerHTML = `\r\n+      <span class=\"font-medium\">${pet}</span>\r\n+      <span class=\"text-gray-400\">•</span>\r\n+      <span class=\"truncate max-w-[180px]\" title=\"${servico}\">${servico}</span>\r\n+      <span class=\"text-gray-400\">•</span>\r\n+      <span>R$ ${Number(valor || 0).toFixed(2).replace('.', ',')}</span>\r\n+      <span class=\"ml-1 ${pago ? '' : 'line-through text-gray-400'}\" title=\"${pago ? 'Pago' : 'Não pago'}\">$</span>\r\n+      <span class=\"ml-2 text-[10px] text-gray-500\">${hora}</span>\r\n+    `;\r\n+    return el;\r\n+  }\r\n+\r\n+  function combineDateTime(dateStr, timeStr) {\r\n+    // dateStr YYYY-MM-DD, timeStr HH:MM -> Date local\r\n+    const [y, m, d] = dateStr.split('-').map(x => parseInt(x, 10));\r\n+    const [hh, mm] = timeStr.split(':').map(x => parseInt(x, 10));\r\n+    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n+  }\r\n+\r\n   // Ações\r\n   dateInput.addEventListener('change', renderAgenda);\r\n \r\n   if (storeSelect) {\r\n"
                },
                {
                    "date": 1757350390090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,14 +315,47 @@\n       renderAgenda();\r\n     });\r\n   }\r\n \r\n-  if (addBtn) {\r\n-    addBtn.addEventListener('click', () => {\r\n-      openAddModal();\r\n-    });\r\n-  }\r\n+  modalSave?.addEventListener('click', async () => {\r\n+    // validações mínimas\r\n+    const clienteId = cliHiddenId.value;\r\n+    const petId = petSelect.value;\r\n+    const servicoId = servHiddenId.value;\r\n+    const profissionalId = profSelect.value;\r\n+    const dateStr = dateInput.value;\r\n+    const timeStr = horaInput.value || '09:00';\r\n+    if (!selectedStoreId) return alert('Selecione uma empresa.');\r\n+    if (!clienteId) return alert('Selecione um cliente.');\r\n+    if (!petId) return alert('Selecione um pet.');\r\n+    if (!servicoId) return alert('Selecione um serviço.');\r\n+    if (!profissionalId) return alert('Selecione um profissional.');\r\n \r\n+    const when = combineDateTime(dateStr, timeStr);\r\n+    try {\r\n+      const res = await fetch(API.criarAgendamento(), {\r\n+        method: 'POST',\r\n+        headers: headers(),\r\n+        body: JSON.stringify({\r\n+          storeId: selectedStoreId,\r\n+          clienteId, petId, servicoId, profissionalId,\r\n+          scheduledAt: when.toISOString(),\r\n+          pago: !!pagoCheck?.checked\r\n+        })\r\n+      });\r\n+      if (!res.ok) {\r\n+        const e = await res.json().catch(() => ({}));\r\n+        throw new Error(e.message || 'Erro ao salvar');\r\n+      }\r\n+      // sucesso\r\n+      closeAddModal();\r\n+      renderAgenda(); // recarrega a agenda e mostra o card\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+      alert(e.message || 'Erro ao salvar');\r\n+    }\r\n+  });\r\n+\r\n   // Primeira renderização (carrega empresas antes)\r\n   if (storeSelect) {\r\n     loadStores().finally(renderAgenda);\r\n   } else {\r\n"
                },
                {
                    "date": 1757350406690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,47 +315,14 @@\n       renderAgenda();\r\n     });\r\n   }\r\n \r\n-  modalSave?.addEventListener('click', async () => {\r\n-    // validações mínimas\r\n-    const clienteId = cliHiddenId.value;\r\n-    const petId = petSelect.value;\r\n-    const servicoId = servHiddenId.value;\r\n-    const profissionalId = profSelect.value;\r\n-    const dateStr = dateInput.value;\r\n-    const timeStr = horaInput.value || '09:00';\r\n-    if (!selectedStoreId) return alert('Selecione uma empresa.');\r\n-    if (!clienteId) return alert('Selecione um cliente.');\r\n-    if (!petId) return alert('Selecione um pet.');\r\n-    if (!servicoId) return alert('Selecione um serviço.');\r\n-    if (!profissionalId) return alert('Selecione um profissional.');\r\n+  if (addBtn) {\r\n+    addBtn.addEventListener('click', () => {\r\n+      openAddModal();\r\n+    });\r\n+  }\r\n \r\n-    const when = combineDateTime(dateStr, timeStr);\r\n-    try {\r\n-      const res = await fetch(API.criarAgendamento(), {\r\n-        method: 'POST',\r\n-        headers: headers(),\r\n-        body: JSON.stringify({\r\n-          storeId: selectedStoreId,\r\n-          clienteId, petId, servicoId, profissionalId,\r\n-          scheduledAt: when.toISOString(),\r\n-          pago: !!pagoCheck?.checked\r\n-        })\r\n-      });\r\n-      if (!res.ok) {\r\n-        const e = await res.json().catch(() => ({}));\r\n-        throw new Error(e.message || 'Erro ao salvar');\r\n-      }\r\n-      // sucesso\r\n-      closeAddModal();\r\n-      renderAgenda(); // recarrega a agenda e mostra o card\r\n-    } catch (e) {\r\n-      console.error(e);\r\n-      alert(e.message || 'Erro ao salvar');\r\n-    }\r\n-  });\r\n-\r\n   // Primeira renderização (carrega empresas antes)\r\n   if (storeSelect) {\r\n     loadStores().finally(renderAgenda);\r\n   } else {\r\n"
                },
                {
                    "date": 1757350424218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,8 +321,47 @@\n       openAddModal();\r\n     });\r\n   }\r\n \r\n+  modalSave?.addEventListener('click', async () => {\r\n+    // validações mínimas\r\n+    const clienteId = cliHiddenId.value;\r\n+    const petId = petSelect.value;\r\n+    const servicoId = servHiddenId.value;\r\n+    const profissionalId = profSelect.value;\r\n+    const dateStr = dateInput.value;\r\n+    const timeStr = horaInput.value || '09:00';\r\n+    if (!selectedStoreId) return alert('Selecione uma empresa.');\r\n+    if (!clienteId) return alert('Selecione um cliente.');\r\n+    if (!petId) return alert('Selecione um pet.');\r\n+    if (!servicoId) return alert('Selecione um serviço.');\r\n+    if (!profissionalId) return alert('Selecione um profissional.');\r\n+\r\n+    const when = combineDateTime(dateStr, timeStr);\r\n+    try {\r\n+      const res = await fetch(API.criarAgendamento(), {\r\n+        method: 'POST',\r\n+        headers: headers(),\r\n+        body: JSON.stringify({\r\n+          storeId: selectedStoreId,\r\n+          clienteId, petId, servicoId, profissionalId,\r\n+          scheduledAt: when.toISOString(),\r\n+          pago: !!pagoCheck?.checked\r\n+        })\r\n+      });\r\n+      if (!res.ok) {\r\n+        const e = await res.json().catch(() => ({}));\r\n+        throw new Error(e.message || 'Erro ao salvar');\r\n+      }\r\n+      // sucesso\r\n+      closeAddModal();\r\n+      renderAgenda(); // recarrega a agenda e mostra o card\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+      alert(e.message || 'Erro ao salvar');\r\n+    }\r\n+  });\r\n+\r\n   // Primeira renderização (carrega empresas antes)\r\n   if (storeSelect) {\r\n     loadStores().finally(renderAgenda);\r\n   } else {\r\n"
                },
                {
                    "date": 1757352621380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,371 +1,324 @@\n+SiteEoBichoTW/scripts/funcionarios/banho-e-tosa.js\r\n (function () {\r\n-  const listEl = document.getElementById('agenda-list');\r\n+  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n+  function api(url, opts={}) {\r\n+    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n+      ...opts,\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        ...(opts.headers || {}),\r\n+        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Elements\r\n+  const agendaList = document.getElementById('agenda-list');\r\n   const dateInput = document.getElementById('agenda-date');\r\n-  const dateLabel = document.getElementById('agenda-date-label');\r\n+  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n   const addBtn = document.getElementById('add-service-btn');\r\n   const storeSelect = document.getElementById('agenda-store');\r\n-  const storeLabel  = document.getElementById('agenda-store-label');\r\n-  const agendaList  = document.getElementById('agenda-list');\r\n-  let storesCache = [];\r\n-  let selectedStoreId = null;\r\n+  const storeLabelVisible  = document.getElementById('agenda-store-label-visible');\r\n \r\n-  if (!listEl || !dateInput || !dateLabel) return;\r\n-\r\n-  // Define a data inicial como \"hoje\" no fuso do browser\r\n-  const todayISO = new Date().toISOString().slice(0, 10);\r\n-  if (!dateInput.value) dateInput.value = todayISO;\r\n-\r\n-  function formatPtBr(d) {\r\n-    return d.toLocaleDateString('pt-BR', { weekday: 'long', day: '2-digit', month: '2-digit', year: 'numeric' });\r\n-  }\r\n-\r\n-  // ---------- Modal: Adicionar Serviço ----------\r\n+  // Modal elements\r\n   const modal = document.getElementById('modal-add-servico');\r\n   const modalClose = document.getElementById('modal-add-close');\r\n   const modalCancel = document.getElementById('modal-add-cancel');\r\n   const modalSave = document.getElementById('modal-add-save');\r\n \r\n   const cliInput = document.getElementById('add-cli-input');\r\n-  const cliHiddenId = document.getElementById('add-cli-id');\r\n-  const cliSug = document.getElementById('add-cli-suggestions');\r\n-\r\n+  const cliSug = document.getElementById('add-cli-sug');\r\n   const petSelect = document.getElementById('add-pet-select');\r\n-\r\n   const servInput = document.getElementById('add-serv-input');\r\n-  const servHiddenId = document.getElementById('add-serv-id');\r\n-  const servSug = document.getElementById('add-serv-suggestions');\r\n-\r\n+  const servSug = document.getElementById('add-serv-sug');\r\n   const valorInput = document.getElementById('add-valor');\r\n   const horaInput = document.getElementById('add-hora');\r\n+  const profSelect = document.getElementById('add-prof-select');\r\n \r\n-  const profSelect = document.getElementById('add-pro-select');\r\n-  const pagoCheck  = document.getElementById('add-pago');\r\n-\r\n-  modalClose?.addEventListener('click', () => closeAddModal());\r\n-  modalCancel?.addEventListener('click', () => closeAddModal());\r\n-\r\n-  const cachedUser = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n-  const token = cachedUser?.token || '';\r\n-  function headers(extra = {}) {\r\n-    return { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`, ...extra };\r\n-  }\r\n-\r\n-  const API = {\r\n-    buscarClientes: (q = '', limit = 8) => `${API_CONFIG.BASE_URL}/func/clientes/buscar?q=${encodeURIComponent(q)}&limit=${limit}`,\r\n-    petsDoCliente: (id) => `${API_CONFIG.BASE_URL}/func/clientes/${id}/pets`,\r\n-    buscarServicos: (q = '', limit = 8) => `${API_CONFIG.BASE_URL}/func/servicos/buscar?q=${encodeURIComponent(q)}&limit=${limit}`,\r\n-    esteticistas: (storeId) => `${API_CONFIG.BASE_URL}/func/profissionais/esteticistas${typeof storeId !== 'undefined' && storeId ? `?storeId=${storeId}` : ''}`,\r\n-    listarAgendamentos: (date, storeId) => `${API_CONFIG.BASE_URL}/func/agendamentos?date=${date}${storeId ? `&storeId=${storeId}` : ''}`,\r\n-    criarAgendamento: () => `${API_CONFIG.BASE_URL}/func/agendamentos`,\r\n+  // State\r\n+  const state = {\r\n+    stores: [],\r\n+    profissionais: [],\r\n+    agendamentos: [],\r\n+    selectedStoreId: null,\r\n+    selectedCliente: null,\r\n+    selectedServico: null\r\n   };\r\n \r\n-  function openAddModal() {\r\n-    if (!modal) return;\r\n-    const now = new Date();\r\n-    const hh = String(now.getHours()).padStart(2, '0');\r\n-    const mm = String(now.getMinutes()).padStart(2, '0');\r\n-    if (horaInput) horaInput.value = `${hh}:${mm}`;\r\n-\r\n-    if (cliInput) cliInput.value = '';\r\n-    if (cliHiddenId) cliHiddenId.value = '';\r\n-    if (cliSug) cliSug.innerHTML = '';\r\n-    if (petSelect) petSelect.innerHTML = '<option value=\"\">Selecione um cliente</option>';\r\n-\r\n-    if (servInput) servInput.value = '';\r\n-    if (servHiddenId) servHiddenId.value = '';\r\n-    if (servSug) servSug.innerHTML = '';\r\n-    if (valorInput) valorInput.value = '';\r\n-\r\n-    loadEsteticistas();\r\n-\r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n-    cliInput?.focus();\r\n+  // Helpers\r\n+  function todayStr() {\r\n+    const tz = new Date();\r\n+    return tz.toISOString().slice(0, 10);\r\n   }\r\n-  function closeAddModal() {\r\n-    modal.classList.add('hidden');\r\n-    modal.classList.remove('flex');\r\n+  function pad(n){ return n<10? '0'+n : ''+n; }\r\n+  function parseTimeToDate(dateISO, hhmm) {\r\n+    const [h,m] = (hhmm || '00:00').split(':').map(x=>parseInt(x,10));\r\n+    const d = new Date(dateISO);\r\n+    d.setHours(h, m, 0, 0);\r\n+    return d;\r\n   }\r\n-  function debounce(fn, delay = 300) {\r\n-    let t = null;\r\n-    return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); };\r\n-  }\r\n-  async function loadEsteticistas() {\r\n-    try {\r\n-      const res = await fetch(API.esteticistas(typeof selectedStoreId !== 'undefined' ? selectedStoreId : ''), { headers: headers() });\r\n-      if (!res.ok) throw new Error('Erro ao carregar profissionais');\r\n-      const list = await res.json();\r\n-      profSelect.innerHTML = (list || []).map(p => `<option value=\"${p._id}\">${p.nome || 'Sem nome'}</option>`).join('') || '<option value=\"\">Nenhum profissional</option>';\r\n-    } catch (e) {\r\n-      console.error(e);\r\n-      profSelect.innerHTML = '<option value=\"\">Erro ao carregar</option>';\r\n-    }\r\n-  }\r\n-  async function carregarPetsDoCliente(clienteId) {\r\n-    petSelect.disabled = true;\r\n-    petSelect.innerHTML = '<option value=\"\">Carregando pets...</option>';\r\n-    try {\r\n-      const res = await fetch(API.petsDoCliente(clienteId), { headers: headers() });\r\n-      if (!res.ok) throw new Error('Falha ao buscar pets');\r\n-      const pets = await res.json();\r\n-      if (!pets || pets.length === 0) {\r\n-        petSelect.innerHTML = '<option value=\"\">Cliente sem pets</option>';\r\n-      } else if (pets.length === 1) {\r\n-        const p = pets[0];\r\n-        petSelect.innerHTML = `<option value=\"${p._id}\">${p.nome} — ${p.tipo}/${p.raca || '-'}</option>`;\r\n-        petSelect.value = p._id;\r\n-      } else {\r\n-        petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome} — ${p.tipo}/${p.raca || '-'}</option>`).join('');\r\n-      }\r\n-    } catch (e) {\r\n-      console.error(e);\r\n-      petSelect.innerHTML = '<option value=\"\">Erro ao carregar pets</option>';\r\n-    } finally {\r\n-      petSelect.disabled = false;\r\n-    }\r\n-  }\r\n-  const onClienteInput = debounce(async () => {\r\n-    const q = cliInput.value.trim();\r\n-    cliHiddenId.value = '';\r\n-    cliSug.innerHTML = '';\r\n-    if (q.length < 2) return;\r\n-    try {\r\n-      const res = await fetch(API.buscarClientes(q), { headers: headers() });\r\n-      if (!res.ok) throw new Error('Falha ao buscar clientes');\r\n-      const items = await res.json();\r\n-      if (!Array.isArray(items) || items.length === 0) {\r\n-        cliSug.innerHTML = '<div class=\"px-3 py-2 text-sm text-gray-500\">Nenhum cliente encontrado.</div>';\r\n-        return;\r\n-      }\r\n-      cliSug.innerHTML = items.map(u => `\r\n-        <button type=\"button\" data-id=\"${u._id}\" data-nome=\"${(u.nome || '').replace(/\"/g,'&quot;')}\"\r\n-          class=\"w-full text-left px-3 py-2 hover:bg-gray-100\">\r\n-          <div class=\"font-medium\">${u.nome || '(Sem nome)'}</div>\r\n-          <div class=\"text-xs text-gray-600\">${u.email || u.cpf || u.cnpj || ''}</div>\r\n-        </button>\r\n-      `).join('');\r\n-      Array.from(cliSug.querySelectorAll('button[data-id]')).forEach(btn => {\r\n-        btn.addEventListener('click', () => {\r\n-          const id = btn.getAttribute('data-id');\r\n-          const nome = btn.getAttribute('data-nome');\r\n-          cliHiddenId.value = id;\r\n-          cliInput.value = nome;\r\n-          cliSug.innerHTML = '';\r\n-          carregarPetsDoCliente(id);\r\n-        });\r\n-      });\r\n-    } catch (e) { console.error(e); }\r\n-  }, 300);\r\n-  cliInput?.addEventListener('input', onClienteInput);\r\n-  cliInput?.addEventListener('focus', onClienteInput);\r\n+  function money(v){ return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n+  function byId(id){ return document.getElementById(id); }\r\n+  function clearChildren(el){ while(el && el.firstChild) el.removeChild(el.firstChild); }\r\n+  function debounce(fn, delay=250){ let t; return (...args)=>{ clearTimeout(t); t=setTimeout(()=>fn(...args), delay); }; }\r\n \r\n-  const onServicoInput = debounce(async () => {\r\n-    const q = servInput.value.trim();\r\n-    servHiddenId.value = '';\r\n-    valorInput.value = '';\r\n-    servSug.innerHTML = '';\r\n-    if (q.length < 2) return;\r\n-    try {\r\n-      const res = await fetch(API.buscarServicos(q), { headers: headers() });\r\n-      if (!res.ok) throw new Error('Falha ao buscar serviços');\r\n-      const items = await res.json();\r\n-      if (!Array.isArray(items) || items.length === 0) {\r\n-        servSug.innerHTML = '<div class=\"px-3 py-2 text-sm text-gray-500\">Nenhum serviço encontrado.</div>';\r\n-        return;\r\n-      }\r\n-      servSug.innerHTML = items.map(s => `\r\n-        <button type=\"button\" data-id=\"${s._id}\" data-nome=\"${(s.nome || '').replace(/\"/g,'&quot;')}\" data-valor=\"${Number(s.valor||0)}\"\r\n-          class=\"w-full text-left px-3 py-2 hover:bg-gray-100\">\r\n-          <div class=\"font-medium\">${s.nome}</div>\r\n-          <div class=\"text-xs text-gray-600\">R$ ${Number(s.valor||0).toFixed(2).replace('.', ',')}</div>\r\n-        </button>\r\n-      `).join('');\r\n-      Array.from(servSug.querySelectorAll('button[data-id]')).forEach(btn => {\r\n-        btn.addEventListener('click', () => {\r\n-          const id = btn.getAttribute('data-id');\r\n-          const nome = btn.getAttribute('data-nome');\r\n-          const valor = btn.getAttribute('data-valor');\r\n-          servHiddenId.value = id;\r\n-          servInput.value = nome;\r\n-          valorInput.value = Number(valor).toFixed(2);\r\n-          servSug.innerHTML = '';\r\n-        });\r\n-      });\r\n-    } catch (e) { console.error(e); }\r\n-  }, 300);\r\n-  servInput?.addEventListener('input', onServicoInput);\r\n-  servInput?.addEventListener('focus', onServicoInput);\r\n-\r\n+  // Load stores\r\n   async function loadStores() {\r\n-    if (!storeSelect) return;\r\n-    try {\r\n-      const res = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n-      if (!res.ok) throw new Error('Falha ao carregar empresas');\r\n-      storesCache = await res.json() || [];\r\n-      if (storesCache.length === 0) {\r\n-        storeSelect.innerHTML = `<option value=\"\">Nenhuma empresa cadastrada</option>`;\r\n-        selectedStoreId = null;\r\n-        updateStoreLabel();\r\n-        return;\r\n-      }\r\n-      storeSelect.innerHTML = storesCache.map(s => `<option value=\"${s._id}\">${s.nome || 'Sem nome'}</option>`).join('');\r\n-      // Seleção padrão: última usada ou a primeira da lista\r\n-      const saved = localStorage.getItem('bt_selected_store');\r\n-      selectedStoreId = storesCache.find(s => s._id === saved)?._id || storesCache[0]._id;\r\n-      storeSelect.value = selectedStoreId;\r\n-      updateStoreLabel();\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      storeSelect.innerHTML = `<option value=\"\">Erro ao carregar</option>`;\r\n-      selectedStoreId = null;\r\n-      updateStoreLabel();\r\n+    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+    const list = await resp.json();\r\n+    state.stores = Array.isArray(list) ? list : [];\r\n+    storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+    if (!state.selectedStoreId && state.stores[0]) {\r\n+      state.selectedStoreId = state.stores[0]._id;\r\n+      storeSelect.value = state.selectedStoreId;\r\n     }\r\n+    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n+    storeLabelVisible.textContent = s ? s.nome : '—';\r\n   }\r\n \r\n-  function updateStoreLabel() {\r\n-    if (!storeLabel) return;\r\n-    const s = storesCache.find(x => x._id === selectedStoreId);\r\n-    storeLabel.textContent = s ? s.nome : '—';\r\n+  // Load professionals (esteticistas) limited to the selected store\r\n+  async function loadProfissionais() {\r\n+    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n+    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n+    const list = await resp.json();\r\n+    state.profissionais = list || [];\r\n+    // Fill modal select\r\n+    profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n   }\r\n \r\n-  function getDateFromInput() {\r\n-    const [y, m, d] = (dateInput.value || todayISO).split('-').map(Number);\r\n-    return new Date(y, (m - 1), d);\r\n+  // Load appointments for the day/store\r\n+  async function loadAgendamentos() {\r\n+    const date = dateInput.value || todayStr();\r\n+    const resp = await api(`/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`);\r\n+    state.agendamentos = await resp.json();\r\n   }\r\n \r\n-  function renderAgenda() {\r\n-    const date = getDateFromInput();\r\n-    dateLabel.textContent = `(${formatPtBr(date)})`;\r\n-    updateStoreLabel();\r\n+  // Render grid with columns per professional\r\n+  function renderGrid() {\r\n+    const date = dateInput.value || todayStr();\r\n+    dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+    const store = state.stores.find(s => s._id === state.selectedStoreId);\r\n+    storeLabelVisible.textContent = store ? store.nome : '—';\r\n \r\n-    // Monta a lista base 00:00 - 23:00\r\n-    if (!agendaList) return;\r\n-    const hours = Array.from({ length: 24 }, (_, h) => `${String(h).padStart(2,'0')}:00`);\r\n-    agendaList.innerHTML = hours.map(hh => `\r\n-      <div class=\"flex items-center gap-4 px-4 py-3\">\r\n-        <div class=\"w-16 text-sm text-gray-600\">${hh}</div>\r\n-        <div class=\"flex-1 min-h-[32px]\" data-slot=\"${hh}\">\r\n-          <span class=\"text-sm text-gray-400\">Sem agendamentos</span>\r\n-        </div>\r\n-      </div>\r\n-    `).join('');\r\n+    // Hours rows (07:00 - 20:00)\r\n+    const hours = [];\r\n+    for (let h = 7; h <= 20; h++) hours.push(`${pad(h)}:00`);\r\n \r\n-    // Carrega agendamentos do dia p/ empresa\r\n-    const dateStr = dateInput.value; // YYYY-MM-DD\r\n-    loadAppointments(dateStr, selectedStoreId);\r\n-  }\r\n+    // Build header (first empty cell + professional names)\r\n+    const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n+    const colCount = cols.length;\r\n \r\n-  async function loadAppointments(dateStr, storeId) {\r\n-    try {\r\n-      const res = await fetch(API.listarAgendamentos(dateStr, storeId), { headers: headers() });\r\n-      if (!res.ok) throw new Error('Falha ao carregar agendamentos');\r\n-      const items = await res.json();\r\n+    // Grid container\r\n+    clearChildren(agendaList);\r\n \r\n-      // Limpa os \"Sem agendamentos\"\r\n-      const clear = new Set();\r\n-      items.forEach(a => {\r\n-        const d = new Date(a.h);\r\n-        const hh = String(d.getHours()).padStart(2, '0');\r\n-        const mm = String(d.getMinutes()).padStart(2, '0');\r\n-        const slotEl = agendaList.querySelector(`[data-slot=\"${hh}:00\"]`);\r\n-        if (!slotEl) return;\r\n+    const header = document.createElement('div');\r\n+    header.className = `grid sticky top-0 bg-white z-10 border-b text-sm font-medium`\r\n+      + ` grid-cols-${Math.min(colCount, 12)}`;\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n+    cols.forEach((label, idx) => {\r\n+      const cell = document.createElement('div');\r\n+      cell.className = 'px-3 py-2 ' + (idx===0 ? 'text-gray-600' : 'text-gray-800');\r\n+      cell.textContent = label;\r\n+      header.appendChild(cell);\r\n+    });\r\n+    agendaList.appendChild(header);\r\n \r\n-        if (!clear.has(hh)) {\r\n-          slotEl.innerHTML = ''; // remove placeholder do primeiro\r\n-          clear.add(hh);\r\n-        }\r\n-        slotEl.appendChild(buildAppointmentCard({\r\n-          pet: a.pet, servico: a.servico, valor: a.valor, pago: a.pago, hora: `${hh}:${mm}`\r\n-        }));\r\n\\ No newline at end of file\n+    // Body\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n+    agendaList.appendChild(body);\r\n+\r\n+    hours.forEach(hh => {\r\n+      // Time column\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n+      timeCell.textContent = hh;\r\n+      body.appendChild(timeCell);\r\n+\r\n+      // One cell per professional\r\n+      state.profissionais.forEach(p => {\r\n+        const col = document.createElement('div');\r\n+        col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n+        col.dataset.profissionalId = p._id;\r\n+        col.dataset.hh = hh;\r\n+        body.appendChild(col);\r\n       });\r\n-    } catch (e) {\r\n-      console.error(e);\r\n+    });\r\n+\r\n+    // Place cards\r\n+    for (const a of state.agendamentos) {\r\n+      const d = new Date(a.h);\r\n+      const hh = `${pad(d.getHours())}:00`;\r\n+      const col = body.querySelector(`div[data-profissional-id=\"${a.profissionalId}\"][data-hh=\"${hh}\"]`);\r\n+      if (!col) continue;\r\n+\r\n+      const card = document.createElement('div');\r\n+      card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2';\r\n+      const left = document.createElement('div');\r\n+      left.innerHTML = `<div class=\"font-medium text-gray-900\">${a.pet}</div>\r\n+                        <div class=\"text-gray-600\">${a.servico}</div>\r\n+                        <div class=\"text-gray-600\">${money(a.valor)}</div>`;\r\n+      const right = document.createElement('div');\r\n+      right.className = 'text-lg';\r\n+      const dollar = document.createElement('span');\r\n+      dollar.textContent = '$';\r\n+      if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n+      right.appendChild(dollar);\r\n+\r\n+      card.appendChild(left);\r\n+      card.appendChild(right);\r\n+      col.appendChild(card);\r\n     }\r\n   }\r\n \r\n-  function buildAppointmentCard({ pet, servico, valor, pago, hora }) {\r\n-    const el = document.createElement('div');\r\n-    el.className = 'inline-flex items-center gap-2 rounded-md border border-gray-200 bg-white px-2 py-1 text-xs shadow-sm mr-2';\r\n-    el.innerHTML = `\r\n-      <span class=\"font-medium\">${pet}</span>\r\n-      <span class=\"text-gray-400\">•</span>\r\n-      <span class=\"truncate max-w-[180px]\" title=\"${servico}\">${servico}</span>\r\n-      <span class=\"text-gray-400\">•</span>\r\n-      <span>R$ ${Number(valor || 0).toFixed(2).replace('.', ',')}</span>\r\n-      <span class=\"ml-1 ${pago ? '' : 'line-through text-gray-400'}\" title=\"${pago ? 'Pago' : 'Não pago'}\">$</span>\r\n-      <span class=\"ml-2 text-[10px] text-gray-500\">${hora}</span>\r\n-    `;\r\n-    return el;\r\n-  }\r\n+  // Modal behavior\r\n+  function openAddModal() {\r\n+    // Reset\r\n+    state.selectedCliente = null;\r\n+    state.selectedServico = null;\r\n+    cliInput.value = '';\r\n+    cliSug.innerHTML = '';\r\n+    cliSug.classList.add('hidden');\r\n+    petSelect.innerHTML = '';\r\n+    servInput.value = '';\r\n+    servSug.innerHTML = '';\r\n+    servSug.classList.add('hidden');\r\n+    valorInput.value = '';\r\n+    horaInput.value = new Date().toTimeString().slice(0,5);\r\n \r\n-  function combineDateTime(dateStr, timeStr) {\r\n-    // dateStr YYYY-MM-DD, timeStr HH:MM -> Date local\r\n-    const [y, m, d] = dateStr.split('-').map(x => parseInt(x, 10));\r\n-    const [hh, mm] = timeStr.split(':').map(x => parseInt(x, 10));\r\n-    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n+    // Load professionals (already loaded globally, but ensure select is filled)\r\n+    profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n+    cliInput.focus();\r\n   }\r\n+  function closeAddModal() {\r\n+    modal.classList.add('hidden');\r\n+    modal.classList.remove('flex');\r\n+  }\r\n \r\n-  // Ações\r\n-  dateInput.addEventListener('change', renderAgenda);\r\n-\r\n-  if (storeSelect) {\r\n-    storeSelect.addEventListener('change', () => {\r\n-      selectedStoreId = storeSelect.value || null;\r\n-      if (selectedStoreId) localStorage.setItem('bt_selected_store', selectedStoreId);\r\n-      renderAgenda();\r\n+  // Cliente search\r\n+  async function searchClientes(term) {\r\n+    if (!term || term.length < 2) { cliSug.innerHTML=''; cliSug.classList.add('hidden'); return; }\r\n+    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json();\r\n+    cliSug.innerHTML = list.map(u => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n+        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n+      </li>`).join('');\r\n+    cliSug.classList.remove('hidden');\r\n+    cliSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', async () => {\r\n+        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n+        cliInput.value = li.dataset.nome;\r\n+        cliSug.classList.add('hidden');\r\n+        // Auto load pets for this client\r\n+        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n+        const pets = await resp.json();\r\n+        petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+      });\r\n     });\r\n   }\r\n \r\n-  if (addBtn) {\r\n-    addBtn.addEventListener('click', () => {\r\n-      openAddModal();\r\n+  // Serviço search\r\n+  async function searchServicos(term) {\r\n+    if (!term || term.length < 2) { servSug.innerHTML=''; servSug.classList.add('hidden'); return; }\r\n+    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json();\r\n+    servSug.innerHTML = list.map(s => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor || 0}\">\r\n+        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${(s.grupo && s.grupo.nome) ? s.grupo.nome : ''}</div>\r\n+      </li>`).join('');\r\n+    servSug.classList.remove('hidden');\r\n+    servSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', () => {\r\n+        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n+        servInput.value = state.selectedServico.nome;\r\n+        valorInput.value = state.selectedServico.valor.toFixed(2);\r\n+        servSug.classList.add('hidden');\r\n+      });\r\n     });\r\n   }\r\n \r\n-  modalSave?.addEventListener('click', async () => {\r\n-    // validações mínimas\r\n-    const clienteId = cliHiddenId.value;\r\n-    const petId = petSelect.value;\r\n-    const servicoId = servHiddenId.value;\r\n-    const profissionalId = profSelect.value;\r\n-    const dateStr = dateInput.value;\r\n-    const timeStr = horaInput.value || '09:00';\r\n-    if (!selectedStoreId) return alert('Selecione uma empresa.');\r\n-    if (!clienteId) return alert('Selecione um cliente.');\r\n-    if (!petId) return alert('Selecione um pet.');\r\n-    if (!servicoId) return alert('Selecione um serviço.');\r\n-    if (!profissionalId) return alert('Selecione um profissional.');\r\n+  async function saveAgendamento() {\r\n+    try {\r\n+      const clienteId = state.selectedCliente?._id;\r\n+      const petId = petSelect.value;\r\n+      const servicoId = state.selectedServico?._id;\r\n+      const profissionalId = profSelect.value;\r\n+      const hora = horaInput.value;\r\n+      const date = dateInput.value || todayStr();\r\n \r\n-    const when = combineDateTime(dateStr, timeStr);\r\n-    try {\r\n-      const res = await fetch(API.criarAgendamento(), {\r\n+      if (!(clienteId && petId && servicoId && profissionalId && hora)) {\r\n+        alert('Preencha cliente, pet, serviço, profissional e hora.');\r\n+        return;\r\n+      }\r\n+\r\n+      const scheduledAt = parseTimeToDate(date, hora).toISOString();\r\n+\r\n+      const body = {\r\n+        storeId: state.selectedStoreId,\r\n+        clienteId,\r\n+        petId,\r\n+        servicoId,\r\n+        profissionalId,\r\n+        scheduledAt,\r\n+        valor: Number(valorInput.value || 0),\r\n+        pago: false\r\n+      };\r\n+\r\n+      const resp = await api('/func/agendamentos', {\r\n         method: 'POST',\r\n-        headers: headers(),\r\n-        body: JSON.stringify({\r\n-          storeId: selectedStoreId,\r\n-          clienteId, petId, servicoId, profissionalId,\r\n-          scheduledAt: when.toISOString(),\r\n-          pago: !!pagoCheck?.checked\r\n-        })\r\n+        body: JSON.stringify(body)\r\n       });\r\n-      if (!res.ok) {\r\n-        const e = await res.json().catch(() => ({}));\r\n-        throw new Error(e.message || 'Erro ao salvar');\r\n+\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(()=>({}));\r\n+        throw new Error(err.message || 'Erro ao salvar');\r\n       }\r\n-      // sucesso\r\n+\r\n+      const created = await resp.json();\r\n+      state.agendamentos.push(created);\r\n       closeAddModal();\r\n-      renderAgenda(); // recarrega a agenda e mostra o card\r\n+      renderGrid();\r\n     } catch (e) {\r\n       console.error(e);\r\n       alert(e.message || 'Erro ao salvar');\r\n     }\r\n+  }\r\n+\r\n+  // Events\r\n+  addBtn?.addEventListener('click', openAddModal);\r\n+  modalClose?.addEventListener('click', closeAddModal);\r\n+  modalCancel?.addEventListener('click', closeAddModal);\r\n+  modalSave?.addEventListener('click', saveAgendamento);\r\n+\r\n+  cliInput?.addEventListener('input', debounce((e)=>searchClientes(e.target.value), 300));\r\n+  servInput?.addEventListener('input', debounce((e)=>searchServicos(e.target.value), 300));\r\n+\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n   });\r\n \r\n-  // Primeira renderização (carrega empresas antes)\r\n-  if (storeSelect) {\r\n-    loadStores().finally(renderAgenda);\r\n-  } else {\r\n-    renderAgenda();\r\n-  }\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  });\r\n \r\n-})();\n+  // Boot\r\n+  (async function init() {\r\n+    if (!dateInput.value) dateInput.value = todayStr();\r\n+    await loadStores();\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  })();\r\n+})();\r\n"
                },
                {
                    "date": 1757352631264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,324 +1,371 @@\n-SiteEoBichoTW/scripts/funcionarios/banho-e-tosa.js\r\n (function () {\r\n-  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n-  function api(url, opts={}) {\r\n-    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n-      ...opts,\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        ...(opts.headers || {}),\r\n-        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  // Elements\r\n-  const agendaList = document.getElementById('agenda-list');\r\n+  const listEl = document.getElementById('agenda-list');\r\n   const dateInput = document.getElementById('agenda-date');\r\n-  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n+  const dateLabel = document.getElementById('agenda-date-label');\r\n   const addBtn = document.getElementById('add-service-btn');\r\n   const storeSelect = document.getElementById('agenda-store');\r\n-  const storeLabelVisible  = document.getElementById('agenda-store-label-visible');\r\n+  const storeLabel  = document.getElementById('agenda-store-label');\r\n+  const agendaList  = document.getElementById('agenda-list');\r\n+  let storesCache = [];\r\n+  let selectedStoreId = null;\r\n \r\n-  // Modal elements\r\n+  if (!listEl || !dateInput || !dateLabel) return;\r\n+\r\n+  // Define a data inicial como \"hoje\" no fuso do browser\r\n+  const todayISO = new Date().toISOString().slice(0, 10);\r\n+  if (!dateInput.value) dateInput.value = todayISO;\r\n+\r\n+  function formatPtBr(d) {\r\n+    return d.toLocaleDateString('pt-BR', { weekday: 'long', day: '2-digit', month: '2-digit', year: 'numeric' });\r\n+  }\r\n+\r\n+  // ---------- Modal: Adicionar Serviço ----------\r\n   const modal = document.getElementById('modal-add-servico');\r\n   const modalClose = document.getElementById('modal-add-close');\r\n   const modalCancel = document.getElementById('modal-add-cancel');\r\n   const modalSave = document.getElementById('modal-add-save');\r\n \r\n   const cliInput = document.getElementById('add-cli-input');\r\n-  const cliSug = document.getElementById('add-cli-sug');\r\n+  const cliHiddenId = document.getElementById('add-cli-id');\r\n+  const cliSug = document.getElementById('add-cli-suggestions');\r\n+\r\n   const petSelect = document.getElementById('add-pet-select');\r\n+\r\n   const servInput = document.getElementById('add-serv-input');\r\n-  const servSug = document.getElementById('add-serv-sug');\r\n+  const servHiddenId = document.getElementById('add-serv-id');\r\n+  const servSug = document.getElementById('add-serv-suggestions');\r\n+\r\n   const valorInput = document.getElementById('add-valor');\r\n   const horaInput = document.getElementById('add-hora');\r\n-  const profSelect = document.getElementById('add-prof-select');\r\n \r\n-  // State\r\n-  const state = {\r\n-    stores: [],\r\n-    profissionais: [],\r\n-    agendamentos: [],\r\n-    selectedStoreId: null,\r\n-    selectedCliente: null,\r\n-    selectedServico: null\r\n+  const profSelect = document.getElementById('add-pro-select');\r\n+  const pagoCheck  = document.getElementById('add-pago');\r\n+\r\n+  modalClose?.addEventListener('click', () => closeAddModal());\r\n+  modalCancel?.addEventListener('click', () => closeAddModal());\r\n+\r\n+  const cachedUser = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n+  const token = cachedUser?.token || '';\r\n+  function headers(extra = {}) {\r\n+    return { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`, ...extra };\r\n+  }\r\n+\r\n+  const API = {\r\n+    buscarClientes: (q = '', limit = 8) => `${API_CONFIG.BASE_URL}/func/clientes/buscar?q=${encodeURIComponent(q)}&limit=${limit}`,\r\n+    petsDoCliente: (id) => `${API_CONFIG.BASE_URL}/func/clientes/${id}/pets`,\r\n+    buscarServicos: (q = '', limit = 8) => `${API_CONFIG.BASE_URL}/func/servicos/buscar?q=${encodeURIComponent(q)}&limit=${limit}`,\r\n+    esteticistas: (storeId) => `${API_CONFIG.BASE_URL}/func/profissionais/esteticistas${typeof storeId !== 'undefined' && storeId ? `?storeId=${storeId}` : ''}`,\r\n+    listarAgendamentos: (date, storeId) => `${API_CONFIG.BASE_URL}/func/agendamentos?date=${date}${storeId ? `&storeId=${storeId}` : ''}`,\r\n+    criarAgendamento: () => `${API_CONFIG.BASE_URL}/func/agendamentos`,\r\n   };\r\n \r\n-  // Helpers\r\n-  function todayStr() {\r\n-    const tz = new Date();\r\n-    return tz.toISOString().slice(0, 10);\r\n+  function openAddModal() {\r\n+    if (!modal) return;\r\n+    const now = new Date();\r\n+    const hh = String(now.getHours()).padStart(2, '0');\r\n+    const mm = String(now.getMinutes()).padStart(2, '0');\r\n+    if (horaInput) horaInput.value = `${hh}:${mm}`;\r\n+\r\n+    if (cliInput) cliInput.value = '';\r\n+    if (cliHiddenId) cliHiddenId.value = '';\r\n+    if (cliSug) cliSug.innerHTML = '';\r\n+    if (petSelect) petSelect.innerHTML = '<option value=\"\">Selecione um cliente</option>';\r\n+\r\n+    if (servInput) servInput.value = '';\r\n+    if (servHiddenId) servHiddenId.value = '';\r\n+    if (servSug) servSug.innerHTML = '';\r\n+    if (valorInput) valorInput.value = '';\r\n+\r\n+    loadEsteticistas();\r\n+\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n+    cliInput?.focus();\r\n   }\r\n-  function pad(n){ return n<10? '0'+n : ''+n; }\r\n-  function parseTimeToDate(dateISO, hhmm) {\r\n-    const [h,m] = (hhmm || '00:00').split(':').map(x=>parseInt(x,10));\r\n-    const d = new Date(dateISO);\r\n-    d.setHours(h, m, 0, 0);\r\n-    return d;\r\n+  function closeAddModal() {\r\n+    modal.classList.add('hidden');\r\n+    modal.classList.remove('flex');\r\n   }\r\n-  function money(v){ return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n-  function byId(id){ return document.getElementById(id); }\r\n-  function clearChildren(el){ while(el && el.firstChild) el.removeChild(el.firstChild); }\r\n-  function debounce(fn, delay=250){ let t; return (...args)=>{ clearTimeout(t); t=setTimeout(()=>fn(...args), delay); }; }\r\n+  function debounce(fn, delay = 300) {\r\n+    let t = null;\r\n+    return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); };\r\n+  }\r\n+  async function loadEsteticistas() {\r\n+    try {\r\n+      const res = await fetch(API.esteticistas(typeof selectedStoreId !== 'undefined' ? selectedStoreId : ''), { headers: headers() });\r\n+      if (!res.ok) throw new Error('Erro ao carregar profissionais');\r\n+      const list = await res.json();\r\n+      profSelect.innerHTML = (list || []).map(p => `<option value=\"${p._id}\">${p.nome || 'Sem nome'}</option>`).join('') || '<option value=\"\">Nenhum profissional</option>';\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+      profSelect.innerHTML = '<option value=\"\">Erro ao carregar</option>';\r\n+    }\r\n+  }\r\n+  async function carregarPetsDoCliente(clienteId) {\r\n+    petSelect.disabled = true;\r\n+    petSelect.innerHTML = '<option value=\"\">Carregando pets...</option>';\r\n+    try {\r\n+      const res = await fetch(API.petsDoCliente(clienteId), { headers: headers() });\r\n+      if (!res.ok) throw new Error('Falha ao buscar pets');\r\n+      const pets = await res.json();\r\n+      if (!pets || pets.length === 0) {\r\n+        petSelect.innerHTML = '<option value=\"\">Cliente sem pets</option>';\r\n+      } else if (pets.length === 1) {\r\n+        const p = pets[0];\r\n+        petSelect.innerHTML = `<option value=\"${p._id}\">${p.nome} — ${p.tipo}/${p.raca || '-'}</option>`;\r\n+        petSelect.value = p._id;\r\n+      } else {\r\n+        petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome} — ${p.tipo}/${p.raca || '-'}</option>`).join('');\r\n+      }\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+      petSelect.innerHTML = '<option value=\"\">Erro ao carregar pets</option>';\r\n+    } finally {\r\n+      petSelect.disabled = false;\r\n+    }\r\n+  }\r\n+  const onClienteInput = debounce(async () => {\r\n+    const q = cliInput.value.trim();\r\n+    cliHiddenId.value = '';\r\n+    cliSug.innerHTML = '';\r\n+    if (q.length < 2) return;\r\n+    try {\r\n+      const res = await fetch(API.buscarClientes(q), { headers: headers() });\r\n+      if (!res.ok) throw new Error('Falha ao buscar clientes');\r\n+      const items = await res.json();\r\n+      if (!Array.isArray(items) || items.length === 0) {\r\n+        cliSug.innerHTML = '<div class=\"px-3 py-2 text-sm text-gray-500\">Nenhum cliente encontrado.</div>';\r\n+        return;\r\n+      }\r\n+      cliSug.innerHTML = items.map(u => `\r\n+        <button type=\"button\" data-id=\"${u._id}\" data-nome=\"${(u.nome || '').replace(/\"/g,'&quot;')}\"\r\n+          class=\"w-full text-left px-3 py-2 hover:bg-gray-100\">\r\n+          <div class=\"font-medium\">${u.nome || '(Sem nome)'}</div>\r\n+          <div class=\"text-xs text-gray-600\">${u.email || u.cpf || u.cnpj || ''}</div>\r\n+        </button>\r\n+      `).join('');\r\n+      Array.from(cliSug.querySelectorAll('button[data-id]')).forEach(btn => {\r\n+        btn.addEventListener('click', () => {\r\n+          const id = btn.getAttribute('data-id');\r\n+          const nome = btn.getAttribute('data-nome');\r\n+          cliHiddenId.value = id;\r\n+          cliInput.value = nome;\r\n+          cliSug.innerHTML = '';\r\n+          carregarPetsDoCliente(id);\r\n+        });\r\n+      });\r\n+    } catch (e) { console.error(e); }\r\n+  }, 300);\r\n+  cliInput?.addEventListener('input', onClienteInput);\r\n+  cliInput?.addEventListener('focus', onClienteInput);\r\n \r\n-  // Load stores\r\n+  const onServicoInput = debounce(async () => {\r\n+    const q = servInput.value.trim();\r\n+    servHiddenId.value = '';\r\n+    valorInput.value = '';\r\n+    servSug.innerHTML = '';\r\n+    if (q.length < 2) return;\r\n+    try {\r\n+      const res = await fetch(API.buscarServicos(q), { headers: headers() });\r\n+      if (!res.ok) throw new Error('Falha ao buscar serviços');\r\n+      const items = await res.json();\r\n+      if (!Array.isArray(items) || items.length === 0) {\r\n+        servSug.innerHTML = '<div class=\"px-3 py-2 text-sm text-gray-500\">Nenhum serviço encontrado.</div>';\r\n+        return;\r\n+      }\r\n+      servSug.innerHTML = items.map(s => `\r\n+        <button type=\"button\" data-id=\"${s._id}\" data-nome=\"${(s.nome || '').replace(/\"/g,'&quot;')}\" data-valor=\"${Number(s.valor||0)}\"\r\n+          class=\"w-full text-left px-3 py-2 hover:bg-gray-100\">\r\n+          <div class=\"font-medium\">${s.nome}</div>\r\n+          <div class=\"text-xs text-gray-600\">R$ ${Number(s.valor||0).toFixed(2).replace('.', ',')}</div>\r\n+        </button>\r\n+      `).join('');\r\n+      Array.from(servSug.querySelectorAll('button[data-id]')).forEach(btn => {\r\n+        btn.addEventListener('click', () => {\r\n+          const id = btn.getAttribute('data-id');\r\n+          const nome = btn.getAttribute('data-nome');\r\n+          const valor = btn.getAttribute('data-valor');\r\n+          servHiddenId.value = id;\r\n+          servInput.value = nome;\r\n+          valorInput.value = Number(valor).toFixed(2);\r\n+          servSug.innerHTML = '';\r\n+        });\r\n+      });\r\n+    } catch (e) { console.error(e); }\r\n+  }, 300);\r\n+  servInput?.addEventListener('input', onServicoInput);\r\n+  servInput?.addEventListener('focus', onServicoInput);\r\n+\r\n   async function loadStores() {\r\n-    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n-    const list = await resp.json();\r\n-    state.stores = Array.isArray(list) ? list : [];\r\n-    storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-    if (!state.selectedStoreId && state.stores[0]) {\r\n-      state.selectedStoreId = state.stores[0]._id;\r\n-      storeSelect.value = state.selectedStoreId;\r\n+    if (!storeSelect) return;\r\n+    try {\r\n+      const res = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+      if (!res.ok) throw new Error('Falha ao carregar empresas');\r\n+      storesCache = await res.json() || [];\r\n+      if (storesCache.length === 0) {\r\n+        storeSelect.innerHTML = `<option value=\"\">Nenhuma empresa cadastrada</option>`;\r\n+        selectedStoreId = null;\r\n+        updateStoreLabel();\r\n+        return;\r\n+      }\r\n+      storeSelect.innerHTML = storesCache.map(s => `<option value=\"${s._id}\">${s.nome || 'Sem nome'}</option>`).join('');\r\n+      // Seleção padrão: última usada ou a primeira da lista\r\n+      const saved = localStorage.getItem('bt_selected_store');\r\n+      selectedStoreId = storesCache.find(s => s._id === saved)?._id || storesCache[0]._id;\r\n+      storeSelect.value = selectedStoreId;\r\n+      updateStoreLabel();\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      storeSelect.innerHTML = `<option value=\"\">Erro ao carregar</option>`;\r\n+      selectedStoreId = null;\r\n+      updateStoreLabel();\r\n     }\r\n-    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n-    storeLabelVisible.textContent = s ? s.nome : '—';\r\n   }\r\n \r\n-  // Load professionals (esteticistas) limited to the selected store\r\n-  async function loadProfissionais() {\r\n-    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n-    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n-    const list = await resp.json();\r\n-    state.profissionais = list || [];\r\n-    // Fill modal select\r\n-    profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+  function updateStoreLabel() {\r\n+    if (!storeLabel) return;\r\n+    const s = storesCache.find(x => x._id === selectedStoreId);\r\n+    storeLabel.textContent = s ? s.nome : '—';\r\n   }\r\n \r\n-  // Load appointments for the day/store\r\n-  async function loadAgendamentos() {\r\n-    const date = dateInput.value || todayStr();\r\n-    const resp = await api(`/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`);\r\n-    state.agendamentos = await resp.json();\r\n+  function getDateFromInput() {\r\n+    const [y, m, d] = (dateInput.value || todayISO).split('-').map(Number);\r\n+    return new Date(y, (m - 1), d);\r\n   }\r\n \r\n-  // Render grid with columns per professional\r\n-  function renderGrid() {\r\n-    const date = dateInput.value || todayStr();\r\n-    dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-    const store = state.stores.find(s => s._id === state.selectedStoreId);\r\n-    storeLabelVisible.textContent = store ? store.nome : '—';\r\n+  function renderAgenda() {\r\n+    const date = getDateFromInput();\r\n+    dateLabel.textContent = `(${formatPtBr(date)})`;\r\n+    updateStoreLabel();\r\n \r\n-    // Hours rows (07:00 - 20:00)\r\n-    const hours = [];\r\n-    for (let h = 7; h <= 20; h++) hours.push(`${pad(h)}:00`);\r\n+    // Monta a lista base 00:00 - 23:00\r\n+    if (!agendaList) return;\r\n+    const hours = Array.from({ length: 24 }, (_, h) => `${String(h).padStart(2,'0')}:00`);\r\n+    agendaList.innerHTML = hours.map(hh => `\r\n+      <div class=\"flex items-center gap-4 px-4 py-3\">\r\n+        <div class=\"w-16 text-sm text-gray-600\">${hh}</div>\r\n+        <div class=\"flex-1 min-h-[32px]\" data-slot=\"${hh}\">\r\n+          <span class=\"text-sm text-gray-400\">Sem agendamentos</span>\r\n+        </div>\r\n+      </div>\r\n+    `).join('');\r\n \r\n-    // Build header (first empty cell + professional names)\r\n-    const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n-    const colCount = cols.length;\r\n+    // Carrega agendamentos do dia p/ empresa\r\n+    const dateStr = dateInput.value; // YYYY-MM-DD\r\n+    loadAppointments(dateStr, selectedStoreId);\r\n+  }\r\n \r\n-    // Grid container\r\n-    clearChildren(agendaList);\r\n+  async function loadAppointments(dateStr, storeId) {\r\n+    try {\r\n+      const res = await fetch(API.listarAgendamentos(dateStr, storeId), { headers: headers() });\r\n+      if (!res.ok) throw new Error('Falha ao carregar agendamentos');\r\n+      const items = await res.json();\r\n \r\n-    const header = document.createElement('div');\r\n-    header.className = `grid sticky top-0 bg-white z-10 border-b text-sm font-medium`\r\n-      + ` grid-cols-${Math.min(colCount, 12)}`;\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n-    cols.forEach((label, idx) => {\r\n-      const cell = document.createElement('div');\r\n-      cell.className = 'px-3 py-2 ' + (idx===0 ? 'text-gray-600' : 'text-gray-800');\r\n-      cell.textContent = label;\r\n-      header.appendChild(cell);\r\n-    });\r\n-    agendaList.appendChild(header);\r\n+      // Limpa os \"Sem agendamentos\"\r\n+      const clear = new Set();\r\n+      items.forEach(a => {\r\n+        const d = new Date(a.h);\r\n+        const hh = String(d.getHours()).padStart(2, '0');\r\n+        const mm = String(d.getMinutes()).padStart(2, '0');\r\n+        const slotEl = agendaList.querySelector(`[data-slot=\"${hh}:00\"]`);\r\n+        if (!slotEl) return;\r\n \r\n-    // Body\r\n-    const body = document.createElement('div');\r\n-    body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n-    agendaList.appendChild(body);\r\n-\r\n-    hours.forEach(hh => {\r\n-      // Time column\r\n-      const timeCell = document.createElement('div');\r\n-      timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n-      timeCell.textContent = hh;\r\n-      body.appendChild(timeCell);\r\n-\r\n-      // One cell per professional\r\n-      state.profissionais.forEach(p => {\r\n-        const col = document.createElement('div');\r\n-        col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n-        col.dataset.profissionalId = p._id;\r\n-        col.dataset.hh = hh;\r\n-        body.appendChild(col);\r\n+        if (!clear.has(hh)) {\r\n+          slotEl.innerHTML = ''; // remove placeholder do primeiro\r\n+          clear.add(hh);\r\n+        }\r\n+        slotEl.appendChild(buildAppointmentCard({\r\n+          pet: a.pet, servico: a.servico, valor: a.valor, pago: a.pago, hora: `${hh}:${mm}`\r\n+        }));\r\n       });\r\n-    });\r\n-\r\n-    // Place cards\r\n-    for (const a of state.agendamentos) {\r\n-      const d = new Date(a.h);\r\n-      const hh = `${pad(d.getHours())}:00`;\r\n-      const col = body.querySelector(`div[data-profissional-id=\"${a.profissionalId}\"][data-hh=\"${hh}\"]`);\r\n-      if (!col) continue;\r\n-\r\n-      const card = document.createElement('div');\r\n-      card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2';\r\n-      const left = document.createElement('div');\r\n-      left.innerHTML = `<div class=\"font-medium text-gray-900\">${a.pet}</div>\r\n-                        <div class=\"text-gray-600\">${a.servico}</div>\r\n-                        <div class=\"text-gray-600\">${money(a.valor)}</div>`;\r\n-      const right = document.createElement('div');\r\n-      right.className = 'text-lg';\r\n-      const dollar = document.createElement('span');\r\n-      dollar.textContent = '$';\r\n-      if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n-      right.appendChild(dollar);\r\n-\r\n-      card.appendChild(left);\r\n-      card.appendChild(right);\r\n-      col.appendChild(card);\r\n+    } catch (e) {\r\n+      console.error(e);\r\n     }\r\n   }\r\n \r\n-  // Modal behavior\r\n-  function openAddModal() {\r\n-    // Reset\r\n-    state.selectedCliente = null;\r\n-    state.selectedServico = null;\r\n-    cliInput.value = '';\r\n-    cliSug.innerHTML = '';\r\n-    cliSug.classList.add('hidden');\r\n-    petSelect.innerHTML = '';\r\n-    servInput.value = '';\r\n-    servSug.innerHTML = '';\r\n-    servSug.classList.add('hidden');\r\n-    valorInput.value = '';\r\n-    horaInput.value = new Date().toTimeString().slice(0,5);\r\n+  function buildAppointmentCard({ pet, servico, valor, pago, hora }) {\r\n+    const el = document.createElement('div');\r\n+    el.className = 'inline-flex items-center gap-2 rounded-md border border-gray-200 bg-white px-2 py-1 text-xs shadow-sm mr-2';\r\n+    el.innerHTML = `\r\n+      <span class=\"font-medium\">${pet}</span>\r\n+      <span class=\"text-gray-400\">•</span>\r\n+      <span class=\"truncate max-w-[180px]\" title=\"${servico}\">${servico}</span>\r\n+      <span class=\"text-gray-400\">•</span>\r\n+      <span>R$ ${Number(valor || 0).toFixed(2).replace('.', ',')}</span>\r\n+      <span class=\"ml-1 ${pago ? '' : 'line-through text-gray-400'}\" title=\"${pago ? 'Pago' : 'Não pago'}\">$</span>\r\n+      <span class=\"ml-2 text-[10px] text-gray-500\">${hora}</span>\r\n+    `;\r\n+    return el;\r\n+  }\r\n \r\n-    // Load professionals (already loaded globally, but ensure select is filled)\r\n-    profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-\r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n-    cliInput.focus();\r\n+  function combineDateTime(dateStr, timeStr) {\r\n+    // dateStr YYYY-MM-DD, timeStr HH:MM -> Date local\r\n+    const [y, m, d] = dateStr.split('-').map(x => parseInt(x, 10));\r\n+    const [hh, mm] = timeStr.split(':').map(x => parseInt(x, 10));\r\n+    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n   }\r\n-  function closeAddModal() {\r\n-    modal.classList.add('hidden');\r\n-    modal.classList.remove('flex');\r\n-  }\r\n \r\n-  // Cliente search\r\n-  async function searchClientes(term) {\r\n-    if (!term || term.length < 2) { cliSug.innerHTML=''; cliSug.classList.add('hidden'); return; }\r\n-    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json();\r\n-    cliSug.innerHTML = list.map(u => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n-        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n-      </li>`).join('');\r\n-    cliSug.classList.remove('hidden');\r\n-    cliSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', async () => {\r\n-        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n-        cliInput.value = li.dataset.nome;\r\n-        cliSug.classList.add('hidden');\r\n-        // Auto load pets for this client\r\n-        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n-        const pets = await resp.json();\r\n-        petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-      });\r\n+  // Ações\r\n+  dateInput.addEventListener('change', renderAgenda);\r\n+\r\n+  if (storeSelect) {\r\n+    storeSelect.addEventListener('change', () => {\r\n+      selectedStoreId = storeSelect.value || null;\r\n+      if (selectedStoreId) localStorage.setItem('bt_selected_store', selectedStoreId);\r\n+      renderAgenda();\r\n     });\r\n   }\r\n \r\n-  // Serviço search\r\n-  async function searchServicos(term) {\r\n-    if (!term || term.length < 2) { servSug.innerHTML=''; servSug.classList.add('hidden'); return; }\r\n-    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json();\r\n-    servSug.innerHTML = list.map(s => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor || 0}\">\r\n-        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${(s.grupo && s.grupo.nome) ? s.grupo.nome : ''}</div>\r\n-      </li>`).join('');\r\n-    servSug.classList.remove('hidden');\r\n-    servSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', () => {\r\n-        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n-        servInput.value = state.selectedServico.nome;\r\n-        valorInput.value = state.selectedServico.valor.toFixed(2);\r\n-        servSug.classList.add('hidden');\r\n-      });\r\n+  if (addBtn) {\r\n+    addBtn.addEventListener('click', () => {\r\n+      openAddModal();\r\n     });\r\n   }\r\n \r\n-  async function saveAgendamento() {\r\n+  modalSave?.addEventListener('click', async () => {\r\n+    // validações mínimas\r\n+    const clienteId = cliHiddenId.value;\r\n+    const petId = petSelect.value;\r\n+    const servicoId = servHiddenId.value;\r\n+    const profissionalId = profSelect.value;\r\n+    const dateStr = dateInput.value;\r\n+    const timeStr = horaInput.value || '09:00';\r\n+    if (!selectedStoreId) return alert('Selecione uma empresa.');\r\n+    if (!clienteId) return alert('Selecione um cliente.');\r\n+    if (!petId) return alert('Selecione um pet.');\r\n+    if (!servicoId) return alert('Selecione um serviço.');\r\n+    if (!profissionalId) return alert('Selecione um profissional.');\r\n+\r\n+    const when = combineDateTime(dateStr, timeStr);\r\n     try {\r\n-      const clienteId = state.selectedCliente?._id;\r\n-      const petId = petSelect.value;\r\n-      const servicoId = state.selectedServico?._id;\r\n-      const profissionalId = profSelect.value;\r\n-      const hora = horaInput.value;\r\n-      const date = dateInput.value || todayStr();\r\n-\r\n-      if (!(clienteId && petId && servicoId && profissionalId && hora)) {\r\n-        alert('Preencha cliente, pet, serviço, profissional e hora.');\r\n-        return;\r\n-      }\r\n-\r\n-      const scheduledAt = parseTimeToDate(date, hora).toISOString();\r\n-\r\n-      const body = {\r\n-        storeId: state.selectedStoreId,\r\n-        clienteId,\r\n-        petId,\r\n-        servicoId,\r\n-        profissionalId,\r\n-        scheduledAt,\r\n-        valor: Number(valorInput.value || 0),\r\n-        pago: false\r\n-      };\r\n-\r\n-      const resp = await api('/func/agendamentos', {\r\n+      const res = await fetch(API.criarAgendamento(), {\r\n         method: 'POST',\r\n-        body: JSON.stringify(body)\r\n+        headers: headers(),\r\n+        body: JSON.stringify({\r\n+          storeId: selectedStoreId,\r\n+          clienteId, petId, servicoId, profissionalId,\r\n+          scheduledAt: when.toISOString(),\r\n+          pago: !!pagoCheck?.checked\r\n+        })\r\n       });\r\n-\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(()=>({}));\r\n-        throw new Error(err.message || 'Erro ao salvar');\r\n+      if (!res.ok) {\r\n+        const e = await res.json().catch(() => ({}));\r\n+        throw new Error(e.message || 'Erro ao salvar');\r\n       }\r\n-\r\n-      const created = await resp.json();\r\n-      state.agendamentos.push(created);\r\n+      // sucesso\r\n       closeAddModal();\r\n-      renderGrid();\r\n+      renderAgenda(); // recarrega a agenda e mostra o card\r\n     } catch (e) {\r\n       console.error(e);\r\n       alert(e.message || 'Erro ao salvar');\r\n     }\r\n-  }\r\n-\r\n-  // Events\r\n-  addBtn?.addEventListener('click', openAddModal);\r\n-  modalClose?.addEventListener('click', closeAddModal);\r\n-  modalCancel?.addEventListener('click', closeAddModal);\r\n-  modalSave?.addEventListener('click', saveAgendamento);\r\n-\r\n-  cliInput?.addEventListener('input', debounce((e)=>searchClientes(e.target.value), 300));\r\n-  servInput?.addEventListener('input', debounce((e)=>searchServicos(e.target.value), 300));\r\n-\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n   });\r\n \r\n-  dateInput?.addEventListener('change', async () => {\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-  });\r\n+  // Primeira renderização (carrega empresas antes)\r\n+  if (storeSelect) {\r\n+    loadStores().finally(renderAgenda);\r\n+  } else {\r\n+    renderAgenda();\r\n+  }\r\n \r\n-  // Boot\r\n-  (async function init() {\r\n-    if (!dateInput.value) dateInput.value = todayStr();\r\n-    await loadStores();\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-  })();\r\n-})();\r\n+})();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757353764556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,371 +1,335 @@\n+// SiteEoBichoTW/scripts/funcionarios/banho-e-tosa.js\r\n (function () {\r\n-  const listEl = document.getElementById('agenda-list');\r\n+  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n+  function api(url, opts={}) {\r\n+    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n+      ...opts,\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        ...(opts.headers || {}),\r\n+        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Elements\r\n+  const agendaList = document.getElementById('agenda-list');\r\n   const dateInput = document.getElementById('agenda-date');\r\n-  const dateLabel = document.getElementById('agenda-date-label');\r\n+  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n   const addBtn = document.getElementById('add-service-btn');\r\n   const storeSelect = document.getElementById('agenda-store');\r\n-  const storeLabel  = document.getElementById('agenda-store-label');\r\n-  const agendaList  = document.getElementById('agenda-list');\r\n-  let storesCache = [];\r\n-  let selectedStoreId = null;\r\n+  const storeLabelVisible  = document.getElementById('agenda-store-label-visible');\r\n \r\n-  if (!listEl || !dateInput || !dateLabel) return;\r\n-\r\n-  // Define a data inicial como \"hoje\" no fuso do browser\r\n-  const todayISO = new Date().toISOString().slice(0, 10);\r\n-  if (!dateInput.value) dateInput.value = todayISO;\r\n-\r\n-  function formatPtBr(d) {\r\n-    return d.toLocaleDateString('pt-BR', { weekday: 'long', day: '2-digit', month: '2-digit', year: 'numeric' });\r\n-  }\r\n-\r\n-  // ---------- Modal: Adicionar Serviço ----------\r\n+  // Modal elements\r\n   const modal = document.getElementById('modal-add-servico');\r\n   const modalClose = document.getElementById('modal-add-close');\r\n   const modalCancel = document.getElementById('modal-add-cancel');\r\n   const modalSave = document.getElementById('modal-add-save');\r\n \r\n   const cliInput = document.getElementById('add-cli-input');\r\n-  const cliHiddenId = document.getElementById('add-cli-id');\r\n-  const cliSug = document.getElementById('add-cli-suggestions');\r\n-\r\n+  const cliSug = document.getElementById('add-cli-sug');\r\n   const petSelect = document.getElementById('add-pet-select');\r\n-\r\n   const servInput = document.getElementById('add-serv-input');\r\n-  const servHiddenId = document.getElementById('add-serv-id');\r\n-  const servSug = document.getElementById('add-serv-suggestions');\r\n-\r\n+  const servSug = document.getElementById('add-serv-sug');\r\n   const valorInput = document.getElementById('add-valor');\r\n   const horaInput = document.getElementById('add-hora');\r\n+  const profSelect = document.getElementById('add-prof-select');\r\n \r\n-  const profSelect = document.getElementById('add-pro-select');\r\n-  const pagoCheck  = document.getElementById('add-pago');\r\n-\r\n-  modalClose?.addEventListener('click', () => closeAddModal());\r\n-  modalCancel?.addEventListener('click', () => closeAddModal());\r\n-\r\n-  const cachedUser = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n-  const token = cachedUser?.token || '';\r\n-  function headers(extra = {}) {\r\n-    return { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`, ...extra };\r\n-  }\r\n-\r\n-  const API = {\r\n-    buscarClientes: (q = '', limit = 8) => `${API_CONFIG.BASE_URL}/func/clientes/buscar?q=${encodeURIComponent(q)}&limit=${limit}`,\r\n-    petsDoCliente: (id) => `${API_CONFIG.BASE_URL}/func/clientes/${id}/pets`,\r\n-    buscarServicos: (q = '', limit = 8) => `${API_CONFIG.BASE_URL}/func/servicos/buscar?q=${encodeURIComponent(q)}&limit=${limit}`,\r\n-    esteticistas: (storeId) => `${API_CONFIG.BASE_URL}/func/profissionais/esteticistas${typeof storeId !== 'undefined' && storeId ? `?storeId=${storeId}` : ''}`,\r\n-    listarAgendamentos: (date, storeId) => `${API_CONFIG.BASE_URL}/func/agendamentos?date=${date}${storeId ? `&storeId=${storeId}` : ''}`,\r\n-    criarAgendamento: () => `${API_CONFIG.BASE_URL}/func/agendamentos`,\r\n+  // State\r\n+  const state = {\r\n+    stores: [],\r\n+    profissionais: [],\r\n+    agendamentos: [],\r\n+    selectedStoreId: null,\r\n+    selectedCliente: null,\r\n+    selectedServico: null\r\n   };\r\n \r\n-  function openAddModal() {\r\n-    if (!modal) return;\r\n-    const now = new Date();\r\n-    const hh = String(now.getHours()).padStart(2, '0');\r\n-    const mm = String(now.getMinutes()).padStart(2, '0');\r\n-    if (horaInput) horaInput.value = `${hh}:${mm}`;\r\n-\r\n-    if (cliInput) cliInput.value = '';\r\n-    if (cliHiddenId) cliHiddenId.value = '';\r\n-    if (cliSug) cliSug.innerHTML = '';\r\n-    if (petSelect) petSelect.innerHTML = '<option value=\"\">Selecione um cliente</option>';\r\n-\r\n-    if (servInput) servInput.value = '';\r\n-    if (servHiddenId) servHiddenId.value = '';\r\n-    if (servSug) servSug.innerHTML = '';\r\n-    if (valorInput) valorInput.value = '';\r\n-\r\n-    loadEsteticistas();\r\n-\r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n-    cliInput?.focus();\r\n+  // Helpers\r\n+  function todayStr() {\r\n+    const tz = new Date();\r\n+    return tz.toISOString().slice(0, 10);\r\n   }\r\n-  function closeAddModal() {\r\n-    modal.classList.add('hidden');\r\n-    modal.classList.remove('flex');\r\n+  function pad(n){ return n<10? '0'+n : ''+n; }\r\n+  function parseTimeToDate(dateISO, hhmm) {\r\n+    const [h,m] = (hhmm || '00:00').split(':').map(x=>parseInt(x,10));\r\n+    const d = new Date(dateISO);\r\n+    d.setHours(h, m, 0, 0);\r\n+    return d;\r\n   }\r\n-  function debounce(fn, delay = 300) {\r\n-    let t = null;\r\n-    return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); };\r\n-  }\r\n-  async function loadEsteticistas() {\r\n-    try {\r\n-      const res = await fetch(API.esteticistas(typeof selectedStoreId !== 'undefined' ? selectedStoreId : ''), { headers: headers() });\r\n-      if (!res.ok) throw new Error('Erro ao carregar profissionais');\r\n-      const list = await res.json();\r\n-      profSelect.innerHTML = (list || []).map(p => `<option value=\"${p._id}\">${p.nome || 'Sem nome'}</option>`).join('') || '<option value=\"\">Nenhum profissional</option>';\r\n-    } catch (e) {\r\n-      console.error(e);\r\n-      profSelect.innerHTML = '<option value=\"\">Erro ao carregar</option>';\r\n+  function money(v){ return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n+  function clearChildren(el){ while(el && el.firstChild) el.removeChild(el.firstChild); }\r\n+  function debounce(fn, delay=250){ let t; return (...args)=>{ clearTimeout(t); t=setTimeout(()=>fn(...args), delay); }; }\r\n+\r\n+  // Load stores\r\n+  async function loadStores() {\r\n+    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+    const list = await resp.json();\r\n+    state.stores = Array.isArray(list) ? list : [];\r\n+    storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+    if (!state.selectedStoreId && state.stores[0]) {\r\n+      state.selectedStoreId = state.stores[0]._id;\r\n+      storeSelect.value = state.selectedStoreId;\r\n     }\r\n-  }\r\n-  async function carregarPetsDoCliente(clienteId) {\r\n-    petSelect.disabled = true;\r\n-    petSelect.innerHTML = '<option value=\"\">Carregando pets...</option>';\r\n-    try {\r\n-      const res = await fetch(API.petsDoCliente(clienteId), { headers: headers() });\r\n-      if (!res.ok) throw new Error('Falha ao buscar pets');\r\n-      const pets = await res.json();\r\n-      if (!pets || pets.length === 0) {\r\n-        petSelect.innerHTML = '<option value=\"\">Cliente sem pets</option>';\r\n-      } else if (pets.length === 1) {\r\n-        const p = pets[0];\r\n-        petSelect.innerHTML = `<option value=\"${p._id}\">${p.nome} — ${p.tipo}/${p.raca || '-'}</option>`;\r\n-        petSelect.value = p._id;\r\n-      } else {\r\n-        petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome} — ${p.tipo}/${p.raca || '-'}</option>`).join('');\r\n-      }\r\n-    } catch (e) {\r\n-      console.error(e);\r\n-      petSelect.innerHTML = '<option value=\"\">Erro ao carregar pets</option>';\r\n-    } finally {\r\n-      petSelect.disabled = false;\r\n+    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n+    if (document.getElementById('agenda-store-label-visible')) {\r\n+      document.getElementById('agenda-store-label-visible').textContent = s ? s.nome : '—';\r\n     }\r\n   }\r\n-  const onClienteInput = debounce(async () => {\r\n-    const q = cliInput.value.trim();\r\n-    cliHiddenId.value = '';\r\n-    cliSug.innerHTML = '';\r\n-    if (q.length < 2) return;\r\n-    try {\r\n-      const res = await fetch(API.buscarClientes(q), { headers: headers() });\r\n-      if (!res.ok) throw new Error('Falha ao buscar clientes');\r\n-      const items = await res.json();\r\n-      if (!Array.isArray(items) || items.length === 0) {\r\n-        cliSug.innerHTML = '<div class=\"px-3 py-2 text-sm text-gray-500\">Nenhum cliente encontrado.</div>';\r\n-        return;\r\n-      }\r\n-      cliSug.innerHTML = items.map(u => `\r\n-        <button type=\"button\" data-id=\"${u._id}\" data-nome=\"${(u.nome || '').replace(/\"/g,'&quot;')}\"\r\n-          class=\"w-full text-left px-3 py-2 hover:bg-gray-100\">\r\n-          <div class=\"font-medium\">${u.nome || '(Sem nome)'}</div>\r\n-          <div class=\"text-xs text-gray-600\">${u.email || u.cpf || u.cnpj || ''}</div>\r\n-        </button>\r\n-      `).join('');\r\n-      Array.from(cliSug.querySelectorAll('button[data-id]')).forEach(btn => {\r\n-        btn.addEventListener('click', () => {\r\n-          const id = btn.getAttribute('data-id');\r\n-          const nome = btn.getAttribute('data-nome');\r\n-          cliHiddenId.value = id;\r\n-          cliInput.value = nome;\r\n-          cliSug.innerHTML = '';\r\n-          carregarPetsDoCliente(id);\r\n-        });\r\n-      });\r\n-    } catch (e) { console.error(e); }\r\n-  }, 300);\r\n-  cliInput?.addEventListener('input', onClienteInput);\r\n-  cliInput?.addEventListener('focus', onClienteInput);\r\n \r\n-  const onServicoInput = debounce(async () => {\r\n-    const q = servInput.value.trim();\r\n-    servHiddenId.value = '';\r\n-    valorInput.value = '';\r\n-    servSug.innerHTML = '';\r\n-    if (q.length < 2) return;\r\n-    try {\r\n-      const res = await fetch(API.buscarServicos(q), { headers: headers() });\r\n-      if (!res.ok) throw new Error('Falha ao buscar serviços');\r\n-      const items = await res.json();\r\n-      if (!Array.isArray(items) || items.length === 0) {\r\n-        servSug.innerHTML = '<div class=\"px-3 py-2 text-sm text-gray-500\">Nenhum serviço encontrado.</div>';\r\n-        return;\r\n-      }\r\n-      servSug.innerHTML = items.map(s => `\r\n-        <button type=\"button\" data-id=\"${s._id}\" data-nome=\"${(s.nome || '').replace(/\"/g,'&quot;')}\" data-valor=\"${Number(s.valor||0)}\"\r\n-          class=\"w-full text-left px-3 py-2 hover:bg-gray-100\">\r\n-          <div class=\"font-medium\">${s.nome}</div>\r\n-          <div class=\"text-xs text-gray-600\">R$ ${Number(s.valor||0).toFixed(2).replace('.', ',')}</div>\r\n-        </button>\r\n-      `).join('');\r\n-      Array.from(servSug.querySelectorAll('button[data-id]')).forEach(btn => {\r\n-        btn.addEventListener('click', () => {\r\n-          const id = btn.getAttribute('data-id');\r\n-          const nome = btn.getAttribute('data-nome');\r\n-          const valor = btn.getAttribute('data-valor');\r\n-          servHiddenId.value = id;\r\n-          servInput.value = nome;\r\n-          valorInput.value = Number(valor).toFixed(2);\r\n-          servSug.innerHTML = '';\r\n-        });\r\n-      });\r\n-    } catch (e) { console.error(e); }\r\n-  }, 300);\r\n-  servInput?.addEventListener('input', onServicoInput);\r\n-  servInput?.addEventListener('focus', onServicoInput);\r\n-\r\n-  async function loadStores() {\r\n-    if (!storeSelect) return;\r\n-    try {\r\n-      const res = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n-      if (!res.ok) throw new Error('Falha ao carregar empresas');\r\n-      storesCache = await res.json() || [];\r\n-      if (storesCache.length === 0) {\r\n-        storeSelect.innerHTML = `<option value=\"\">Nenhuma empresa cadastrada</option>`;\r\n-        selectedStoreId = null;\r\n-        updateStoreLabel();\r\n-        return;\r\n-      }\r\n-      storeSelect.innerHTML = storesCache.map(s => `<option value=\"${s._id}\">${s.nome || 'Sem nome'}</option>`).join('');\r\n-      // Seleção padrão: última usada ou a primeira da lista\r\n-      const saved = localStorage.getItem('bt_selected_store');\r\n-      selectedStoreId = storesCache.find(s => s._id === saved)?._id || storesCache[0]._id;\r\n-      storeSelect.value = selectedStoreId;\r\n-      updateStoreLabel();\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      storeSelect.innerHTML = `<option value=\"\">Erro ao carregar</option>`;\r\n-      selectedStoreId = null;\r\n-      updateStoreLabel();\r\n+  // Load professionals (esteticistas) limited to the selected store\r\n+  async function loadProfissionais() {\r\n+    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n+    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n+    const list = await resp.json();\r\n+    state.profissionais = list || [];\r\n+    // Fill modal select\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n     }\r\n   }\r\n \r\n-  function updateStoreLabel() {\r\n-    if (!storeLabel) return;\r\n-    const s = storesCache.find(x => x._id === selectedStoreId);\r\n-    storeLabel.textContent = s ? s.nome : '—';\r\n+  // Load appointments for the day/store\r\n+  async function loadAgendamentos() {\r\n+    const date = dateInput.value || todayStr();\r\n+    const resp = await api(`/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`);\r\n+    state.agendamentos = await resp.json();\r\n   }\r\n \r\n-  function getDateFromInput() {\r\n-    const [y, m, d] = (dateInput.value || todayISO).split('-').map(Number);\r\n-    return new Date(y, (m - 1), d);\r\n-  }\r\n+  // Render grid with columns per professional\r\n+  function renderGrid() {\r\n+    if (!agendaList) return;\r\n+    const date = dateInput.value || todayStr();\r\n+    if (dateLabelVisible) {\r\n+      dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+    }\r\n \r\n-  function renderAgenda() {\r\n-    const date = getDateFromInput();\r\n-    dateLabel.textContent = `(${formatPtBr(date)})`;\r\n-    updateStoreLabel();\r\n+    // Hours rows (07:00 - 20:00)\r\n+    const hours = [];\r\n+    for (let h = 7; h <= 20; h++) hours.push(`${pad(h)}:00`);\r\n \r\n-    // Monta a lista base 00:00 - 23:00\r\n-    if (!agendaList) return;\r\n-    const hours = Array.from({ length: 24 }, (_, h) => `${String(h).padStart(2,'0')}:00`);\r\n-    agendaList.innerHTML = hours.map(hh => `\r\n-      <div class=\"flex items-center gap-4 px-4 py-3\">\r\n-        <div class=\"w-16 text-sm text-gray-600\">${hh}</div>\r\n-        <div class=\"flex-1 min-h-[32px]\" data-slot=\"${hh}\">\r\n-          <span class=\"text-sm text-gray-400\">Sem agendamentos</span>\r\n-        </div>\r\n-      </div>\r\n-    `).join('');\r\n+    // Build header (first empty cell + professional names)\r\n+    const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n+    const colCount = cols.length;\r\n \r\n-    // Carrega agendamentos do dia p/ empresa\r\n-    const dateStr = dateInput.value; // YYYY-MM-DD\r\n-    loadAppointments(dateStr, selectedStoreId);\r\n-  }\r\n+    // Grid container\r\n+    clearChildren(agendaList);\r\n \r\n-  async function loadAppointments(dateStr, storeId) {\r\n-    try {\r\n-      const res = await fetch(API.listarAgendamentos(dateStr, storeId), { headers: headers() });\r\n-      if (!res.ok) throw new Error('Falha ao carregar agendamentos');\r\n-      const items = await res.json();\r\n+    const header = document.createElement('div');\r\n+    header.className = `grid sticky top-0 bg-white z-10 border-b text-sm font-medium`;\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n+    cols.forEach((label, idx) => {\r\n+      const cell = document.createElement('div');\r\n+      cell.className = 'px-3 py-2 ' + (idx===0 ? 'text-gray-600' : 'text-gray-800');\r\n+      cell.textContent = label;\r\n+      header.appendChild(cell);\r\n+    });\r\n+    agendaList.appendChild(header);\r\n \r\n-      // Limpa os \"Sem agendamentos\"\r\n-      const clear = new Set();\r\n-      items.forEach(a => {\r\n-        const d = new Date(a.h);\r\n-        const hh = String(d.getHours()).padStart(2, '0');\r\n-        const mm = String(d.getMinutes()).padStart(2, '0');\r\n-        const slotEl = agendaList.querySelector(`[data-slot=\"${hh}:00\"]`);\r\n-        if (!slotEl) return;\r\n+    // Body\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n+    agendaList.appendChild(body);\r\n\\ No newline at end of file\n \r\n-        if (!clear.has(hh)) {\r\n-          slotEl.innerHTML = ''; // remove placeholder do primeiro\r\n-          clear.add(hh);\r\n-        }\r\n-        slotEl.appendChild(buildAppointmentCard({\r\n-          pet: a.pet, servico: a.servico, valor: a.valor, pago: a.pago, hora: `${hh}:${mm}`\r\n-        }));\r\n+    hours.forEach(hh => {\r\n+      // Time column\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n+      timeCell.textContent = hh;\r\n+      body.appendChild(timeCell);\r\n+\r\n+      // One cell per professional\r\n+      state.profissionais.forEach(p => {\r\n+        const col = document.createElement('div');\r\n+        col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n+        col.dataset.profissionalId = p._id;\r\n+        col.dataset.hh = hh;\r\n+        body.appendChild(col);\r\n       });\r\n-    } catch (e) {\r\n-      console.error(e);\r\n+    });\r\n+\r\n+    // Place cards\r\n+    for (const a of state.agendamentos) {\r\n+      const d = new Date(a.h);\r\n+      const hh = `${pad(d.getHours())}:00`;\r\n+      const col = body.querySelector(`div[data-profissional-id=\"${a.profissionalId}\"][data-hh=\"${hh}\"]`);\r\n+      if (!col) continue;\r\n+\r\n+      const card = document.createElement('div');\r\n+      card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2';\r\n+      const left = document.createElement('div');\r\n+      left.innerHTML = `<div class=\"font-medium text-gray-900\">${a.pet}</div>\r\n+                        <div class=\"text-gray-600\">${a.servico}</div>\r\n+                        <div class=\"text-gray-600\">${money(a.valor)}</div>`;\r\n+      const right = document.createElement('div');\r\n+      right.className = 'text-lg';\r\n+      const dollar = document.createElement('span');\r\n+      dollar.textContent = '$';\r\n+      if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n+      right.appendChild(dollar);\r\n+\r\n+      card.appendChild(left);\r\n+      card.appendChild(right);\r\n+      col.appendChild(card);\r\n     }\r\n   }\r\n \r\n-  function buildAppointmentCard({ pet, servico, valor, pago, hora }) {\r\n-    const el = document.createElement('div');\r\n-    el.className = 'inline-flex items-center gap-2 rounded-md border border-gray-200 bg-white px-2 py-1 text-xs shadow-sm mr-2';\r\n-    el.innerHTML = `\r\n-      <span class=\"font-medium\">${pet}</span>\r\n-      <span class=\"text-gray-400\">•</span>\r\n-      <span class=\"truncate max-w-[180px]\" title=\"${servico}\">${servico}</span>\r\n-      <span class=\"text-gray-400\">•</span>\r\n-      <span>R$ ${Number(valor || 0).toFixed(2).replace('.', ',')}</span>\r\n-      <span class=\"ml-1 ${pago ? '' : 'line-through text-gray-400'}\" title=\"${pago ? 'Pago' : 'Não pago'}\">$</span>\r\n-      <span class=\"ml-2 text-[10px] text-gray-500\">${hora}</span>\r\n-    `;\r\n-    return el;\r\n-  }\r\n+  // Modal behavior\r\n+  function openAddModal() {\r\n+    if (!modal) return;\r\n+    // Reset\r\n+    state.selectedCliente = null;\r\n+    state.selectedServico = null;\r\n+    if (cliInput) { cliInput.value = ''; }\r\n+    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+    if (petSelect) { petSelect.innerHTML = ''; }\r\n+    if (servInput) { servInput.value = ''; }\r\n+    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    if (valorInput) { valorInput.value = ''; }\r\n+    if (horaInput) { horaInput.value = new Date().toTimeString().slice(0,5); }\r\n \r\n-  function combineDateTime(dateStr, timeStr) {\r\n-    // dateStr YYYY-MM-DD, timeStr HH:MM -> Date local\r\n-    const [y, m, d] = dateStr.split('-').map(x => parseInt(x, 10));\r\n-    const [hh, mm] = timeStr.split(':').map(x => parseInt(x, 10));\r\n-    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n+    // Load professionals (already loaded globally, but ensure select is filled)\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+    }\r\n+\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n+    cliInput?.focus();\r\n   }\r\n+  function closeAddModal() {\r\n+    if (!modal) return;\r\n+    modal.classList.add('hidden');\r\n+    modal.classList.remove('flex');\r\n+  }\r\n \r\n-  // Ações\r\n-  dateInput.addEventListener('change', renderAgenda);\r\n-\r\n-  if (storeSelect) {\r\n-    storeSelect.addEventListener('change', () => {\r\n-      selectedStoreId = storeSelect.value || null;\r\n-      if (selectedStoreId) localStorage.setItem('bt_selected_store', selectedStoreId);\r\n-      renderAgenda();\r\n+  // Cliente search\r\n+  async function searchClientes(term) {\r\n+    if (!term || term.length < 2) { if (cliSug){ cliSug.innerHTML=''; cliSug.classList.add('hidden'); } return; }\r\n+    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json();\r\n+    if (!cliSug) return;\r\n+    cliSug.innerHTML = list.map(u => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n+        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n+      </li>`).join('');\r\n+    cliSug.classList.remove('hidden');\r\n+    cliSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', async () => {\r\n+        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n+        if (cliInput) cliInput.value = li.dataset.nome;\r\n+        cliSug.classList.add('hidden');\r\n+        // Auto load pets for this client\r\n+        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n+        const pets = await resp.json();\r\n+        if (petSelect) {\r\n+          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+        }\r\n+      });\r\n     });\r\n   }\r\n \r\n-  if (addBtn) {\r\n-    addBtn.addEventListener('click', () => {\r\n-      openAddModal();\r\n+  // Serviço search\r\n+  async function searchServicos(term) {\r\n+    if (!term || term.length < 2) { if (servSug){ servSug.innerHTML=''; servSug.classList.add('hidden'); } return; }\r\n+    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json();\r\n+    if (!servSug) return;\r\n+    servSug.innerHTML = list.map(s => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor || 0}\">\r\n+        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${(s.grupo && s.grupo.nome) ? s.grupo.nome : ''}</div>\r\n+      </li>`).join('');\r\n+    servSug.classList.remove('hidden');\r\n+    servSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', () => {\r\n+        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n+        if (servInput) servInput.value = state.selectedServico.nome;\r\n+        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n+        servSug.classList.add('hidden');\r\n+      });\r\n     });\r\n   }\r\n \r\n-  modalSave?.addEventListener('click', async () => {\r\n-    // validações mínimas\r\n-    const clienteId = cliHiddenId.value;\r\n-    const petId = petSelect.value;\r\n-    const servicoId = servHiddenId.value;\r\n-    const profissionalId = profSelect.value;\r\n-    const dateStr = dateInput.value;\r\n-    const timeStr = horaInput.value || '09:00';\r\n-    if (!selectedStoreId) return alert('Selecione uma empresa.');\r\n-    if (!clienteId) return alert('Selecione um cliente.');\r\n-    if (!petId) return alert('Selecione um pet.');\r\n-    if (!servicoId) return alert('Selecione um serviço.');\r\n-    if (!profissionalId) return alert('Selecione um profissional.');\r\n+  async function saveAgendamento() {\r\n+    try {\r\n+      const clienteId = state.selectedCliente?._id;\r\n+      const petId = petSelect?.value;\r\n+      const servicoId = state.selectedServico?._id;\r\n+      const profissionalId = profSelect?.value;\r\n+      const hora = horaInput?.value;\r\n+      const date = dateInput.value || todayStr();\r\n \r\n-    const when = combineDateTime(dateStr, timeStr);\r\n-    try {\r\n-      const res = await fetch(API.criarAgendamento(), {\r\n+      if (!(clienteId && petId && servicoId && profissionalId && hora)) {\r\n+        alert('Preencha cliente, pet, serviço, profissional e hora.');\r\n+        return;\r\n+      }\r\n+\r\n+      const scheduledAt = parseTimeToDate(date, hora).toISOString();\r\n+\r\n+      const body = {\r\n+        storeId: state.selectedStoreId,\r\n+        clienteId,\r\n+        petId,\r\n+        servicoId,\r\n+        profissionalId,\r\n+        scheduledAt,\r\n+        valor: Number(valorInput?.value || 0),\r\n+        pago: false\r\n+      };\r\n+\r\n+      const resp = await api('/func/agendamentos', {\r\n         method: 'POST',\r\n-        headers: headers(),\r\n-        body: JSON.stringify({\r\n-          storeId: selectedStoreId,\r\n-          clienteId, petId, servicoId, profissionalId,\r\n-          scheduledAt: when.toISOString(),\r\n-          pago: !!pagoCheck?.checked\r\n-        })\r\n+        body: JSON.stringify(body)\r\n       });\r\n-      if (!res.ok) {\r\n-        const e = await res.json().catch(() => ({}));\r\n-        throw new Error(e.message || 'Erro ao salvar');\r\n+\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(()=>({}));\r\n+        throw new Error(err.message || 'Erro ao salvar');\r\n       }\r\n-      // sucesso\r\n+\r\n+      const created = await resp.json();\r\n+      state.agendamentos.push(created);\r\n       closeAddModal();\r\n-      renderAgenda(); // recarrega a agenda e mostra o card\r\n+      renderGrid();\r\n     } catch (e) {\r\n       console.error(e);\r\n       alert(e.message || 'Erro ao salvar');\r\n     }\r\n+  }\r\n+\r\n+  // Events\r\n+  addBtn?.addEventListener('click', openAddModal);\r\n+  modalClose?.addEventListener('click', closeAddModal);\r\n+  modalCancel?.addEventListener('click', closeAddModal);\r\n+  modalSave?.addEventListener('click', saveAgendamento);\r\n+\r\n+  cliInput?.addEventListener('input', debounce((e)=>searchClientes(e.target.value), 300));\r\n+  servInput?.addEventListener('input', debounce((e)=>searchServicos(e.target.value), 300));\r\n+\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n   });\r\n \r\n-  // Primeira renderização (carrega empresas antes)\r\n-  if (storeSelect) {\r\n-    loadStores().finally(renderAgenda);\r\n-  } else {\r\n-    renderAgenda();\r\n-  }\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  });\r\n \r\n-})();\n+  // Boot\r\n+  (async function init() {\r\n+    if (!dateInput.value) dateInput.value = todayStr();\r\n+    await loadStores();\r\n+    // Define selected store if the select had a value pre-set\r\n+    if (!state.selectedStoreId && storeSelect?.value) state.selectedStoreId = storeSelect.value;\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  })();\r\n+})();\r\n"
                },
                {
                    "date": 1757353789075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,335 +1,218 @@\n-// SiteEoBichoTW/scripts/funcionarios/banho-e-tosa.js\r\n-(function () {\r\n-  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n-  function api(url, opts={}) {\r\n-    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n-      ...opts,\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        ...(opts.headers || {}),\r\n-        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n-      }\r\n-    });\r\n-  }\r\n+const express = require('express');\r\n+const router = express.Router();\r\n \r\n-  // Elements\r\n-  const agendaList = document.getElementById('agenda-list');\r\n-  const dateInput = document.getElementById('agenda-date');\r\n-  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n-  const addBtn = document.getElementById('add-service-btn');\r\n-  const storeSelect = document.getElementById('agenda-store');\r\n-  const storeLabelVisible  = document.getElementById('agenda-store-label-visible');\r\n+const mongoose = require('mongoose');\r\n+const authMiddleware = require('../middlewares/authMiddleware');\r\n+const authorizeRoles = require('../middlewares/authorizeRoles');\r\n \r\n-  // Modal elements\r\n-  const modal = document.getElementById('modal-add-servico');\r\n-  const modalClose = document.getElementById('modal-add-close');\r\n-  const modalCancel = document.getElementById('modal-add-cancel');\r\n-  const modalSave = document.getElementById('modal-add-save');\r\n+const User = require('../models/User');\r\n+const Pet = require('../models/Pet');\r\n+const Service = require('../models/Service');\r\n+const Appointment = require('../models/Appointment');\r\n \r\n-  const cliInput = document.getElementById('add-cli-input');\r\n-  const cliSug = document.getElementById('add-cli-sug');\r\n-  const petSelect = document.getElementById('add-pet-select');\r\n-  const servInput = document.getElementById('add-serv-input');\r\n-  const servSug = document.getElementById('add-serv-sug');\r\n-  const valorInput = document.getElementById('add-valor');\r\n-  const horaInput = document.getElementById('add-hora');\r\n-  const profSelect = document.getElementById('add-prof-select');\r\n+const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n \r\n-  // State\r\n-  const state = {\r\n-    stores: [],\r\n-    profissionais: [],\r\n-    agendamentos: [],\r\n-    selectedStoreId: null,\r\n-    selectedCliente: null,\r\n-    selectedServico: null\r\n-  };\r\n+function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n+function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n \r\n-  // Helpers\r\n-  function todayStr() {\r\n-    const tz = new Date();\r\n-    return tz.toISOString().slice(0, 10);\r\n-  }\r\n-  function pad(n){ return n<10? '0'+n : ''+n; }\r\n-  function parseTimeToDate(dateISO, hhmm) {\r\n-    const [h,m] = (hhmm || '00:00').split(':').map(x=>parseInt(x,10));\r\n-    const d = new Date(dateISO);\r\n-    d.setHours(h, m, 0, 0);\r\n-    return d;\r\n-  }\r\n-  function money(v){ return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n-  function clearChildren(el){ while(el && el.firstChild) el.removeChild(el.firstChild); }\r\n-  function debounce(fn, delay=250){ let t; return (...args)=>{ clearTimeout(t); t=setTimeout(()=>fn(...args), delay); }; }\r\n+// ---------- BUSCA CLIENTES ----------\r\n+router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n+    if (!q) return res.json([]);\r\n+    const regex = new RegExp(escapeRegex(q), 'i');\r\n+    const onlyDigits = q.replace(/\\D/g, '');\r\n \r\n-  // Load stores\r\n-  async function loadStores() {\r\n-    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n-    const list = await resp.json();\r\n-    state.stores = Array.isArray(list) ? list : [];\r\n-    storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-    if (!state.selectedStoreId && state.stores[0]) {\r\n-      state.selectedStoreId = state.stores[0]._id;\r\n-      storeSelect.value = state.selectedStoreId;\r\n+    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n+    if (onlyDigits.length >= 4) {\r\n+      or.push({ cpf: new RegExp(onlyDigits) });\r\n+      or.push({ cnpj: new RegExp(onlyDigits) });\r\n+      or.push({ celular: new RegExp(onlyDigits) });\r\n     }\r\n-    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n-    if (document.getElementById('agenda-store-label-visible')) {\r\n-      document.getElementById('agenda-store-label-visible').textContent = s ? s.nome : '—';\r\n-    }\r\n+\r\n+    const users = await User.find({ $or: or })\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n+      .limit(limit)\r\n+      .lean();\r\n+\r\n+    res.json(users.map(u => ({\r\n+      _id: u._id,\r\n+      nome: userDisplayName(u),\r\n+      email: u.email,\r\n+      doc: u.cpf || u.cnpj || '',\r\n+      tipoConta: u.tipoConta\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n   }\r\n+});\r\n \r\n-  // Load professionals (esteticistas) limited to the selected store\r\n-  async function loadProfissionais() {\r\n-    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n-    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n-    const list = await resp.json();\r\n-    state.profissionais = list || [];\r\n-    // Fill modal select\r\n-    if (profSelect) {\r\n-      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-    }\r\n+// ---------- PETS DO CLIENTE ----------\r\n+router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const ownerId = req.params.id;\r\n+    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n+    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n+    res.json(pets);\r\n+  } catch (e) {\r\n+    console.error('GET /func/clientes/:id/pets', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n   }\r\n+});\r\n \r\n-  // Load appointments for the day/store\r\n-  async function loadAgendamentos() {\r\n-    const date = dateInput.value || todayStr();\r\n-    const resp = await api(`/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`);\r\n-    state.agendamentos = await resp.json();\r\n+// ---------- BUSCA SERVIÇOS ----------\r\n+router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const q = String(req.query.q || '').trim();\r\n+    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n+    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n+    const items = await Service.find(filter)\r\n+      .select('_id nome valor porte grupo')\r\n+      .populate('grupo')\r\n+      .limit(limit)\r\n+      .sort({ nome: 1 })\r\n+      .lean();\r\n+\r\n+    res.json(items.map(s => ({\r\n+      _id: s._id,\r\n+      nome: s.nome,\r\n+      valor: s.valor || 0,\r\n+      porte: s.porte || [],\r\n+      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n+    })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/servicos/buscar', e);\r\n+    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n   }\r\n+});\r\n \r\n-  // Render grid with columns per professional\r\n-  function renderGrid() {\r\n-    if (!agendaList) return;\r\n-    const date = dateInput.value || todayStr();\r\n-    if (dateLabelVisible) {\r\n-      dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+// ---------- PROFISSIONAIS (esteticistas) ----------\r\n+router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId } = req.query;\r\n+    const filter = {\r\n+      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n+      grupos: 'esteticista'\r\n+    };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n+      // Usuários que pertencem à empresa informada\r\n+      filter.empresas = storeId;\r\n     }\r\n \r\n-    // Hours rows (07:00 - 20:00)\r\n-    const hours = [];\r\n-    for (let h = 7; h <= 20; h++) hours.push(`${pad(h)}:00`);\r\n+    const users = await User.find(filter)\r\n+      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n+      .sort({ nomeCompleto: 1 })\r\n+      .lean();\r\n \r\n-    // Build header (first empty cell + professional names)\r\n-    const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n-    const colCount = cols.length;\r\n+    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n+  } catch (e) {\r\n+    console.error('GET /func/profissionais/esteticistas', e);\r\n+    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n+  }\r\n+});\r\n \r\n-    // Grid container\r\n-    clearChildren(agendaList);\r\n+// ---------- AGENDAMENTOS ----------\r\n+function getDayRange(dateStr) {\r\n+  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n+  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n+  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n+  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n+  return { start, end };\r\n+}\r\n \r\n-    const header = document.createElement('div');\r\n-    header.className = `grid sticky top-0 bg-white z-10 border-b text-sm font-medium`;\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n-    cols.forEach((label, idx) => {\r\n-      const cell = document.createElement('div');\r\n-      cell.className = 'px-3 py-2 ' + (idx===0 ? 'text-gray-600' : 'text-gray-800');\r\n-      cell.textContent = label;\r\n-      header.appendChild(cell);\r\n-    });\r\n-    agendaList.appendChild(header);\r\n+// Listar do dia por empresa\r\n+// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n+router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { date, storeId } = req.query;\r\n+    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n \r\n-    // Body\r\n-    const body = document.createElement('div');\r\n-    body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n-    agendaList.appendChild(body);\r\n+    const { start, end } = getDayRange(date);\r\n+    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n+    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n \r\n-    hours.forEach(hh => {\r\n-      // Time column\r\n-      const timeCell = document.createElement('div');\r\n-      timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n-      timeCell.textContent = hh;\r\n-      body.appendChild(timeCell);\r\n+    const list = await Appointment.find(filter)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .sort({ scheduledAt: 1 })\r\n+      .lean();\r\n \r\n-      // One cell per professional\r\n-      state.profissionais.forEach(p => {\r\n-        const col = document.createElement('div');\r\n-        col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n-        col.dataset.profissionalId = p._id;\r\n-        col.dataset.hh = hh;\r\n-        body.appendChild(col);\r\n-      });\r\n-    });\r\n+    const map = list.map(a => ({\r\n+      _id: a._id,\r\n+      h: new Date(a.scheduledAt).toISOString(),\r\n+      valor: a.valor,\r\n+      pago: !!a.pago,\r\n+      pet: a.pet ? a.pet.nome : '—',\r\n+      servico: a.servico ? a.servico.nome : '—',\r\n+      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : '—',\r\n+      profissionalId: a.profissional?._id || null\r\n+    }));\r\n+    res.json(map);\r\n+  } catch (e) {\r\n+    console.error('GET /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n+  }\r\n+});\r\n \r\n-    // Place cards\r\n-    for (const a of state.agendamentos) {\r\n-      const d = new Date(a.h);\r\n-      const hh = `${pad(d.getHours())}:00`;\r\n-      const col = body.querySelector(`div[data-profissional-id=\"${a.profissionalId}\"][data-hh=\"${hh}\"]`);\r\n-      if (!col) continue;\r\n-\r\n-      const card = document.createElement('div');\r\n-      card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2';\r\n-      const left = document.createElement('div');\r\n-      left.innerHTML = `<div class=\"font-medium text-gray-900\">${a.pet}</div>\r\n-                        <div class=\"text-gray-600\">${a.servico}</div>\r\n-                        <div class=\"text-gray-600\">${money(a.valor)}</div>`;\r\n-      const right = document.createElement('div');\r\n-      right.className = 'text-lg';\r\n-      const dollar = document.createElement('span');\r\n-      dollar.textContent = '$';\r\n-      if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n-      right.appendChild(dollar);\r\n-\r\n-      card.appendChild(left);\r\n-      card.appendChild(right);\r\n-      col.appendChild(card);\r\n+// Criar agendamento\r\n+// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n+router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n+  try {\r\n+    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n+    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n+      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n     }\r\n-  }\r\n+    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n+      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n+      || !mongoose.Types.ObjectId.isValid(petId)\r\n+      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n+      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n+      return res.status(400).json({ message: 'IDs inválidos.' });\r\n+    }\r\n \r\n-  // Modal behavior\r\n-  function openAddModal() {\r\n-    if (!modal) return;\r\n-    // Reset\r\n-    state.selectedCliente = null;\r\n\\ No newline at end of file\n-    state.selectedServico = null;\r\n-    if (cliInput) { cliInput.value = ''; }\r\n-    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n-    if (petSelect) { petSelect.innerHTML = ''; }\r\n-    if (servInput) { servInput.value = ''; }\r\n-    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-    if (valorInput) { valorInput.value = ''; }\r\n-    if (horaInput) { horaInput.value = new Date().toTimeString().slice(0,5); }\r\n-\r\n-    // Load professionals (already loaded globally, but ensure select is filled)\r\n-    if (profSelect) {\r\n-      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n+    if (!valorFinal) {\r\n+      const s = await Service.findById(servicoId).select('valor').lean();\r\n+      valorFinal = s?.valor || 0;\r\n     }\r\n \r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n-    cliInput?.focus();\r\n-  }\r\n-  function closeAddModal() {\r\n-    if (!modal) return;\r\n-    modal.classList.add('hidden');\r\n-    modal.classList.remove('flex');\r\n-  }\r\n-\r\n-  // Cliente search\r\n-  async function searchClientes(term) {\r\n-    if (!term || term.length < 2) { if (cliSug){ cliSug.innerHTML=''; cliSug.classList.add('hidden'); } return; }\r\n-    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json();\r\n-    if (!cliSug) return;\r\n-    cliSug.innerHTML = list.map(u => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n-        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n-      </li>`).join('');\r\n-    cliSug.classList.remove('hidden');\r\n-    cliSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', async () => {\r\n-        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n-        if (cliInput) cliInput.value = li.dataset.nome;\r\n-        cliSug.classList.add('hidden');\r\n-        // Auto load pets for this client\r\n-        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n-        const pets = await resp.json();\r\n-        if (petSelect) {\r\n-          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-        }\r\n-      });\r\n+    const appt = await Appointment.create({\r\n+      store: storeId,\r\n+      cliente: clienteId,\r\n+      pet: petId,\r\n+      servico: servicoId,\r\n+      profissional: profissionalId,\r\n+      scheduledAt: new Date(scheduledAt),\r\n+      valor: valorFinal,\r\n+      pago: !!pago,\r\n+      createdBy: req.user?._id\r\n     });\r\n-  }\r\n \r\n-  // Serviço search\r\n-  async function searchServicos(term) {\r\n-    if (!term || term.length < 2) { if (servSug){ servSug.innerHTML=''; servSug.classList.add('hidden'); } return; }\r\n-    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json();\r\n-    if (!servSug) return;\r\n-    servSug.innerHTML = list.map(s => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor || 0}\">\r\n-        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${(s.grupo && s.grupo.nome) ? s.grupo.nome : ''}</div>\r\n-      </li>`).join('');\r\n-    servSug.classList.remove('hidden');\r\n-    servSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', () => {\r\n-        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n-        if (servInput) servInput.value = state.selectedServico.nome;\r\n-        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n-        servSug.classList.add('hidden');\r\n-      });\r\n+    const full = await Appointment.findById(appt._id)\r\n+      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n+      .populate('pet', 'nome')\r\n+      .populate('servico', 'nome')\r\n+      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n+      .lean();\r\n+\r\n+    res.status(201).json({\r\n+      _id: full._id,\r\n+      h: new Date(full.scheduledAt).toISOString(),\r\n+      valor: full.valor,\r\n+      pago: !!full.pago,\r\n+      pet: full.pet ? full.pet.nome : '—',\r\n+      servico: full.servico ? full.servico.nome : '—',\r\n+      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n+      profissionalId: full.profissional?._id || null\r\n     });\r\n+  } catch (e) {\r\n+    console.error('POST /func/agendamentos', e);\r\n+    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n   }\r\n+});\r\n \r\n-  async function saveAgendamento() {\r\n-    try {\r\n-      const clienteId = state.selectedCliente?._id;\r\n-      const petId = petSelect?.value;\r\n-      const servicoId = state.selectedServico?._id;\r\n-      const profissionalId = profSelect?.value;\r\n-      const hora = horaInput?.value;\r\n-      const date = dateInput.value || todayStr();\r\n-\r\n-      if (!(clienteId && petId && servicoId && profissionalId && hora)) {\r\n-        alert('Preencha cliente, pet, serviço, profissional e hora.');\r\n-        return;\r\n-      }\r\n-\r\n-      const scheduledAt = parseTimeToDate(date, hora).toISOString();\r\n-\r\n-      const body = {\r\n-        storeId: state.selectedStoreId,\r\n-        clienteId,\r\n-        petId,\r\n-        servicoId,\r\n-        profissionalId,\r\n-        scheduledAt,\r\n-        valor: Number(valorInput?.value || 0),\r\n-        pago: false\r\n-      };\r\n-\r\n-      const resp = await api('/func/agendamentos', {\r\n-        method: 'POST',\r\n-        body: JSON.stringify(body)\r\n-      });\r\n-\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(()=>({}));\r\n-        throw new Error(err.message || 'Erro ao salvar');\r\n-      }\r\n-\r\n-      const created = await resp.json();\r\n-      state.agendamentos.push(created);\r\n-      closeAddModal();\r\n-      renderGrid();\r\n-    } catch (e) {\r\n-      console.error(e);\r\n-      alert(e.message || 'Erro ao salvar');\r\n-    }\r\n-  }\r\n-\r\n-  // Events\r\n-  addBtn?.addEventListener('click', openAddModal);\r\n-  modalClose?.addEventListener('click', closeAddModal);\r\n-  modalCancel?.addEventListener('click', closeAddModal);\r\n-  modalSave?.addEventListener('click', saveAgendamento);\r\n-\r\n-  cliInput?.addEventListener('input', debounce((e)=>searchClientes(e.target.value), 300));\r\n-  servInput?.addEventListener('input', debounce((e)=>searchServicos(e.target.value), 300));\r\n-\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-  });\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-  });\r\n-\r\n-  // Boot\r\n-  (async function init() {\r\n-    if (!dateInput.value) dateInput.value = todayStr();\r\n-    await loadStores();\r\n-    // Define selected store if the select had a value pre-set\r\n-    if (!state.selectedStoreId && storeSelect?.value) state.selectedStoreId = storeSelect.value;\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-  })();\r\n-})();\n+module.exports = router;\r\n"
                },
                {
                    "date": 1757353811027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,218 +1,335 @@\n-const express = require('express');\r\n-const router = express.Router();\r\n+// SiteEoBichoTW/scripts/funcionarios/banho-e-tosa.js\r\n+(function () {\r\n+  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n+  function api(url, opts={}) {\r\n+    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n+      ...opts,\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        ...(opts.headers || {}),\r\n+        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n+      }\r\n+    });\r\n+  }\r\n \r\n-const mongoose = require('mongoose');\r\n-const authMiddleware = require('../middlewares/authMiddleware');\r\n-const authorizeRoles = require('../middlewares/authorizeRoles');\r\n+  // Elements\r\n+  const agendaList = document.getElementById('agenda-list');\r\n+  const dateInput = document.getElementById('agenda-date');\r\n+  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n+  const addBtn = document.getElementById('add-service-btn');\r\n+  const storeSelect = document.getElementById('agenda-store');\r\n+  const storeLabelVisible  = document.getElementById('agenda-store-label-visible');\r\n \r\n-const User = require('../models/User');\r\n-const Pet = require('../models/Pet');\r\n-const Service = require('../models/Service');\r\n-const Appointment = require('../models/Appointment');\r\n+  // Modal elements\r\n+  const modal = document.getElementById('modal-add-servico');\r\n+  const modalClose = document.getElementById('modal-add-close');\r\n+  const modalCancel = document.getElementById('modal-add-cancel');\r\n+  const modalSave = document.getElementById('modal-add-save');\r\n \r\n-const requireStaff = authorizeRoles('funcionario', 'admin', 'admin_master');\r\n+  const cliInput = document.getElementById('add-cli-input');\r\n+  const cliSug = document.getElementById('add-cli-sug');\r\n+  const petSelect = document.getElementById('add-pet-select');\r\n+  const servInput = document.getElementById('add-serv-input');\r\n+  const servSug = document.getElementById('add-serv-sug');\r\n+  const valorInput = document.getElementById('add-valor');\r\n+  const horaInput = document.getElementById('add-hora');\r\n+  const profSelect = document.getElementById('add-prof-select');\r\n \r\n-function escapeRegex(s) { return String(s || '').replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); }\r\n-function userDisplayName(u) { return u?.nomeCompleto || u?.nomeContato || u?.razaoSocial || u?.email; }\r\n+  // State\r\n+  const state = {\r\n+    stores: [],\r\n+    profissionais: [],\r\n+    agendamentos: [],\r\n+    selectedStoreId: null,\r\n+    selectedCliente: null,\r\n+    selectedServico: null\r\n+  };\r\n \r\n-// ---------- BUSCA CLIENTES ----------\r\n-router.get('/clientes/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 20);\r\n-    if (!q) return res.json([]);\r\n-    const regex = new RegExp(escapeRegex(q), 'i');\r\n-    const onlyDigits = q.replace(/\\D/g, '');\r\n+  // Helpers\r\n+  function todayStr() {\r\n+    const tz = new Date();\r\n+    return tz.toISOString().slice(0, 10);\r\n+  }\r\n+  function pad(n){ return n<10? '0'+n : ''+n; }\r\n+  function parseTimeToDate(dateISO, hhmm) {\r\n+    const [h,m] = (hhmm || '00:00').split(':').map(x=>parseInt(x,10));\r\n+    const d = new Date(dateISO);\r\n+    d.setHours(h, m, 0, 0);\r\n+    return d;\r\n+  }\r\n+  function money(v){ return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n+  function clearChildren(el){ while(el && el.firstChild) el.removeChild(el.firstChild); }\r\n+  function debounce(fn, delay=250){ let t; return (...args)=>{ clearTimeout(t); t=setTimeout(()=>fn(...args), delay); }; }\r\n \r\n-    const or = [{ nomeCompleto: regex }, { nomeContato: regex }, { razaoSocial: regex }, { email: regex }];\r\n-    if (onlyDigits.length >= 4) {\r\n-      or.push({ cpf: new RegExp(onlyDigits) });\r\n-      or.push({ cnpj: new RegExp(onlyDigits) });\r\n-      or.push({ celular: new RegExp(onlyDigits) });\r\n+  // Load stores\r\n+  async function loadStores() {\r\n+    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+    const list = await resp.json();\r\n+    state.stores = Array.isArray(list) ? list : [];\r\n+    storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+    if (!state.selectedStoreId && state.stores[0]) {\r\n+      state.selectedStoreId = state.stores[0]._id;\r\n+      storeSelect.value = state.selectedStoreId;\r\n     }\r\n-\r\n-    const users = await User.find({ $or: or })\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email cpf cnpj celular tipoConta')\r\n-      .limit(limit)\r\n-      .lean();\r\n-\r\n-    res.json(users.map(u => ({\r\n-      _id: u._id,\r\n-      nome: userDisplayName(u),\r\n-      email: u.email,\r\n-      doc: u.cpf || u.cnpj || '',\r\n-      tipoConta: u.tipoConta\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar clientes' });\r\n+    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n+    if (document.getElementById('agenda-store-label-visible')) {\r\n+      document.getElementById('agenda-store-label-visible').textContent = s ? s.nome : '—';\r\n+    }\r\n   }\r\n-});\r\n \r\n-// ---------- PETS DO CLIENTE ----------\r\n-router.get('/clientes/:id/pets', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const ownerId = req.params.id;\r\n-    if (!mongoose.Types.ObjectId.isValid(ownerId)) return res.json([]);\r\n-    const pets = await Pet.find({ owner: ownerId }).select('_id nome porte').sort({ nome: 1 }).lean();\r\n-    res.json(pets);\r\n-  } catch (e) {\r\n-    console.error('GET /func/clientes/:id/pets', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar pets' });\r\n+  // Load professionals (esteticistas) limited to the selected store\r\n+  async function loadProfissionais() {\r\n+    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n+    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n+    const list = await resp.json();\r\n+    state.profissionais = list || [];\r\n+    // Fill modal select\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+    }\r\n   }\r\n-});\r\n \r\n-// ---------- BUSCA SERVIÇOS ----------\r\n-router.get('/servicos/buscar', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const q = String(req.query.q || '').trim();\r\n-    const limit = Math.min(parseInt(req.query.limit || '8', 10), 30);\r\n-    const filter = q ? { nome: new RegExp(escapeRegex(q), 'i') } : {};\r\n-    const items = await Service.find(filter)\r\n-      .select('_id nome valor porte grupo')\r\n-      .populate('grupo')\r\n-      .limit(limit)\r\n-      .sort({ nome: 1 })\r\n-      .lean();\r\n-\r\n-    res.json(items.map(s => ({\r\n-      _id: s._id,\r\n-      nome: s.nome,\r\n-      valor: s.valor || 0,\r\n-      porte: s.porte || [],\r\n-      grupo: s.grupo ? { _id: s.grupo._id, nome: s.grupo.nome } : null\r\n-    })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/servicos/buscar', e);\r\n-    res.status(500).json({ message: 'Erro ao buscar serviços' });\r\n+  // Load appointments for the day/store\r\n+  async function loadAgendamentos() {\r\n+    const date = dateInput.value || todayStr();\r\n+    const resp = await api(`/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`);\r\n+    state.agendamentos = await resp.json();\r\n   }\r\n-});\r\n \r\n-// ---------- PROFISSIONAIS (esteticistas) ----------\r\n-router.get('/profissionais/esteticistas', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId } = req.query;\r\n-    const filter = {\r\n-      role: { $in: ['funcionario', 'admin', 'admin_master'] },\r\n-      grupos: 'esteticista'\r\n-    };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) {\r\n-      // Usuários que pertencem à empresa informada\r\n-      filter.empresas = storeId;\r\n+  // Render grid with columns per professional\r\n+  function renderGrid() {\r\n+    if (!agendaList) return;\r\n+    const date = dateInput.value || todayStr();\r\n+    if (dateLabelVisible) {\r\n+      dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n     }\r\n \r\n-    const users = await User.find(filter)\r\n-      .select('_id nomeCompleto nomeContato razaoSocial email empresas grupos')\r\n-      .sort({ nomeCompleto: 1 })\r\n-      .lean();\r\n+    // Hours rows (07:00 - 20:00)\r\n+    const hours = [];\r\n+    for (let h = 7; h <= 20; h++) hours.push(`${pad(h)}:00`);\r\n \r\n-    res.json(users.map(u => ({ _id: u._id, nome: userDisplayName(u) })));\r\n-  } catch (e) {\r\n-    console.error('GET /func/profissionais/esteticistas', e);\r\n-    res.status(500).json({ message: 'Erro ao carregar profissionais' });\r\n-  }\r\n-});\r\n+    // Build header (first empty cell + professional names)\r\n+    const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n+    const colCount = cols.length;\r\n \r\n-// ---------- AGENDAMENTOS ----------\r\n-function getDayRange(dateStr) {\r\n-  // dateStr: YYYY-MM-DD (sem timezone). Considera dia local.\r\n-  const [y, m, d] = dateStr.split('-').map(n => parseInt(n, 10));\r\n-  const start = new Date(y, m - 1, d, 0, 0, 0, 0);\r\n-  const end = new Date(y, m - 1, d + 1, 0, 0, 0, 0);\r\n-  return { start, end };\r\n-}\r\n+    // Grid container\r\n+    clearChildren(agendaList);\r\n \r\n-// Listar do dia por empresa\r\n-// GET /api/func/agendamentos?date=YYYY-MM-DD&storeId=<id>\r\n-router.get('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { date, storeId } = req.query;\r\n-    if (!date) return res.status(400).json({ message: 'Parâmetro \"date\" é obrigatório (YYYY-MM-DD).' });\r\n+    const header = document.createElement('div');\r\n+    header.className = `grid sticky top-0 bg-white z-10 border-b text-sm font-medium`;\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n+    cols.forEach((label, idx) => {\r\n+      const cell = document.createElement('div');\r\n+      cell.className = 'px-3 py-2 ' + (idx===0 ? 'text-gray-600' : 'text-gray-800');\r\n+      cell.textContent = label;\r\n+      header.appendChild(cell);\r\n+    });\r\n+    agendaList.appendChild(header);\r\n \r\n-    const { start, end } = getDayRange(date);\r\n-    const filter = { scheduledAt: { $gte: start, $lt: end } };\r\n-    if (storeId && mongoose.Types.ObjectId.isValid(storeId)) filter.store = storeId;\r\n+    // Body\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n+    agendaList.appendChild(body);\r\n \r\n-    const list = await Appointment.find(filter)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .sort({ scheduledAt: 1 })\r\n-      .lean();\r\n+    hours.forEach(hh => {\r\n+      // Time column\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n+      timeCell.textContent = hh;\r\n+      body.appendChild(timeCell);\r\n \r\n-    const map = list.map(a => ({\r\n-      _id: a._id,\r\n-      h: new Date(a.scheduledAt).toISOString(),\r\n-      valor: a.valor,\r\n-      pago: !!a.pago,\r\n-      pet: a.pet ? a.pet.nome : '—',\r\n-      servico: a.servico ? a.servico.nome : '—',\r\n-      profissional: a.profissional ? (a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial) : '—',\r\n-      profissionalId: a.profissional?._id || null\r\n-    }));\r\n-    res.json(map);\r\n-  } catch (e) {\r\n-    console.error('GET /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao listar agendamentos' });\r\n-  }\r\n-});\r\n+      // One cell per professional\r\n+      state.profissionais.forEach(p => {\r\n+        const col = document.createElement('div');\r\n+        col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n+        col.dataset.profissionalId = p._id;\r\n+        col.dataset.hh = hh;\r\n+        body.appendChild(col);\r\n+      });\r\n+    });\r\n \r\n-// Criar agendamento\r\n-// body: { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago }\r\n-router.post('/agendamentos', authMiddleware, requireStaff, async (req, res) => {\r\n-  try {\r\n-    const { storeId, clienteId, petId, servicoId, profissionalId, scheduledAt, valor, pago } = req.body || {};\r\n-    if (![storeId, clienteId, petId, servicoId, profissionalId, scheduledAt].every(Boolean)) {\r\n-      return res.status(400).json({ message: 'Campos obrigatórios ausentes.' });\r\n+    // Place cards\r\n+    for (const a of state.agendamentos) {\r\n+      const d = new Date(a.h);\r\n+      const hh = `${pad(d.getHours())}:00`;\r\n+      const col = body.querySelector(`div[data-profissional-id=\"${a.profissionalId}\"][data-hh=\"${hh}\"]`);\r\n+      if (!col) continue;\r\n+\r\n+      const card = document.createElement('div');\r\n+      card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2';\r\n+      const left = document.createElement('div');\r\n+      left.innerHTML = `<div class=\"font-medium text-gray-900\">${a.pet}</div>\r\n+                        <div class=\"text-gray-600\">${a.servico}</div>\r\n+                        <div class=\"text-gray-600\">${money(a.valor)}</div>`;\r\n+      const right = document.createElement('div');\r\n+      right.className = 'text-lg';\r\n+      const dollar = document.createElement('span');\r\n+      dollar.textContent = '$';\r\n+      if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n+      right.appendChild(dollar);\r\n+\r\n+      card.appendChild(left);\r\n+      card.appendChild(right);\r\n+      col.appendChild(card);\r\n     }\r\n-    if (!mongoose.Types.ObjectId.isValid(storeId)\r\n-      || !mongoose.Types.ObjectId.isValid(clienteId)\r\n-      || !mongoose.Types.ObjectId.isValid(petId)\r\n-      || !mongoose.Types.ObjectId.isValid(servicoId)\r\n-      || !mongoose.Types.ObjectId.isValid(profissionalId)) {\r\n-      return res.status(400).json({ message: 'IDs inválidos.' });\r\n-    }\r\n+  }\r\n \r\n-    let valorFinal = typeof valor === 'number' ? valor : 0;\r\n-    if (!valorFinal) {\r\n-      const s = await Service.findById(servicoId).select('valor').lean();\r\n-      valorFinal = s?.valor || 0;\r\n+  // Modal behavior\r\n+  function openAddModal() {\r\n+    if (!modal) return;\r\n+    // Reset\r\n+    state.selectedCliente = null;\r\n+    state.selectedServico = null;\r\n+    if (cliInput) { cliInput.value = ''; }\r\n+    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+    if (petSelect) { petSelect.innerHTML = ''; }\r\n+    if (servInput) { servInput.value = ''; }\r\n+    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    if (valorInput) { valorInput.value = ''; }\r\n+    if (horaInput) { horaInput.value = new Date().toTimeString().slice(0,5); }\r\n+\r\n+    // Load professionals (already loaded globally, but ensure select is filled)\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n     }\r\n \r\n-    const appt = await Appointment.create({\r\n-      store: storeId,\r\n-      cliente: clienteId,\r\n-      pet: petId,\r\n-      servico: servicoId,\r\n-      profissional: profissionalId,\r\n-      scheduledAt: new Date(scheduledAt),\r\n-      valor: valorFinal,\r\n-      pago: !!pago,\r\n-      createdBy: req.user?._id\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n+    cliInput?.focus();\r\n+  }\r\n+  function closeAddModal() {\r\n+    if (!modal) return;\r\n+    modal.classList.add('hidden');\r\n+    modal.classList.remove('flex');\r\n+  }\r\n+\r\n+  // Cliente search\r\n+  async function searchClientes(term) {\r\n+    if (!term || term.length < 2) { if (cliSug){ cliSug.innerHTML=''; cliSug.classList.add('hidden'); } return; }\r\n+    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json();\r\n+    if (!cliSug) return;\r\n+    cliSug.innerHTML = list.map(u => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n+        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n+      </li>`).join('');\r\n+    cliSug.classList.remove('hidden');\r\n+    cliSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', async () => {\r\n+        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n+        if (cliInput) cliInput.value = li.dataset.nome;\r\n+        cliSug.classList.add('hidden');\r\n+        // Auto load pets for this client\r\n+        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n+        const pets = await resp.json();\r\n+        if (petSelect) {\r\n+          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+        }\r\n+      });\r\n     });\r\n+  }\r\n \r\n-    const full = await Appointment.findById(appt._id)\r\n-      .select('_id store cliente pet servico profissional scheduledAt valor pago')\r\n-      .populate('pet', 'nome')\r\n-      .populate('servico', 'nome')\r\n-      .populate('profissional', 'nomeCompleto nomeContato razaoSocial')\r\n-      .lean();\r\n-\r\n-    res.status(201).json({\r\n-      _id: full._id,\r\n-      h: new Date(full.scheduledAt).toISOString(),\r\n-      valor: full.valor,\r\n-      pago: !!full.pago,\r\n-      pet: full.pet ? full.pet.nome : '—',\r\n-      servico: full.servico ? full.servico.nome : '—',\r\n-      profissional: full.profissional ? (full.profissional.nomeCompleto || full.profissional.nomeContato || full.profissional.razaoSocial) : '—',\r\n-      profissionalId: full.profissional?._id || null\r\n+  // Serviço search\r\n+  async function searchServicos(term) {\r\n+    if (!term || term.length < 2) { if (servSug){ servSug.innerHTML=''; servSug.classList.add('hidden'); } return; }\r\n+    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json();\r\n+    if (!servSug) return;\r\n+    servSug.innerHTML = list.map(s => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor || 0}\">\r\n+        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${(s.grupo && s.grupo.nome) ? s.grupo.nome : ''}</div>\r\n+      </li>`).join('');\r\n+    servSug.classList.remove('hidden');\r\n+    servSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', () => {\r\n+        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n+        if (servInput) servInput.value = state.selectedServico.nome;\r\n+        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n+        servSug.classList.add('hidden');\r\n+      });\r\n     });\r\n-  } catch (e) {\r\n-    console.error('POST /func/agendamentos', e);\r\n-    res.status(500).json({ message: 'Erro ao criar agendamento' });\r\n   }\r\n-});\r\n \r\n-module.exports = router;\r\n+  async function saveAgendamento() {\r\n+    try {\r\n+      const clienteId = state.selectedCliente?._id;\r\n+      const petId = petSelect?.value;\r\n+      const servicoId = state.selectedServico?._id;\r\n+      const profissionalId = profSelect?.value;\r\n+      const hora = horaInput?.value;\r\n+      const date = dateInput.value || todayStr();\r\n+\r\n+      if (!(clienteId && petId && servicoId && profissionalId && hora)) {\r\n+        alert('Preencha cliente, pet, serviço, profissional e hora.');\r\n+        return;\r\n+      }\r\n+\r\n+      const scheduledAt = parseTimeToDate(date, hora).toISOString();\r\n+\r\n+      const body = {\r\n+        storeId: state.selectedStoreId,\r\n+        clienteId,\r\n+        petId,\r\n+        servicoId,\r\n+        profissionalId,\r\n+        scheduledAt,\r\n+        valor: Number(valorInput?.value || 0),\r\n+        pago: false\r\n+      };\r\n+\r\n+      const resp = await api('/func/agendamentos', {\r\n+        method: 'POST',\r\n+        body: JSON.stringify(body)\r\n+      });\r\n+\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(()=>({}));\r\n+        throw new Error(err.message || 'Erro ao salvar');\r\n+      }\r\n+\r\n+      const created = await resp.json();\r\n+      state.agendamentos.push(created);\r\n+      closeAddModal();\r\n+      renderGrid();\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+      alert(e.message || 'Erro ao salvar');\r\n+    }\r\n+  }\r\n+\r\n+  // Events\r\n+  addBtn?.addEventListener('click', openAddModal);\r\n+  modalClose?.addEventListener('click', closeAddModal);\r\n+  modalCancel?.addEventListener('click', closeAddModal);\r\n+  modalSave?.addEventListener('click', saveAgendamento);\r\n+\r\n+  cliInput?.addEventListener('input', debounce((e)=>searchClientes(e.target.value), 300));\r\n+  servInput?.addEventListener('input', debounce((e)=>searchServicos(e.target.value), 300));\r\n+\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  });\r\n+\r\n+  // Boot\r\n+  (async function init() {\r\n+    if (!dateInput.value) dateInput.value = todayStr();\r\n+    await loadStores();\r\n+    // Define selected store if the select had a value pre-set\r\n+    if (!state.selectedStoreId && storeSelect?.value) state.selectedStoreId = storeSelect.value;\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  })();\r\n+})();\r\n"
                },
                {
                    "date": 1757353837110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// SiteEoBichoTW/scripts/funcionarios/banho-e-tosa.js\r\n (function () {\r\n   const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n   function api(url, opts={}) {\r\n     return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n"
                },
                {
                    "date": 1757354053825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,8 +174,124 @@\n       col.appendChild(card);\r\n     }\r\n   }\r\n \r\n+  // 1) Agenda em GRID: primeira coluna = Hora; demais = profissionais da empresa\r\n+  async function renderAgenda() {\r\n+    const date = getDateFromInput();\r\n+    dateLabel.textContent = `(${formatPtBr(date)})`;\r\n+    updateStoreLabel();\r\n+\r\n+    if (!agendaList) return;\r\n+\r\n+    // Carrega esteticistas da empresa selecionada (colunas)\r\n+    let profissionais = [];\r\n+    try {\r\n+      const resPro = await fetch(API.esteticistas(selectedStoreId), { headers: headers() });\r\n+      if (resPro.ok) profissionais = await resPro.json() || [];\r\n+    } catch (e) {\r\n+      console.error('Falha ao carregar profissionais', e);\r\n+    }\r\n+\r\n+    // Monta grade 00:00 - 23:00\r\n+    const hours = Array.from({ length: 24 }, (_, h) => `${String(h).padStart(2,'0')}:00`);\r\n+    agendaList.innerHTML = '';\r\n+\r\n+    // Cabeçalho\r\n+    const header = document.createElement('div');\r\n+    header.className = 'sticky top-0 bg-white z-10 border-b text-sm font-medium';\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `80px repeat(${Math.max(profissionais.length,1)}, minmax(200px, 1fr))`;\r\n+\r\n+    const hHora = document.createElement('div');\r\n+    hHora.className = 'px-3 py-2 text-gray-600';\r\n+    hHora.textContent = 'Hora';\r\n+    header.appendChild(hHora);\r\n+\r\n+    profissionais.forEach(p => {\r\n+      const cell = document.createElement('div');\r\n+      cell.className = 'px-3 py-2 text-gray-800';\r\n+      cell.textContent = p.nome;\r\n+      header.appendChild(cell);\r\n+    });\r\n+\r\n+    agendaList.appendChild(header);\r\n+\r\n+    // Corpo\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `80px repeat(${Math.max(profissionais.length,1)}, minmax(200px, 1fr))`;\r\n+    agendaList.appendChild(body);\r\n+\r\n+    hours.forEach(hh => {\r\n+      // Coluna de hora\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n+      timeCell.textContent = hh;\r\n+      body.appendChild(timeCell);\r\n+\r\n+      if (profissionais.length === 0) {\r\n+        // Fallback: sem profissionais -> 1 coluna “geral”\r\n+        const col = document.createElement('div');\r\n+        col.className = 'px-2 py-2 border-b min-h-[56px]';\r\n+        col.dataset.profId = 'sem-prof';\r\n+        col.dataset.hh = hh;\r\n+        body.appendChild(col);\r\n+      } else {\r\n+        profissionais.forEach(p => {\r\n+          const col = document.createElement('div');\r\n+          col.className = 'px-2 py-2 border-b min-h-[56px]';\r\n+          col.dataset.profId = p._id;\r\n+          col.dataset.hh = hh;\r\n+          body.appendChild(col);\r\n+        });\r\n+      }\r\n+    });\r\n+\r\n+    // Carrega agendamentos e posiciona por coluna\r\n+    const dateStr = dateInput.value; // YYYY-MM-DD\r\n+    await loadAppointments(dateStr, selectedStoreId, profissionais, body);\r\n+  }\r\n+\r\n+  // 2) Buscar agendamentos e jogar o card na célula do profissional/hora\r\n+  async function loadAppointments(dateStr, storeId, profissionais, bodyEl) {\r\n+    try {\r\n+      const res = await fetch(API.listarAgendamentos(dateStr, storeId), { headers: headers() });\r\n+      if (!res.ok) throw new Error('Falha ao carregar agendamentos');\r\n+      const items = await res.json();\r\n+\r\n+      // Mapa por nome (fallback se backend não enviar profissionalId)\r\n+      const byName = new Map((profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n+\r\n+      (items || []).forEach(a => {\r\n+        const d = new Date(a.h);\r\n+        const hh = `${String(d.getHours()).padStart(2, '0')}:00`;\r\n+        const mm = String(d.getMinutes()).padStart(2, '0');\r\n+\r\n+        // Preferir ID vindo do backend; senão, tentar casar pelo nome\r\n+        let profId = a.profissionalId || null;\r\n+        if (!profId && a.profissional) {\r\n+          const key = String(a.profissional).trim().toLowerCase();\r\n+          profId = byName.get(key) || null;\r\n+        }\r\n+        if (!profId) profId = 'sem-prof'; // última saída\r\n+\r\n+        const slot = bodyEl?.querySelector(`div[data-prof-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+        if (!slot) return;\r\n+\r\n+        slot.appendChild(buildAppointmentCard({\r\n+          pet: a.pet,\r\n+          servico: a.servico,\r\n+          valor: a.valor,\r\n+          pago: a.pago,\r\n+          hora: `${hh.slice(0,2)}:${mm}`\r\n+        }));\r\n+      });\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+    }\r\n+  }\r\n+\r\n   // Modal behavior\r\n   function openAddModal() {\r\n     if (!modal) return;\r\n     // Reset\r\n"
                },
                {
                    "date": 1757354432116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n+// SiteEoBichoTW/scripts/funcionarios/banho-e-tosa.js\r\n (function () {\r\n   const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n-  function api(url, opts={}) {\r\n+  function api(url, opts = {}) {\r\n     return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n       ...opts,\r\n       headers: {\r\n         'Content-Type': 'application/json',\r\n@@ -16,11 +17,11 @@\n   const dateInput = document.getElementById('agenda-date');\r\n   const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n   const addBtn = document.getElementById('add-service-btn');\r\n   const storeSelect = document.getElementById('agenda-store');\r\n-  const storeLabelVisible  = document.getElementById('agenda-store-label-visible');\r\n+  const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n \r\n-  // Modal elements\r\n+  // Modal\r\n   const modal = document.getElementById('modal-add-servico');\r\n   const modalClose = document.getElementById('modal-add-close');\r\n   const modalCancel = document.getElementById('modal-add-cancel');\r\n   const modalSave = document.getElementById('modal-add-save');\r\n@@ -45,23 +46,22 @@\n   };\r\n \r\n   // Helpers\r\n   function todayStr() {\r\n-    const tz = new Date();\r\n-    return tz.toISOString().slice(0, 10);\r\n+    return new Date().toISOString().slice(0, 10);\r\n   }\r\n-  function pad(n){ return n<10? '0'+n : ''+n; }\r\n+  function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n   function parseTimeToDate(dateISO, hhmm) {\r\n-    const [h,m] = (hhmm || '00:00').split(':').map(x=>parseInt(x,10));\r\n+    const [h, m] = (hhmm || '00:00').split(':').map(x => parseInt(x, 10));\r\n     const d = new Date(dateISO);\r\n     d.setHours(h, m, 0, 0);\r\n     return d;\r\n   }\r\n-  function money(v){ return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n-  function clearChildren(el){ while(el && el.firstChild) el.removeChild(el.firstChild); }\r\n-  function debounce(fn, delay=250){ let t; return (...args)=>{ clearTimeout(t); t=setTimeout(()=>fn(...args), delay); }; }\r\n+  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n+  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n+  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n \r\n-  // Load stores\r\n+  // Stores\r\n   async function loadStores() {\r\n     const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n     const list = await resp.json();\r\n     state.stores = Array.isArray(list) ? list : [];\r\n@@ -69,92 +69,106 @@\n     if (!state.selectedStoreId && state.stores[0]) {\r\n       state.selectedStoreId = state.stores[0]._id;\r\n       storeSelect.value = state.selectedStoreId;\r\n     }\r\n+    updateStoreLabel();\r\n+  }\r\n+  function updateStoreLabel() {\r\n     const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n-    if (document.getElementById('agenda-store-label-visible')) {\r\n-      document.getElementById('agenda-store-label-visible').textContent = s ? s.nome : '—';\r\n-    }\r\n+    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n   }\r\n \r\n-  // Load professionals (esteticistas) limited to the selected store\r\n+  // Profissionais da loja\r\n   async function loadProfissionais() {\r\n     if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n     const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n     const list = await resp.json();\r\n-    state.profissionais = list || [];\r\n-    // Fill modal select\r\n+    state.profissionais = Array.isArray(list) ? list : [];\r\n     if (profSelect) {\r\n       profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n     }\r\n   }\r\n \r\n-  // Load appointments for the day/store\r\n+  // Agendamentos do dia/loja\r\n   async function loadAgendamentos() {\r\n     const date = dateInput.value || todayStr();\r\n     const resp = await api(`/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`);\r\n     state.agendamentos = await resp.json();\r\n   }\r\n \r\n-  // Render grid with columns per professional\r\n+  // Grade em colunas por profissional\r\n   function renderGrid() {\r\n     if (!agendaList) return;\r\n     const date = dateInput.value || todayStr();\r\n-    if (dateLabelVisible) {\r\n-      dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-    }\r\n+    if (dateLabelVisible) dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n \r\n-    // Hours rows (07:00 - 20:00)\r\n+    // 00:00 -> 23:00\r\n     const hours = [];\r\n-    for (let h = 7; h <= 20; h++) hours.push(`${pad(h)}:00`);\r\n+    for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n-    // Build header (first empty cell + professional names)\r\n+    // Cabeçalho\r\n+    clearChildren(agendaList);\r\n     const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n     const colCount = cols.length;\r\n \r\n-    // Grid container\r\n-    clearChildren(agendaList);\r\n-\r\n     const header = document.createElement('div');\r\n-    header.className = `grid sticky top-0 bg-white z-10 border-b text-sm font-medium`;\r\n+    header.className = 'grid sticky top-0 bg-white z-10 border-b text-sm font-medium';\r\n     header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n+    header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n     cols.forEach((label, idx) => {\r\n       const cell = document.createElement('div');\r\n-      cell.className = 'px-3 py-2 ' + (idx===0 ? 'text-gray-600' : 'text-gray-800');\r\n+      cell.className = 'px-3 py-2 ' + (idx === 0 ? 'text-gray-600' : 'text-gray-800');\r\n       cell.textContent = label;\r\n       header.appendChild(cell);\r\n     });\r\n     agendaList.appendChild(header);\r\n \r\n-    // Body\r\n+    // Corpo\r\n     const body = document.createElement('div');\r\n     body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `120px repeat(${colCount-1}, minmax(220px, 1fr))`;\r\n+    body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n     agendaList.appendChild(body);\r\n \r\n     hours.forEach(hh => {\r\n-      // Time column\r\n       const timeCell = document.createElement('div');\r\n       timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n       timeCell.textContent = hh;\r\n       body.appendChild(timeCell);\r\n \r\n-      // One cell per professional\r\n       state.profissionais.forEach(p => {\r\n         const col = document.createElement('div');\r\n         col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n         col.dataset.profissionalId = p._id;\r\n         col.dataset.hh = hh;\r\n         body.appendChild(col);\r\n       });\r\n+\r\n+      // Se não houver profissionais, criamos uma coluna “vazia” para não quebrar layout\r\n+      if (state.profissionais.length === 0) {\r\n+        const col = document.createElement('div');\r\n+        col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n+        col.dataset.profissionalId = 'sem-prof';\r\n+        col.dataset.hh = hh;\r\n+        body.appendChild(col);\r\n+      }\r\n     });\r\n \r\n-    // Place cards\r\n-    for (const a of state.agendamentos) {\r\n+    // Fallback por nome (caso o backend não envie profissionalId)\r\n+    const byName = new Map(state.profissionais.map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n+\r\n+    // Posiciona cards\r\n+    for (const a of state.agendamentos || []) {\r\n       const d = new Date(a.h);\r\n       const hh = `${pad(d.getHours())}:00`;\r\n-      const col = body.querySelector(`div[data-profissional-id=\"${a.profissionalId}\"][data-hh=\"${hh}\"]`);\r\n+\r\n+      let profId = a.profissionalId || null;\r\n+      if (!profId && a.profissional) {\r\n+        const key = String(a.profissional).trim().toLowerCase();\r\n+        profId = byName.get(key) || null;\r\n+      }\r\n+      if (!profId && state.profissionais.length === 0) profId = 'sem-prof';\r\n+\r\n+      const col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n       if (!col) continue;\r\n \r\n       const card = document.createElement('div');\r\n       card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2';\r\n@@ -174,139 +188,21 @@\n       col.appendChild(card);\r\n     }\r\n   }\r\n \r\n-  // 1) Agenda em GRID: primeira coluna = Hora; demais = profissionais da empresa\r\n-  async function renderAgenda() {\r\n-    const date = getDateFromInput();\r\n-    dateLabel.textContent = `(${formatPtBr(date)})`;\r\n-    updateStoreLabel();\r\n-\r\n-    if (!agendaList) return;\r\n-\r\n-    // Carrega esteticistas da empresa selecionada (colunas)\r\n-    let profissionais = [];\r\n-    try {\r\n-      const resPro = await fetch(API.esteticistas(selectedStoreId), { headers: headers() });\r\n-      if (resPro.ok) profissionais = await resPro.json() || [];\r\n-    } catch (e) {\r\n-      console.error('Falha ao carregar profissionais', e);\r\n-    }\r\n-\r\n-    // Monta grade 00:00 - 23:00\r\n-    const hours = Array.from({ length: 24 }, (_, h) => `${String(h).padStart(2,'0')}:00`);\r\n-    agendaList.innerHTML = '';\r\n-\r\n-    // Cabeçalho\r\n-    const header = document.createElement('div');\r\n-    header.className = 'sticky top-0 bg-white z-10 border-b text-sm font-medium';\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `80px repeat(${Math.max(profissionais.length,1)}, minmax(200px, 1fr))`;\r\n-\r\n-    const hHora = document.createElement('div');\r\n-    hHora.className = 'px-3 py-2 text-gray-600';\r\n-    hHora.textContent = 'Hora';\r\n-    header.appendChild(hHora);\r\n-\r\n-    profissionais.forEach(p => {\r\n-      const cell = document.createElement('div');\r\n-      cell.className = 'px-3 py-2 text-gray-800';\r\n-      cell.textContent = p.nome;\r\n-      header.appendChild(cell);\r\n-    });\r\n-\r\n-    agendaList.appendChild(header);\r\n-\r\n-    // Corpo\r\n-    const body = document.createElement('div');\r\n-    body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `80px repeat(${Math.max(profissionais.length,1)}, minmax(200px, 1fr))`;\r\n-    agendaList.appendChild(body);\r\n-\r\n-    hours.forEach(hh => {\r\n-      // Coluna de hora\r\n-      const timeCell = document.createElement('div');\r\n-      timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n-      timeCell.textContent = hh;\r\n-      body.appendChild(timeCell);\r\n-\r\n-      if (profissionais.length === 0) {\r\n-        // Fallback: sem profissionais -> 1 coluna “geral”\r\n-        const col = document.createElement('div');\r\n-        col.className = 'px-2 py-2 border-b min-h-[56px]';\r\n-        col.dataset.profId = 'sem-prof';\r\n-        col.dataset.hh = hh;\r\n-        body.appendChild(col);\r\n-      } else {\r\n-        profissionais.forEach(p => {\r\n-          const col = document.createElement('div');\r\n-          col.className = 'px-2 py-2 border-b min-h-[56px]';\r\n-          col.dataset.profId = p._id;\r\n-          col.dataset.hh = hh;\r\n-          body.appendChild(col);\r\n-        });\r\n-      }\r\n-    });\r\n-\r\n-    // Carrega agendamentos e posiciona por coluna\r\n-    const dateStr = dateInput.value; // YYYY-MM-DD\r\n-    await loadAppointments(dateStr, selectedStoreId, profissionais, body);\r\n-  }\r\n-\r\n-  // 2) Buscar agendamentos e jogar o card na célula do profissional/hora\r\n-  async function loadAppointments(dateStr, storeId, profissionais, bodyEl) {\r\n-    try {\r\n-      const res = await fetch(API.listarAgendamentos(dateStr, storeId), { headers: headers() });\r\n-      if (!res.ok) throw new Error('Falha ao carregar agendamentos');\r\n-      const items = await res.json();\r\n-\r\n-      // Mapa por nome (fallback se backend não enviar profissionalId)\r\n-      const byName = new Map((profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n-\r\n-      (items || []).forEach(a => {\r\n-        const d = new Date(a.h);\r\n-        const hh = `${String(d.getHours()).padStart(2, '0')}:00`;\r\n-        const mm = String(d.getMinutes()).padStart(2, '0');\r\n-\r\n-        // Preferir ID vindo do backend; senão, tentar casar pelo nome\r\n-        let profId = a.profissionalId || null;\r\n-        if (!profId && a.profissional) {\r\n-          const key = String(a.profissional).trim().toLowerCase();\r\n-          profId = byName.get(key) || null;\r\n-        }\r\n-        if (!profId) profId = 'sem-prof'; // última saída\r\n-\r\n-        const slot = bodyEl?.querySelector(`div[data-prof-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n-        if (!slot) return;\r\n-\r\n-        slot.appendChild(buildAppointmentCard({\r\n-          pet: a.pet,\r\n-          servico: a.servico,\r\n-          valor: a.valor,\r\n-          pago: a.pago,\r\n-          hora: `${hh.slice(0,2)}:${mm}`\r\n-        }));\r\n-      });\r\n-    } catch (e) {\r\n-      console.error(e);\r\n-    }\r\n-  }\r\n-\r\n-  // Modal behavior\r\n+  // Modal\r\n   function openAddModal() {\r\n-    if (!modal) return;\r\n-    // Reset\r\n+    if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n     state.selectedCliente = null;\r\n     state.selectedServico = null;\r\n     if (cliInput) { cliInput.value = ''; }\r\n     if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n     if (petSelect) { petSelect.innerHTML = ''; }\r\n     if (servInput) { servInput.value = ''; }\r\n     if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n     if (valorInput) { valorInput.value = ''; }\r\n-    if (horaInput) { horaInput.value = new Date().toTimeString().slice(0,5); }\r\n+    if (horaInput) { horaInput.value = new Date().toTimeString().slice(0, 5); }\r\n \r\n-    // Load professionals (already loaded globally, but ensure select is filled)\r\n     if (profSelect) {\r\n       profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n     }\r\n \r\n@@ -319,11 +215,11 @@\n     modal.classList.add('hidden');\r\n     modal.classList.remove('flex');\r\n   }\r\n \r\n-  // Cliente search\r\n+  // Busca cliente\r\n   async function searchClientes(term) {\r\n-    if (!term || term.length < 2) { if (cliSug){ cliSug.innerHTML=''; cliSug.classList.add('hidden'); } return; }\r\n+    if (!term || term.length < 2) { if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); } return; }\r\n     const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n     const list = await resp.json();\r\n     if (!cliSug) return;\r\n     cliSug.innerHTML = list.map(u => `\r\n@@ -336,9 +232,8 @@\n       li.addEventListener('click', async () => {\r\n         state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n         if (cliInput) cliInput.value = li.dataset.nome;\r\n         cliSug.classList.add('hidden');\r\n-        // Auto load pets for this client\r\n         const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n         const pets = await resp.json();\r\n         if (petSelect) {\r\n           petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n@@ -346,11 +241,11 @@\n       });\r\n     });\r\n   }\r\n \r\n-  // Serviço search\r\n+  // Busca serviço\r\n   async function searchServicos(term) {\r\n-    if (!term || term.length < 2) { if (servSug){ servSug.innerHTML=''; servSug.classList.add('hidden'); } return; }\r\n+    if (!term || term.length < 2) { if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); } return; }\r\n     const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n     const list = await resp.json();\r\n     if (!servSug) return;\r\n     servSug.innerHTML = list.map(s => `\r\n@@ -368,8 +263,9 @@\n       });\r\n     });\r\n   }\r\n \r\n+  // Salvar agendamento\r\n   async function saveAgendamento() {\r\n     try {\r\n       const clienteId = state.selectedCliente?._id;\r\n       const petId = petSelect?.value;\r\n@@ -401,9 +297,9 @@\n         body: JSON.stringify(body)\r\n       });\r\n \r\n       if (!resp.ok) {\r\n-        const err = await resp.json().catch(()=>({}));\r\n+        const err = await resp.json().catch(() => ({}));\r\n         throw new Error(err.message || 'Erro ao salvar');\r\n       }\r\n \r\n       const created = await resp.json();\r\n@@ -421,13 +317,14 @@\n   modalClose?.addEventListener('click', closeAddModal);\r\n   modalCancel?.addEventListener('click', closeAddModal);\r\n   modalSave?.addEventListener('click', saveAgendamento);\r\n \r\n-  cliInput?.addEventListener('input', debounce((e)=>searchClientes(e.target.value), 300));\r\n-  servInput?.addEventListener('input', debounce((e)=>searchServicos(e.target.value), 300));\r\n+  cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n+  servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n \r\n   storeSelect?.addEventListener('change', async () => {\r\n     state.selectedStoreId = storeSelect.value;\r\n+    updateStoreLabel();\r\n     await loadProfissionais();\r\n     await loadAgendamentos();\r\n     renderGrid();\r\n   });\r\n@@ -440,9 +337,8 @@\n   // Boot\r\n   (async function init() {\r\n     if (!dateInput.value) dateInput.value = todayStr();\r\n     await loadStores();\r\n-    // Define selected store if the select had a value pre-set\r\n     if (!state.selectedStoreId && storeSelect?.value) state.selectedStoreId = storeSelect.value;\r\n     await loadProfissionais();\r\n     await loadAgendamentos();\r\n     renderGrid();\r\n"
                },
                {
                    "date": 1757355313248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,37 +133,50 @@\n       timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n       timeCell.textContent = hh;\r\n       body.appendChild(timeCell);\r\n \r\n-      state.profissionais.forEach(p => {\r\n-        const col = document.createElement('div');\r\n-        col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n-        col.dataset.profissionalId = p._id;\r\n-        col.dataset.hh = hh;\r\n-        body.appendChild(col);\r\n-      });\r\n-\r\n-      // Se não houver profissionais, criamos uma coluna “vazia” para não quebrar layout\r\n+      // Colunas por profissional (ou 1 coluna fallback)\r\n       if (state.profissionais.length === 0) {\r\n         const col = document.createElement('div');\r\n         col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n         col.dataset.profissionalId = 'sem-prof';\r\n         col.dataset.hh = hh;\r\n         body.appendChild(col);\r\n+      } else {\r\n+        state.profissionais.forEach(p => {\r\n+          const col = document.createElement('div');\r\n+          col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n+          col.dataset.profissionalId = p._id;\r\n+          col.dataset.hh = hh;\r\n+          body.appendChild(col);\r\n+        });\r\n       }\r\n     });\r\n \r\n-    // Fallback por nome (caso o backend não envie profissionalId)\r\n-    const byName = new Map(state.profissionais.map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n+    // Mapa nome→ID para fallback\r\n+    const byName = new Map(\r\n+      state.profissionais.map(p => [String(p.nome || '').trim().toLowerCase(), p._id])\r\n+    );\r\n \r\n-    // Posiciona cards\r\n+    // Posiciona cards (aceita profissionalId e também profissional como OBJETO ou STRING)\r\n     for (const a of state.agendamentos || []) {\r\n       const d = new Date(a.h);\r\n       const hh = `${pad(d.getHours())}:00`;\r\n \r\n       let profId = a.profissionalId || null;\r\n-      if (!profId && a.profissional) {\r\n-        const key = String(a.profissional).trim().toLowerCase();\r\n+      if (!profId) {\r\n+        let nameCandidate = '';\r\n+        if (typeof a.profissional === 'string') {\r\n+          nameCandidate = a.profissional;\r\n+        } else if (a.profissional && typeof a.profissional === 'object') {\r\n+          nameCandidate =\r\n+            a.profissional.nomeCompleto ||\r\n+            a.profissional.nomeContato ||\r\n+            a.profissional.razaoSocial ||\r\n+            a.profissional.nome ||\r\n+            '';\r\n+        }\r\n+        const key = String(nameCandidate).trim().toLowerCase();\r\n         profId = byName.get(key) || null;\r\n       }\r\n       if (!profId && state.profissionais.length === 0) profId = 'sem-prof';\r\n \r\n@@ -181,9 +194,8 @@\n       const dollar = document.createElement('span');\r\n       dollar.textContent = '$';\r\n       if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n       right.appendChild(dollar);\r\n-\r\n       card.appendChild(left);\r\n       card.appendChild(right);\r\n       col.appendChild(card);\r\n     }\r\n"
                },
                {
                    "date": 1757356410413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,383 @@\n+SiteEoBichoTW/scripts/funcionarios/banho-e-tosa.js\r\n+// SiteEoBichoTW/scripts/funcionarios/banho-e-tosa.js\r\n+(function () {\r\n+  // Auth header helper\r\n+  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n+  function api(url, opts = {}) {\r\n+    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n+      ...opts,\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        ...(opts.headers || {}),\r\n+        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Elements\r\n+  const agendaList = document.getElementById('agenda-list');\r\n+  const dateInput = document.getElementById('agenda-date');\r\n+  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n+  const addBtn = document.getElementById('add-service-btn');\r\n+  const storeSelect = document.getElementById('agenda-store');\r\n+  const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n+\r\n+  // Modal\r\n+  const modal = document.getElementById('modal-add-servico');\r\n+  const modalClose = document.getElementById('modal-add-close');\r\n+  const modalCancel = document.getElementById('modal-add-cancel');\r\n+  const modalSave = document.getElementById('modal-add-save');\r\n+\r\n+  const cliInput = document.getElementById('add-cli-input');\r\n+  const cliSug = document.getElementById('add-cli-sug');\r\n+  const petSelect = document.getElementById('add-pet-select');\r\n+  const servInput = document.getElementById('add-serv-input');\r\n+  const servSug = document.getElementById('add-serv-sug');\r\n+  const valorInput = document.getElementById('add-valor');\r\n+  const horaInput = document.getElementById('add-hora');\r\n+  const profSelect = document.getElementById('add-prof-select');\r\n+\r\n+  // State\r\n+  const state = {\r\n+    stores: [],\r\n+    profissionais: [],\r\n+    agendamentos: [],\r\n+    selectedStoreId: null,\r\n+    selectedCliente: null,\r\n+    selectedServico: null,\r\n+  };\r\n+\r\n+  // Helpers\r\n+  function todayStr() {\r\n+    // ISO date (UTC) -> string YYYY-MM-DD\r\n+    return new Date().toISOString().slice(0, 10);\r\n+  }\r\n+  function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n+  function parseTimeToDate(dateISO, hhmm) {\r\n+    const [h, m] = (hhmm || '00:00').split(':').map(x => parseInt(x, 10));\r\n+    const d = new Date(dateISO);\r\n+    // setHours uses local time\r\n+    d.setHours(h, m, 0, 0);\r\n+    return d;\r\n+  }\r\n+  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n+  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n+  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n+\r\n+  // Stores\r\n+  async function loadStores() {\r\n+    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.stores = Array.isArray(list) ? list : [];\r\n+    if (storeSelect) {\r\n+      storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+    }\r\n+    if (!state.selectedStoreId && state.stores[0]) {\r\n+      state.selectedStoreId = state.stores[0]._id;\r\n+      if (storeSelect) storeSelect.value = state.selectedStoreId;\r\n+    }\r\n+    updateStoreLabel();\r\n+  }\r\n+  function updateStoreLabel() {\r\n+    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n+    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n+    const vis = document.getElementById('agenda-store-label-visible');\r\n+    if (vis) vis.textContent = s ? s.nome : '—';\r\n+  }\r\n+\r\n+  // Profissionais (colunas)\r\n+  async function loadProfissionais() {\r\n+    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n+    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.profissionais = Array.isArray(list) ? list : [];\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+    }\r\n+  }\r\n+\r\n+  // Agendamentos do dia/loja\r\n+  async function loadAgendamentos() {\r\n+    const date = dateInput?.value || todayStr();\r\n+    const resp = await api(`/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`);\r\n+    state.agendamentos = await resp.json().catch(() => []);\r\n+  }\r\n+\r\n+  // Grade em colunas por profissional (+ coluna fallback)\r\n+  function renderGrid() {\r\n+    if (!agendaList) return;\r\n+\r\n+    const date = dateInput?.value || todayStr();\r\n+    if (dateLabelVisible) {\r\n+      dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+    }\r\n+\r\n+    // 00:00 -> 23:00\r\n+    const hours = [];\r\n+    for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+\r\n+    // Cabeçalho\r\n+    clearChildren(agendaList);\r\n+    const cols = ['Hora', ...state.profissionais.map(p => p.nome), 'Outros'];\r\n+    const colCount = cols.length;\r\n+\r\n+    const header = document.createElement('div');\r\n+    header.className = 'grid sticky top-0 bg-white z-10 border-b text-sm font-medium';\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n+    cols.forEach((label, idx) => {\r\n+      const cell = document.createElement('div');\r\n+      cell.className = 'px-3 py-2 ' + (idx === 0 ? 'text-gray-600' : 'text-gray-800');\r\n+      cell.textContent = label;\r\n+      header.appendChild(cell);\r\n+    });\r\n+    agendaList.appendChild(header);\r\n+\r\n+    // Corpo\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n+    agendaList.appendChild(body);\r\n+\r\n+    hours.forEach(hh => {\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n+      timeCell.textContent = hh;\r\n+      body.appendChild(timeCell);\r\n+\r\n+      // Colunas por profissional\r\n+      state.profissionais.forEach(p => {\r\n+        const col = document.createElement('div');\r\n+        col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n+        col.dataset.profissionalId = String(p._id);\r\n+        col.dataset.hh = hh;\r\n+        body.appendChild(col);\r\n+      });\r\n+\r\n+      // Coluna fallback (sem-prof) — sempre existe\r\n+      const colFallback = document.createElement('div');\r\n+      colFallback.className = 'px-2 py-2 border-b min-h-[64px]';\r\n+      colFallback.dataset.profissionalId = 'sem-prof';\r\n+      colFallback.dataset.hh = hh;\r\n+      body.appendChild(colFallback);\r\n+    });\r\n+\r\n+    // Mapa nome→ID para fallback por nome\r\n+    const byName = new Map(\r\n+      state.profissionais.map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n+    );\r\n+\r\n+    // Posiciona cards\r\n+    for (const a of state.agendamentos || []) {\r\n+      const d = new Date(a.h);\r\n+      const hh = `${pad(d.getHours())}:00`;\r\n+\r\n+      // 1) tenta por id\r\n+      let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+\r\n+      // 2) tenta por nome\r\n+      if (!profId) {\r\n+        let nameCandidate = '';\r\n+        if (typeof a.profissional === 'string') {\r\n+          nameCandidate = a.profissional;\r\n+        } else if (a.profissional && typeof a.profissional === 'object') {\r\n+          nameCandidate =\r\n+            a.profissional.nomeCompleto ||\r\n+            a.profissional.nomeContato ||\r\n+            a.profissional.razaoSocial ||\r\n+            a.profissional.nome ||\r\n+            '';\r\n+        }\r\n+        const key = String(nameCandidate).trim().toLowerCase();\r\n+        profId = byName.get(key) || null;\r\n+      }\r\n+\r\n+      // 3) fallback garantido\r\n+      if (!profId || !body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`)) {\r\n+        profId = 'sem-prof';\r\n+      }\r\n+\r\n+      const col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+      if (!col) continue;\r\n+\r\n+      const card = document.createElement('div');\r\n+      card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2';\r\n+      const left = document.createElement('div');\r\n+      left.innerHTML = `\r\n+        <div class=\"font-medium text-gray-900\">${a.pet}</div>\r\n+        <div class=\"text-gray-600\">${a.servico}</div>\r\n+        <div class=\"text-gray-600\">${money(a.valor)}</div>\r\n+      `;\r\n+      const right = document.createElement('div');\r\n+      right.className = 'text-lg';\r\n+      const dollar = document.createElement('span');\r\n+      dollar.textContent = '$';\r\n+      if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n+      right.appendChild(dollar);\r\n+      card.appendChild(left);\r\n+      card.appendChild(right);\r\n+      col.appendChild(card);\r\n+    }\r\n+  }\r\n+\r\n+  // Modal\r\n+  function openAddModal() {\r\n+    if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n+    state.selectedCliente = null;\r\n+    state.selectedServico = null;\r\n+    if (cliInput) { cliInput.value = ''; }\r\n+    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+    if (servInput) { servInput.value = ''; }\r\n+    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    if (valorInput) { valorInput.value = ''; }\r\n+    const now = new Date();\r\n+    const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n+    if (horaInput) horaInput.value = hh;\r\n+    if (modal) {\r\n+      modal.classList.remove('hidden');\r\n+      modal.classList.add('flex');\r\n+    }\r\n+    cliInput?.focus();\r\n+  }\r\n+  function closeAddModal() {\r\n+    if (!modal) return;\r\n+    modal.classList.add('hidden');\r\n+    modal.classList.remove('flex');\r\n+  }\r\n+\r\n+  // Busca cliente\r\n+  async function searchClientes(term) {\r\n+    if (!term || term.length < 2) {\r\n+      if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+      return;\r\n+    }\r\n+    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    if (!cliSug) return;\r\n+    cliSug.innerHTML = list.map(u => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n+        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n+      </li>`).join('');\r\n+    cliSug.classList.remove('hidden');\r\n+    cliSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', async () => {\r\n+        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n+        if (cliInput) cliInput.value = li.dataset.nome;\r\n+        cliSug.classList.add('hidden');\r\n+        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n+        const pets = await resp.json().catch(() => []);\r\n+        if (petSelect) {\r\n+          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+        }\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  // Busca serviços\r\n+  async function searchServicos(term) {\r\n+    if (!term || term.length < 2) {\r\n+      if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+      return;\r\n+    }\r\n+    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    if (!servSug) return;\r\n+    servSug.innerHTML = list.map(s => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor}\">\r\n+        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${money(s.valor)}</div>\r\n+      </li>`).join('');\r\n+    servSug.classList.remove('hidden');\r\n+    servSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', () => {\r\n+        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n+        if (servInput) servInput.value = state.selectedServico.nome;\r\n+        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n+        servSug.classList.add('hidden');\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  // Salvar agendamento\r\n+  async function saveAgendamento() {\r\n+    try {\r\n+      const clienteId = state.selectedCliente?._id;\r\n+      const petId = petSelect?.value;\r\n+      const servicoId = state.selectedServico?._id;\r\n+      const profissionalId = profSelect?.value;\r\n+      const hora = horaInput?.value;\r\n+      const date = dateInput?.value || todayStr();\r\n+\r\n+      if (!(clienteId && petId && servicoId && profissionalId && hora)) {\r\n+        alert('Preencha cliente, pet, serviço, profissional e hora.');\r\n+        return;\r\n+      }\r\n+\r\n+      const scheduledAt = parseTimeToDate(date, hora).toISOString();\r\n+\r\n+      const body = {\r\n+        storeId: state.selectedStoreId,\r\n+        clienteId,\r\n+        petId,\r\n+        servicoId,\r\n+        profissionalId,\r\n+        scheduledAt,\r\n+        valor: Number(valorInput?.value || 0),\r\n+        pago: false\r\n+      };\r\n+\r\n+      const resp = await api('/func/agendamentos', {\r\n+        method: 'POST',\r\n+        body: JSON.stringify(body)\r\n+      });\r\n+\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(() => ({}));\r\n+        throw new Error(err.message || 'Erro ao salvar');\r\n+      }\r\n+\r\n+      // Depois de criar, recarrega do servidor para evitar divergências\r\n+      await loadAgendamentos();\r\n+      closeAddModal();\r\n+      renderGrid();\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+      alert(e.message || 'Erro ao salvar');\r\n+    }\r\n+  }\r\n+\r\n+  // Events\r\n+  addBtn?.addEventListener('click', openAddModal);\r\n+  modalClose?.addEventListener('click', closeAddModal);\r\n+  modalCancel?.addEventListener('click', closeAddModal);\r\n+  modalSave?.addEventListener('click', saveAgendamento);\r\n+\r\n+  cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n+  servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n+\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    updateStoreLabel();\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  });\r\n+\r\n+  // Boot\r\n+  (async function init() {\r\n+    if (!dateInput?.value) dateInput.value = todayStr();\r\n+    await loadStores();\r\n+    if (!state.selectedStoreId && storeSelect?.value) {\r\n+      state.selectedStoreId = storeSelect.value;\r\n+    }\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+  })();\r\n+})();\r\n"
                },
                {
                    "date": 1757356958854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-SiteEoBichoTW/scripts/funcionarios/banho-e-tosa.js\r\n-// SiteEoBichoTW/scripts/funcionarios/banho-e-tosa.js\r\n (function () {\r\n   // Auth header helper\r\n   const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n   function api(url, opts = {}) {\r\n@@ -380,362 +378,4 @@\n     await loadAgendamentos();\r\n     renderGrid();\r\n   })();\r\n })();\r\n-// SiteEoBichoTW/scripts/funcionarios/banho-e-tosa.js\r\n-(function () {\r\n-  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n-  function api(url, opts = {}) {\r\n-    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n-      ...opts,\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        ...(opts.headers || {}),\r\n-        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  // Elements\r\n-  const agendaList = document.getElementById('agenda-list');\r\n-  const dateInput = document.getElementById('agenda-date');\r\n-  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n-  const addBtn = document.getElementById('add-service-btn');\r\n-  const storeSelect = document.getElementById('agenda-store');\r\n-  const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n-\r\n-  // Modal\r\n-  const modal = document.getElementById('modal-add-servico');\r\n-  const modalClose = document.getElementById('modal-add-close');\r\n-  const modalCancel = document.getElementById('modal-add-cancel');\r\n-  const modalSave = document.getElementById('modal-add-save');\r\n-\r\n-  const cliInput = document.getElementById('add-cli-input');\r\n-  const cliSug = document.getElementById('add-cli-sug');\r\n-  const petSelect = document.getElementById('add-pet-select');\r\n-  const servInput = document.getElementById('add-serv-input');\r\n-  const servSug = document.getElementById('add-serv-sug');\r\n-  const valorInput = document.getElementById('add-valor');\r\n-  const horaInput = document.getElementById('add-hora');\r\n-  const profSelect = document.getElementById('add-prof-select');\r\n-\r\n-  // State\r\n-  const state = {\r\n-    stores: [],\r\n-    profissionais: [],\r\n-    agendamentos: [],\r\n-    selectedStoreId: null,\r\n-    selectedCliente: null,\r\n-    selectedServico: null\r\n-  };\r\n-\r\n-  // Helpers\r\n-  function todayStr() {\r\n-    return new Date().toISOString().slice(0, 10);\r\n-  }\r\n-  function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n-  function parseTimeToDate(dateISO, hhmm) {\r\n-    const [h, m] = (hhmm || '00:00').split(':').map(x => parseInt(x, 10));\r\n-    const d = new Date(dateISO);\r\n-    d.setHours(h, m, 0, 0);\r\n-    return d;\r\n-  }\r\n-  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n-  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n-  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n-\r\n-  // Stores\r\n-  async function loadStores() {\r\n-    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n-    const list = await resp.json();\r\n-    state.stores = Array.isArray(list) ? list : [];\r\n-    storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-    if (!state.selectedStoreId && state.stores[0]) {\r\n-      state.selectedStoreId = state.stores[0]._id;\r\n-      storeSelect.value = state.selectedStoreId;\r\n-    }\r\n-    updateStoreLabel();\r\n-  }\r\n-  function updateStoreLabel() {\r\n-    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n-    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n-  }\r\n-\r\n-  // Profissionais da loja\r\n-  async function loadProfissionais() {\r\n-    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n-    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n-    const list = await resp.json();\r\n-    state.profissionais = Array.isArray(list) ? list : [];\r\n-    if (profSelect) {\r\n-      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-    }\r\n-  }\r\n-\r\n-  // Agendamentos do dia/loja\r\n-  async function loadAgendamentos() {\r\n-    const date = dateInput.value || todayStr();\r\n-    const resp = await api(`/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`);\r\n-    state.agendamentos = await resp.json();\r\n-  }\r\n-\r\n-  // Grade em colunas por profissional\r\n-  function renderGrid() {\r\n-    if (!agendaList) return;\r\n-    const date = dateInput.value || todayStr();\r\n-    if (dateLabelVisible) dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-\r\n-    // 00:00 -> 23:00\r\n-    const hours = [];\r\n-    for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n-\r\n-    // Cabeçalho\r\n-    clearChildren(agendaList);\r\n-    const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n-    const colCount = cols.length;\r\n-\r\n-    const header = document.createElement('div');\r\n-    header.className = 'grid sticky top-0 bg-white z-10 border-b text-sm font-medium';\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n-    cols.forEach((label, idx) => {\r\n-      const cell = document.createElement('div');\r\n-      cell.className = 'px-3 py-2 ' + (idx === 0 ? 'text-gray-600' : 'text-gray-800');\r\n-      cell.textContent = label;\r\n-      header.appendChild(cell);\r\n-    });\r\n-    agendaList.appendChild(header);\r\n-\r\n-    // Corpo\r\n-    const body = document.createElement('div');\r\n-    body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n-    agendaList.appendChild(body);\r\n-\r\n-    hours.forEach(hh => {\r\n-      const timeCell = document.createElement('div');\r\n-      timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n-      timeCell.textContent = hh;\r\n-      body.appendChild(timeCell);\r\n-\r\n-      // Colunas por profissional (ou 1 coluna fallback)\r\n-      if (state.profissionais.length === 0) {\r\n-        const col = document.createElement('div');\r\n-        col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n-        col.dataset.profissionalId = 'sem-prof';\r\n-        col.dataset.hh = hh;\r\n-        body.appendChild(col);\r\n-      } else {\r\n-        state.profissionais.forEach(p => {\r\n-          const col = document.createElement('div');\r\n-          col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n-          col.dataset.profissionalId = p._id;\r\n-          col.dataset.hh = hh;\r\n-          body.appendChild(col);\r\n-        });\r\n-      }\r\n-    });\r\n-\r\n-    // Mapa nome→ID para fallback\r\n-    const byName = new Map(\r\n-      state.profissionais.map(p => [String(p.nome || '').trim().toLowerCase(), p._id])\r\n-    );\r\n-\r\n-    // Posiciona cards (aceita profissionalId e também profissional como OBJETO ou STRING)\r\n-    for (const a of state.agendamentos || []) {\r\n-      const d = new Date(a.h);\r\n-      const hh = `${pad(d.getHours())}:00`;\r\n-\r\n-      let profId = a.profissionalId || null;\r\n-      if (!profId) {\r\n-        let nameCandidate = '';\r\n-        if (typeof a.profissional === 'string') {\r\n-          nameCandidate = a.profissional;\r\n-        } else if (a.profissional && typeof a.profissional === 'object') {\r\n-          nameCandidate =\r\n-            a.profissional.nomeCompleto ||\r\n-            a.profissional.nomeContato ||\r\n-            a.profissional.razaoSocial ||\r\n-            a.profissional.nome ||\r\n-            '';\r\n-        }\r\n-        const key = String(nameCandidate).trim().toLowerCase();\r\n-        profId = byName.get(key) || null;\r\n-      }\r\n-      if (!profId && state.profissionais.length === 0) profId = 'sem-prof';\r\n-\r\n-      const col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n-      if (!col) continue;\r\n-\r\n-      const card = document.createElement('div');\r\n-      card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2';\r\n-      const left = document.createElement('div');\r\n-      left.innerHTML = `<div class=\"font-medium text-gray-900\">${a.pet}</div>\r\n-                        <div class=\"text-gray-600\">${a.servico}</div>\r\n-                        <div class=\"text-gray-600\">${money(a.valor)}</div>`;\r\n-      const right = document.createElement('div');\r\n-      right.className = 'text-lg';\r\n-      const dollar = document.createElement('span');\r\n-      dollar.textContent = '$';\r\n-      if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n-      right.appendChild(dollar);\r\n-      card.appendChild(left);\r\n-      card.appendChild(right);\r\n-      col.appendChild(card);\r\n-    }\r\n-  }\r\n-\r\n-  // Modal\r\n-  function openAddModal() {\r\n-    if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n-    state.selectedCliente = null;\r\n-    state.selectedServico = null;\r\n-    if (cliInput) { cliInput.value = ''; }\r\n-    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n-    if (petSelect) { petSelect.innerHTML = ''; }\r\n-    if (servInput) { servInput.value = ''; }\r\n-    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-    if (valorInput) { valorInput.value = ''; }\r\n-    if (horaInput) { horaInput.value = new Date().toTimeString().slice(0, 5); }\r\n-\r\n-    if (profSelect) {\r\n-      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-    }\r\n-\r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n-    cliInput?.focus();\r\n-  }\r\n-  function closeAddModal() {\r\n-    if (!modal) return;\r\n-    modal.classList.add('hidden');\r\n-    modal.classList.remove('flex');\r\n-  }\r\n-\r\n-  // Busca cliente\r\n-  async function searchClientes(term) {\r\n-    if (!term || term.length < 2) { if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); } return; }\r\n-    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json();\r\n-    if (!cliSug) return;\r\n-    cliSug.innerHTML = list.map(u => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n-        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n-      </li>`).join('');\r\n-    cliSug.classList.remove('hidden');\r\n-    cliSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', async () => {\r\n-        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n-        if (cliInput) cliInput.value = li.dataset.nome;\r\n-        cliSug.classList.add('hidden');\r\n-        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n-        const pets = await resp.json();\r\n-        if (petSelect) {\r\n-          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-        }\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  // Busca serviço\r\n-  async function searchServicos(term) {\r\n-    if (!term || term.length < 2) { if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); } return; }\r\n-    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json();\r\n-    if (!servSug) return;\r\n-    servSug.innerHTML = list.map(s => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor || 0}\">\r\n-        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${(s.grupo && s.grupo.nome) ? s.grupo.nome : ''}</div>\r\n-      </li>`).join('');\r\n-    servSug.classList.remove('hidden');\r\n-    servSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', () => {\r\n-        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n-        if (servInput) servInput.value = state.selectedServico.nome;\r\n-        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n-        servSug.classList.add('hidden');\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  // Salvar agendamento\r\n-  async function saveAgendamento() {\r\n-    try {\r\n-      const clienteId = state.selectedCliente?._id;\r\n-      const petId = petSelect?.value;\r\n-      const servicoId = state.selectedServico?._id;\r\n-      const profissionalId = profSelect?.value;\r\n-      const hora = horaInput?.value;\r\n-      const date = dateInput.value || todayStr();\r\n-\r\n-      if (!(clienteId && petId && servicoId && profissionalId && hora)) {\r\n-        alert('Preencha cliente, pet, serviço, profissional e hora.');\r\n-        return;\r\n-      }\r\n-\r\n-      const scheduledAt = parseTimeToDate(date, hora).toISOString();\r\n-\r\n-      const body = {\r\n-        storeId: state.selectedStoreId,\r\n-        clienteId,\r\n-        petId,\r\n-        servicoId,\r\n-        profissionalId,\r\n-        scheduledAt,\r\n-        valor: Number(valorInput?.value || 0),\r\n-        pago: false\r\n-      };\r\n-\r\n-      const resp = await api('/func/agendamentos', {\r\n-        method: 'POST',\r\n-        body: JSON.stringify(body)\r\n-      });\r\n-\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(() => ({}));\r\n-        throw new Error(err.message || 'Erro ao salvar');\r\n-      }\r\n-\r\n-      const created = await resp.json();\r\n-      state.agendamentos.push(created);\r\n-      closeAddModal();\r\n-      renderGrid();\r\n-    } catch (e) {\r\n-      console.error(e);\r\n-      alert(e.message || 'Erro ao salvar');\r\n-    }\r\n-  }\r\n-\r\n-  // Events\r\n-  addBtn?.addEventListener('click', openAddModal);\r\n-  modalClose?.addEventListener('click', closeAddModal);\r\n-  modalCancel?.addEventListener('click', closeAddModal);\r\n-  modalSave?.addEventListener('click', saveAgendamento);\r\n-\r\n-  cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n-  servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n-\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    updateStoreLabel();\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-  });\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-  });\r\n-\r\n-  // Boot\r\n-  (async function init() {\r\n-    if (!dateInput.value) dateInput.value = todayStr();\r\n-    await loadStores();\r\n-    if (!state.selectedStoreId && storeSelect?.value) state.selectedStoreId = storeSelect.value;\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-  })();\r\n-})();\r\n"
                },
                {
                    "date": 1757356983765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n (function () {\r\n-  // Auth header helper\r\n+  // Helper para requisições com token\r\n   const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n   function api(url, opts = {}) {\r\n     return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n       ...opts,\r\n@@ -46,16 +46,14 @@\n   };\r\n \r\n   // Helpers\r\n   function todayStr() {\r\n-    // ISO date (UTC) -> string YYYY-MM-DD\r\n     return new Date().toISOString().slice(0, 10);\r\n   }\r\n   function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n   function parseTimeToDate(dateISO, hhmm) {\r\n     const [h, m] = (hhmm || '00:00').split(':').map(x => parseInt(x, 10));\r\n     const d = new Date(dateISO);\r\n-    // setHours uses local time\r\n     d.setHours(h, m, 0, 0);\r\n     return d;\r\n   }\r\n   function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n@@ -100,9 +98,9 @@\n     const resp = await api(`/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`);\r\n     state.agendamentos = await resp.json().catch(() => []);\r\n   }\r\n \r\n-  // Grade em colunas por profissional (+ coluna fallback)\r\n+  // Grade em colunas por profissional + coluna \"Outros\" (fallback)\r\n   function renderGrid() {\r\n     if (!agendaList) return;\r\n \r\n     const date = dateInput?.value || todayStr();\r\n@@ -151,9 +149,9 @@\n         col.dataset.hh = hh;\r\n         body.appendChild(col);\r\n       });\r\n \r\n-      // Coluna fallback (sem-prof) — sempre existe\r\n+      // Coluna fallback (sempre presente)\r\n       const colFallback = document.createElement('div');\r\n       colFallback.className = 'px-2 py-2 border-b min-h-[64px]';\r\n       colFallback.dataset.profissionalId = 'sem-prof';\r\n       colFallback.dataset.hh = hh;\r\n@@ -169,12 +167,12 @@\n     for (const a of state.agendamentos || []) {\r\n       const d = new Date(a.h);\r\n       const hh = `${pad(d.getHours())}:00`;\r\n \r\n-      // 1) tenta por id\r\n+      // 1) por id\r\n       let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n \r\n-      // 2) tenta por nome\r\n+      // 2) por nome\r\n       if (!profId) {\r\n         let nameCandidate = '';\r\n         if (typeof a.profissional === 'string') {\r\n           nameCandidate = a.profissional;\r\n@@ -190,13 +188,13 @@\n         profId = byName.get(key) || null;\r\n       }\r\n \r\n       // 3) fallback garantido\r\n-      if (!profId || !body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`)) {\r\n+      if (!profId || !document.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`)) {\r\n         profId = 'sem-prof';\r\n       }\r\n \r\n-      const col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+      const col = document.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n       if (!col) continue;\r\n \r\n       const card = document.createElement('div');\r\n       card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2';\r\n@@ -230,16 +228,13 @@\n     if (valorInput) { valorInput.value = ''; }\r\n     const now = new Date();\r\n     const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n-    if (modal) {\r\n-      modal.classList.remove('hidden');\r\n-      modal.classList.add('flex');\r\n-    }\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n     cliInput?.focus();\r\n   }\r\n   function closeAddModal() {\r\n-    if (!modal) return;\r\n     modal.classList.add('hidden');\r\n     modal.classList.remove('flex');\r\n   }\r\n \r\n@@ -334,10 +329,9 @@\n         const err = await resp.json().catch(() => ({}));\r\n         throw new Error(err.message || 'Erro ao salvar');\r\n       }\r\n \r\n-      // Depois de criar, recarrega do servidor para evitar divergências\r\n-      await loadAgendamentos();\r\n+      await loadAgendamentos();   // recarrega do servidor\r\n       closeAddModal();\r\n       renderGrid();\r\n     } catch (e) {\r\n       console.error(e);\r\n@@ -377,5 +371,5 @@\n     await loadProfissionais();\r\n     await loadAgendamentos();\r\n     renderGrid();\r\n   })();\r\n-})();\r\n+})();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757357588678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n (function () {\r\n-  // Helper para requisições com token\r\n+  // Auth header helper\r\n   const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n   function api(url, opts = {}) {\r\n     return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n       ...opts,\r\n@@ -46,8 +46,9 @@\n   };\r\n \r\n   // Helpers\r\n   function todayStr() {\r\n+    // ISO (UTC) -> slice\r\n     return new Date().toISOString().slice(0, 10);\r\n   }\r\n   function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n   function parseTimeToDate(dateISO, hhmm) {\r\n@@ -55,8 +56,17 @@\n     const d = new Date(dateISO);\r\n     d.setHours(h, m, 0, 0);\r\n     return d;\r\n   }\r\n+  function normalizeDate(v) {\r\n+    // aceita \"2025-09-08\" ou \"08/09/2025\"\r\n+    if (!v) return todayStr();\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) {\r\n+      const [dd, mm, yyyy] = v.split('/');\r\n+      return `${yyyy}-${mm}-${dd}`;\r\n+    }\r\n+    return v;\r\n+  }\r\n   function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n   function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n   function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n \r\n@@ -80,9 +90,9 @@\n     const vis = document.getElementById('agenda-store-label-visible');\r\n     if (vis) vis.textContent = s ? s.nome : '—';\r\n   }\r\n \r\n-  // Profissionais (colunas)\r\n+  // Profissionais\r\n   async function loadProfissionais() {\r\n     if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n     const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n     const list = await resp.json().catch(() => []);\r\n@@ -91,20 +101,34 @@\n       profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n     }\r\n   }\r\n \r\n-  // Agendamentos do dia/loja\r\n+  // Agendamentos\r\n   async function loadAgendamentos() {\r\n-    const date = dateInput?.value || todayStr();\r\n-    const resp = await api(`/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`);\r\n-    state.agendamentos = await resp.json().catch(() => []);\r\n+    const date = normalizeDate(dateInput?.value || todayStr());\r\n+    const url = `/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`;\r\n+    try {\r\n+      const resp = await api(url);\r\n+      if (!resp.ok) {\r\n+        const txt = await resp.text();\r\n+        console.error('GET', url, '->', resp.status, txt);\r\n+        state.agendamentos = [];\r\n+        return;\r\n+      }\r\n+      const list = await resp.json();\r\n+      state.agendamentos = Array.isArray(list) ? list : [];\r\n+      console.info('[Agenda] loja=', state.selectedStoreId, 'data=', date, 'itens=', state.agendamentos.length, state.agendamentos.slice(0, 3));\r\n+    } catch (e) {\r\n+      console.error('Erro ao carregar agendamentos', e);\r\n+      state.agendamentos = [];\r\n+    }\r\n   }\r\n \r\n-  // Grade em colunas por profissional + coluna \"Outros\" (fallback)\r\n+  // Grade\r\n   function renderGrid() {\r\n     if (!agendaList) return;\r\n \r\n-    const date = dateInput?.value || todayStr();\r\n+    const date = normalizeDate(dateInput?.value || todayStr());\r\n     if (dateLabelVisible) {\r\n       dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n     }\r\n \r\n@@ -140,39 +164,38 @@\n       timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n       timeCell.textContent = hh;\r\n       body.appendChild(timeCell);\r\n \r\n-      // Colunas por profissional\r\n       state.profissionais.forEach(p => {\r\n         const col = document.createElement('div');\r\n         col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n         col.dataset.profissionalId = String(p._id);\r\n         col.dataset.hh = hh;\r\n         body.appendChild(col);\r\n       });\r\n \r\n-      // Coluna fallback (sempre presente)\r\n       const colFallback = document.createElement('div');\r\n       colFallback.className = 'px-2 py-2 border-b min-h-[64px]';\r\n       colFallback.dataset.profissionalId = 'sem-prof';\r\n       colFallback.dataset.hh = hh;\r\n       body.appendChild(colFallback);\r\n     });\r\n \r\n-    // Mapa nome→ID para fallback por nome\r\n     const byName = new Map(\r\n       state.profissionais.map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n     );\r\n \r\n-    // Posiciona cards\r\n+    let placed = 0;\r\n+\r\n     for (const a of state.agendamentos || []) {\r\n-      const d = new Date(a.h);\r\n+      const when = a.h || a.scheduledAt; // aceita ambos formatos\r\n+      if (!when) continue;\r\n+\r\n+      const d = new Date(when);\r\n       const hh = `${pad(d.getHours())}:00`;\r\n \r\n-      // 1) por id\r\n       let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n \r\n-      // 2) por nome\r\n       if (!profId) {\r\n         let nameCandidate = '';\r\n         if (typeof a.profissional === 'string') {\r\n           nameCandidate = a.profissional;\r\n@@ -187,9 +210,8 @@\n         const key = String(nameCandidate).trim().toLowerCase();\r\n         profId = byName.get(key) || null;\r\n       }\r\n \r\n-      // 3) fallback garantido\r\n       if (!profId || !document.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`)) {\r\n         profId = 'sem-prof';\r\n       }\r\n \r\n@@ -212,9 +234,17 @@\n       right.appendChild(dollar);\r\n       card.appendChild(left);\r\n       card.appendChild(right);\r\n       col.appendChild(card);\r\n+      placed++;\r\n     }\r\n+\r\n+    if (placed === 0) {\r\n+      const info = document.createElement('div');\r\n+      info.className = 'px-4 py-6 text-sm text-gray-500';\r\n+      info.textContent = 'Sem agendamentos para este dia.';\r\n+      agendaList.appendChild(info);\r\n+    }\r\n   }\r\n \r\n   // Modal\r\n   function openAddModal() {\r\n@@ -299,9 +329,9 @@\n       const petId = petSelect?.value;\r\n       const servicoId = state.selectedServico?._id;\r\n       const profissionalId = profSelect?.value;\r\n       const hora = horaInput?.value;\r\n-      const date = dateInput?.value || todayStr();\r\n+      const date = normalizeDate(dateInput?.value || todayStr());\r\n \r\n       if (!(clienteId && petId && servicoId && profissionalId && hora)) {\r\n         alert('Preencha cliente, pet, serviço, profissional e hora.');\r\n         return;\r\n@@ -329,9 +359,9 @@\n         const err = await resp.json().catch(() => ({}));\r\n         throw new Error(err.message || 'Erro ao salvar');\r\n       }\r\n \r\n-      await loadAgendamentos();   // recarrega do servidor\r\n+      await loadAgendamentos(); // recarrega do servidor\r\n       closeAddModal();\r\n       renderGrid();\r\n     } catch (e) {\r\n       console.error(e);\r\n@@ -371,5 +401,5 @@\n     await loadProfissionais();\r\n     await loadAgendamentos();\r\n     renderGrid();\r\n   })();\r\n-})();\n\\ No newline at end of file\n+})();\r\n"
                },
                {
                    "date": 1757358059842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,20 +46,27 @@\n   };\r\n \r\n   // Helpers\r\n   function todayStr() {\r\n-    // ISO (UTC) -> slice\r\n     return new Date().toISOString().slice(0, 10);\r\n   }\r\n   function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n-  function parseTimeToDate(dateISO, hhmm) {\r\n-    const [h, m] = (hhmm || '00:00').split(':').map(x => parseInt(x, 10));\r\n-    const d = new Date(dateISO);\r\n-    d.setHours(h, m, 0, 0);\r\n-    return d;\r\n+\r\n+  // ✅ NOVO: monta Date 100% LOCAL, sem parse em UTC\r\n+  function buildLocalDateTime(dateStr, hhmm) {\r\n+    // aceita \"yyyy-mm-dd\" ou \"dd/mm/aaaa\"\r\n+    let y, m, d;\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) {\r\n+      [d, m, y] = dateStr.split('/').map(Number);\r\n+    } else {\r\n+      [y, m, d] = dateStr.split('-').map(Number);\r\n+    }\r\n+    const [hh, mm] = (hhmm || '00:00').split(':').map(Number);\r\n+    // new Date(y, m-1, d, hh, mm) cria em fuso LOCAL, preservando o dia\r\n+    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n   }\r\n+\r\n   function normalizeDate(v) {\r\n-    // aceita \"2025-09-08\" ou \"08/09/2025\"\r\n     if (!v) return todayStr();\r\n     if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) {\r\n       const [dd, mm, yyyy] = v.split('/');\r\n       return `${yyyy}-${mm}-${dd}`;\r\n@@ -90,9 +97,9 @@\n     const vis = document.getElementById('agenda-store-label-visible');\r\n     if (vis) vis.textContent = s ? s.nome : '—';\r\n   }\r\n \r\n-  // Profissionais\r\n+  // Profissionais (colunas)\r\n   async function loadProfissionais() {\r\n     if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n     const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n     const list = await resp.json().catch(() => []);\r\n@@ -101,9 +108,9 @@\n       profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n     }\r\n   }\r\n \r\n-  // Agendamentos\r\n+  // Agendamentos do dia/loja\r\n   async function loadAgendamentos() {\r\n     const date = normalizeDate(dateInput?.value || todayStr());\r\n     const url = `/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`;\r\n     try {\r\n@@ -122,22 +129,20 @@\n       state.agendamentos = [];\r\n     }\r\n   }\r\n \r\n-  // Grade\r\n+  // Grade (inclui coluna \"Outros\")\r\n   function renderGrid() {\r\n     if (!agendaList) return;\r\n \r\n     const date = normalizeDate(dateInput?.value || todayStr());\r\n     if (dateLabelVisible) {\r\n       dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n     }\r\n \r\n-    // 00:00 -> 23:00\r\n     const hours = [];\r\n     for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n-    // Cabeçalho\r\n     clearChildren(agendaList);\r\n     const cols = ['Hora', ...state.profissionais.map(p => p.nome), 'Outros'];\r\n     const colCount = cols.length;\r\n \r\n@@ -152,9 +157,8 @@\n       header.appendChild(cell);\r\n     });\r\n     agendaList.appendChild(header);\r\n \r\n-    // Corpo\r\n     const body = document.createElement('div');\r\n     body.style.display = 'grid';\r\n     body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n     agendaList.appendChild(body);\r\n@@ -186,9 +190,9 @@\n \r\n     let placed = 0;\r\n \r\n     for (const a of state.agendamentos || []) {\r\n-      const when = a.h || a.scheduledAt; // aceita ambos formatos\r\n+      const when = a.h || a.scheduledAt;\r\n       if (!when) continue;\r\n \r\n       const d = new Date(when);\r\n       const hh = `${pad(d.getHours())}:00`;\r\n@@ -329,16 +333,17 @@\n       const petId = petSelect?.value;\r\n       const servicoId = state.selectedServico?._id;\r\n       const profissionalId = profSelect?.value;\r\n       const hora = horaInput?.value;\r\n-      const date = normalizeDate(dateInput?.value || todayStr());\r\n+      const dateRaw = dateInput?.value || todayStr();\r\n \r\n       if (!(clienteId && petId && servicoId && profissionalId && hora)) {\r\n         alert('Preencha cliente, pet, serviço, profissional e hora.');\r\n         return;\r\n       }\r\n \r\n-      const scheduledAt = parseTimeToDate(date, hora).toISOString();\r\n+      // ✅ usar construção local segura\r\n+      const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n \r\n       const body = {\r\n         storeId: state.selectedStoreId,\r\n         clienteId,\r\n"
                },
                {
                    "date": 1757359789576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n (function () {\r\n-  // Auth header helper\r\n+  // Helper para requisições com token\r\n   const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n   function api(url, opts = {}) {\r\n     return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n       ...opts,\r\n@@ -19,9 +19,9 @@\n   const addBtn = document.getElementById('add-service-btn');\r\n   const storeSelect = document.getElementById('agenda-store');\r\n   const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n \r\n-  // Modal\r\n+  // Modal (reutilizado p/ adicionar e editar)\r\n   const modal = document.getElementById('modal-add-servico');\r\n   const modalClose = document.getElementById('modal-add-close');\r\n   const modalCancel = document.getElementById('modal-add-cancel');\r\n   const modalSave = document.getElementById('modal-add-save');\r\n@@ -42,30 +42,28 @@\n     agendamentos: [],\r\n     selectedStoreId: null,\r\n     selectedCliente: null,\r\n     selectedServico: null,\r\n+    editing: null // guarda o agendamento em edição (ou null)\r\n   };\r\n \r\n   // Helpers\r\n   function todayStr() {\r\n     return new Date().toISOString().slice(0, 10);\r\n   }\r\n   function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n \r\n-  // ✅ NOVO: monta Date 100% LOCAL, sem parse em UTC\r\n+  // Monta Date local (sem UTC)\r\n   function buildLocalDateTime(dateStr, hhmm) {\r\n-    // aceita \"yyyy-mm-dd\" ou \"dd/mm/aaaa\"\r\n     let y, m, d;\r\n     if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) {\r\n       [d, m, y] = dateStr.split('/').map(Number);\r\n     } else {\r\n       [y, m, d] = dateStr.split('-').map(Number);\r\n     }\r\n     const [hh, mm] = (hhmm || '00:00').split(':').map(Number);\r\n-    // new Date(y, m-1, d, hh, mm) cria em fuso LOCAL, preservando o dia\r\n     return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n   }\r\n-\r\n   function normalizeDate(v) {\r\n     if (!v) return todayStr();\r\n     if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) {\r\n       const [dd, mm, yyyy] = v.split('/');\r\n@@ -97,9 +95,9 @@\n     const vis = document.getElementById('agenda-store-label-visible');\r\n     if (vis) vis.textContent = s ? s.nome : '—';\r\n   }\r\n \r\n-  // Profissionais (colunas)\r\n+  // Profissionais\r\n   async function loadProfissionais() {\r\n     if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n     const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n     const list = await resp.json().catch(() => []);\r\n@@ -108,9 +106,9 @@\n       profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n     }\r\n   }\r\n \r\n-  // Agendamentos do dia/loja\r\n+  // Agendamentos\r\n   async function loadAgendamentos() {\r\n     const date = normalizeDate(dateInput?.value || todayStr());\r\n     const url = `/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`;\r\n     try {\r\n@@ -129,22 +127,24 @@\n       state.agendamentos = [];\r\n     }\r\n   }\r\n \r\n-  // Grade (inclui coluna \"Outros\")\r\n+  // Grade (sem coluna \"Outros\")\r\n   function renderGrid() {\r\n     if (!agendaList) return;\r\n \r\n     const date = normalizeDate(dateInput?.value || todayStr());\r\n     if (dateLabelVisible) {\r\n       dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n     }\r\n \r\n+    // 00:00 -> 23:00\r\n     const hours = [];\r\n     for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n+    // Cabeçalho\r\n     clearChildren(agendaList);\r\n-    const cols = ['Hora', ...state.profissionais.map(p => p.nome), 'Outros'];\r\n+    const cols = ['Hora', ...state.profissionais.map(p => p.nome)]; // <- removido \"Outros\"\r\n     const colCount = cols.length;\r\n \r\n     const header = document.createElement('div');\r\n     header.className = 'grid sticky top-0 bg-white z-10 border-b text-sm font-medium';\r\n@@ -157,8 +157,9 @@\n       header.appendChild(cell);\r\n     });\r\n     agendaList.appendChild(header);\r\n \r\n+    // Corpo\r\n     const body = document.createElement('div');\r\n     body.style.display = 'grid';\r\n     body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n     agendaList.appendChild(body);\r\n@@ -175,16 +176,11 @@\n         col.dataset.profissionalId = String(p._id);\r\n         col.dataset.hh = hh;\r\n         body.appendChild(col);\r\n       });\r\n-\r\n-      const colFallback = document.createElement('div');\r\n-      colFallback.className = 'px-2 py-2 border-b min-h-[64px]';\r\n-      colFallback.dataset.profissionalId = 'sem-prof';\r\n-      colFallback.dataset.hh = hh;\r\n-      body.appendChild(colFallback);\r\n     });\r\n \r\n+    // Mapa nome→ID\r\n     const byName = new Map(\r\n       state.profissionais.map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n     );\r\n \r\n@@ -196,10 +192,10 @@\n \r\n       const d = new Date(when);\r\n       const hh = `${pad(d.getHours())}:00`;\r\n \r\n+      // Tenta por id/nome; se não achar, cai na 1ª coluna\r\n       let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-\r\n       if (!profId) {\r\n         let nameCandidate = '';\r\n         if (typeof a.profissional === 'string') {\r\n           nameCandidate = a.profissional;\r\n@@ -207,40 +203,61 @@\n           nameCandidate =\r\n             a.profissional.nomeCompleto ||\r\n             a.profissional.nomeContato ||\r\n             a.profissional.razaoSocial ||\r\n-            a.profissional.nome ||\r\n-            '';\r\n+            a.profissional.nome || '';\r\n         }\r\n         const key = String(nameCandidate).trim().toLowerCase();\r\n         profId = byName.get(key) || null;\r\n       }\r\n \r\n-      if (!profId || !document.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`)) {\r\n-        profId = 'sem-prof';\r\n+      // Coluna alvo\r\n+      let col = null;\r\n+      if (profId) col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+      if (!col && state.profissionais[0]) {\r\n+        // fallback sem \"Outros\": 1ª coluna\r\n+        col = body.querySelector(`div[data-profissional-id=\"${state.profissionais[0]._id}\"][data-hh=\"${hh}\"]`);\r\n       }\r\n-\r\n-      const col = document.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n       if (!col) continue;\r\n \r\n+      // Card\r\n       const card = document.createElement('div');\r\n-      card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2';\r\n+      card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2 cursor-pointer hover:ring-black/10 transition';\r\n+      card.dataset.appointmentId = a._id || '';\r\n+      // badge (!) quando caiu por fallback\r\n+      const showWarn = !profId || String(col.dataset.profissionalId) !== String(profId);\r\n       const left = document.createElement('div');\r\n       left.innerHTML = `\r\n-        <div class=\"font-medium text-gray-900\">${a.pet}</div>\r\n-        <div class=\"text-gray-600\">${a.servico}</div>\r\n+        <div class=\"font-medium text-gray-900\">${a.pet || ''}</div>\r\n+        <div class=\"text-gray-600\">${a.servico || ''}</div>\r\n         <div class=\"text-gray-600\">${money(a.valor)}</div>\r\n       `;\r\n+\r\n       const right = document.createElement('div');\r\n-      right.className = 'text-lg';\r\n+      right.className = 'text-lg flex items-center gap-2';\r\n+      if (showWarn) {\r\n+        const warn = document.createElement('span');\r\n+        warn.title = 'Profissional não mapeado p/ esta loja — exibido na 1ª coluna';\r\n+        warn.className = 'inline-flex items-center justify-center w-5 h-5 rounded-full text-xs font-bold bg-yellow-200 text-yellow-800';\r\n+        warn.textContent = '!';\r\n+        right.appendChild(warn);\r\n+      }\r\n       const dollar = document.createElement('span');\r\n       dollar.textContent = '$';\r\n       if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n       right.appendChild(dollar);\r\n+\r\n       card.appendChild(left);\r\n       card.appendChild(right);\r\n       col.appendChild(card);\r\n       placed++;\r\n+\r\n+      // Clique para editar\r\n+      card.addEventListener('click', (ev) => {\r\n+        ev.preventDefault();\r\n+        ev.stopPropagation();\r\n+        openEditModal(a);\r\n+      });\r\n     }\r\n \r\n     if (placed === 0) {\r\n       const info = document.createElement('div');\r\n@@ -249,28 +266,78 @@\n       agendaList.appendChild(info);\r\n     }\r\n   }\r\n \r\n-  // Modal\r\n+  // Modal — modo adicionar\r\n   function openAddModal() {\r\n+    state.editing = null;\r\n     if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n+\r\n+    // habilita campos\r\n+    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n+\r\n+    // limpa campos\r\n     state.selectedCliente = null;\r\n     state.selectedServico = null;\r\n     if (cliInput) { cliInput.value = ''; }\r\n     if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n     if (servInput) { servInput.value = ''; }\r\n     if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n     if (valorInput) { valorInput.value = ''; }\r\n+    if (petSelect) { petSelect.innerHTML = ''; }\r\n+\r\n+    // hora padrão\r\n     const now = new Date();\r\n     const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n+\r\n+    modal.classList.remove('hidden'); modal.classList.add('flex');\r\n     cliInput?.focus();\r\n   }\r\n-  function closeAddModal() {\r\n+\r\n+  // Modal — modo edição\r\n+  function openEditModal(a) {\r\n+    state.editing = a || null;\r\n+    if (!modal || !state.editing) return;\r\n+\r\n+    // Preenche campos com dados do agendamento\r\n+    const d = new Date((a.h || a.scheduledAt) || new Date());\r\n+    const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n+    if (horaInput) horaInput.value = hh;\r\n+\r\n+    // Profissional\r\n+    let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+    if (!profId && typeof a.profissional === 'string') {\r\n+      const key = a.profissional.trim().toLowerCase();\r\n+      const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n+      if (match) profId = String(match._id);\r\n+    }\r\n+    if (profSelect && profId) profSelect.value = profId;\r\n+\r\n+    // Cliente/Pet/Serviço/Valor (apenas leitura no modo edição)\r\n+    if (cliInput) { cliInput.value = a.cliente || ''; cliInput.disabled = true; }\r\n+    if (petSelect) {\r\n+      const petId = a.petId || '';\r\n+      petSelect.innerHTML = `<option value=\"${petId}\">${a.pet || ''}</option>`;\r\n+      petSelect.disabled = true;\r\n+    }\r\n+    if (servInput) { servInput.value = a.servico || ''; servInput.disabled = true; }\r\n+    if (valorInput) { valorInput.value = Number(a.valor || 0).toFixed(2); valorInput.disabled = true; }\r\n+\r\n+    // Esconde listas auxiliares\r\n+    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+\r\n+    modal.classList.remove('hidden'); modal.classList.add('flex');\r\n+  }\r\n+\r\n+  function closeModal() {\r\n+    if (!modal) return;\r\n     modal.classList.add('hidden');\r\n     modal.classList.remove('flex');\r\n+    state.editing = null;\r\n+    // reabilita campos caso tenham sido desabilitados no modo edição\r\n+    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n   }\r\n \r\n   // Busca cliente\r\n   async function searchClientes(term) {\r\n@@ -325,49 +392,85 @@\n       });\r\n     });\r\n   }\r\n \r\n-  // Salvar agendamento\r\n+  // Salvar (adicionar/editar)\r\n   async function saveAgendamento() {\r\n     try {\r\n+      const dateRaw = dateInput?.value || todayStr();\r\n+      const hora = horaInput?.value;\r\n+      const profissionalId = profSelect?.value;\r\n+\r\n+      if (!hora || !profissionalId) {\r\n+        alert('Preencha hora e profissional.');\r\n+        return;\r\n+      }\r\n+\r\n+      const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n+\r\n+      // Modo edição\r\n+      if (state.editing && state.editing._id) {\r\n+        const id = state.editing._id;\r\n+        // Envia apenas campos mutáveis (se o backend exigir completos, podemos incluir os demais do objeto)\r\n+        const body = {\r\n+          storeId: state.selectedStoreId,\r\n+          profissionalId,\r\n+          scheduledAt,\r\n+          // campos abaixo, se existirem no objeto:\r\n+          ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n+          ...(state.editing.petId ? { petId: state.editing.petId } : {}),\r\n+          ...(state.editing.servicoId ? { servicoId: state.editing.servicoId } : {}),\r\n+          ...(typeof state.editing.valor !== 'undefined' ? { valor: state.editing.valor } : {}),\r\n+          ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n+        };\r\n+\r\n+        const resp = await api(`/func/agendamentos/${id}`, {\r\n+          method: 'PUT',\r\n+          body: JSON.stringify(body)\r\n+        });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao atualizar agendamento');\r\n+        }\r\n+        await loadAgendamentos();\r\n+        closeModal();\r\n+        renderGrid();\r\n+        return;\r\n+      }\r\n+\r\n+      // Modo adicionar\r\n       const clienteId = state.selectedCliente?._id;\r\n       const petId = petSelect?.value;\r\n       const servicoId = state.selectedServico?._id;\r\n-      const profissionalId = profSelect?.value;\r\n-      const hora = horaInput?.value;\r\n-      const dateRaw = dateInput?.value || todayStr();\r\n+      const valor = Number(valorInput?.value || 0);\r\n \r\n-      if (!(clienteId && petId && servicoId && profissionalId && hora)) {\r\n-        alert('Preencha cliente, pet, serviço, profissional e hora.');\r\n+      if (!(clienteId && petId && servicoId)) {\r\n+        alert('Preencha cliente, pet e serviço.');\r\n         return;\r\n       }\r\n \r\n-      // ✅ usar construção local segura\r\n-      const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n-\r\n       const body = {\r\n         storeId: state.selectedStoreId,\r\n         clienteId,\r\n         petId,\r\n         servicoId,\r\n         profissionalId,\r\n         scheduledAt,\r\n-        valor: Number(valorInput?.value || 0),\r\n+        valor,\r\n         pago: false\r\n       };\r\n \r\n       const resp = await api('/func/agendamentos', {\r\n         method: 'POST',\r\n         body: JSON.stringify(body)\r\n       });\r\n-\r\n       if (!resp.ok) {\r\n         const err = await resp.json().catch(() => ({}));\r\n         throw new Error(err.message || 'Erro ao salvar');\r\n       }\r\n \r\n-      await loadAgendamentos(); // recarrega do servidor\r\n-      closeAddModal();\r\n+      await loadAgendamentos();\r\n+      closeModal();\r\n       renderGrid();\r\n     } catch (e) {\r\n       console.error(e);\r\n       alert(e.message || 'Erro ao salvar');\r\n@@ -375,10 +478,10 @@\n   }\r\n \r\n   // Events\r\n   addBtn?.addEventListener('click', openAddModal);\r\n-  modalClose?.addEventListener('click', closeAddModal);\r\n-  modalCancel?.addEventListener('click', closeAddModal);\r\n+  modalClose?.addEventListener('click', closeModal);\r\n+  modalCancel?.addEventListener('click', closeModal);\r\n   modalSave?.addEventListener('click', saveAgendamento);\r\n \r\n   cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n   servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n"
                },
                {
                    "date": 1757360339332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,31 +45,21 @@\n     selectedServico: null,\r\n     editing: null // guarda o agendamento em edição (ou null)\r\n   };\r\n \r\n-  // Helpers\r\n-  function todayStr() {\r\n-    return new Date().toISOString().slice(0, 10);\r\n-  }\r\n+  // Helpers de data e utilitários\r\n+  function todayStr() { return new Date().toISOString().slice(0, 10); }\r\n   function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n-\r\n-  // Monta Date local (sem UTC)\r\n   function buildLocalDateTime(dateStr, hhmm) {\r\n     let y, m, d;\r\n-    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) {\r\n-      [d, m, y] = dateStr.split('/').map(Number);\r\n-    } else {\r\n-      [y, m, d] = dateStr.split('-').map(Number);\r\n-    }\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) { [d, m, y] = dateStr.split('/').map(Number); }\r\n+    else { [y, m, d] = dateStr.split('-').map(Number); }\r\n     const [hh, mm] = (hhmm || '00:00').split(':').map(Number);\r\n     return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n   }\r\n   function normalizeDate(v) {\r\n     if (!v) return todayStr();\r\n-    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) {\r\n-      const [dd, mm, yyyy] = v.split('/');\r\n-      return `${yyyy}-${mm}-${dd}`;\r\n-    }\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n     return v;\r\n   }\r\n   function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n   function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n@@ -142,9 +132,9 @@\n     for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n     // Cabeçalho\r\n     clearChildren(agendaList);\r\n-    const cols = ['Hora', ...state.profissionais.map(p => p.nome)]; // <- removido \"Outros\"\r\n+    const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n     const colCount = cols.length;\r\n \r\n     const header = document.createElement('div');\r\n     header.className = 'grid sticky top-0 bg-white z-10 border-b text-sm font-medium';\r\n@@ -192,9 +182,9 @@\n \r\n       const d = new Date(when);\r\n       const hh = `${pad(d.getHours())}:00`;\r\n \r\n-      // Tenta por id/nome; se não achar, cai na 1ª coluna\r\n+      // Resolve coluna alvo\r\n       let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n       if (!profId) {\r\n         let nameCandidate = '';\r\n         if (typeof a.profissional === 'string') {\r\n@@ -209,39 +199,29 @@\n         const key = String(nameCandidate).trim().toLowerCase();\r\n         profId = byName.get(key) || null;\r\n       }\r\n \r\n-      // Coluna alvo\r\n+      // Coluna; se não achar, 1ª coluna como fallback\r\n       let col = null;\r\n       if (profId) col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n       if (!col && state.profissionais[0]) {\r\n-        // fallback sem \"Outros\": 1ª coluna\r\n         col = body.querySelector(`div[data-profissional-id=\"${state.profissionais[0]._id}\"][data-hh=\"${hh}\"]`);\r\n       }\r\n       if (!col) continue;\r\n \r\n       // Card\r\n       const card = document.createElement('div');\r\n       card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2 cursor-pointer hover:ring-black/10 transition';\r\n       card.dataset.appointmentId = a._id || '';\r\n-      // badge (!) quando caiu por fallback\r\n-      const showWarn = !profId || String(col.dataset.profissionalId) !== String(profId);\r\n+\r\n       const left = document.createElement('div');\r\n       left.innerHTML = `\r\n         <div class=\"font-medium text-gray-900\">${a.pet || ''}</div>\r\n         <div class=\"text-gray-600\">${a.servico || ''}</div>\r\n         <div class=\"text-gray-600\">${money(a.valor)}</div>\r\n       `;\r\n-\r\n       const right = document.createElement('div');\r\n-      right.className = 'text-lg flex items-center gap-2';\r\n-      if (showWarn) {\r\n-        const warn = document.createElement('span');\r\n-        warn.title = 'Profissional não mapeado p/ esta loja — exibido na 1ª coluna';\r\n-        warn.className = 'inline-flex items-center justify-center w-5 h-5 rounded-full text-xs font-bold bg-yellow-200 text-yellow-800';\r\n-        warn.textContent = '!';\r\n-        right.appendChild(warn);\r\n-      }\r\n+      right.className = 'text-lg';\r\n       const dollar = document.createElement('span');\r\n       dollar.textContent = '$';\r\n       if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n       right.appendChild(dollar);\r\n@@ -254,9 +234,9 @@\n       // Clique para editar\r\n       card.addEventListener('click', (ev) => {\r\n         ev.preventDefault();\r\n         ev.stopPropagation();\r\n-        openEditModal(a);\r\n+        openEditModal(a); // função async\r\n       });\r\n     }\r\n \r\n     if (placed === 0) {\r\n@@ -271,12 +251,10 @@\n   function openAddModal() {\r\n     state.editing = null;\r\n     if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n \r\n-    // habilita campos\r\n     [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n \r\n-    // limpa campos\r\n     state.selectedCliente = null;\r\n     state.selectedServico = null;\r\n     if (cliInput) { cliInput.value = ''; }\r\n     if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n@@ -284,23 +262,58 @@\n     if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n     if (valorInput) { valorInput.value = ''; }\r\n     if (petSelect) { petSelect.innerHTML = ''; }\r\n \r\n-    // hora padrão\r\n     const now = new Date();\r\n     const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n \r\n     modal.classList.remove('hidden'); modal.classList.add('flex');\r\n     cliInput?.focus();\r\n   }\r\n \r\n-  // Modal — modo edição\r\n-  function openEditModal(a) {\r\n+  // 🔧 Resolver nome do cliente (pode vir vazio no GET de agendamentos)\r\n+  async function resolveClienteNome(a) {\r\n+    try {\r\n+      if (!a) return '';\r\n+      // já tem nome?\r\n+      if (typeof a.clienteNome === 'string' && a.clienteNome.trim()) return a.clienteNome.trim();\r\n+      if (typeof a.cliente === 'string' && a.cliente.trim()) return a.cliente.trim();\r\n+      if (a.cliente && typeof a.cliente === 'object') {\r\n+        const cand = a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial;\r\n+        if (cand) return String(cand);\r\n+      }\r\n+      // possui id do cliente?\r\n+      const cliId = a.clienteId || (typeof a.cliente === 'string' ? a.cliente : null);\r\n+      if (cliId) {\r\n+        const r = await api(`/func/clientes/${cliId}`);\r\n+        if (r.ok) {\r\n+          const c = await r.json();\r\n+          return c?.nome || c?.nomeCompleto || c?.razaoSocial || '';\r\n+        }\r\n+      }\r\n+      // tenta descobrir via pet (opcional; ignora erro se rota não existir)\r\n+      if (a.petId) {\r\n+        const r2 = await api(`/func/pets/${a.petId}`);\r\n+        if (r2.ok) {\r\n+          const p = await r2.json();\r\n+          const cand2 =\r\n+            (p?.cliente && (p.cliente.nome || p.cliente.nomeCompleto || p.cliente.razaoSocial)) ||\r\n+            p?.clienteNome;\r\n+          if (cand2) return String(cand2);\r\n+        }\r\n+      }\r\n+    } catch (e) {\r\n+      console.info('[resolveClienteNome] fallback vazio', e);\r\n+    }\r\n+    return '';\r\n+  }\r\n+\r\n+  // Modal — modo edição (agora async para buscar nome do cliente quando necessário)\r\n+  async function openEditModal(a) {\r\n     state.editing = a || null;\r\n     if (!modal || !state.editing) return;\r\n \r\n-    // Preenche campos com dados do agendamento\r\n     const d = new Date((a.h || a.scheduledAt) || new Date());\r\n     const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n \r\n@@ -312,19 +325,21 @@\n       if (match) profId = String(match._id);\r\n     }\r\n     if (profSelect && profId) profSelect.value = profId;\r\n \r\n-    // Cliente/Pet/Serviço/Valor (apenas leitura no modo edição)\r\n-    if (cliInput) { cliInput.value = a.cliente || ''; cliInput.disabled = true; }\r\n+    // Cliente/Pet/Serviço/Valor (somente leitura no modo edição)\r\n+    if (cliInput) {\r\n+      cliInput.value = await resolveClienteNome(a); // ✅ agora preenche corretamente\r\n+      cliInput.disabled = true;\r\n+    }\r\n     if (petSelect) {\r\n       const petId = a.petId || '';\r\n       petSelect.innerHTML = `<option value=\"${petId}\">${a.pet || ''}</option>`;\r\n       petSelect.disabled = true;\r\n     }\r\n     if (servInput) { servInput.value = a.servico || ''; servInput.disabled = true; }\r\n     if (valorInput) { valorInput.value = Number(a.valor || 0).toFixed(2); valorInput.disabled = true; }\r\n \r\n-    // Esconde listas auxiliares\r\n     if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n     if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n \r\n     modal.classList.remove('hidden'); modal.classList.add('flex');\r\n@@ -334,9 +349,8 @@\n     if (!modal) return;\r\n     modal.classList.add('hidden');\r\n     modal.classList.remove('flex');\r\n     state.editing = null;\r\n-    // reabilita campos caso tenham sido desabilitados no modo edição\r\n     [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n   }\r\n \r\n   // Busca cliente\r\n@@ -406,28 +420,22 @@\n       }\r\n \r\n       const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n \r\n-      // Modo edição\r\n+      // Edição\r\n       if (state.editing && state.editing._id) {\r\n         const id = state.editing._id;\r\n-        // Envia apenas campos mutáveis (se o backend exigir completos, podemos incluir os demais do objeto)\r\n         const body = {\r\n           storeId: state.selectedStoreId,\r\n           profissionalId,\r\n           scheduledAt,\r\n-          // campos abaixo, se existirem no objeto:\r\n           ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n           ...(state.editing.petId ? { petId: state.editing.petId } : {}),\r\n           ...(state.editing.servicoId ? { servicoId: state.editing.servicoId } : {}),\r\n           ...(typeof state.editing.valor !== 'undefined' ? { valor: state.editing.valor } : {}),\r\n           ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n         };\r\n-\r\n-        const resp = await api(`/func/agendamentos/${id}`, {\r\n-          method: 'PUT',\r\n-          body: JSON.stringify(body)\r\n-        });\r\n+        const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\r\n         if (!resp.ok) {\r\n           const err = await resp.json().catch(() => ({}));\r\n           throw new Error(err.message || 'Erro ao atualizar agendamento');\r\n         }\r\n@@ -436,9 +444,9 @@\n         renderGrid();\r\n         return;\r\n       }\r\n \r\n-      // Modo adicionar\r\n+      // Adição\r\n       const clienteId = state.selectedCliente?._id;\r\n       const petId = petSelect?.value;\r\n       const servicoId = state.selectedServico?._id;\r\n       const valor = Number(valorInput?.value || 0);\r\n@@ -448,22 +456,13 @@\n         return;\r\n       }\r\n \r\n       const body = {\r\n-        storeId: state.selectedStoreId,\r\n-        clienteId,\r\n-        petId,\r\n-        servicoId,\r\n-        profissionalId,\r\n-        scheduledAt,\r\n-        valor,\r\n-        pago: false\r\n+        storeId: state.selectedStoreId, clienteId, petId, servicoId,\r\n+        profissionalId, scheduledAt, valor, pago: false\r\n       };\r\n \r\n-      const resp = await api('/func/agendamentos', {\r\n-        method: 'POST',\r\n-        body: JSON.stringify(body)\r\n-      });\r\n+      const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n       if (!resp.ok) {\r\n         const err = await resp.json().catch(() => ({}));\r\n         throw new Error(err.message || 'Erro ao salvar');\r\n       }\r\n"
                },
                {
                    "date": 1757360693820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,54 +271,79 @@\n     cliInput?.focus();\r\n   }\r\n \r\n   // 🔧 Resolver nome do cliente (pode vir vazio no GET de agendamentos)\r\n+  const _clienteNomeCache = new Map(); // id => nome\r\n+\r\n   async function resolveClienteNome(a) {\r\n     try {\r\n       if (!a) return '';\r\n-      // já tem nome?\r\n-      if (typeof a.clienteNome === 'string' && a.clienteNome.trim()) return a.clienteNome.trim();\r\n-      if (typeof a.cliente === 'string' && a.cliente.trim()) return a.cliente.trim();\r\n-      if (a.cliente && typeof a.cliente === 'object') {\r\n-        const cand = a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial;\r\n-        if (cand) return String(cand);\r\n-      }\r\n-      // possui id do cliente?\r\n-      const cliId = a.clienteId || (typeof a.cliente === 'string' ? a.cliente : null);\r\n-      if (cliId) {\r\n-        const r = await api(`/func/clientes/${cliId}`);\r\n+\r\n+      // 1) Nome já presente no payload\r\n+      const direct =\r\n+        a.clienteNome ||\r\n+        (a.cliente && typeof a.cliente === 'object' && (a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial)) ||\r\n+        null;\r\n+      if (typeof direct === 'string' && direct.trim()) return direct.trim();\r\n+\r\n+      // 2) Descobrir um possível ID do cliente em vários formatos\r\n+      const maybeId =\r\n+        a.clienteId ||\r\n+        a.clientId ||\r\n+        a.customerId ||\r\n+        (a.cliente && typeof a.cliente === 'object' && a.cliente._id ? a.cliente._id : null) ||\r\n+        (typeof a.cliente === 'string' ? a.cliente : null);\r\n+\r\n+      // valida ObjectId(24 hex) em string\r\n+      const id =\r\n+        typeof maybeId === 'string' && /^[0-9a-fA-F]{24}$/.test(maybeId) ? maybeId : null;\r\n+\r\n+      // 3) Buscar por ID (com cache)\r\n+      if (id) {\r\n+        if (_clienteNomeCache.has(id)) return _clienteNomeCache.get(id);\r\n+        const r = await api(`/func/clientes/${id}`);\r\n         if (r.ok) {\r\n           const c = await r.json();\r\n-          return c?.nome || c?.nomeCompleto || c?.razaoSocial || '';\r\n+          const nome = c?.nome || c?.nomeCompleto || c?.razaoSocial || '';\r\n+          if (nome) {\r\n+            _clienteNomeCache.set(id, nome);\r\n+            return nome;\r\n+          }\r\n         }\r\n       }\r\n-      // tenta descobrir via pet (opcional; ignora erro se rota não existir)\r\n-      if (a.petId) {\r\n-        const r2 = await api(`/func/pets/${a.petId}`);\r\n+\r\n+      // 4) Último recurso: tentar via petId (se existir essa rota)\r\n+      const petId =\r\n+        a.petId ||\r\n+        (a.pet && typeof a.pet === 'object' && a.pet._id ? a.pet._id : null) ||\r\n+        null;\r\n+\r\n+      if (petId && /^[0-9a-fA-F]{24}$/.test(String(petId))) {\r\n+        const r2 = await api(`/func/pets/${petId}`);\r\n         if (r2.ok) {\r\n           const p = await r2.json();\r\n-          const cand2 =\r\n+          const nome =\r\n             (p?.cliente && (p.cliente.nome || p.cliente.nomeCompleto || p.cliente.razaoSocial)) ||\r\n-            p?.clienteNome;\r\n-          if (cand2) return String(cand2);\r\n+            p?.clienteNome ||\r\n+            '';\r\n+          if (nome) return String(nome);\r\n         }\r\n       }\r\n     } catch (e) {\r\n-      console.info('[resolveClienteNome] fallback vazio', e);\r\n+      console.info('[resolveClienteNome] não foi possível resolver', e);\r\n     }\r\n     return '';\r\n   }\r\n \r\n-  // Modal — modo edição (agora async para buscar nome do cliente quando necessário)\r\n+  // --- DEPOIS: openEditModal (indica carregamento e garante preenchimento) ---\r\n   async function openEditModal(a) {\r\n     state.editing = a || null;\r\n     if (!modal || !state.editing) return;\r\n \r\n     const d = new Date((a.h || a.scheduledAt) || new Date());\r\n     const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n \r\n-    // Profissional\r\n     let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n     if (!profId && typeof a.profissional === 'string') {\r\n       const key = a.profissional.trim().toLowerCase();\r\n       const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n@@ -327,13 +352,15 @@\n     if (profSelect && profId) profSelect.value = profId;\r\n \r\n     // Cliente/Pet/Serviço/Valor (somente leitura no modo edição)\r\n     if (cliInput) {\r\n-      cliInput.value = await resolveClienteNome(a); // ✅ agora preenche corretamente\r\n       cliInput.disabled = true;\r\n+      cliInput.value = '(carregando...)';                // <- feedback imediato\r\n+      const nomeCli = await resolveClienteNome(a);       // <- agora cobre mais formatos/rotas\r\n+      cliInput.value = nomeCli || '';                    // <- finalmente preenche\r\n     }\r\n     if (petSelect) {\r\n-      const petId = a.petId || '';\r\n+      const petId = a.petId || (a.pet && a.pet._id) || '';\r\n       petSelect.innerHTML = `<option value=\"${petId}\">${a.pet || ''}</option>`;\r\n       petSelect.disabled = true;\r\n     }\r\n     if (servInput) { servInput.value = a.servico || ''; servInput.disabled = true; }\r\n"
                },
                {
                    "date": 1757360733574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,12 +231,12 @@\n       col.appendChild(card);\r\n       placed++;\r\n \r\n       // Clique para editar\r\n-      card.addEventListener('click', (ev) => {\r\n+      card.addEventListener('click', async (ev) => {\r\n         ev.preventDefault();\r\n         ev.stopPropagation();\r\n-        openEditModal(a); // função async\r\n+        await openEditModal(a);\r\n       });\r\n     }\r\n \r\n     if (placed === 0) {\r\n"
                },
                {
                    "date": 1757362583879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,27 +350,33 @@\n       if (match) profId = String(match._id);\r\n     }\r\n     if (profSelect && profId) profSelect.value = profId;\r\n \r\n-    // Cliente/Pet/Serviço/Valor (somente leitura no modo edição)\r\n+    // Cliente (somente leitura no modo edição)\r\n     if (cliInput) {\r\n       cliInput.disabled = true;\r\n-      cliInput.value = '(carregando...)';                // <- feedback imediato\r\n-      const nomeCli = await resolveClienteNome(a);       // <- agora cobre mais formatos/rotas\r\n-      cliInput.value = nomeCli || '';                    // <- finalmente preenche\r\n+      cliInput.value = '(carregando...)';\r\n+      const nomeCli = await resolveClienteNome(a);\r\n+      cliInput.value = nomeCli || '';\r\n     }\r\n+\r\n+    // Pet (somente leitura)\r\n     if (petSelect) {\r\n       const petId = a.petId || (a.pet && a.pet._id) || '';\r\n       petSelect.innerHTML = `<option value=\"${petId}\">${a.pet || ''}</option>`;\r\n       petSelect.disabled = true;\r\n     }\r\n+\r\n+    // Serviço e valor (somente leitura)\r\n     if (servInput) { servInput.value = a.servico || ''; servInput.disabled = true; }\r\n     if (valorInput) { valorInput.value = Number(a.valor || 0).toFixed(2); valorInput.disabled = true; }\r\n \r\n+    // Oculta sugestões\r\n     if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n     if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n \r\n-    modal.classList.remove('hidden'); modal.classList.add('flex');\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n   }\r\n \r\n   function closeModal() {\r\n     if (!modal) return;\r\n"
                },
                {
                    "date": 1757362683381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,49 +270,47 @@\n     modal.classList.remove('hidden'); modal.classList.add('flex');\r\n     cliInput?.focus();\r\n   }\r\n \r\n-  // 🔧 Resolver nome do cliente (pode vir vazio no GET de agendamentos)\r\n-  const _clienteNomeCache = new Map(); // id => nome\r\n-\r\n+  // cache simples: clienteId -> nome\r\n+  const _clienteNomeCache = new Map();\r\n+  \r\n   async function resolveClienteNome(a) {\r\n     try {\r\n       if (!a) return '';\r\n \r\n-      // 1) Nome já presente no payload\r\n+      // 1) Nome já presente no payload (se algum dia for enviado)\r\n       const direct =\r\n         a.clienteNome ||\r\n         (a.cliente && typeof a.cliente === 'object' && (a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial)) ||\r\n         null;\r\n-      if (typeof direct === 'string' && direct.trim()) return direct.trim();\r\n+      if (typeof direct === 'string' && direct.trim()) {\r\n+        return direct.trim();\r\n+      }\r\n \r\n-      // 2) Descobrir um possível ID do cliente em vários formatos\r\n+      // 2) Descobrir um possível ID do cliente\r\n       const maybeId =\r\n         a.clienteId ||\r\n         a.clientId ||\r\n         a.customerId ||\r\n-        (a.cliente && typeof a.cliente === 'object' && a.cliente._id ? a.cliente._id : null) ||\r\n         (typeof a.cliente === 'string' ? a.cliente : null);\r\n \r\n-      // valida ObjectId(24 hex) em string\r\n-      const id =\r\n-        typeof maybeId === 'string' && /^[0-9a-fA-F]{24}$/.test(maybeId) ? maybeId : null;\r\n+      const id = (typeof maybeId === 'string' && /^[0-9a-fA-F]{24}$/.test(maybeId)) ? maybeId : null;\r\n \r\n-      // 3) Buscar por ID (com cache)\r\n       if (id) {\r\n         if (_clienteNomeCache.has(id)) return _clienteNomeCache.get(id);\r\n         const r = await api(`/func/clientes/${id}`);\r\n         if (r.ok) {\r\n           const c = await r.json();\r\n-          const nome = c?.nome || c?.nomeCompleto || c?.razaoSocial || '';\r\n+          const nome = c?.nome || '';\r\n           if (nome) {\r\n             _clienteNomeCache.set(id, nome);\r\n             return nome;\r\n           }\r\n         }\r\n       }\r\n \r\n-      // 4) Último recurso: tentar via petId (se existir essa rota)\r\n+      // 3) Último recurso: tentar via petId\r\n       const petId =\r\n         a.petId ||\r\n         (a.pet && typeof a.pet === 'object' && a.pet._id ? a.pet._id : null) ||\r\n         null;\r\n"
                },
                {
                    "date": 1757365249020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,12 @@\n   const modalClose = document.getElementById('modal-add-close');\r\n   const modalCancel = document.getElementById('modal-add-cancel');\r\n   const modalSave = document.getElementById('modal-add-save');\r\n \r\n+  const addStoreSelect = document.getElementById('add-store-select');\r\n+  const addDateInput   = document.getElementById('add-date');\r\n+  const statusSelect   = document.getElementById('add-status');\r\n+\r\n   const cliInput = document.getElementById('add-cli-input');\r\n   const cliSug = document.getElementById('add-cli-sug');\r\n   const petSelect = document.getElementById('add-pet-select');\r\n   const servInput = document.getElementById('add-serv-input');\r\n@@ -251,10 +255,26 @@\n   function openAddModal() {\r\n     state.editing = null;\r\n     if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n \r\n+    // habilita campos editáveis\r\n     [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n \r\n+    // Empresa e Data (default = seleção da página)\r\n+    if (addStoreSelect) {\r\n+      // reaproveita as opções do seletor da página, se existir\r\n+      if (storeSelect && storeSelect.options.length) {\r\n+        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n+      } else if (state.stores?.length) {\r\n+        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+      }\r\n+      addStoreSelect.value = state.selectedStoreId || storeSelect?.value || '';\r\n+    }\r\n+    if (addDateInput) {\r\n+      addDateInput.value = (dateInput?.value) || todayStr();\r\n+    }\r\n+\r\n+    // limpa seleção de cliente/serviço/pet\r\n     state.selectedCliente = null;\r\n     state.selectedServico = null;\r\n     if (cliInput) { cliInput.value = ''; }\r\n     if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n@@ -262,19 +282,24 @@\n     if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n     if (valorInput) { valorInput.value = ''; }\r\n     if (petSelect) { petSelect.innerHTML = ''; }\r\n \r\n+    // hora default (agora)\r\n     const now = new Date();\r\n     const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n \r\n-    modal.classList.remove('hidden'); modal.classList.add('flex');\r\n+    // status default\r\n+    if (statusSelect) statusSelect.value = 'agendado';\r\n+\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n     cliInput?.focus();\r\n   }\r\n \r\n   // cache simples: clienteId -> nome\r\n   const _clienteNomeCache = new Map();\r\n-  \r\n+\r\n   async function resolveClienteNome(a) {\r\n     try {\r\n       if (!a) return '';\r\n \r\n"
                },
                {
                    "date": 1757365281251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -465,26 +465,34 @@\n \r\n   // Salvar (adicionar/editar)\r\n   async function saveAgendamento() {\r\n     try {\r\n-      const dateRaw = dateInput?.value || todayStr();\r\n+      // prefere os campos do modal; cai para os campos da página\r\n+      const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n+      const storeIdSelected = (addStoreSelect?.value) || state.selectedStoreId || storeSelect?.value;\r\n       const hora = horaInput?.value;\r\n       const profissionalId = profSelect?.value;\r\n+      const status = (statusSelect?.value) || 'agendado';\r\n \r\n       if (!hora || !profissionalId) {\r\n         alert('Preencha hora e profissional.');\r\n         return;\r\n       }\r\n+      if (!storeIdSelected) {\r\n+        alert('Selecione a empresa.');\r\n+        return;\r\n+      }\r\n \r\n       const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n \r\n-      // Edição\r\n+      // edição (permanece igual, enviando status se existir)\r\n       if (state.editing && state.editing._id) {\r\n         const id = state.editing._id;\r\n         const body = {\r\n-          storeId: state.selectedStoreId,\r\n+          storeId: storeIdSelected,\r\n           profissionalId,\r\n           scheduledAt,\r\n+          status,\r\n           ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n           ...(state.editing.petId ? { petId: state.editing.petId } : {}),\r\n           ...(state.editing.servicoId ? { servicoId: state.editing.servicoId } : {}),\r\n           ...(typeof state.editing.valor !== 'undefined' ? { valor: state.editing.valor } : {}),\r\n@@ -500,9 +508,9 @@\n         renderGrid();\r\n         return;\r\n       }\r\n \r\n-      // Adição\r\n+      // adição\r\n       const clienteId = state.selectedCliente?._id;\r\n       const petId = petSelect?.value;\r\n       const servicoId = state.selectedServico?._id;\r\n       const valor = Number(valorInput?.value || 0);\r\n@@ -512,10 +520,13 @@\n         return;\r\n       }\r\n \r\n       const body = {\r\n-        storeId: state.selectedStoreId, clienteId, petId, servicoId,\r\n-        profissionalId, scheduledAt, valor, pago: false\r\n+        storeId: storeIdSelected,\r\n+        clienteId, petId, servicoId,\r\n+        profissionalId, scheduledAt, valor,\r\n+        status,\r\n+        pago: false\r\n       };\r\n \r\n       const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n       if (!resp.ok) {\r\n"
                },
                {
                    "date": 1757365807679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,40 +302,38 @@\n   async function resolveClienteNome(a) {\r\n     try {\r\n       if (!a) return '';\r\n \r\n-      // 1) Nome já presente no payload (se algum dia for enviado)\r\n+      // 1) nome direto vindo da API\r\n       const direct =\r\n         a.clienteNome ||\r\n         (a.cliente && typeof a.cliente === 'object' && (a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial)) ||\r\n         null;\r\n-      if (typeof direct === 'string' && direct.trim()) {\r\n-        return direct.trim();\r\n-      }\r\n+      if (typeof direct === 'string' && direct.trim()) return direct.trim();\r\n \r\n-      // 2) Descobrir um possível ID do cliente\r\n-      const maybeId =\r\n+      // 2) clienteId em qualquer formato\r\n+      let maybeId =\r\n         a.clienteId ||\r\n         a.clientId ||\r\n         a.customerId ||\r\n         (typeof a.cliente === 'string' ? a.cliente : null);\r\n \r\n+      if (typeof maybeId === 'object' && maybeId !== null && maybeId._id) {\r\n+        maybeId = String(maybeId._id);\r\n+      }\r\n       const id = (typeof maybeId === 'string' && /^[0-9a-fA-F]{24}$/.test(maybeId)) ? maybeId : null;\r\n \r\n       if (id) {\r\n         if (_clienteNomeCache.has(id)) return _clienteNomeCache.get(id);\r\n         const r = await api(`/func/clientes/${id}`);\r\n         if (r.ok) {\r\n           const c = await r.json();\r\n           const nome = c?.nome || '';\r\n-          if (nome) {\r\n-            _clienteNomeCache.set(id, nome);\r\n-            return nome;\r\n-          }\r\n+          if (nome) { _clienteNomeCache.set(id, nome); return nome; }\r\n         }\r\n       }\r\n \r\n-      // 3) Último recurso: tentar via petId\r\n+      // 3) fallback por petId\r\n       const petId =\r\n         a.petId ||\r\n         (a.pet && typeof a.pet === 'object' && a.pet._id ? a.pet._id : null) ||\r\n         null;\r\n"
                },
                {
                    "date": 1757366267210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,40 +355,66 @@\n     return '';\r\n   }\r\n \r\n   // --- DEPOIS: openEditModal (indica carregamento e garante preenchimento) ---\r\n+  function toDateInputValueFromISO(isoStr) {\r\n+    const d = new Date(isoStr);\r\n+    if (isNaN(d.getTime())) return todayStr();\r\n+    const yyyy = d.getFullYear();\r\n+    const mm = String(d.getMonth() + 1).padStart(2, '0');\r\n+    const dd = String(d.getDate()).padStart(2, '0');\r\n+    return `${yyyy}-${mm}-${dd}`;\r\n+  }\r\n+\r\n   async function openEditModal(a) {\r\n     state.editing = a || null;\r\n     if (!modal || !state.editing) return;\r\n \r\n+    // ====== Empresa e Data (vêm do item clicado) ======\r\n+    if (addStoreSelect) {\r\n+      // Copia as opções do seletor principal (mantém nomes e ids)\r\n+      if (storeSelect && storeSelect.options.length) {\r\n+        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n+      } else if (state.stores?.length) {\r\n+        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+      }\r\n+      const storeId = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n+      addStoreSelect.value = storeId || '';\r\n+    }\r\n+\r\n+    if (addDateInput) {\r\n+      const iso = a.h || a.scheduledAt || new Date().toISOString();\r\n+      addDateInput.value = toDateInputValueFromISO(iso);\r\n+    }\r\n+\r\n+    // ====== Hora ======\r\n     const d = new Date((a.h || a.scheduledAt) || new Date());\r\n     const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n \r\n+    // ====== Profissional ======\r\n     let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n     if (!profId && typeof a.profissional === 'string') {\r\n       const key = a.profissional.trim().toLowerCase();\r\n       const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n       if (match) profId = String(match._id);\r\n     }\r\n     if (profSelect && profId) profSelect.value = profId;\r\n \r\n-    // Cliente (somente leitura no modo edição)\r\n+    // ====== Cliente (somente leitura na edição) ======\r\n     if (cliInput) {\r\n       cliInput.disabled = true;\r\n       cliInput.value = '(carregando...)';\r\n       const nomeCli = await resolveClienteNome(a);\r\n       cliInput.value = nomeCli || '';\r\n     }\r\n \r\n-    // Pet (somente leitura)\r\n+    // ====== Pet / Serviço / Valor (somente leitura) ======\r\n     if (petSelect) {\r\n       const petId = a.petId || (a.pet && a.pet._id) || '';\r\n       petSelect.innerHTML = `<option value=\"${petId}\">${a.pet || ''}</option>`;\r\n       petSelect.disabled = true;\r\n     }\r\n-\r\n-    // Serviço e valor (somente leitura)\r\n     if (servInput) { servInput.value = a.servico || ''; servInput.disabled = true; }\r\n     if (valorInput) { valorInput.value = Number(a.valor || 0).toFixed(2); valorInput.disabled = true; }\r\n \r\n     // Oculta sugestões\r\n"
                },
                {
                    "date": 1757368043057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n   const modal = document.getElementById('modal-add-servico');\r\n   const modalClose = document.getElementById('modal-add-close');\r\n   const modalCancel = document.getElementById('modal-add-cancel');\r\n   const modalSave = document.getElementById('modal-add-save');\r\n+  const modalDelete = document.getElementById('modal-add-delete');\r\n \r\n   const addStoreSelect = document.getElementById('add-store-select');\r\n   const addDateInput   = document.getElementById('add-date');\r\n   const statusSelect   = document.getElementById('add-status');\r\n@@ -290,8 +291,10 @@\n \r\n     // status default\r\n     if (statusSelect) statusSelect.value = 'agendado';\r\n \r\n+    if (modalDelete) modalDelete.classList.add('hidden');\r\n+\r\n     modal.classList.remove('hidden');\r\n     modal.classList.add('flex');\r\n     cliInput?.focus();\r\n   }\r\n@@ -368,59 +371,51 @@\n   async function openEditModal(a) {\r\n     state.editing = a || null;\r\n     if (!modal || !state.editing) return;\r\n \r\n-    // ====== Empresa e Data (vêm do item clicado) ======\r\n-    if (addStoreSelect) {\r\n-      // Copia as opções do seletor principal (mantém nomes e ids)\r\n-      if (storeSelect && storeSelect.options.length) {\r\n-        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n-      } else if (state.stores?.length) {\r\n-        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-      }\r\n-      const storeId = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.value = storeId || '';\r\n-    }\r\n-\r\n-    if (addDateInput) {\r\n-      const iso = a.h || a.scheduledAt || new Date().toISOString();\r\n-      addDateInput.value = toDateInputValueFromISO(iso);\r\n-    }\r\n-\r\n-    // ====== Hora ======\r\n     const d = new Date((a.h || a.scheduledAt) || new Date());\r\n     const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n \r\n-    // ====== Profissional ======\r\n+    // Profissional\r\n     let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n     if (!profId && typeof a.profissional === 'string') {\r\n       const key = a.profissional.trim().toLowerCase();\r\n       const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n       if (match) profId = String(match._id);\r\n     }\r\n     if (profSelect && profId) profSelect.value = profId;\r\n \r\n-    // ====== Cliente (somente leitura na edição) ======\r\n+    // Cliente (leitura)\r\n+    let clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n     if (cliInput) {\r\n       cliInput.disabled = true;\r\n       cliInput.value = '(carregando...)';\r\n       const nomeCli = await resolveClienteNome(a);\r\n       cliInput.value = nomeCli || '';\r\n     }\r\n \r\n-    // ====== Pet / Serviço / Valor (somente leitura) ======\r\n+    // PET: agora EDITÁVEL — lista todos os pets do cliente e seleciona o atual\r\n     if (petSelect) {\r\n-      const petId = a.petId || (a.pet && a.pet._id) || '';\r\n-      petSelect.innerHTML = `<option value=\"${petId}\">${a.pet || ''}</option>`;\r\n-      petSelect.disabled = true;\r\n+      petSelect.disabled = false;\r\n+      petSelect.innerHTML = '';\r\n+      try {\r\n+        if (clienteId) {\r\n+          const resp = await api(`/func/clientes/${clienteId}/pets`);\r\n+          const pets = await resp.json().catch(() => []);\r\n+          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+        }\r\n+      } catch (_) { /* ignora */ }\r\n+      const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n+      if (currentPetId) petSelect.value = String(currentPetId);\r\n     }\r\n+\r\n+    // Serviço/valor continuam apenas leitura\r\n     if (servInput) { servInput.value = a.servico || ''; servInput.disabled = true; }\r\n     if (valorInput) { valorInput.value = Number(a.valor || 0).toFixed(2); valorInput.disabled = true; }\r\n \r\n-    // Oculta sugestões\r\n-    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n-    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    // Mostra botão Excluir\r\n+    if (modalDelete) modalDelete.classList.remove('hidden');\r\n \r\n     modal.classList.remove('hidden');\r\n     modal.classList.add('flex');\r\n   }\r\n"
                },
                {
                    "date": 1757368063184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -506,14 +506,15 @@\n       // edição (permanece igual, enviando status se existir)\r\n       if (state.editing && state.editing._id) {\r\n         const id = state.editing._id;\r\n         const body = {\r\n-          storeId: storeIdSelected,\r\n+          storeId: state.selectedStoreId,\r\n           profissionalId,\r\n           scheduledAt,\r\n-          status,\r\n+          // garante cliente para validação do pet no back\r\n           ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n-          ...(state.editing.petId ? { petId: state.editing.petId } : {}),\r\n+          // pet pode ter sido alterado no select\r\n+          ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n           ...(state.editing.servicoId ? { servicoId: state.editing.servicoId } : {}),\r\n           ...(typeof state.editing.valor !== 'undefined' ? { valor: state.editing.valor } : {}),\r\n           ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n         };\r\n"
                },
                {
                    "date": 1757368118677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -456,8 +456,40 @@\n       });\r\n     });\r\n   }\r\n \r\n+  function confirmAsync(title, message) {\r\n+    return new Promise((resolve) => {\r\n+      if (typeof window.showModal === 'function') {\r\n+        window.showModal({\r\n+          title: title || 'Confirmação',\r\n+          message: message || 'Deseja prosseguir?',\r\n+          confirmText: 'Excluir',\r\n+          cancelText: 'Cancelar',\r\n+          onConfirm: () => resolve(true),\r\n+          onCancel: () => resolve(false)\r\n+        });\r\n+      } else {\r\n+        resolve(window.confirm(message || 'Confirmar?'));\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  async function handleDelete() {\r\n+    if (!(state.editing && state.editing._id)) return;\r\n+    const ok = await confirmAsync('Excluir atendimento', 'Tem certeza que deseja excluir este atendimento? Esta ação não pode ser desfeita.');\r\n+    if (!ok) return;\r\n+    const resp = await api(`/func/agendamentos/${state.editing._id}`, { method: 'DELETE' });\r\n+    if (!resp.ok) {\r\n+      const err = await resp.json().catch(() => ({}));\r\n+      alert(err.message || 'Erro ao excluir agendamento');\r\n+      return;\r\n+    }\r\n+    await loadAgendamentos();\r\n+    closeModal();\r\n+    renderGrid();\r\n+  }\r\n+\r\n   // Busca serviços\r\n   async function searchServicos(term) {\r\n     if (!term || term.length < 2) {\r\n       if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n"
                },
                {
                    "date": 1757368139145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -603,8 +603,10 @@\n \r\n   cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n   servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n \r\n+  modalDelete?.addEventListener('click', handleDelete);\r\n+\r\n   storeSelect?.addEventListener('change', async () => {\r\n     state.selectedStoreId = storeSelect.value;\r\n     updateStoreLabel();\r\n     await loadProfissionais();\r\n"
                },
                {
                    "date": 1757368286119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,26 +256,10 @@\n   function openAddModal() {\r\n     state.editing = null;\r\n     if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n \r\n-    // habilita campos editáveis\r\n     [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n \r\n-    // Empresa e Data (default = seleção da página)\r\n-    if (addStoreSelect) {\r\n-      // reaproveita as opções do seletor da página, se existir\r\n-      if (storeSelect && storeSelect.options.length) {\r\n-        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n-      } else if (state.stores?.length) {\r\n-        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-      }\r\n-      addStoreSelect.value = state.selectedStoreId || storeSelect?.value || '';\r\n-    }\r\n-    if (addDateInput) {\r\n-      addDateInput.value = (dateInput?.value) || todayStr();\r\n-    }\r\n-\r\n-    // limpa seleção de cliente/serviço/pet\r\n     state.selectedCliente = null;\r\n     state.selectedServico = null;\r\n     if (cliInput) { cliInput.value = ''; }\r\n     if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n@@ -283,20 +267,16 @@\n     if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n     if (valorInput) { valorInput.value = ''; }\r\n     if (petSelect) { petSelect.innerHTML = ''; }\r\n \r\n-    // hora default (agora)\r\n     const now = new Date();\r\n     const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n \r\n-    // status default\r\n-    if (statusSelect) statusSelect.value = 'agendado';\r\n-\r\n+    // botão Excluir só aparece no modo edição\r\n     if (modalDelete) modalDelete.classList.add('hidden');\r\n \r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n+    modal.classList.remove('hidden'); modal.classList.add('flex');\r\n     cliInput?.focus();\r\n   }\r\n \r\n   // cache simples: clienteId -> nome\r\n"
                },
                {
                    "date": 1757368598416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,10 +256,12 @@\n   function openAddModal() {\r\n     state.editing = null;\r\n     if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n \r\n+    // Campos editáveis habilitados\r\n     [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n \r\n+    // Limpa estado/inputs\r\n     state.selectedCliente = null;\r\n     state.selectedServico = null;\r\n     if (cliInput) { cliInput.value = ''; }\r\n     if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n@@ -267,16 +269,38 @@\n     if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n     if (valorInput) { valorInput.value = ''; }\r\n     if (petSelect) { petSelect.innerHTML = ''; }\r\n \r\n+    // Empresa (usa as mesmas opções do seletor da página)\r\n+    if (addStoreSelect) {\r\n+      if (storeSelect && storeSelect.options.length) {\r\n+        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n+      } else if (state.stores?.length) {\r\n+        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+      }\r\n+      const sid = state.selectedStoreId || storeSelect?.value || '';\r\n+      addStoreSelect.value = sid;\r\n+    }\r\n+\r\n+    // Data (usa a data visível na página)\r\n+    if (addDateInput) {\r\n+      const date = normalizeDate(dateInput?.value || todayStr()); // YYYY-MM-DD\r\n+      addDateInput.value = date;\r\n+    }\r\n+\r\n+    // Hora default (agora)\r\n     const now = new Date();\r\n     const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n \r\n-    // botão Excluir só aparece no modo edição\r\n+    // Status default\r\n+    if (statusSelect) statusSelect.value = 'agendado';\r\n+\r\n+    // Botão Excluir só em edição\r\n     if (modalDelete) modalDelete.classList.add('hidden');\r\n \r\n-    modal.classList.remove('hidden'); modal.classList.add('flex');\r\n+    modal.classList.remove('hidden'); \r\n+    modal.classList.add('flex');\r\n     cliInput?.focus();\r\n   }\r\n \r\n   // cache simples: clienteId -> nome\r\n@@ -351,8 +375,26 @@\n   async function openEditModal(a) {\r\n     state.editing = a || null;\r\n     if (!modal || !state.editing) return;\r\n \r\n+    // Empresa (mostra a loja do agendamento; desabilitar evita lista de profissionais divergente)\r\n+    if (addStoreSelect) {\r\n+      if (storeSelect && storeSelect.options.length) {\r\n+        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n+      } else if (state.stores?.length) {\r\n+        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+      }\r\n+      addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n+      addStoreSelect.disabled = true; // opcional; remove se quiser permitir trocar a loja\r\n+    }\r\n+\r\n+    // Data do agendamento\r\n+    if (addDateInput) {\r\n+      const iso = a.h || a.scheduledAt || new Date().toISOString();\r\n+      addDateInput.value = toDateInputValueFromISO(iso);\r\n+    }\r\n+\r\n+    // Hora\r\n     const d = new Date((a.h || a.scheduledAt) || new Date());\r\n     const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n \r\n@@ -364,8 +406,11 @@\n       if (match) profId = String(match._id);\r\n     }\r\n     if (profSelect && profId) profSelect.value = profId;\r\n \r\n+    // Status\r\n+    if (statusSelect) statusSelect.value = a.status || 'agendado';\r\n+\r\n     // Cliente (leitura)\r\n     let clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n     if (cliInput) {\r\n       cliInput.disabled = true;\r\n@@ -373,9 +418,9 @@\n       const nomeCli = await resolveClienteNome(a);\r\n       cliInput.value = nomeCli || '';\r\n     }\r\n \r\n-    // PET: agora EDITÁVEL — lista todos os pets do cliente e seleciona o atual\r\n+    // Pet: editável\r\n     if (petSelect) {\r\n       petSelect.disabled = false;\r\n       petSelect.innerHTML = '';\r\n       try {\r\n@@ -383,18 +428,18 @@\n           const resp = await api(`/func/clientes/${clienteId}/pets`);\r\n           const pets = await resp.json().catch(() => []);\r\n           petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n         }\r\n-      } catch (_) { /* ignora */ }\r\n+      } catch (_) { /* silencioso */ }\r\n       const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n       if (currentPetId) petSelect.value = String(currentPetId);\r\n     }\r\n \r\n-    // Serviço/valor continuam apenas leitura\r\n+    // Serviço/Valor: leitura\r\n     if (servInput) { servInput.value = a.servico || ''; servInput.disabled = true; }\r\n     if (valorInput) { valorInput.value = Number(a.valor || 0).toFixed(2); valorInput.disabled = true; }\r\n \r\n-    // Mostra botão Excluir\r\n+    // Botão excluir visível\r\n     if (modalDelete) modalDelete.classList.remove('hidden');\r\n \r\n     modal.classList.remove('hidden');\r\n     modal.classList.add('flex');\r\n@@ -496,36 +541,28 @@\n \r\n   // Salvar (adicionar/editar)\r\n   async function saveAgendamento() {\r\n     try {\r\n-      // prefere os campos do modal; cai para os campos da página\r\n       const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n       const storeIdSelected = (addStoreSelect?.value) || state.selectedStoreId || storeSelect?.value;\r\n       const hora = horaInput?.value;\r\n       const profissionalId = profSelect?.value;\r\n       const status = (statusSelect?.value) || 'agendado';\r\n \r\n-      if (!hora || !profissionalId) {\r\n-        alert('Preencha hora e profissional.');\r\n-        return;\r\n-      }\r\n-      if (!storeIdSelected) {\r\n-        alert('Selecione a empresa.');\r\n-        return;\r\n-      }\r\n+      if (!hora || !profissionalId) { alert('Preencha hora e profissional.'); return; }\r\n+      if (!storeIdSelected) { alert('Selecione a empresa.'); return; }\r\n \r\n       const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n \r\n-      // edição (permanece igual, enviando status se existir)\r\n+      // Edição\r\n       if (state.editing && state.editing._id) {\r\n         const id = state.editing._id;\r\n         const body = {\r\n-          storeId: state.selectedStoreId,\r\n+          storeId: storeIdSelected,\r\n           profissionalId,\r\n           scheduledAt,\r\n-          // garante cliente para validação do pet no back\r\n+          status,\r\n           ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n-          // pet pode ter sido alterado no select\r\n           ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n           ...(state.editing.servicoId ? { servicoId: state.editing.servicoId } : {}),\r\n           ...(typeof state.editing.valor !== 'undefined' ? { valor: state.editing.valor } : {}),\r\n           ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n@@ -540,18 +577,15 @@\n         renderGrid();\r\n         return;\r\n       }\r\n \r\n-      // adição\r\n+      // Adição\r\n       const clienteId = state.selectedCliente?._id;\r\n       const petId = petSelect?.value;\r\n       const servicoId = state.selectedServico?._id;\r\n       const valor = Number(valorInput?.value || 0);\r\n \r\n-      if (!(clienteId && petId && servicoId)) {\r\n-        alert('Preencha cliente, pet e serviço.');\r\n-        return;\r\n-      }\r\n+      if (!(clienteId && petId && servicoId)) { alert('Preencha cliente, pet e serviço.'); return; }\r\n \r\n       const body = {\r\n         storeId: storeIdSelected,\r\n         clienteId, petId, servicoId,\r\n"
                },
                {
                    "date": 1757368765716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -482,22 +482,11 @@\n     });\r\n   }\r\n \r\n   function confirmAsync(title, message) {\r\n-    return new Promise((resolve) => {\r\n-      if (typeof window.showModal === 'function') {\r\n-        window.showModal({\r\n-          title: title || 'Confirmação',\r\n-          message: message || 'Deseja prosseguir?',\r\n-          confirmText: 'Excluir',\r\n-          cancelText: 'Cancelar',\r\n-          onConfirm: () => resolve(true),\r\n-          onCancel: () => resolve(false)\r\n-        });\r\n-      } else {\r\n-        resolve(window.confirm(message || 'Confirmar?'));\r\n-      }\r\n-    });\r\n+    // Usa o confirm nativo para evitar conflitos de z-index e foco com o modal de edição\r\n+    const ok = window.confirm(message || title || 'Confirmar?');\r\n+    return Promise.resolve(!!ok);\r\n   }\r\n \r\n   async function handleDelete() {\r\n     if (!(state.editing && state.editing._id)) return;\r\n"
                },
                {
                    "date": 1757368782251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -488,12 +488,16 @@\n     return Promise.resolve(!!ok);\r\n   }\r\n \r\n   async function handleDelete() {\r\n-    if (!(state.editing && state.editing._id)) return;\r\n+    // Captura o ID antes de qualquer await para evitar \"Cannot read '_id' of null\"\r\n+    const id = state.editing && state.editing._id ? String(state.editing._id) : null;\r\n+    if (!id) return;\r\n+\r\n     const ok = await confirmAsync('Excluir atendimento', 'Tem certeza que deseja excluir este atendimento? Esta ação não pode ser desfeita.');\r\n     if (!ok) return;\r\n-    const resp = await api(`/func/agendamentos/${state.editing._id}`, { method: 'DELETE' });\r\n+\r\n+    const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\r\n     if (!resp.ok) {\r\n       const err = await resp.json().catch(() => ({}));\r\n       alert(err.message || 'Erro ao excluir agendamento');\r\n       return;\r\n"
                },
                {
                    "date": 1757368923635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,12 +481,69 @@\n       });\r\n     });\r\n   }\r\n \r\n-  function confirmAsync(title, message) {\r\n-    // Usa o confirm nativo para evitar conflitos de z-index e foco com o modal de edição\r\n-    const ok = window.confirm(message || title || 'Confirmar?');\r\n-    return Promise.resolve(!!ok);\r\n+  function confirmAsync(title, message, opts = {}) {\r\n+    const confirmText = opts.confirmText || 'Excluir';\r\n+    const cancelText  = opts.cancelText  || 'Cancelar';\r\n+\r\n+    // cria o modal de confirmação (uma única vez) e injeta no body\r\n+    let overlay = document.getElementById('confirm-overlay');\r\n+    if (!overlay) {\r\n+      overlay = document.createElement('div');\r\n+      overlay.id = 'confirm-overlay';\r\n+      overlay.className = 'fixed inset-0 bg-black/50 z-[70] hidden items-center justify-center'; // acima do z-50 do modal de edição\r\n+      overlay.innerHTML = `\r\n+        <div class=\"bg-white w-full max-w-md rounded-lg shadow-lg overflow-hidden\">\r\n+          <div class=\"px-5 py-4 border-b\">\r\n+            <h3 id=\"confirm-title\" class=\"text-lg font-semibold\">Confirmação</h3>\r\n+          </div>\r\n+          <div id=\"confirm-message\" class=\"px-5 py-4 text-gray-700\">Deseja prosseguir?</div>\r\n+          <div class=\"px-5 py-4 border-t flex justify-end gap-2\">\r\n+            <button id=\"confirm-cancel\" class=\"px-4 py-2 rounded-lg bg-gray-200 text-gray-800 hover:bg-gray-300\"></button>\r\n+            <button id=\"confirm-ok\" class=\"px-4 py-2 rounded-lg bg-red-600 text-white hover:bg-red-700\"></button>\r\n+          </div>\r\n+        </div>\r\n+      `;\r\n+      document.body.appendChild(overlay);\r\n+    }\r\n+\r\n+    // atualiza textos\r\n+    overlay.querySelector('#confirm-title').textContent = title || 'Confirmação';\r\n+    overlay.querySelector('#confirm-message').textContent = message || 'Deseja prosseguir?';\r\n+    overlay.querySelector('#confirm-cancel').textContent = cancelText;\r\n+    overlay.querySelector('#confirm-ok').textContent = confirmText;\r\n+\r\n+    // abre\r\n+    overlay.classList.remove('hidden');\r\n+    overlay.classList.add('flex');\r\n+\r\n+    // handlers\r\n+    const btnOk = overlay.querySelector('#confirm-ok');\r\n+    const btnCancel = overlay.querySelector('#confirm-cancel');\r\n+\r\n+    return new Promise((resolve) => {\r\n+      const onOk = () => cleanup(true);\r\n+      const onCancel = () => cleanup(false);\r\n+      const onKey = (e) => { if (e.key === 'Escape') cleanup(false); };\r\n+      const onBackdrop = (e) => { if (e.target === overlay) cleanup(false); };\r\n+\r\n+      function cleanup(result) {\r\n+        btnOk.removeEventListener('click', onOk);\r\n+        btnCancel.removeEventListener('click', onCancel);\r\n+        document.removeEventListener('keydown', onKey);\r\n+        overlay.removeEventListener('click', onBackdrop);\r\n+        overlay.classList.add('hidden');\r\n+        overlay.classList.remove('flex');\r\n+        resolve(result);\r\n+      }\r\n+\r\n+      btnOk.addEventListener('click', onOk);\r\n+      btnCancel.addEventListener('click', onCancel);\r\n+      document.addEventListener('keydown', onKey);\r\n+      overlay.addEventListener('click', onBackdrop);\r\n+      btnOk.focus();\r\n+    });\r\n   }\r\n \r\n   async function handleDelete() {\r\n     // Captura o ID antes de qualquer await para evitar \"Cannot read '_id' of null\"\r\n"
                },
                {
                    "date": 1757369115301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -485,73 +485,48 @@\n   function confirmAsync(title, message, opts = {}) {\r\n     const confirmText = opts.confirmText || 'Excluir';\r\n     const cancelText  = opts.cancelText  || 'Cancelar';\r\n \r\n-    // cria o modal de confirmação (uma única vez) e injeta no body\r\n-    let overlay = document.getElementById('confirm-overlay');\r\n-    if (!overlay) {\r\n-      overlay = document.createElement('div');\r\n-      overlay.id = 'confirm-overlay';\r\n-      overlay.className = 'fixed inset-0 bg-black/50 z-[70] hidden items-center justify-center'; // acima do z-50 do modal de edição\r\n-      overlay.innerHTML = `\r\n-        <div class=\"bg-white w-full max-w-md rounded-lg shadow-lg overflow-hidden\">\r\n-          <div class=\"px-5 py-4 border-b\">\r\n-            <h3 id=\"confirm-title\" class=\"text-lg font-semibold\">Confirmação</h3>\r\n-          </div>\r\n-          <div id=\"confirm-message\" class=\"px-5 py-4 text-gray-700\">Deseja prosseguir?</div>\r\n-          <div class=\"px-5 py-4 border-t flex justify-end gap-2\">\r\n-            <button id=\"confirm-cancel\" class=\"px-4 py-2 rounded-lg bg-gray-200 text-gray-800 hover:bg-gray-300\"></button>\r\n-            <button id=\"confirm-ok\" class=\"px-4 py-2 rounded-lg bg-red-600 text-white hover:bg-red-700\"></button>\r\n-          </div>\r\n-        </div>\r\n-      `;\r\n-      document.body.appendChild(overlay);\r\n+    // usa o componente já existente do projeto\r\n+    if (typeof window.showModal === 'function') {\r\n+      return new Promise((resolve) => {\r\n+        window.showModal({\r\n+          title: title || 'Confirmação',\r\n+          message: message || 'Deseja prosseguir?',\r\n+          confirmText,\r\n+          cancelText,\r\n+          onConfirm: () => resolve(true),\r\n+          onCancel : () => resolve(false)\r\n+        });\r\n+\r\n+        // garante que o overlay do modal de confirmação fique acima do modal de edição\r\n+        // (sem alterar o componente: apenas ajusta o z-index do último overlay fixo recém-criado)\r\n+        queueMicrotask(() => {\r\n+          try {\r\n+            const candidates = Array.from(document.body.children).filter(el => {\r\n+              const cs = getComputedStyle(el);\r\n+              return cs.position === 'fixed' && (el.className || '').includes('inset-0');\r\n+            });\r\n+            const overlay = candidates.at(-1);\r\n+            if (overlay) overlay.style.zIndex = '70'; // acima do z-50 do modal de edição\r\n+          } catch (_) { /* silencioso */ }\r\n+        });\r\n+      });\r\n     }\r\n \r\n-    // atualiza textos\r\n-    overlay.querySelector('#confirm-title').textContent = title || 'Confirmação';\r\n-    overlay.querySelector('#confirm-message').textContent = message || 'Deseja prosseguir?';\r\n-    overlay.querySelector('#confirm-cancel').textContent = cancelText;\r\n-    overlay.querySelector('#confirm-ok').textContent = confirmText;\r\n-\r\n-    // abre\r\n-    overlay.classList.remove('hidden');\r\n-    overlay.classList.add('flex');\r\n-\r\n-    // handlers\r\n-    const btnOk = overlay.querySelector('#confirm-ok');\r\n-    const btnCancel = overlay.querySelector('#confirm-cancel');\r\n-\r\n-    return new Promise((resolve) => {\r\n-      const onOk = () => cleanup(true);\r\n-      const onCancel = () => cleanup(false);\r\n-      const onKey = (e) => { if (e.key === 'Escape') cleanup(false); };\r\n-      const onBackdrop = (e) => { if (e.target === overlay) cleanup(false); };\r\n-\r\n-      function cleanup(result) {\r\n-        btnOk.removeEventListener('click', onOk);\r\n-        btnCancel.removeEventListener('click', onCancel);\r\n-        document.removeEventListener('keydown', onKey);\r\n-        overlay.removeEventListener('click', onBackdrop);\r\n-        overlay.classList.add('hidden');\r\n-        overlay.classList.remove('flex');\r\n-        resolve(result);\r\n-      }\r\n-\r\n-      btnOk.addEventListener('click', onOk);\r\n-      btnCancel.addEventListener('click', onCancel);\r\n-      document.addEventListener('keydown', onKey);\r\n-      overlay.addEventListener('click', onBackdrop);\r\n-      btnOk.focus();\r\n-    });\r\n+    // fallback absoluto se o componente não existir (dev/local)\r\n+    const ok = window.confirm(message || title || 'Confirmar?');\r\n+    return Promise.resolve(!!ok);\r\n   }\r\n \r\n   async function handleDelete() {\r\n-    // Captura o ID antes de qualquer await para evitar \"Cannot read '_id' of null\"\r\n     const id = state.editing && state.editing._id ? String(state.editing._id) : null;\r\n     if (!id) return;\r\n \r\n-    const ok = await confirmAsync('Excluir atendimento', 'Tem certeza que deseja excluir este atendimento? Esta ação não pode ser desfeita.');\r\n+    const ok = await confirmAsync('Excluir atendimento', 'Tem certeza que deseja excluir este atendimento? Esta ação não pode ser desfeita.', {\r\n+      confirmText: 'Excluir',\r\n+      cancelText: 'Cancelar'\r\n+    });\r\n     if (!ok) return;\r\n \r\n     const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\r\n     if (!resp.ok) {\r\n"
                },
                {
                    "date": 1757369258583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -485,36 +485,69 @@\n   function confirmAsync(title, message, opts = {}) {\r\n     const confirmText = opts.confirmText || 'Excluir';\r\n     const cancelText  = opts.cancelText  || 'Cancelar';\r\n \r\n-    // usa o componente já existente do projeto\r\n     if (typeof window.showModal === 'function') {\r\n       return new Promise((resolve) => {\r\n+        // 1) Bloqueia interações no modal de edição enquanto a confirmação estiver aberta\r\n+        const peBackup = modal ? modal.style.pointerEvents : '';\r\n+        if (modal) {\r\n+          modal.style.pointerEvents = 'none';\r\n+          modal.setAttribute('aria-hidden', 'true');\r\n+        }\r\n+\r\n+        // 2) Abre o modal do projeto\r\n         window.showModal({\r\n           title: title || 'Confirmação',\r\n           message: message || 'Deseja prosseguir?',\r\n           confirmText,\r\n           cancelText,\r\n-          onConfirm: () => resolve(true),\r\n-          onCancel : () => resolve(false)\r\n+          onConfirm: () => { restore(); resolve(true); },\r\n+          onCancel : () => { restore(); resolve(false); }\r\n         });\r\n \r\n-        // garante que o overlay do modal de confirmação fique acima do modal de edição\r\n-        // (sem alterar o componente: apenas ajusta o z-index do último overlay fixo recém-criado)\r\n-        queueMicrotask(() => {\r\n+        // Restaura pointer-events e aria quando fechar\r\n+        function restore() {\r\n+          if (modal) {\r\n+            modal.style.pointerEvents = peBackup || '';\r\n+            modal.removeAttribute('aria-hidden');\r\n+          }\r\n+        }\r\n+\r\n+        // 3) Eleva o overlay do modal de confirmação acima de qualquer outra camada\r\n+        const bump = () => {\r\n           try {\r\n-            const candidates = Array.from(document.body.children).filter(el => {\r\n+            const all = Array.from(document.querySelectorAll('body *'));\r\n+            const topZ = all.reduce((mx, el) => {\r\n               const cs = getComputedStyle(el);\r\n-              return cs.position === 'fixed' && (el.className || '').includes('inset-0');\r\n+              if (cs.position !== 'static') {\r\n+                const zi = parseInt(cs.zIndex, 10);\r\n+                if (!isNaN(zi)) mx = Math.max(mx, zi);\r\n+              }\r\n+              return mx;\r\n+            }, 0);\r\n+\r\n+            // Heurística: último elemento FIXED que cobre ~toda a viewport é o overlay da confirmação\r\n+            const overlays = all.filter(el => {\r\n+              const cs = getComputedStyle(el);\r\n+              if (cs.position !== 'fixed') return false;\r\n+              const r = el.getBoundingClientRect();\r\n+              return r.width >= window.innerWidth * 0.95 && r.height >= window.innerHeight * 0.95;\r\n             });\r\n-            const overlay = candidates.at(-1);\r\n-            if (overlay) overlay.style.zIndex = '70'; // acima do z-50 do modal de edição\r\n-          } catch (_) { /* silencioso */ }\r\n-        });\r\n+            const overlay = overlays.at(-1);\r\n+            if (overlay) {\r\n+              overlay.style.zIndex = String(topZ + 2);   // acima do modal de edição\r\n+              overlay.style.pointerEvents = 'auto';       // garante clique no overlay/botões\r\n+            }\r\n+          } catch (_) { /* noop */ }\r\n+        };\r\n+        // dá um \"tick\" para o DOM montar o modal e então ajusta\r\n+        requestAnimationFrame(bump);\r\n+        setTimeout(bump, 0);\r\n       });\r\n     }\r\n \r\n-    // fallback absoluto se o componente não existir (dev/local)\r\n+    // Fallback (dev/local) se o componente não existir\r\n     const ok = window.confirm(message || title || 'Confirmar?');\r\n     return Promise.resolve(!!ok);\r\n   }\r\n \r\n"
                },
                {
                    "date": 1757369464978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -487,16 +487,17 @@\n     const cancelText  = opts.cancelText  || 'Cancelar';\r\n \r\n     if (typeof window.showModal === 'function') {\r\n       return new Promise((resolve) => {\r\n-        // 1) Bloqueia interações no modal de edição enquanto a confirmação estiver aberta\r\n-        const peBackup = modal ? modal.style.pointerEvents : '';\r\n+        // 1) Esconde temporariamente o modal de edição (sem desmontar)\r\n+        const prevVis = modal ? modal.style.visibility : '';\r\n+        const prevPe  = modal ? modal.style.pointerEvents : '';\r\n         if (modal) {\r\n+          modal.style.visibility = 'hidden';\r\n           modal.style.pointerEvents = 'none';\r\n-          modal.setAttribute('aria-hidden', 'true');\r\n         }\r\n \r\n-        // 2) Abre o modal do projeto\r\n+        // 2) Abre o modal padrão do projeto\r\n         window.showModal({\r\n           title: title || 'Confirmação',\r\n           message: message || 'Deseja prosseguir?',\r\n           confirmText,\r\n@@ -504,50 +505,40 @@\n           onConfirm: () => { restore(); resolve(true); },\r\n           onCancel : () => { restore(); resolve(false); }\r\n         });\r\n \r\n-        // Restaura pointer-events e aria quando fechar\r\n-        function restore() {\r\n-          if (modal) {\r\n-            modal.style.pointerEvents = peBackup || '';\r\n-            modal.removeAttribute('aria-hidden');\r\n-          }\r\n-        }\r\n-\r\n-        // 3) Eleva o overlay do modal de confirmação acima de qualquer outra camada\r\n+        // 3) Após montar, garante overlay por cima de tudo\r\n+        //    (pega o último elemento \"fixed\" full-screen e sobe o z-index)\r\n         const bump = () => {\r\n           try {\r\n             const all = Array.from(document.querySelectorAll('body *'));\r\n-            const topZ = all.reduce((mx, el) => {\r\n-              const cs = getComputedStyle(el);\r\n-              if (cs.position !== 'static') {\r\n-                const zi = parseInt(cs.zIndex, 10);\r\n-                if (!isNaN(zi)) mx = Math.max(mx, zi);\r\n-              }\r\n-              return mx;\r\n-            }, 0);\r\n-\r\n-            // Heurística: último elemento FIXED que cobre ~toda a viewport é o overlay da confirmação\r\n             const overlays = all.filter(el => {\r\n               const cs = getComputedStyle(el);\r\n               if (cs.position !== 'fixed') return false;\r\n               const r = el.getBoundingClientRect();\r\n               return r.width >= window.innerWidth * 0.95 && r.height >= window.innerHeight * 0.95;\r\n             });\r\n             const overlay = overlays.at(-1);\r\n             if (overlay) {\r\n-              overlay.style.zIndex = String(topZ + 2);   // acima do modal de edição\r\n-              overlay.style.pointerEvents = 'auto';       // garante clique no overlay/botões\r\n+              overlay.style.zIndex = '9999';\r\n+              overlay.style.pointerEvents = 'auto';\r\n             }\r\n           } catch (_) { /* noop */ }\r\n         };\r\n-        // dá um \"tick\" para o DOM montar o modal e então ajusta\r\n         requestAnimationFrame(bump);\r\n         setTimeout(bump, 0);\r\n+\r\n+        // 4) Restaura o modal de edição quando fechar a confirmação\r\n+        function restore() {\r\n+          if (modal) {\r\n+            modal.style.visibility = prevVis || '';\r\n+            modal.style.pointerEvents = prevPe || '';\r\n+          }\r\n+        }\r\n       });\r\n     }\r\n \r\n-    // Fallback (dev/local) se o componente não existir\r\n+    // Fallback (apenas se o componente não existir)\r\n     const ok = window.confirm(message || title || 'Confirmar?');\r\n     return Promise.resolve(!!ok);\r\n   }\r\n \r\n"
                },
                {
                    "date": 1757370075314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,19 +212,26 @@\n         col = body.querySelector(`div[data-profissional-id=\"${state.profissionais[0]._id}\"][data-hh=\"${hh}\"]`);\r\n       }\r\n       if (!col) continue;\r\n \r\n-      // Card\r\n+      // ===== Card =====\r\n+      const meta = statusMeta(a.status); // classes e rótulo do status\r\n       const card = document.createElement('div');\r\n-      card.className = 'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2 cursor-pointer hover:ring-black/10 transition';\r\n+      card.className =\r\n+        'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2 cursor-pointer hover:ring-black/10 transition ' +\r\n+        'pl-2 border-l-4 ' + meta.borderClass; // faixa colorida à esquerda\r\n       card.dataset.appointmentId = a._id || '';\r\n \r\n       const left = document.createElement('div');\r\n       left.innerHTML = `\r\n-        <div class=\"font-medium text-gray-900\">${a.pet || ''}</div>\r\n+        <div class=\"flex items-center gap-2\">\r\n+          <div class=\"font-medium text-gray-900\">${a.pet || ''}</div>\r\n+          ${renderStatusBadge(a.status)}\r\n+        </div>\r\n         <div class=\"text-gray-600\">${a.servico || ''}</div>\r\n         <div class=\"text-gray-600\">${money(a.valor)}</div>\r\n       `;\r\n+\r\n       const right = document.createElement('div');\r\n       right.className = 'text-lg';\r\n       const dollar = document.createElement('span');\r\n       dollar.textContent = '$';\r\n"
                },
                {
                    "date": 1757370154928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,8 +258,40 @@\n       agendaList.appendChild(info);\r\n     }\r\n   }\r\n \r\n+  // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n+  function statusMeta(s) {\r\n+    const map = {\r\n+      agendado: {\r\n+        label: 'Agendado',\r\n+        badgeClass: 'bg-gray-200 text-gray-700 border border-gray-300',\r\n+        borderClass: 'border-gray-300'\r\n+      },\r\n+      em_espera: {\r\n+        label: 'Em espera',\r\n+        badgeClass: 'bg-amber-100 text-amber-800 border border-amber-200',\r\n+        borderClass: 'border-amber-400'\r\n+      },\r\n+      em_atendimento: {\r\n+        label: 'Em atendimento',\r\n+        badgeClass: 'bg-blue-100 text-blue-800 border border-blue-200',\r\n+        borderClass: 'border-blue-500'\r\n+      },\r\n+      finalizado: {\r\n+        label: 'Finalizado',\r\n+        badgeClass: 'bg-green-100 text-green-800 border border-green-200',\r\n+        borderClass: 'border-green-500'\r\n+      }\r\n+    };\r\n+    return map[s] || map.agendado;\r\n+  }\r\n+\r\n+  function renderStatusBadge(s) {\r\n+    const { label, badgeClass } = statusMeta(s);\r\n+    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${badgeClass}\">${label}</span>`;\r\n+  }\r\n+\r\n   // Modal — modo adicionar\r\n   function openAddModal() {\r\n     state.editing = null;\r\n     if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n"
                },
                {
                    "date": 1757371517952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,8 +260,16 @@\n   }\r\n \r\n   // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n   function statusMeta(s) {\r\n+    // Normaliza: remove acentos, trim, lowercase e converte espaço/hífen para \"_\"\r\n+    const keyRaw = String(s || 'agendado')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n+\r\n+    const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+    const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n+\r\n     const map = {\r\n       agendado: {\r\n         label: 'Agendado',\r\n         badgeClass: 'bg-gray-200 text-gray-700 border border-gray-300',\r\n@@ -282,9 +290,10 @@\n         badgeClass: 'bg-green-100 text-green-800 border border-green-200',\r\n         borderClass: 'border-green-500'\r\n       }\r\n     };\r\n-    return map[s] || map.agendado;\r\n+\r\n+    return map[k] || map.agendado;\r\n   }\r\n \r\n   function renderStatusBadge(s) {\r\n     const { label, badgeClass } = statusMeta(s);\r\n"
                },
                {
                    "date": 1757371608824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -431,9 +431,9 @@\n       } else if (state.stores?.length) {\r\n         addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n       }\r\n       addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.disabled = true; // opcional; remove se quiser permitir trocar a loja\r\n+      addStoreSelect.disabled = true; // opcional; remova se quiser permitir trocar a loja\r\n     }\r\n \r\n     // Data do agendamento\r\n     if (addDateInput) {\r\n@@ -454,10 +454,16 @@\n       if (match) profId = String(match._id);\r\n     }\r\n     if (profSelect && profId) profSelect.value = profId;\r\n \r\n-    // Status\r\n-    if (statusSelect) statusSelect.value = a.status || 'agendado';\r\n+    // Status (normalizado para bater com os values do <select>)\r\n+    if (statusSelect) {\r\n+      const keyRaw = String(a.status || 'agendado')\r\n+        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+        .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n+      const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+      statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n+    }\r\n \r\n     // Cliente (leitura)\r\n     let clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n     if (cliInput) {\r\n"
                },
                {
                    "date": 1757372222422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,40 +260,24 @@\n   }\r\n \r\n   // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n   function statusMeta(s) {\r\n-    // Normaliza: remove acentos, trim, lowercase e converte espaço/hífen para \"_\"\r\n+    // Normaliza para evitar divergência de formatação (acentos/maiúsculas/espaços)\r\n     const keyRaw = String(s || 'agendado')\r\n       .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n       .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n \r\n     const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n     const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n \r\n     const map = {\r\n-      agendado: {\r\n-        label: 'Agendado',\r\n-        badgeClass: 'bg-gray-200 text-gray-700 border border-gray-300',\r\n-        borderClass: 'border-gray-300'\r\n-      },\r\n-      em_espera: {\r\n-        label: 'Em espera',\r\n-        badgeClass: 'bg-amber-100 text-amber-800 border border-amber-200',\r\n-        borderClass: 'border-amber-400'\r\n-      },\r\n-      em_atendimento: {\r\n-        label: 'Em atendimento',\r\n-        badgeClass: 'bg-blue-100 text-blue-800 border border-blue-200',\r\n-        borderClass: 'border-blue-500'\r\n-      },\r\n-      finalizado: {\r\n-        label: 'Finalizado',\r\n-        badgeClass: 'bg-green-100 text-green-800 border border-green-200',\r\n-        borderClass: 'border-green-500'\r\n-      }\r\n+      agendado: { label: 'Agendado', badgeClass: 'bg-gray-200 text-gray-700 border border-gray-300', borderClass: 'border-gray-300' },\r\n+      em_espera: { label: 'Em espera', badgeClass: 'bg-amber-100 text-amber-800 border border-amber-200', borderClass: 'border-amber-400' },\r\n+      em_atendimento: { label: 'Em atendimento', badgeClass: 'bg-blue-100 text-blue-800 border border-blue-200', borderClass: 'border-blue-500' },\r\n+      finalizado: { label: 'Finalizado', badgeClass: 'bg-green-100 text-green-800 border border-green-200', borderClass: 'border-green-500' }\r\n     };\r\n \r\n-    return map[k] || map.agendado;\r\n+    return map[k];\r\n   }\r\n \r\n   function renderStatusBadge(s) {\r\n     const { label, badgeClass } = statusMeta(s);\r\n"
                },
                {
                    "date": 1757372789033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,21 +260,50 @@\n   }\r\n \r\n   // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n   function statusMeta(s) {\r\n-    // Normaliza para evitar divergência de formatação (acentos/maiúsculas/espaços)\r\n+    // Normalização: acentos/maiúsculas/espaços/hífens\r\n     const keyRaw = String(s || 'agendado')\r\n       .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n       .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n \r\n     const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n     const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n \r\n+    // Paleta acessível (contraste AA) + info para faixa lateral e badge compacta\r\n     const map = {\r\n-      agendado: { label: 'Agendado', badgeClass: 'bg-gray-200 text-gray-700 border border-gray-300', borderClass: 'border-gray-300' },\r\n-      em_espera: { label: 'Em espera', badgeClass: 'bg-amber-100 text-amber-800 border border-amber-200', borderClass: 'border-amber-400' },\r\n-      em_atendimento: { label: 'Em atendimento', badgeClass: 'bg-blue-100 text-blue-800 border border-blue-200', borderClass: 'border-blue-500' },\r\n-      finalizado: { label: 'Finalizado', badgeClass: 'bg-green-100 text-green-800 border border-green-200', borderClass: 'border-green-500' }\r\n+      agendado: {\r\n+        label: 'Agendado',\r\n+        short: 'Agend.',\r\n+        stripe: '#64748B',     // slate-500\r\n+        text: '#0F172A',       // slate-900\r\n+        badgeClass: 'bg-slate-100 text-slate-700 border border-slate-200',\r\n+        borderClass: 'border-slate-300'\r\n+      },\r\n+      em_espera: {\r\n+        label: 'Em espera',\r\n+        short: 'Espera',\r\n+        stripe: '#B45309',     // amber-700\r\n+        text: '#1F2937',       // gray-800\r\n+        badgeClass: 'bg-amber-50 text-amber-800 border border-amber-200',\r\n+        borderClass: 'border-amber-400'\r\n+      },\r\n+      em_atendimento: {\r\n+        label: 'Em atendimento',\r\n+        short: 'Atend.',\r\n+        stripe: '#1D4ED8',     // blue-700\r\n+        text: '#0B1235',\r\n+        badgeClass: 'bg-blue-50 text-blue-800 border border-blue-200',\r\n+        borderClass: 'border-blue-500'\r\n+      },\r\n+      finalizado: {\r\n+        label: 'Finalizado',\r\n+        short: 'Fim.',\r\n+        stripe: '#16A34A',     // green-600\r\n+        text: '#052E16',\r\n+        badgeClass: 'bg-green-50 text-green-800 border border-green-200',\r\n+        borderClass: 'border-green-500'\r\n+      }\r\n     };\r\n \r\n     return map[k];\r\n   }\r\n"
                },
                {
                    "date": 1757373465203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -735,19 +735,40 @@\n   servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n \r\n   modalDelete?.addEventListener('click', handleDelete);\r\n \r\n+  // Ações rápidas nos cartões (delegação no container da agenda)\r\n+  agendaList?.addEventListener('click', (ev) => {\r\n+    const btn = ev.target.closest('.agenda-action');\r\n+    if (!btn) return;\r\n+    const id = btn.getAttribute('data-id');\r\n+    if (!id) return;\r\n+\r\n+    if (btn.classList.contains('edit')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      if (item) openEditModal(item);\r\n+    } else if (btn.classList.contains('status')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+      const cur = (item && item.status) || 'agendado';\r\n+      const next = chain[(chain.indexOf(cur) + 1) % chain.length];\r\n+      updateStatusQuick(id, next);\r\n+    }\r\n+  });\r\n+\r\n   storeSelect?.addEventListener('change', async () => {\r\n     state.selectedStoreId = storeSelect.value;\r\n     updateStoreLabel();\r\n     await loadProfissionais();\r\n     await loadAgendamentos();\r\n     renderGrid();\r\n+    enhanceAgendaUI();     // zebra + sublinha + ações + linha do \"agora\"\r\n   });\r\n \r\n   dateInput?.addEventListener('change', async () => {\r\n     await loadAgendamentos();\r\n     renderGrid();\r\n+    enhanceAgendaUI();\r\n   });\r\n \r\n   // Boot\r\n   (async function init() {\r\n@@ -758,6 +779,7 @@\n     }\r\n     await loadProfissionais();\r\n     await loadAgendamentos();\r\n     renderGrid();\r\n+    enhanceAgendaUI();\r\n   })();\r\n })();\r\n"
                },
                {
                    "date": 1757373569356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -627,8 +627,9 @@\n     }\r\n     await loadAgendamentos();\r\n     closeModal();\r\n     renderGrid();\r\n+    enhanceAgendaUI();\r\n   }\r\n \r\n   // Busca serviços\r\n   async function searchServicos(term) {\r\n@@ -690,8 +691,9 @@\n         }\r\n         await loadAgendamentos();\r\n         closeModal();\r\n         renderGrid();\r\n+        enhanceAgendaUI();\r\n         return;\r\n       }\r\n \r\n       // Adição\r\n@@ -724,8 +726,117 @@\n       alert(e.message || 'Erro ao salvar');\r\n     }\r\n   }\r\n \r\n+  function enhanceAgendaUI() {\r\n+    try {\r\n+      applyZebraAndSublines();\r\n+      decorateCards();\r\n+      drawNowLine();\r\n+    } catch (e) {\r\n+      console.info('[enhanceAgendaUI] skip', e);\r\n+    }\r\n+  }\r\n+\r\n+  // Zebra de linhas + sublinha 30min com CSS (via classe)\r\n+  function applyZebraAndSublines() {\r\n+    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n+    if (!body) return;\r\n+\r\n+    body.style.position = 'relative'; // para linha do \"agora\"\r\n+    const totalCols = 1 + (state.profissionais?.length || 0); // 1 (hora) + N profissionais\r\n+    if (totalCols <= 0) return;\r\n+\r\n+    const cells = Array.from(body.children);\r\n+    const totalRows = Math.floor(cells.length / totalCols);\r\n+\r\n+    for (let row = 0; row < totalRows; row++) {\r\n+      const start = row * totalCols;\r\n+      const zebraClass = (row % 2 === 0) ? 'bg-white' : 'bg-slate-50';\r\n+\r\n+      // primeira célula = hora\r\n+      const timeCell = cells[start];\r\n+      timeCell.classList.remove('bg-gray-50');\r\n+      timeCell.classList.add(zebraClass);\r\n+\r\n+      // colunas da linha\r\n+      for (let i = 1; i < totalCols; i++) {\r\n+        const colCell = cells[start + i];\r\n+        colCell.classList.add(zebraClass, 'agenda-slot'); // agenda-slot desenha sublinha (CSS)\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  // Insere ícones de ação nos cartões (editar / mudar status)\r\n+  function decorateCards() {\r\n+    const cards = agendaList?.querySelectorAll('div[data-appointment-id]');\r\n+    if (!cards || !cards.length) return;\r\n+\r\n+    cards.forEach((card) => {\r\n+      if (card.querySelector('.agenda-card__actions')) return; // já decorado\r\n+      card.classList.add('agenda-card'); // ativa hover via CSS\r\n+      card.style.position = 'relative';\r\n+\r\n+      const id = card.getAttribute('data-appointment-id') || '';\r\n+      const actions = document.createElement('div');\r\n+      actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex items-center gap-1';\r\n+\r\n+      actions.innerHTML = `\r\n+        <button class=\"agenda-action edit\" data-id=\"${id}\" title=\"Editar\">\r\n+          <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"text-gray-600 hover:text-gray-900\"><path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 000-1.42l-2.34-2.34a1.003 1.003 0 00-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.82z\"/></svg>\r\n+        </button>\r\n+        <button class=\"agenda-action status\" data-id=\"${id}\" title=\"Mudar status\">\r\n+          <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\"><path d=\"M12 7v10M7 12h10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/></svg>\r\n+        </button>\r\n+      `;\r\n+      card.appendChild(actions);\r\n+    });\r\n+  }\r\n+\r\n+  // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n+  function drawNowLine() {\r\n+    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n+    if (!body) return;\r\n+\r\n+    body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n+\r\n+    const now = new Date();\r\n+    const minutes = now.getHours() * 60 + now.getMinutes();\r\n+    const percent = minutes / (24 * 60);\r\n+    const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n+\r\n+    const line = document.createElement('div');\r\n+    line.className = 'agenda-nowline';\r\n+    line.style.top = `${y}px`;\r\n+    body.appendChild(line);\r\n+\r\n+    if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n+    window.__agendaNowTimer = setInterval(() => {\r\n+      drawNowLine();\r\n+    }, 60000);\r\n+  }\r\n+\r\n+  // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n+  async function updateStatusQuick(id, status) {\r\n+    try {\r\n+      const resp = await api(`/func/agendamentos/${id}`, {\r\n+        method: 'PUT',\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify({ status })\r\n+      });\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(() => ({}));\r\n+        throw new Error(err.message || 'Erro ao mudar status');\r\n+      }\r\n+      await loadAgendamentos();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    } catch (e) {\r\n+      console.error('updateStatusQuick', e);\r\n+      alert(e.message || 'Erro ao mudar status');\r\n+    }\r\n+  }\r\n+\r\n   // Events\r\n   addBtn?.addEventListener('click', openAddModal);\r\n   modalClose?.addEventListener('click', closeModal);\r\n   modalCancel?.addEventListener('click', closeModal);\r\n"
                },
                {
                    "date": 1757374020900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -691,9 +691,9 @@\n         }\r\n         await loadAgendamentos();\r\n         closeModal();\r\n         renderGrid();\r\n-        enhanceAgendaUI();\r\n+        enhanceAgendaUI();      // <-- já existia aqui; mantido\r\n         return;\r\n       }\r\n \r\n       // Adição\r\n@@ -720,8 +720,9 @@\n \r\n       await loadAgendamentos();\r\n       closeModal();\r\n       renderGrid();\r\n+      enhanceAgendaUI();        // <-- ADICIONADO: aplica zebra, sublinhas, linha do agora e ações\r\n     } catch (e) {\r\n       console.error(e);\r\n       alert(e.message || 'Erro ao salvar');\r\n     }\r\n"
                },
                {
                    "date": 1757417614738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,11 @@\n     agendamentos: [],\r\n     selectedStoreId: null,\r\n     selectedCliente: null,\r\n     selectedServico: null,\r\n-    editing: null // guarda o agendamento em edição (ou null)\r\n+    editing: null,             // guarda o agendamento em edição (ou null)\r\n+    lastSnapshotHash: '',      // usado pelo auto-refresh leve\r\n+    __didInitialScroll: false  // evita auto-scroll repetido\r\n   };\r\n \r\n   // Helpers de data e utilitários\r\n   function todayStr() { return new Date().toISOString().slice(0, 10); }\r\n"
                },
                {
                    "date": 1757417627490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -734,8 +734,15 @@\n     try {\r\n       applyZebraAndSublines();\r\n       decorateCards();\r\n       drawNowLine();\r\n+\r\n+      // Auto-scroll para o horário atual (somente na data de hoje e 1x por renderização)\r\n+      const date = normalizeDate(dateInput?.value || todayStr());\r\n+      if (!state.__didInitialScroll && date === todayStr()) {\r\n+        scrollToNow();\r\n+        state.__didInitialScroll = true;\r\n+      }\r\n     } catch (e) {\r\n       console.info('[enhanceAgendaUI] skip', e);\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1757417651276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -746,8 +746,26 @@\n       console.info('[enhanceAgendaUI] skip', e);\r\n     }\r\n   }\r\n \r\n+  function scrollToNow() {\r\n+    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n+    if (!body || !state.profissionais?.length) return;\r\n+\r\n+    // encontra a célula da primeira coluna de profissional no horário atual\r\n+    const now = new Date();\r\n+    const hh = String(now.getHours()).padStart(2, '0') + ':00';\r\n+    const firstProfId = String(state.profissionais[0]._id);\r\n+    const target = body.querySelector(`div[data-profissional-id=\"${firstProfId}\"][data-hh=\"${hh}\"]`);\r\n+\r\n+    if (target) {\r\n+      const top = target.getBoundingClientRect().top + window.pageYOffset;\r\n+      // sobe um pouco para mostrar contexto acima do \"agora\"\r\n+      const offset = 80;\r\n+      window.scrollTo({ top: Math.max(0, top - offset), behavior: 'smooth' });\r\n+    }\r\n+  }\r\n+\r\n   // Zebra de linhas + sublinha 30min com CSS (via classe)\r\n   function applyZebraAndSublines() {\r\n     const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n     if (!body) return;\r\n"
                },
                {
                    "date": 1757417682878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -764,8 +764,65 @@\n       window.scrollTo({ top: Math.max(0, top - offset), behavior: 'smooth' });\r\n     }\r\n   }\r\n \r\n+  // compacta a lista para um hash leve (ordem estável)\r\n+  function snapshotHash(items) {\r\n+    try {\r\n+      const compact = (items || []).map(x => [\r\n+        String(x._id || ''),\r\n+        String(x.status || ''),\r\n+        String(x.h || x.scheduledAt || ''),\r\n+        Number(x.valor || 0),\r\n+        !!x.pago\r\n+      ]).sort((a, b) => a[0].localeCompare(b[0]));\r\n+      return JSON.stringify(compact);\r\n+    } catch (_) {\r\n+      return String(Date.now());\r\n+    }\r\n+  }\r\n+\r\n+  // reconsulta e só re-renderiza se houver mudança relevante\r\n+  async function refreshAgendaIfChanged() {\r\n+    const prev = state.lastSnapshotHash || '';\r\n+    await loadAgendamentos();\r\n+    const next = snapshotHash(state.agendamentos);\r\n+    if (next !== prev) {\r\n+      state.lastSnapshotHash = next;\r\n+      renderGrid();\r\n+      // ao re-render com mesma data de hoje, não repete o scroll\r\n+      enhanceAgendaUI();\r\n+    }\r\n+  }\r\n+\r\n+  // inicia/renova o timer de auto-refresh (60s)\r\n+  function startAutoRefresh() {\r\n+    if (window.__agendaRefreshTimer) clearInterval(window.__agendaRefreshTimer);\r\n+    state.lastSnapshotHash = snapshotHash(state.agendamentos);\r\n+    window.__agendaRefreshTimer = setInterval(refreshAgendaIfChanged, 60000);\r\n+  }\r\n+\r\n+  // cria o botão \"Hoje\" ao lado do input de data (uma vez)\r\n+  function ensureTodayButton() {\r\n+    if (!dateInput) return;\r\n+    if (document.getElementById('agenda-today-btn')) return;\r\n+\r\n+    const btn = document.createElement('button');\r\n+    btn.id = 'agenda-today-btn';\r\n+    btn.type = 'button';\r\n+    btn.className = 'ml-2 inline-flex items-center gap-1 text-xs px-2 py-1 rounded border border-slate-300 text-slate-700 hover:bg-slate-50';\r\n+    btn.textContent = 'Hoje';\r\n+\r\n+    dateInput.insertAdjacentElement('afterend', btn);\r\n+    btn.addEventListener('click', async () => {\r\n+      dateInput.value = todayStr();\r\n+      state.__didInitialScroll = false;   // permite novo auto-scroll\r\n+      await loadAgendamentos();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    });\r\n+  }\r\n+\r\n   // Zebra de linhas + sublinha 30min com CSS (via classe)\r\n   function applyZebraAndSublines() {\r\n     const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n     if (!body) return;\r\n"
                },
                {
                    "date": 1757417728433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -953,15 +953,17 @@\n \r\n   storeSelect?.addEventListener('change', async () => {\r\n     state.selectedStoreId = storeSelect.value;\r\n     updateStoreLabel();\r\n+    state.__didInitialScroll = false;     // nova loja -> recalcula scroll\r\n     await loadProfissionais();\r\n     await loadAgendamentos();\r\n     renderGrid();\r\n-    enhanceAgendaUI();     // zebra + sublinha + ações + linha do \"agora\"\r\n+    enhanceAgendaUI();\r\n   });\r\n \r\n   dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;     // nova data -> permite auto-scroll\r\n     await loadAgendamentos();\r\n     renderGrid();\r\n     enhanceAgendaUI();\r\n   });\r\n@@ -974,8 +976,11 @@\n       state.selectedStoreId = storeSelect.value;\r\n     }\r\n     await loadProfissionais();\r\n     await loadAgendamentos();\r\n+\r\n+    ensureTodayButton();   // cria botão \"Hoje\"\r\n     renderGrid();\r\n     enhanceAgendaUI();\r\n+    startAutoRefresh();    // auto-refresh leve (60s)\r\n   })();\r\n })();\r\n"
                },
                {
                    "date": 1757417959624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,12 +244,12 @@\n       card.appendChild(right);\r\n       col.appendChild(card);\r\n       placed++;\r\n \r\n-      // Clique para editar\r\n+      // Clique no card abre edição, EXCETO quando o alvo é uma ação (.agenda-action)\r\n       card.addEventListener('click', async (ev) => {\r\n+        if (ev.target.closest('.agenda-action')) return; // deixa a action subir para o delegator\r\n         ev.preventDefault();\r\n-        ev.stopPropagation();\r\n         await openEditModal(a);\r\n       });\r\n     }\r\n \r\n"
                },
                {
                    "date": 1757418230367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,14 @@\n     __didInitialScroll: false  // evita auto-scroll repetido\r\n   };\r\n \r\n   // Helpers de data e utilitários\r\n-  function todayStr() { return new Date().toISOString().slice(0, 10); }\r\n+  function todayStr() {\r\n+    // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n+    const d = new Date();\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n   function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n   function buildLocalDateTime(dateStr, hhmm) {\r\n     let y, m, d;\r\n     if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) { [d, m, y] = dateStr.split('/').map(Number); }\r\n@@ -133,13 +138,11 @@\n     if (dateLabelVisible) {\r\n       dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n     }\r\n \r\n-    // 00:00 -> 23:00\r\n     const hours = [];\r\n     for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n-    // Cabeçalho\r\n     clearChildren(agendaList);\r\n     const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n     const colCount = cols.length;\r\n \r\n@@ -152,11 +155,17 @@\n       cell.className = 'px-3 py-2 ' + (idx === 0 ? 'text-gray-600' : 'text-gray-800');\r\n       cell.textContent = label;\r\n       header.appendChild(cell);\r\n     });\r\n+\r\n+    // contador de itens no canto direito do header\r\n+    const counter = document.createElement('div');\r\n+    counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n+    counter.textContent = `Agendamentos: ${state.agendamentos.length}`;\r\n+    header.appendChild(counter);\r\n+\r\n     agendaList.appendChild(header);\r\n \r\n-    // Corpo\r\n     const body = document.createElement('div');\r\n     body.style.display = 'grid';\r\n     body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n     agendaList.appendChild(body);\r\n@@ -175,9 +184,8 @@\n         body.appendChild(col);\r\n       });\r\n     });\r\n \r\n-    // Mapa nome→ID\r\n     const byName = new Map(\r\n       state.profissionais.map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n     );\r\n \r\n@@ -189,39 +197,31 @@\n \r\n       const d = new Date(when);\r\n       const hh = `${pad(d.getHours())}:00`;\r\n \r\n-      // Resolve coluna alvo\r\n       let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n       if (!profId) {\r\n         let nameCandidate = '';\r\n-        if (typeof a.profissional === 'string') {\r\n-          nameCandidate = a.profissional;\r\n-        } else if (a.profissional && typeof a.profissional === 'object') {\r\n-          nameCandidate =\r\n-            a.profissional.nomeCompleto ||\r\n-            a.profissional.nomeContato ||\r\n-            a.profissional.razaoSocial ||\r\n-            a.profissional.nome || '';\r\n+        if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n+        else if (a.profissional && typeof a.profissional === 'object') {\r\n+          nameCandidate = a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial || a.profissional.nome || '';\r\n         }\r\n         const key = String(nameCandidate).trim().toLowerCase();\r\n         profId = byName.get(key) || null;\r\n       }\r\n \r\n-      // Coluna; se não achar, 1ª coluna como fallback\r\n       let col = null;\r\n       if (profId) col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n       if (!col && state.profissionais[0]) {\r\n         col = body.querySelector(`div[data-profissional-id=\"${state.profissionais[0]._id}\"][data-hh=\"${hh}\"]`);\r\n       }\r\n       if (!col) continue;\r\n \r\n-      // ===== Card =====\r\n-      const meta = statusMeta(a.status); // classes e rótulo do status\r\n+      const meta = statusMeta(a.status);\r\n       const card = document.createElement('div');\r\n       card.className =\r\n         'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2 cursor-pointer hover:ring-black/10 transition ' +\r\n-        'pl-2 border-l-4 ' + meta.borderClass; // faixa colorida à esquerda\r\n+        'pl-2 border-l-4 ' + meta.borderClass;\r\n       card.dataset.appointmentId = a._id || '';\r\n \r\n       const left = document.createElement('div');\r\n       left.innerHTML = `\r\n@@ -244,21 +244,21 @@\n       card.appendChild(right);\r\n       col.appendChild(card);\r\n       placed++;\r\n \r\n-      // Clique no card abre edição, EXCETO quando o alvo é uma ação (.agenda-action)\r\n       card.addEventListener('click', async (ev) => {\r\n-        if (ev.target.closest('.agenda-action')) return; // deixa a action subir para o delegator\r\n+        if (ev.target.closest('.agenda-action')) return;\r\n         ev.preventDefault();\r\n         await openEditModal(a);\r\n       });\r\n     }\r\n \r\n     if (placed === 0) {\r\n-      const info = document.createElement('div');\r\n-      info.className = 'px-4 py-6 text-sm text-gray-500';\r\n-      info.textContent = 'Sem agendamentos para este dia.';\r\n-      agendaList.appendChild(info);\r\n+      // aviso no topo (não some no final da página)\r\n+      const empty = document.createElement('div');\r\n+      empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n+      empty.textContent = 'Sem agendamentos para este dia.';\r\n+      agendaList.insertBefore(empty, header.nextSibling);\r\n     }\r\n   }\r\n \r\n   // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n"
                },
                {
                    "date": 1757418923858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,11 +138,13 @@\n     if (dateLabelVisible) {\r\n       dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n     }\r\n \r\n+    // 00:00 -> 23:00\r\n     const hours = [];\r\n     for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n+    // Cabeçalho\r\n     clearChildren(agendaList);\r\n     const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n     const colCount = cols.length;\r\n \r\n@@ -156,16 +158,17 @@\n       cell.textContent = label;\r\n       header.appendChild(cell);\r\n     });\r\n \r\n-    // contador de itens no canto direito do header\r\n+    // contador no topo\r\n     const counter = document.createElement('div');\r\n     counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n     counter.textContent = `Agendamentos: ${state.agendamentos.length}`;\r\n     header.appendChild(counter);\r\n \r\n     agendaList.appendChild(header);\r\n \r\n+    // Corpo\r\n     const body = document.createElement('div');\r\n     body.style.display = 'grid';\r\n     body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n     agendaList.appendChild(body);\r\n@@ -184,8 +187,9 @@\n         body.appendChild(col);\r\n       });\r\n     });\r\n \r\n+    // nome -> id\r\n     const byName = new Map(\r\n       state.profissionais.map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n     );\r\n \r\n@@ -197,8 +201,9 @@\n \r\n       const d = new Date(when);\r\n       const hh = `${pad(d.getHours())}:00`;\r\n \r\n+      // coluna alvo\r\n       let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n       if (!profId) {\r\n         let nameCandidate = '';\r\n         if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n@@ -215,46 +220,76 @@\n         col = body.querySelector(`div[data-profissional-id=\"${state.profissionais[0]._id}\"][data-hh=\"${hh}\"]`);\r\n       }\r\n       if (!col) continue;\r\n \r\n+      // ===== Card padrão =====\r\n       const meta = statusMeta(a.status);\r\n       const card = document.createElement('div');\r\n-      card.className =\r\n-        'rounded-lg shadow-sm ring-1 ring-black/5 bg-white px-3 py-2 text-sm flex items-center justify-between gap-2 cursor-pointer hover:ring-black/10 transition ' +\r\n-        'pl-2 border-l-4 ' + meta.borderClass;\r\n+      card.className = 'agenda-card group relative';\r\n       card.dataset.appointmentId = a._id || '';\r\n+      card.dataset.status = (a.status || 'agendado');\r\n+      card.style.setProperty('--stripe', meta.stripe); // faixa de status (CSS)\r\n \r\n-      const left = document.createElement('div');\r\n-      left.innerHTML = `\r\n-        <div class=\"flex items-center gap-2\">\r\n-          <div class=\"font-medium text-gray-900\">${a.pet || ''}</div>\r\n+      // header\r\n+      const headerEl = document.createElement('div');\r\n+      headerEl.className = 'flex items-center justify-between';\r\n+      headerEl.innerHTML = `\r\n+        <div class=\"flex items-center gap-2 min-w-0\">\r\n+          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n           ${renderStatusBadge(a.status)}\r\n         </div>\r\n-        <div class=\"text-gray-600\">${a.servico || ''}</div>\r\n-        <div class=\"text-gray-600\">${money(a.valor)}</div>\r\n+        <!-- ações (desktop) -->\r\n+        <div class=\"agenda-card__actions hidden md:flex items-center gap-1\">\r\n+          <button class=\"agenda-action edit\" data-id=\"${a._id}\" title=\"Editar\">\r\n+            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"text-gray-600 hover:text-gray-900\"><path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 000-1.42l-2.34-2.34a1.003 1.003 0 00-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.82z\"/></svg>\r\n+          </button>\r\n+          <button class=\"agenda-action status\" data-id=\"${a._id}\" title=\"Mudar status\">\r\n+            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\"><path d=\"M12 7v10M7 12h10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/></svg>\r\n+          </button>\r\n+          <button class=\"agenda-action cobrar\" data-id=\"${a._id}\" title=\"Cobrança/Pagamento\">\r\n+            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"text-gray-600 hover:text-gray-900\"><path d=\"M12 2a10 10 0 100 20 10 10 0 000-20zm.5 4h-1v2.1c-1.6.2-3 1.3-3 2.9 0 1.6 1.8 2.7 3.8 3.1 1.3.3 2.2.7 2.2 1.4 0 .8-1 1.5-2.5 1.5s-2.7-.7-3.1-1.7l-1.8.8C5.9 17.8 7.7 19 10 19.2V21h1v-1.8c1.9-.2 3.5-1.2 3.5-2.7 0-1.7-1.6-2.6-3.8-3.1-1.1-.2-2.2-.6-2.2-1.3 0-.6.7-1.3 2.5-1.3 1.5 0 2.4.5 2.7 1.3l1.7-.7c-.5-1.2-1.9-2-3.4-2.2V6z\"/></svg>\r\n+          </button>\r\n+        </div>\r\n+        <!-- menu mobile -->\r\n+        <button class=\"agenda-card__more md:hidden text-gray-500\" aria-label=\"Mais ações\">\r\n+          <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><circle cx=\"5\" cy=\"12\" r=\"2\"/><circle cx=\"12\" cy=\"12\" r=\"2\"/><circle cx=\"19\" cy=\"12\" r=\"2\"/></svg>\r\n+        </button>\r\n       `;\r\n \r\n-      const right = document.createElement('div');\r\n-      right.className = 'text-lg';\r\n-      const dollar = document.createElement('span');\r\n-      dollar.textContent = '$';\r\n-      if (!a.pago) dollar.className = 'line-through text-gray-400';\r\n-      right.appendChild(dollar);\r\n+      // body (serviço, 2 linhas)\r\n+      const bodyEl = document.createElement('div');\r\n+      bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+      bodyEl.textContent = a.servico || '';\r\n \r\n-      card.appendChild(left);\r\n-      card.appendChild(right);\r\n+      // footer (preço + pago)\r\n+      const footerEl = document.createElement('div');\r\n+      footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+      const price = document.createElement('div');\r\n+      price.className = 'text-[13px] text-gray-800 font-medium';\r\n+      price.textContent = money(a.valor);\r\n+      const payIcon = document.createElement('div');\r\n+      payIcon.innerHTML = a.pago\r\n+        ? '<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" class=\"text-green-600\"><path d=\"M5 13l4 4L19 7\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>'\r\n+        : '<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" class=\"text-slate-400\"><path d=\"M12 8v5l3 3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>';\r\n+      footerEl.appendChild(price);\r\n+      footerEl.appendChild(payIcon);\r\n+\r\n+      // monta card\r\n+      card.appendChild(headerEl);\r\n+      card.appendChild(bodyEl);\r\n+      card.appendChild(footerEl);\r\n       col.appendChild(card);\r\n       placed++;\r\n \r\n+      // clique no card abre edição (exceto ações)\r\n       card.addEventListener('click', async (ev) => {\r\n-        if (ev.target.closest('.agenda-action')) return;\r\n+        if (ev.target.closest('.agenda-action') || ev.target.closest('.agenda-card__more')) return;\r\n         ev.preventDefault();\r\n         await openEditModal(a);\r\n       });\r\n     }\r\n \r\n     if (placed === 0) {\r\n-      // aviso no topo (não some no final da página)\r\n       const empty = document.createElement('div');\r\n       empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n       empty.textContent = 'Sem agendamentos para este dia.';\r\n       agendaList.insertBefore(empty, header.nextSibling);\r\n@@ -933,8 +968,16 @@\n   modalDelete?.addEventListener('click', handleDelete);\r\n \r\n   // Ações rápidas nos cartões (delegação no container da agenda)\r\n   agendaList?.addEventListener('click', (ev) => {\r\n+    // toggle do menu mobile\r\n+    const more = ev.target.closest('.agenda-card__more');\r\n+    if (more) {\r\n+      const holder = more.parentElement?.querySelector('.agenda-card__actions');\r\n+      if (holder) holder.classList.toggle('hidden');\r\n+      return;\r\n+    }\r\n+\r\n     const btn = ev.target.closest('.agenda-action');\r\n     if (!btn) return;\r\n     const id = btn.getAttribute('data-id');\r\n     if (!id) return;\r\n@@ -947,8 +990,11 @@\n       const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n       const cur = (item && item.status) || 'agendado';\r\n       const next = chain[(chain.indexOf(cur) + 1) % chain.length];\r\n       updateStatusQuick(id, next);\r\n+    } else if (btn.classList.contains('cobrar')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      if (item) openEditModal(item); // reaproveite seu modal/fluxo de cobrança\r\n     }\r\n   });\r\n \r\n   storeSelect?.addEventListener('change', async () => {\r\n"
                },
                {
                    "date": 1757419500267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,23 +144,34 @@\n     for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n     // Cabeçalho\r\n     clearChildren(agendaList);\r\n-    const cols = ['Hora', ...state.profissionais.map(p => p.nome)];\r\n+    const profs = state.profissionais || [];\r\n+    const cols = ['Hora', ...profs.map(p => p.nome)];\r\n     const colCount = cols.length;\r\n \r\n     const header = document.createElement('div');\r\n     header.className = 'grid sticky top-0 bg-white z-10 border-b text-sm font-medium';\r\n     header.style.display = 'grid';\r\n     header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n+\r\n     cols.forEach((label, idx) => {\r\n       const cell = document.createElement('div');\r\n       cell.className = 'px-3 py-2 ' + (idx === 0 ? 'text-gray-600' : 'text-gray-800');\r\n-      cell.textContent = label;\r\n+      if (idx === 0) {\r\n+        cell.textContent = label;\r\n+      } else {\r\n+        // envolvemos o texto em um span para medir largura real\r\n+        const span = document.createElement('span');\r\n+        span.className = 'agenda-head-label inline-block';\r\n+        span.textContent = label || '';\r\n+        cell.dataset.profId = String(profs[idx - 1]._id);\r\n+        cell.appendChild(span);\r\n+      }\r\n       header.appendChild(cell);\r\n     });\r\n \r\n-    // contador no topo\r\n+    // contador no topo (mantido)\r\n     const counter = document.createElement('div');\r\n     counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n     counter.textContent = `Agendamentos: ${state.agendamentos.length}`;\r\n     header.appendChild(counter);\r\n@@ -178,20 +189,35 @@\n       timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n       timeCell.textContent = hh;\r\n       body.appendChild(timeCell);\r\n \r\n-      state.profissionais.forEach(p => {\r\n+      profs.forEach(p => {\r\n         const col = document.createElement('div');\r\n         col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n         col.dataset.profissionalId = String(p._id);\r\n         col.dataset.hh = hh;\r\n         body.appendChild(col);\r\n       });\r\n     });\r\n \r\n-    // nome -> id\r\n+    // ======= NOVO: mede largura do nome do profissional e seta CSS var por coluna =======\r\n+    try {\r\n+      const headCells = header.querySelectorAll('[data-prof-id]');\r\n+      headCells.forEach((cell) => {\r\n+        const profId = cell.getAttribute('data-prof-id');\r\n+        const span = cell.querySelector('.agenda-head-label');\r\n+        if (!span || !profId) return;\r\n+        // largura real do texto + folga; clamp 160–280 px para não exagerar\r\n+        let w = Math.ceil(span.getBoundingClientRect().width) + 24;\r\n+        w = Math.max(160, Math.min(280, w));\r\n+        const colsForProf = body.querySelectorAll(`div[data-profissional-id=\"${profId}\"]`);\r\n+        colsForProf.forEach(c => c.style.setProperty('--card-max-w', `${w}px`));\r\n+      });\r\n+    } catch (_) { /* silencioso */ }\r\n+\r\n+    // Mapa nome→ID\r\n     const byName = new Map(\r\n-      state.profissionais.map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n+      profs.map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n     );\r\n \r\n     let placed = 0;\r\n \r\n@@ -201,28 +227,33 @@\n \r\n       const d = new Date(when);\r\n       const hh = `${pad(d.getHours())}:00`;\r\n \r\n-      // coluna alvo\r\n+      // Resolve coluna alvo\r\n       let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n       if (!profId) {\r\n         let nameCandidate = '';\r\n         if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n         else if (a.profissional && typeof a.profissional === 'object') {\r\n-          nameCandidate = a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial || a.profissional.nome || '';\r\n+          nameCandidate =\r\n+            a.profissional.nomeCompleto ||\r\n+            a.profissional.nomeContato ||\r\n+            a.profissional.razaoSocial ||\r\n+            a.profissional.nome || '';\r\n         }\r\n         const key = String(nameCandidate).trim().toLowerCase();\r\n         profId = byName.get(key) || null;\r\n       }\r\n \r\n+      // Coluna; se não achar, 1ª coluna como fallback\r\n       let col = null;\r\n       if (profId) col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n-      if (!col && state.profissionais[0]) {\r\n-        col = body.querySelector(`div[data-profissional-id=\"${state.profissionais[0]._id}\"][data-hh=\"${hh}\"]`);\r\n+      if (!col && profs[0]) {\r\n+        col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n       }\r\n       if (!col) continue;\r\n \r\n-      // ===== Card padrão =====\r\n+      // ===== Card padrão (mantido) =====\r\n       const meta = statusMeta(a.status);\r\n       const card = document.createElement('div');\r\n       card.className = 'agenda-card group relative';\r\n       card.dataset.appointmentId = a._id || '';\r\n@@ -236,9 +267,8 @@\n         <div class=\"flex items-center gap-2 min-w-0\">\r\n           <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n           ${renderStatusBadge(a.status)}\r\n         </div>\r\n-        <!-- ações (desktop) -->\r\n         <div class=\"agenda-card__actions hidden md:flex items-center gap-1\">\r\n           <button class=\"agenda-action edit\" data-id=\"${a._id}\" title=\"Editar\">\r\n             <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"text-gray-600 hover:text-gray-900\"><path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 000-1.42l-2.34-2.34a1.003 1.003 0 00-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.82z\"/></svg>\r\n           </button>\r\n@@ -248,9 +278,8 @@\n           <button class=\"agenda-action cobrar\" data-id=\"${a._id}\" title=\"Cobrança/Pagamento\">\r\n             <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"text-gray-600 hover:text-gray-900\"><path d=\"M12 2a10 10 0 100 20 10 10 0 000-20zm.5 4h-1v2.1c-1.6.2-3 1.3-3 2.9 0 1.6 1.8 2.7 3.8 3.1 1.3.3 2.2.7 2.2 1.4 0 .8-1 1.5-2.5 1.5s-2.7-.7-3.1-1.7l-1.8.8C5.9 17.8 7.7 19 10 19.2V21h1v-1.8c1.9-.2 3.5-1.2 3.5-2.7 0-1.7-1.6-2.6-3.8-3.1-1.1-.2-2.2-.6-2.2-1.3 0-.6.7-1.3 2.5-1.3 1.5 0 2.4.5 2.7 1.3l1.7-.7c-.5-1.2-1.9-2-3.4-2.2V6z\"/></svg>\r\n           </button>\r\n         </div>\r\n-        <!-- menu mobile -->\r\n         <button class=\"agenda-card__more md:hidden text-gray-500\" aria-label=\"Mais ações\">\r\n           <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><circle cx=\"5\" cy=\"12\" r=\"2\"/><circle cx=\"12\" cy=\"12\" r=\"2\"/><circle cx=\"19\" cy=\"12\" r=\"2\"/></svg>\r\n         </button>\r\n       `;\r\n"
                },
                {
                    "date": 1757419896739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,18 +40,24 @@\n   const horaInput = document.getElementById('add-hora');\r\n   const profSelect = document.getElementById('add-prof-select');\r\n \r\n   // State\r\n+  const FILTER_STORAGE_KEY = 'agenda_filters_v1';\r\n+\r\n   const state = {\r\n     stores: [],\r\n     profissionais: [],\r\n     agendamentos: [],\r\n     selectedStoreId: null,\r\n     selectedCliente: null,\r\n     selectedServico: null,\r\n-    editing: null,             // guarda o agendamento em edição (ou null)\r\n-    lastSnapshotHash: '',      // usado pelo auto-refresh leve\r\n-    __didInitialScroll: false  // evita auto-scroll repetido\r\n+    editing: null,\r\n+    lastSnapshotHash: '',\r\n+    __didInitialScroll: false,\r\n+    filters: {                 // filtros persistentes\r\n+      statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n+      profIds: new Set()       // _id dos profissionais\r\n+    }\r\n   };\r\n \r\n   // Helpers de data e utilitários\r\n   function todayStr() {\r\n"
                },
                {
                    "date": 1757419948037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,26 @@\n       profIds: new Set()       // _id dos profissionais\r\n     }\r\n   };\r\n \r\n+  function loadFiltersFromStorage() {\r\n+    try {\r\n+      const raw = JSON.parse(localStorage.getItem(FILTER_STORAGE_KEY) || 'null');\r\n+      if (raw && typeof raw === 'object') {\r\n+        state.filters.statuses = new Set(Array.isArray(raw.statuses) ? raw.statuses : []);\r\n+        state.filters.profIds  = new Set(Array.isArray(raw.profIds)  ? raw.profIds  : []);\r\n+      }\r\n+    } catch(_) {}\r\n+  }\r\n+  function saveFiltersToStorage() {\r\n+    try {\r\n+      localStorage.setItem(FILTER_STORAGE_KEY, JSON.stringify({\r\n+        statuses: Array.from(state.filters.statuses),\r\n+        profIds : Array.from(state.filters.profIds)\r\n+      }));\r\n+    } catch(_) {}\r\n+  }\r\n+\r\n   // Helpers de data e utilitários\r\n   function todayStr() {\r\n     // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n     const d = new Date();\r\n"
                },
                {
                    "date": 1757419975573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,31 @@\n       }));\r\n     } catch(_) {}\r\n   }\r\n \r\n+  function ensureToolbar() {\r\n+    if (!agendaList) return;\r\n+    if (document.getElementById('agenda-toolbar')) return;\r\n+\r\n+    const bar = document.createElement('div');\r\n+    bar.id = 'agenda-toolbar';\r\n+    bar.className = 'mb-2 flex flex-col gap-2';\r\n+\r\n+    // KPIs\r\n+    const kpis = document.createElement('div');\r\n+    kpis.id = 'agenda-kpis';\r\n+    kpis.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(kpis);\r\n+\r\n+    // Filtros\r\n+    const filters = document.createElement('div');\r\n+    filters.id = 'agenda-filters';\r\n+    filters.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(filters);\r\n+\r\n+    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n+  }\r\n+\r\n   // Helpers de data e utilitários\r\n   function todayStr() {\r\n     // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n     const d = new Date();\r\n"
                },
                {
                    "date": 1757419992358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,8 +99,31 @@\n \r\n     agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n   }\r\n \r\n+  function ensureToolbar() {\r\n+    if (!agendaList) return;\r\n+    if (document.getElementById('agenda-toolbar')) return;\r\n+\r\n+    const bar = document.createElement('div');\r\n+    bar.id = 'agenda-toolbar';\r\n+    bar.className = 'mb-2 flex flex-col gap-2';\r\n+\r\n+    // KPIs\r\n+    const kpis = document.createElement('div');\r\n+    kpis.id = 'agenda-kpis';\r\n+    kpis.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(kpis);\r\n+\r\n+    // Filtros\r\n+    const filters = document.createElement('div');\r\n+    filters.id = 'agenda-filters';\r\n+    filters.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(filters);\r\n+\r\n+    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n+  }\r\n+\r\n   // Helpers de data e utilitários\r\n   function todayStr() {\r\n     // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n     const d = new Date();\r\n"
                },
                {
                    "date": 1757420016082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,8 +122,97 @@\n \r\n     agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n   }\r\n \r\n+  function renderFilters() {\r\n+    const el = document.getElementById('agenda-filters');\r\n+    if (!el) return;\r\n+\r\n+    // contadores por status\r\n+    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const key = String(a.status || 'agendado')\r\n+        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n+      if (counts[key] !== undefined) counts[key] += 1;\r\n+    }\r\n+\r\n+    // contadores por profissional\r\n+    const byProf = new Map();\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n+      if (!id) continue;\r\n+      const key = String(id);\r\n+      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n+    }\r\n+\r\n+    const statuses = [\r\n+      {key:'agendado', label:'Agend.'},\r\n+      {key:'em_espera', label:'Espera'},\r\n+      {key:'em_atendimento', label:'Atend.'},\r\n+      {key:'finalizado', label:'Fim.'}\r\n+    ];\r\n+\r\n+    // chips de status\r\n+    const chipsStatus = statuses.map(s => {\r\n+      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n+      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n+                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    // chips de profissional (apenas os que existem)\r\n+    const chipsProf = (state.profissionais || []).map(p => {\r\n+      const id = String(p._id);\r\n+      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n+      const n = byProf.get(id) || 0;\r\n+      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n+                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n+      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n+\r\n+    el.innerHTML = `\r\n+      <div class=\"flex flex-wrap items-center gap-2\">\r\n+        ${chipsStatus}\r\n+        <span class=\"chip-sep\"></span>\r\n+        ${chipsProf}\r\n+        ${clearBtn}\r\n+      </div>\r\n+    `;\r\n+\r\n+    // handlers\r\n+    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n+      btn.addEventListener('click', () => {\r\n+        const type = btn.getAttribute('data-filter');\r\n+        const val  = btn.getAttribute('data-value');\r\n+        if (type === 'status') {\r\n+          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n+        } else if (type === 'prof') {\r\n+          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n+        }\r\n+        saveFiltersToStorage();\r\n+        renderFilters();\r\n+        renderKpis();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      });\r\n+    });\r\n+\r\n+    const clear = document.getElementById('chip-clear');\r\n+    if (clear) clear.addEventListener('click', () => {\r\n+      state.filters.statuses.clear();\r\n+      state.filters.profIds.clear();\r\n+      saveFiltersToStorage();\r\n+      renderFilters();\r\n+      renderKpis();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    });\r\n+  }\r\n+\r\n   // Helpers de data e utilitários\r\n   function todayStr() {\r\n     // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n     const d = new Date();\r\n"
                },
                {
                    "date": 1757420073943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,143 +76,8 @@\n       }));\r\n     } catch(_) {}\r\n   }\r\n \r\n-  function ensureToolbar() {\r\n-    if (!agendaList) return;\r\n-    if (document.getElementById('agenda-toolbar')) return;\r\n-\r\n-    const bar = document.createElement('div');\r\n-    bar.id = 'agenda-toolbar';\r\n-    bar.className = 'mb-2 flex flex-col gap-2';\r\n-\r\n-    // KPIs\r\n-    const kpis = document.createElement('div');\r\n-    kpis.id = 'agenda-kpis';\r\n-    kpis.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(kpis);\r\n-\r\n-    // Filtros\r\n-    const filters = document.createElement('div');\r\n-    filters.id = 'agenda-filters';\r\n-    filters.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(filters);\r\n-\r\n-    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n-  }\r\n-\r\n-  function ensureToolbar() {\r\n-    if (!agendaList) return;\r\n-    if (document.getElementById('agenda-toolbar')) return;\r\n-\r\n-    const bar = document.createElement('div');\r\n-    bar.id = 'agenda-toolbar';\r\n-    bar.className = 'mb-2 flex flex-col gap-2';\r\n-\r\n-    // KPIs\r\n-    const kpis = document.createElement('div');\r\n-    kpis.id = 'agenda-kpis';\r\n-    kpis.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(kpis);\r\n-\r\n-    // Filtros\r\n-    const filters = document.createElement('div');\r\n-    filters.id = 'agenda-filters';\r\n-    filters.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(filters);\r\n-\r\n-    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n-  }\r\n-\r\n-  function renderFilters() {\r\n-    const el = document.getElementById('agenda-filters');\r\n-    if (!el) return;\r\n-\r\n-    // contadores por status\r\n-    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n-    for (const a of (state.agendamentos || [])) {\r\n-      const key = String(a.status || 'agendado')\r\n-        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n-      if (counts[key] !== undefined) counts[key] += 1;\r\n-    }\r\n-\r\n-    // contadores por profissional\r\n-    const byProf = new Map();\r\n-    for (const a of (state.agendamentos || [])) {\r\n-      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n-      if (!id) continue;\r\n-      const key = String(id);\r\n-      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n-    }\r\n-\r\n-    const statuses = [\r\n-      {key:'agendado', label:'Agend.'},\r\n-      {key:'em_espera', label:'Espera'},\r\n-      {key:'em_atendimento', label:'Atend.'},\r\n-      {key:'finalizado', label:'Fim.'}\r\n-    ];\r\n-\r\n-    // chips de status\r\n-    const chipsStatus = statuses.map(s => {\r\n-      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n-      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n-                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n-              </button>`;\r\n-    }).join('');\r\n-\r\n-    // chips de profissional (apenas os que existem)\r\n-    const chipsProf = (state.profissionais || []).map(p => {\r\n-      const id = String(p._id);\r\n-      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n-      const n = byProf.get(id) || 0;\r\n-      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n-                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n-              </button>`;\r\n-    }).join('');\r\n-\r\n-    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n-      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n-\r\n-    el.innerHTML = `\r\n-      <div class=\"flex flex-wrap items-center gap-2\">\r\n-        ${chipsStatus}\r\n-        <span class=\"chip-sep\"></span>\r\n-        ${chipsProf}\r\n-        ${clearBtn}\r\n-      </div>\r\n-    `;\r\n-\r\n-    // handlers\r\n-    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n-      btn.addEventListener('click', () => {\r\n-        const type = btn.getAttribute('data-filter');\r\n-        const val  = btn.getAttribute('data-value');\r\n-        if (type === 'status') {\r\n-          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n-        } else if (type === 'prof') {\r\n-          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n-        }\r\n-        saveFiltersToStorage();\r\n-        renderFilters();\r\n-        renderKpis();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      });\r\n-    });\r\n-\r\n-    const clear = document.getElementById('chip-clear');\r\n-    if (clear) clear.addEventListener('click', () => {\r\n-      state.filters.statuses.clear();\r\n-      state.filters.profIds.clear();\r\n-      saveFiltersToStorage();\r\n-      renderFilters();\r\n-      renderKpis();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    });\r\n-  }\r\n-\r\n   // Helpers de data e utilitários\r\n   function todayStr() {\r\n     // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n     const d = new Date();\r\n"
                },
                {
                    "date": 1757420085454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,31 @@\n       }));\r\n     } catch(_) {}\r\n   }\r\n \r\n+  function ensureToolbar() {\r\n+    if (!agendaList) return;\r\n+    if (document.getElementById('agenda-toolbar')) return;\r\n+\r\n+    const bar = document.createElement('div');\r\n+    bar.id = 'agenda-toolbar';\r\n+    bar.className = 'mb-2 flex flex-col gap-2';\r\n+\r\n+    // KPIs\r\n+    const kpis = document.createElement('div');\r\n+    kpis.id = 'agenda-kpis';\r\n+    kpis.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(kpis);\r\n+\r\n+    // Filtros\r\n+    const filters = document.createElement('div');\r\n+    filters.id = 'agenda-filters';\r\n+    filters.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(filters);\r\n+\r\n+    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n+  }\r\n+\r\n   // Helpers de data e utilitários\r\n   function todayStr() {\r\n     // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n     const d = new Date();\r\n"
                },
                {
                    "date": 1757420096683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,8 +99,35 @@\n \r\n     agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n   }\r\n \r\n+  function computeKPIs(items) {\r\n+    const total = items.length;\r\n+    const previsto = items.reduce((s, i) => s + Number(i.valor || 0), 0);\r\n+    const recebido = items.reduce((s, i) => s + (i.pago ? Number(i.valor || 0) : 0), 0);\r\n+    const pendente = previsto - recebido;\r\n+    return { total, previsto, recebido, pendente };\r\n+  }\r\n+\r\n+  function renderKpis() {\r\n+    const wrap = document.getElementById('agenda-kpis');\r\n+    if (!wrap) return;\r\n+\r\n+    const all = state.agendamentos || [];\r\n+    const f = getFilteredAgendamentos();   // filtrados atuais\r\n+    const kAll = computeKPIs(all);\r\n+    const kF   = computeKPIs(f);\r\n+\r\n+    wrap.innerHTML = `\r\n+      <div class=\"kpi-chip\">Total dia: <strong>${kAll.total}</strong></div>\r\n+      <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n+      <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n+      <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n+      ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n+          ? `<div class=\"kpi-chip kpi-muted\">Filtrados: <strong>${kF.total}</strong></div>` : '' }\r\n+    `;\r\n+  }\r\n+\r\n   // Helpers de data e utilitários\r\n   function todayStr() {\r\n     // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n     const d = new Date();\r\n"
                },
                {
                    "date": 1757420122338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,97 @@\n           ? `<div class=\"kpi-chip kpi-muted\">Filtrados: <strong>${kF.total}</strong></div>` : '' }\r\n     `;\r\n   }\r\n \r\n+  function renderFilters() {\r\n+    const el = document.getElementById('agenda-filters');\r\n+    if (!el) return;\r\n+\r\n+    // contadores por status\r\n+    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const key = String(a.status || 'agendado')\r\n+        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n+      if (counts[key] !== undefined) counts[key] += 1;\r\n+    }\r\n+\r\n+    // contadores por profissional\r\n+    const byProf = new Map();\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n+      if (!id) continue;\r\n+      const key = String(id);\r\n+      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n+    }\r\n+\r\n+    const statuses = [\r\n+      {key:'agendado', label:'Agend.'},\r\n+      {key:'em_espera', label:'Espera'},\r\n+      {key:'em_atendimento', label:'Atend.'},\r\n+      {key:'finalizado', label:'Fim.'}\r\n+    ];\r\n+\r\n+    // chips de status\r\n+    const chipsStatus = statuses.map(s => {\r\n+      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n+      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n+                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    // chips de profissional (apenas os que existem)\r\n+    const chipsProf = (state.profissionais || []).map(p => {\r\n+      const id = String(p._id);\r\n+      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n+      const n = byProf.get(id) || 0;\r\n+      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n+                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n+      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n+\r\n+    el.innerHTML = `\r\n+      <div class=\"flex flex-wrap items-center gap-2\">\r\n+        ${chipsStatus}\r\n+        <span class=\"chip-sep\"></span>\r\n+        ${chipsProf}\r\n+        ${clearBtn}\r\n+      </div>\r\n+    `;\r\n+\r\n+    // handlers\r\n+    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n+      btn.addEventListener('click', () => {\r\n+        const type = btn.getAttribute('data-filter');\r\n+        const val  = btn.getAttribute('data-value');\r\n+        if (type === 'status') {\r\n+          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n+        } else if (type === 'prof') {\r\n+          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n+        }\r\n+        saveFiltersToStorage();\r\n+        renderFilters();\r\n+        renderKpis();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      });\r\n+    });\r\n+\r\n+    const clear = document.getElementById('chip-clear');\r\n+    if (clear) clear.addEventListener('click', () => {\r\n+      state.filters.statuses.clear();\r\n+      state.filters.profIds.clear();\r\n+      saveFiltersToStorage();\r\n+      renderFilters();\r\n+      renderKpis();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    });\r\n+  }\r\n+\r\n   // Helpers de data e utilitários\r\n   function todayStr() {\r\n     // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n     const d = new Date();\r\n"
                },
                {
                    "date": 1757420229854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,8 +215,50 @@\n       enhanceAgendaUI();\r\n     });\r\n   }\r\n \r\n+  function normalizeStatus(s) {\r\n+    return String(s || 'agendado')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n+  }\r\n+\r\n+  function getFilteredAgendamentos() {\r\n+    const hasStatus = state.filters.statuses.size > 0;\r\n+    const hasProf   = state.filters.profIds.size   > 0;\r\n+\r\n+    if (!hasStatus && !hasProf) return state.agendamentos || [];\r\n+\r\n+    const byNameAll = new Map(\r\n+      (state.profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n+    );\r\n+\r\n+    return (state.agendamentos || []).filter(a => {\r\n+      let ok = true;\r\n+      if (hasStatus) ok = ok && state.filters.statuses.has(normalizeStatus(a.status));\r\n+      if (hasProf) {\r\n+        let pid = a.profissionalId ? String(a.profissionalId) : null;\r\n+        if (!pid) {\r\n+          let nc = '';\r\n+          if (typeof a.profissional === 'string') nc = a.profissional;\r\n+          else if (a.profissional && typeof a.profissional === 'object') {\r\n+            nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n+                a.profissional.razaoSocial || a.profissional.nome || '';\r\n+          }\r\n+          pid = byNameAll.get(String(nc).trim().toLowerCase()) || null;\r\n+        }\r\n+        ok = ok && pid && state.filters.profIds.has(String(pid));\r\n+      }\r\n+      return ok;\r\n+    });\r\n+  }\r\n+\r\n+  function getVisibleProfissionais() {\r\n+    const profs = state.profissionais || [];\r\n+    if (!state.filters.profIds.size) return profs;\r\n+    return profs.filter(p => state.filters.profIds.has(String(p._id)));\r\n+  }\r\n+\r\n   // Helpers de data e utilitários\r\n   function todayStr() {\r\n     // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n     const d = new Date();\r\n@@ -305,11 +347,16 @@\n     // 00:00 -> 23:00\r\n     const hours = [];\r\n     for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n+    clearChildren(agendaList);\r\n+\r\n+    const profsAll = state.profissionais || [];\r\n+    const profs    = getVisibleProfissionais();\r\n+    const itemsAll = state.agendamentos || [];\r\n+    const items    = getFilteredAgendamentos();\r\n+\r\n     // Cabeçalho\r\n-    clearChildren(agendaList);\r\n-    const profs = state.profissionais || [];\r\n     const cols = ['Hora', ...profs.map(p => p.nome)];\r\n     const colCount = cols.length;\r\n \r\n     const header = document.createElement('div');\r\n@@ -322,9 +369,8 @@\n       cell.className = 'px-3 py-2 ' + (idx === 0 ? 'text-gray-600' : 'text-gray-800');\r\n       if (idx === 0) {\r\n         cell.textContent = label;\r\n       } else {\r\n-        // envolvemos o texto em um span para medir largura real\r\n         const span = document.createElement('span');\r\n         span.className = 'agenda-head-label inline-block';\r\n         span.textContent = label || '';\r\n         cell.dataset.profId = String(profs[idx - 1]._id);\r\n@@ -332,12 +378,13 @@\n       }\r\n       header.appendChild(cell);\r\n     });\r\n \r\n-    // contador no topo (mantido)\r\n+    // contador (mostra filtrados quando ativos)\r\n     const counter = document.createElement('div');\r\n     counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n-    counter.textContent = `Agendamentos: ${state.agendamentos.length}`;\r\n+    const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n+    counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n     header.appendChild(counter);\r\n \r\n     agendaList.appendChild(header);\r\n \r\n@@ -361,70 +408,60 @@\n         body.appendChild(col);\r\n       });\r\n     });\r\n \r\n-    // ======= NOVO: mede largura do nome do profissional e seta CSS var por coluna =======\r\n+    // mede largura do rótulo e define var --card-max-w por coluna\r\n     try {\r\n-      const headCells = header.querySelectorAll('[data-prof-id]');\r\n-      headCells.forEach((cell) => {\r\n+      header.querySelectorAll('[data-prof-id]').forEach((cell) => {\r\n         const profId = cell.getAttribute('data-prof-id');\r\n         const span = cell.querySelector('.agenda-head-label');\r\n         if (!span || !profId) return;\r\n-        // largura real do texto + folga; clamp 160–280 px para não exagerar\r\n         let w = Math.ceil(span.getBoundingClientRect().width) + 24;\r\n         w = Math.max(160, Math.min(280, w));\r\n-        const colsForProf = body.querySelectorAll(`div[data-profissional-id=\"${profId}\"]`);\r\n-        colsForProf.forEach(c => c.style.setProperty('--card-max-w', `${w}px`));\r\n+        body.querySelectorAll(`div[data-profissional-id=\"${profId}\"]`)\r\n+            .forEach(c => c.style.setProperty('--card-max-w', `${w}px`));\r\n       });\r\n-    } catch (_) { /* silencioso */ }\r\n+    } catch(_) {}\r\n \r\n-    // Mapa nome→ID\r\n-    const byName = new Map(\r\n-      profs.map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n+    // mapa nome → id (usa todos para resolver id quando vier string)\r\n+    const byNameAll = new Map(\r\n+      profsAll.map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n     );\r\n \r\n     let placed = 0;\r\n \r\n-    for (const a of state.agendamentos || []) {\r\n+    for (const a of items) {\r\n       const when = a.h || a.scheduledAt;\r\n       if (!when) continue;\r\n \r\n       const d = new Date(when);\r\n       const hh = `${pad(d.getHours())}:00`;\r\n \r\n-      // Resolve coluna alvo\r\n       let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n       if (!profId) {\r\n         let nameCandidate = '';\r\n         if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n         else if (a.profissional && typeof a.profissional === 'object') {\r\n-          nameCandidate =\r\n-            a.profissional.nomeCompleto ||\r\n-            a.profissional.nomeContato ||\r\n-            a.profissional.razaoSocial ||\r\n-            a.profissional.nome || '';\r\n+          nameCandidate = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n+                          a.profissional.razaoSocial || a.profissional.nome || '';\r\n         }\r\n-        const key = String(nameCandidate).trim().toLowerCase();\r\n-        profId = byName.get(key) || null;\r\n+        profId = byNameAll.get(String(nameCandidate).trim().toLowerCase()) || null;\r\n       }\r\n \r\n-      // Coluna; se não achar, 1ª coluna como fallback\r\n       let col = null;\r\n       if (profId) col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n       if (!col && profs[0]) {\r\n         col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n       }\r\n       if (!col) continue;\r\n \r\n-      // ===== Card padrão (mantido) =====\r\n       const meta = statusMeta(a.status);\r\n       const card = document.createElement('div');\r\n       card.className = 'agenda-card group relative';\r\n       card.dataset.appointmentId = a._id || '';\r\n       card.dataset.status = (a.status || 'agendado');\r\n-      card.style.setProperty('--stripe', meta.stripe); // faixa de status (CSS)\r\n+      card.style.setProperty('--stripe', meta.stripe);\r\n \r\n-      // header\r\n       const headerEl = document.createElement('div');\r\n       headerEl.className = 'flex items-center justify-between';\r\n       headerEl.innerHTML = `\r\n         <div class=\"flex items-center gap-2 min-w-0\">\r\n@@ -446,14 +483,12 @@\n           <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><circle cx=\"5\" cy=\"12\" r=\"2\"/><circle cx=\"12\" cy=\"12\" r=\"2\"/><circle cx=\"19\" cy=\"12\" r=\"2\"/></svg>\r\n         </button>\r\n       `;\r\n \r\n-      // body (serviço, 2 linhas)\r\n       const bodyEl = document.createElement('div');\r\n       bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n       bodyEl.textContent = a.servico || '';\r\n \r\n-      // footer (preço + pago)\r\n       const footerEl = document.createElement('div');\r\n       footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n       const price = document.createElement('div');\r\n       price.className = 'text-[13px] text-gray-800 font-medium';\r\n@@ -464,16 +499,14 @@\n         : '<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" class=\"text-slate-400\"><path d=\"M12 8v5l3 3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>';\r\n       footerEl.appendChild(price);\r\n       footerEl.appendChild(payIcon);\r\n \r\n-      // monta card\r\n       card.appendChild(headerEl);\r\n       card.appendChild(bodyEl);\r\n       card.appendChild(footerEl);\r\n       col.appendChild(card);\r\n       placed++;\r\n \r\n-      // clique no card abre edição (exceto ações)\r\n       card.addEventListener('click', async (ev) => {\r\n         if (ev.target.closest('.agenda-action') || ev.target.closest('.agenda-card__more')) return;\r\n         ev.preventDefault();\r\n         await openEditModal(a);\r\n@@ -482,9 +515,9 @@\n \r\n     if (placed === 0) {\r\n       const empty = document.createElement('div');\r\n       empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n-      empty.textContent = 'Sem agendamentos para este dia.';\r\n+      empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n       agendaList.insertBefore(empty, header.nextSibling);\r\n     }\r\n   }\r\n \r\n@@ -1208,17 +1241,44 @@\n \r\n   // Boot\r\n   (async function init() {\r\n     if (!dateInput?.value) dateInput.value = todayStr();\r\n+    loadFiltersFromStorage();\r\n     await loadStores();\r\n     if (!state.selectedStoreId && storeSelect?.value) {\r\n       state.selectedStoreId = storeSelect.value;\r\n     }\r\n     await loadProfissionais();\r\n     await loadAgendamentos();\r\n \r\n-    ensureTodayButton();   // cria botão \"Hoje\"\r\n+    ensureToolbar();\r\n+    ensureTodayButton();\r\n+\r\n+    renderKpis();\r\n+    renderFilters();\r\n     renderGrid();\r\n     enhanceAgendaUI();\r\n-    startAutoRefresh();    // auto-refresh leve (60s)\r\n+    startAutoRefresh();\r\n   })();\r\n+\r\n+  // Atualizações após troca de loja/data/status etc.\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    updateStoreLabel();\r\n+    state.__didInitialScroll = false;\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n })();\r\n"
                },
                {
                    "date": 1757422999026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,10 @@\n     if (document.getElementById('agenda-toolbar')) return;\r\n \r\n     const bar = document.createElement('div');\r\n     bar.id = 'agenda-toolbar';\r\n-    bar.className = 'mb-2 flex flex-col gap-2';\r\n+    // sticky sob o cabeçalho; leve blur para legibilidade; borda inferior discreta\r\n+    bar.className = 'sticky top-0 z-30 bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/60 border-b border-slate-200 mb-2 flex flex-col gap-2 px-3 py-2 rounded-lg';\r\n \r\n     // KPIs\r\n     const kpis = document.createElement('div');\r\n     kpis.id = 'agenda-kpis';\r\n@@ -335,193 +336,165 @@\n     }\r\n   }\r\n \r\n   // Grade (sem coluna \"Outros\")\r\n-  function renderGrid() {\r\n-    if (!agendaList) return;\r\n+function renderGrid() {\r\n+  if (!agendaList) return;\r\n \r\n-    const date = normalizeDate(dateInput?.value || todayStr());\r\n-    if (dateLabelVisible) {\r\n-      dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-    }\r\n+  const date = normalizeDate(dateInput?.value || todayStr());\r\n+  if (dateLabelVisible) {\r\n+    dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+  }\r\n \r\n-    // 00:00 -> 23:00\r\n-    const hours = [];\r\n-    for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+  // janelas de trabalho (ajuste se quiser)\r\n+  const BUSINESS_START = 8;   // 08:00\r\n+  const BUSINESS_END   = 19;  // 19:00\r\n \r\n-    clearChildren(agendaList);\r\n+  const hours = [];\r\n+  for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n-    const profsAll = state.profissionais || [];\r\n-    const profs    = getVisibleProfissionais();\r\n-    const itemsAll = state.agendamentos || [];\r\n-    const items    = getFilteredAgendamentos();\r\n+  clearChildren(agendaList);\r\n \r\n-    // Cabeçalho\r\n-    const cols = ['Hora', ...profs.map(p => p.nome)];\r\n-    const colCount = cols.length;\r\n+  const profsAll = state.profissionais || [];\r\n+  const profs    = getVisibleProfissionais();\r\n+  const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n \r\n-    const header = document.createElement('div');\r\n-    header.className = 'grid sticky top-0 bg-white z-10 border-b text-sm font-medium';\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n+  const colCount = 1 + (profs?.length || 0);\r\n \r\n-    cols.forEach((label, idx) => {\r\n-      const cell = document.createElement('div');\r\n-      cell.className = 'px-3 py-2 ' + (idx === 0 ? 'text-gray-600' : 'text-gray-800');\r\n-      if (idx === 0) {\r\n-        cell.textContent = label;\r\n-      } else {\r\n-        const span = document.createElement('span');\r\n-        span.className = 'agenda-head-label inline-block';\r\n-        span.textContent = label || '';\r\n-        cell.dataset.profId = String(profs[idx - 1]._id);\r\n-        cell.appendChild(span);\r\n-      }\r\n-      header.appendChild(cell);\r\n-    });\r\n+  // Cabeçalho\r\n+  const header = document.createElement('div');\r\n+  header.style.display = 'grid';\r\n+  header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n+  header.className = 'bg-white border-b';\r\n \r\n-    // contador (mostra filtrados quando ativos)\r\n-    const counter = document.createElement('div');\r\n-    counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n-    const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n-    counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n-    header.appendChild(counter);\r\n+  const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n+  headLabels.forEach((label, idx) => {\r\n+    const cell = document.createElement('div');\r\n+    cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n+    if (idx === 0) {\r\n+      cell.textContent = label;\r\n+    } else {\r\n+      const span = document.createElement('span');\r\n+      span.className = 'agenda-head-label inline-block';\r\n+      span.textContent = label || '';\r\n+      cell.dataset.profId = String(profs[idx - 1]._id);\r\n+      cell.appendChild(span);\r\n+    }\r\n+    header.appendChild(cell);\r\n+  });\r\n \r\n-    agendaList.appendChild(header);\r\n+  const counter = document.createElement('div');\r\n+  counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n+  const itemsAll = state.agendamentos || [];\r\n+  const items    = getFilteredAgendamentos(itemsAll);\r\n+  const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n+  counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n+  header.appendChild(counter);\r\n \r\n-    // Corpo\r\n-    const body = document.createElement('div');\r\n-    body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n-    agendaList.appendChild(body);\r\n+  agendaList.appendChild(header);\r\n \r\n-    hours.forEach(hh => {\r\n-      const timeCell = document.createElement('div');\r\n-      timeCell.className = 'px-3 py-3 border-b bg-gray-50 text-sm text-gray-600';\r\n-      timeCell.textContent = hh;\r\n-      body.appendChild(timeCell);\r\n+  // Corpo\r\n+  const body = document.createElement('div');\r\n+  body.style.display = 'grid';\r\n+  body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n+  agendaList.appendChild(body);\r\n \r\n-      profs.forEach(p => {\r\n-        const col = document.createElement('div');\r\n-        col.className = 'px-2 py-2 border-b min-h-[64px]';\r\n-        col.dataset.profissionalId = String(p._id);\r\n-        col.dataset.hh = hh;\r\n-        body.appendChild(col);\r\n-      });\r\n-    });\r\n+  const isToday = normalizeDate(date) === todayStr();\r\n+  const now = new Date();\r\n+  const nowHH = `${pad(now.getHours())}:00`;\r\n \r\n-    // mede largura do rótulo e define var --card-max-w por coluna\r\n-    try {\r\n-      header.querySelectorAll('[data-prof-id]').forEach((cell) => {\r\n-        const profId = cell.getAttribute('data-prof-id');\r\n-        const span = cell.querySelector('.agenda-head-label');\r\n-        if (!span || !profId) return;\r\n-        let w = Math.ceil(span.getBoundingClientRect().width) + 24;\r\n-        w = Math.max(160, Math.min(280, w));\r\n-        body.querySelectorAll(`div[data-profissional-id=\"${profId}\"]`)\r\n-            .forEach(c => c.style.setProperty('--card-max-w', `${w}px`));\r\n-      });\r\n-    } catch(_) {}\r\n+  hours.forEach(hh => {\r\n+    const hourNumber = parseInt(hh.split(':')[0], 10);\r\n+    const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n+    const isNowRow   = isToday && hh === nowHH;\r\n \r\n-    // mapa nome → id (usa todos para resolver id quando vier string)\r\n-    const byNameAll = new Map(\r\n-      profsAll.map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n-    );\r\n+    // coluna de horário\r\n+    const timeCell = document.createElement('div');\r\n+    timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n+    timeCell.textContent = hh;\r\n \r\n-    let placed = 0;\r\n+    body.appendChild(timeCell);\r\n \r\n-    for (const a of items) {\r\n-      const when = a.h || a.scheduledAt;\r\n-      if (!when) continue;\r\n+    // células por profissional\r\n+    (profs || []).forEach(p => {\r\n+      const cell = document.createElement('div');\r\n+      // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n+      cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n+      cell.dataset.profissionalId = String(p._id);\r\n+      cell.dataset.hh = hh;\r\n+      body.appendChild(cell);\r\n+    });\r\n+  });\r\n \r\n-      const d = new Date(when);\r\n-      const hh = `${pad(d.getHours())}:00`;\r\n+  // posiciona cartões\r\n+  let placed = 0;\r\n+  for (const a of items) {\r\n+    const when = a.h || a.scheduledAt;\r\n+    if (!when) continue;\r\n \r\n-      let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-      if (!profId) {\r\n-        let nameCandidate = '';\r\n-        if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n-        else if (a.profissional && typeof a.profissional === 'object') {\r\n-          nameCandidate = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n-                          a.profissional.razaoSocial || a.profissional.nome || '';\r\n-        }\r\n-        profId = byNameAll.get(String(nameCandidate).trim().toLowerCase()) || null;\r\n-      }\r\n+    const d = new Date(when);\r\n+    const hh = `${pad(d.getHours())}:00`;\r\n \r\n-      let col = null;\r\n-      if (profId) col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n-      if (!col && profs[0]) {\r\n-        col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n+    let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+    if (!profId) {\r\n+      let nameCandidate = '';\r\n+      if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n+      else if (a.profissional && typeof a.profissional === 'object') {\r\n+        nameCandidate = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n+                        a.profissional.razaoSocial || a.profissional.nome || '';\r\n       }\r\n-      if (!col) continue;\r\n+      profId = byNameAll.get(String(nameCandidate).trim().toLowerCase()) || null;\r\n+    }\r\n \r\n-      const meta = statusMeta(a.status);\r\n-      const card = document.createElement('div');\r\n-      card.className = 'agenda-card group relative';\r\n-      card.dataset.appointmentId = a._id || '';\r\n-      card.dataset.status = (a.status || 'agendado');\r\n-      card.style.setProperty('--stripe', meta.stripe);\r\n+    let col = null;\r\n+    if (profId) col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+    if (!col && profs[0]) {\r\n+      col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n+    }\r\n+    if (!col) continue;\r\n \r\n-      const headerEl = document.createElement('div');\r\n-      headerEl.className = 'flex items-center justify-between';\r\n-      headerEl.innerHTML = `\r\n-        <div class=\"flex items-center gap-2 min-w-0\">\r\n-          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n-          ${renderStatusBadge(a.status)}\r\n-        </div>\r\n-        <div class=\"agenda-card__actions hidden md:flex items-center gap-1\">\r\n-          <button class=\"agenda-action edit\" data-id=\"${a._id}\" title=\"Editar\">\r\n-            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"text-gray-600 hover:text-gray-900\"><path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 000-1.42l-2.34-2.34a1.003 1.003 0 00-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.82z\"/></svg>\r\n-          </button>\r\n-          <button class=\"agenda-action status\" data-id=\"${a._id}\" title=\"Mudar status\">\r\n-            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\"><path d=\"M12 7v10M7 12h10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/></svg>\r\n-          </button>\r\n-          <button class=\"agenda-action cobrar\" data-id=\"${a._id}\" title=\"Cobrança/Pagamento\">\r\n-            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"text-gray-600 hover:text-gray-900\"><path d=\"M12 2a10 10 0 100 20 10 10 0 000-20zm.5 4h-1v2.1c-1.6.2-3 1.3-3 2.9 0 1.6 1.8 2.7 3.8 3.1 1.3.3 2.2.7 2.2 1.4 0 .8-1 1.5-2.5 1.5s-2.7-.7-3.1-1.7l-1.8.8C5.9 17.8 7.7 19 10 19.2V21h1v-1.8c1.9-.2 3.5-1.2 3.5-2.7 0-1.7-1.6-2.6-3.8-3.1-1.1-.2-2.2-.6-2.2-1.3 0-.6.7-1.3 2.5-1.3 1.5 0 2.4.5 2.7 1.3l1.7-.7c-.5-1.2-1.9-2-3.4-2.2V6z\"/></svg>\r\n-          </button>\r\n-        </div>\r\n-        <button class=\"agenda-card__more md:hidden text-gray-500\" aria-label=\"Mais ações\">\r\n-          <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><circle cx=\"5\" cy=\"12\" r=\"2\"/><circle cx=\"12\" cy=\"12\" r=\"2\"/><circle cx=\"19\" cy=\"12\" r=\"2\"/></svg>\r\n-        </button>\r\n-      `;\r\n+    const meta = statusMeta(a.status);\r\n+    const card = document.createElement('div');\r\n+    card.setAttribute('data-appointment-id', a._id || '');\r\n+    card.style.setProperty('--stripe', meta.stripe);\r\n+    card.style.setProperty('--card-max-w', '260px');\r\n+    card.className = `agenda-card border ${meta.borderClass}`;\r\n \r\n-      const bodyEl = document.createElement('div');\r\n-      bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n-      bodyEl.textContent = a.servico || '';\r\n+    const headerEl = document.createElement('div');\r\n+    headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+    headerEl.innerHTML = `\r\n+      <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n+      ${renderStatusBadge(a.status)}\r\n+    `;\r\n \r\n-      const footerEl = document.createElement('div');\r\n-      footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n-      const price = document.createElement('div');\r\n-      price.className = 'text-[13px] text-gray-800 font-medium';\r\n-      price.textContent = money(a.valor);\r\n-      const payIcon = document.createElement('div');\r\n-      payIcon.innerHTML = a.pago\r\n-        ? '<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" class=\"text-green-600\"><path d=\"M5 13l4 4L19 7\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>'\r\n-        : '<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" class=\"text-slate-400\"><path d=\"M12 8v5l3 3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>';\r\n-      footerEl.appendChild(price);\r\n-      footerEl.appendChild(payIcon);\r\n+    const bodyEl = document.createElement('div');\r\n+    bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+    bodyEl.textContent = a.servico || '';\r\n \r\n-      card.appendChild(headerEl);\r\n-      card.appendChild(bodyEl);\r\n-      card.appendChild(footerEl);\r\n-      col.appendChild(card);\r\n-      placed++;\r\n+    const footerEl = document.createElement('div');\r\n+    footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+    const price = document.createElement('div');\r\n+    price.className = 'text-[13px] text-gray-800 font-medium';\r\n+    price.textContent = money(a.valor);\r\n \r\n-      card.addEventListener('click', async (ev) => {\r\n-        if (ev.target.closest('.agenda-action') || ev.target.closest('.agenda-card__more')) return;\r\n-        ev.preventDefault();\r\n-        await openEditModal(a);\r\n-      });\r\n-    }\r\n+    footerEl.appendChild(price);\r\n \r\n-    if (placed === 0) {\r\n-      const empty = document.createElement('div');\r\n-      empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n-      empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n-      agendaList.insertBefore(empty, header.nextSibling);\r\n-    }\r\n+    card.appendChild(headerEl);\r\n+    card.appendChild(bodyEl);\r\n+    card.appendChild(footerEl);\r\n+\r\n+    col.appendChild(card);\r\n+    placed++;\r\n   }\r\n \r\n+  if (placed === 0) {\r\n+    const empty = document.createElement('div');\r\n+    empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n+    empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n+    agendaList.insertBefore(empty, header.nextSibling);\r\n+  }\r\n+}\r\n+\r\n   // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n   function statusMeta(s) {\r\n     // Normalização: acentos/maiúsculas/espaços/hífens\r\n     const keyRaw = String(s || 'agendado')\r\n"
                },
                {
                    "date": 1757423005016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,164 +336,164 @@\n     }\r\n   }\r\n \r\n   // Grade (sem coluna \"Outros\")\r\n-function renderGrid() {\r\n-  if (!agendaList) return;\r\n+  function renderGrid() {\r\n+    if (!agendaList) return;\r\n \r\n-  const date = normalizeDate(dateInput?.value || todayStr());\r\n-  if (dateLabelVisible) {\r\n-    dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-  }\r\n+    const date = normalizeDate(dateInput?.value || todayStr());\r\n+    if (dateLabelVisible) {\r\n+      dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+    }\r\n \r\n-  // janelas de trabalho (ajuste se quiser)\r\n-  const BUSINESS_START = 8;   // 08:00\r\n-  const BUSINESS_END   = 19;  // 19:00\r\n+    // janelas de trabalho (ajuste se quiser)\r\n+    const BUSINESS_START = 8;   // 08:00\r\n+    const BUSINESS_END   = 19;  // 19:00\r\n \r\n-  const hours = [];\r\n-  for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+    const hours = [];\r\n+    for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n-  clearChildren(agendaList);\r\n+    clearChildren(agendaList);\r\n \r\n-  const profsAll = state.profissionais || [];\r\n-  const profs    = getVisibleProfissionais();\r\n-  const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n+    const profsAll = state.profissionais || [];\r\n+    const profs    = getVisibleProfissionais();\r\n+    const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n \r\n-  const colCount = 1 + (profs?.length || 0);\r\n+    const colCount = 1 + (profs?.length || 0);\r\n \r\n-  // Cabeçalho\r\n-  const header = document.createElement('div');\r\n-  header.style.display = 'grid';\r\n-  header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n-  header.className = 'bg-white border-b';\r\n+    // Cabeçalho\r\n+    const header = document.createElement('div');\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n+    header.className = 'bg-white border-b';\r\n \r\n-  const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n-  headLabels.forEach((label, idx) => {\r\n-    const cell = document.createElement('div');\r\n-    cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n-    if (idx === 0) {\r\n-      cell.textContent = label;\r\n-    } else {\r\n-      const span = document.createElement('span');\r\n-      span.className = 'agenda-head-label inline-block';\r\n-      span.textContent = label || '';\r\n-      cell.dataset.profId = String(profs[idx - 1]._id);\r\n-      cell.appendChild(span);\r\n-    }\r\n-    header.appendChild(cell);\r\n-  });\r\n+    const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n+    headLabels.forEach((label, idx) => {\r\n+      const cell = document.createElement('div');\r\n+      cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n+      if (idx === 0) {\r\n+        cell.textContent = label;\r\n+      } else {\r\n+        const span = document.createElement('span');\r\n+        span.className = 'agenda-head-label inline-block';\r\n+        span.textContent = label || '';\r\n+        cell.dataset.profId = String(profs[idx - 1]._id);\r\n+        cell.appendChild(span);\r\n+      }\r\n+      header.appendChild(cell);\r\n+    });\r\n \r\n-  const counter = document.createElement('div');\r\n-  counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n-  const itemsAll = state.agendamentos || [];\r\n-  const items    = getFilteredAgendamentos(itemsAll);\r\n-  const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n-  counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n-  header.appendChild(counter);\r\n+    const counter = document.createElement('div');\r\n+    counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n+    const itemsAll = state.agendamentos || [];\r\n+    const items    = getFilteredAgendamentos(itemsAll);\r\n+    const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n+    counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n+    header.appendChild(counter);\r\n \r\n-  agendaList.appendChild(header);\r\n+    agendaList.appendChild(header);\r\n \r\n-  // Corpo\r\n-  const body = document.createElement('div');\r\n-  body.style.display = 'grid';\r\n-  body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n-  agendaList.appendChild(body);\r\n+    // Corpo\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n+    agendaList.appendChild(body);\r\n \r\n-  const isToday = normalizeDate(date) === todayStr();\r\n-  const now = new Date();\r\n-  const nowHH = `${pad(now.getHours())}:00`;\r\n+    const isToday = normalizeDate(date) === todayStr();\r\n+    const now = new Date();\r\n+    const nowHH = `${pad(now.getHours())}:00`;\r\n \r\n-  hours.forEach(hh => {\r\n-    const hourNumber = parseInt(hh.split(':')[0], 10);\r\n-    const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n-    const isNowRow   = isToday && hh === nowHH;\r\n+    hours.forEach(hh => {\r\n+      const hourNumber = parseInt(hh.split(':')[0], 10);\r\n+      const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n+      const isNowRow   = isToday && hh === nowHH;\r\n \r\n-    // coluna de horário\r\n-    const timeCell = document.createElement('div');\r\n-    timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n-    timeCell.textContent = hh;\r\n+      // coluna de horário\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n+      timeCell.textContent = hh;\r\n \r\n-    body.appendChild(timeCell);\r\n+      body.appendChild(timeCell);\r\n \r\n-    // células por profissional\r\n-    (profs || []).forEach(p => {\r\n-      const cell = document.createElement('div');\r\n-      // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n-      cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n-      cell.dataset.profissionalId = String(p._id);\r\n-      cell.dataset.hh = hh;\r\n-      body.appendChild(cell);\r\n+      // células por profissional\r\n+      (profs || []).forEach(p => {\r\n+        const cell = document.createElement('div');\r\n+        // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n+        cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n+        cell.dataset.profissionalId = String(p._id);\r\n+        cell.dataset.hh = hh;\r\n+        body.appendChild(cell);\r\n+      });\r\n     });\r\n-  });\r\n \r\n-  // posiciona cartões\r\n-  let placed = 0;\r\n-  for (const a of items) {\r\n-    const when = a.h || a.scheduledAt;\r\n-    if (!when) continue;\r\n+    // posiciona cartões\r\n+    let placed = 0;\r\n+    for (const a of items) {\r\n+      const when = a.h || a.scheduledAt;\r\n+      if (!when) continue;\r\n \r\n-    const d = new Date(when);\r\n-    const hh = `${pad(d.getHours())}:00`;\r\n+      const d = new Date(when);\r\n+      const hh = `${pad(d.getHours())}:00`;\r\n \r\n-    let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-    if (!profId) {\r\n-      let nameCandidate = '';\r\n-      if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n-      else if (a.profissional && typeof a.profissional === 'object') {\r\n-        nameCandidate = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n-                        a.profissional.razaoSocial || a.profissional.nome || '';\r\n+      let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+      if (!profId) {\r\n+        let nameCandidate = '';\r\n+        if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n+        else if (a.profissional && typeof a.profissional === 'object') {\r\n+          nameCandidate = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n+                          a.profissional.razaoSocial || a.profissional.nome || '';\r\n+        }\r\n+        profId = byNameAll.get(String(nameCandidate).trim().toLowerCase()) || null;\r\n       }\r\n-      profId = byNameAll.get(String(nameCandidate).trim().toLowerCase()) || null;\r\n-    }\r\n \r\n-    let col = null;\r\n-    if (profId) col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n-    if (!col && profs[0]) {\r\n-      col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n-    }\r\n-    if (!col) continue;\r\n+      let col = null;\r\n+      if (profId) col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+      if (!col && profs[0]) {\r\n+        col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n+      }\r\n+      if (!col) continue;\r\n \r\n-    const meta = statusMeta(a.status);\r\n-    const card = document.createElement('div');\r\n-    card.setAttribute('data-appointment-id', a._id || '');\r\n-    card.style.setProperty('--stripe', meta.stripe);\r\n-    card.style.setProperty('--card-max-w', '260px');\r\n-    card.className = `agenda-card border ${meta.borderClass}`;\r\n+      const meta = statusMeta(a.status);\r\n+      const card = document.createElement('div');\r\n+      card.setAttribute('data-appointment-id', a._id || '');\r\n+      card.style.setProperty('--stripe', meta.stripe);\r\n+      card.style.setProperty('--card-max-w', '260px');\r\n+      card.className = `agenda-card border ${meta.borderClass}`;\r\n \r\n-    const headerEl = document.createElement('div');\r\n-    headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n-    headerEl.innerHTML = `\r\n-      <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n-      ${renderStatusBadge(a.status)}\r\n-    `;\r\n+      const headerEl = document.createElement('div');\r\n+      headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+      headerEl.innerHTML = `\r\n+        <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n+        ${renderStatusBadge(a.status)}\r\n+      `;\r\n \r\n-    const bodyEl = document.createElement('div');\r\n-    bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n-    bodyEl.textContent = a.servico || '';\r\n+      const bodyEl = document.createElement('div');\r\n+      bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+      bodyEl.textContent = a.servico || '';\r\n \r\n-    const footerEl = document.createElement('div');\r\n-    footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n-    const price = document.createElement('div');\r\n-    price.className = 'text-[13px] text-gray-800 font-medium';\r\n-    price.textContent = money(a.valor);\r\n+      const footerEl = document.createElement('div');\r\n+      footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+      const price = document.createElement('div');\r\n+      price.className = 'text-[13px] text-gray-800 font-medium';\r\n+      price.textContent = money(a.valor);\r\n \r\n-    footerEl.appendChild(price);\r\n+      footerEl.appendChild(price);\r\n \r\n-    card.appendChild(headerEl);\r\n-    card.appendChild(bodyEl);\r\n-    card.appendChild(footerEl);\r\n+      card.appendChild(headerEl);\r\n+      card.appendChild(bodyEl);\r\n+      card.appendChild(footerEl);\r\n \r\n-    col.appendChild(card);\r\n-    placed++;\r\n-  }\r\n+      col.appendChild(card);\r\n+      placed++;\r\n+    }\r\n \r\n-  if (placed === 0) {\r\n-    const empty = document.createElement('div');\r\n-    empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n-    empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n-    agendaList.insertBefore(empty, header.nextSibling);\r\n+    if (placed === 0) {\r\n+      const empty = document.createElement('div');\r\n+      empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n+      empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n+      agendaList.insertBefore(empty, header.nextSibling);\r\n+    }\r\n   }\r\n-}\r\n \r\n   // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n   function statusMeta(s) {\r\n     // Normalização: acentos/maiúsculas/espaços/hífens\r\n"
                },
                {
                    "date": 1757423030058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1212,8 +1212,27 @@\n     enhanceAgendaUI();\r\n   });\r\n \r\n   // Boot\r\n+  function setupShortcuts() {\r\n+    document.addEventListener('keydown', (e) => {\r\n+      if (e.target && ['INPUT','SELECT','TEXTAREA'].includes(e.target.tagName)) return; // não atrapalhar digitação\r\n+      if (e.key === 't' || e.key === 'T') {\r\n+        if (dateInput) {\r\n+          dateInput.value = todayStr();\r\n+          state.__didInitialScroll = false;\r\n+          loadAgendamentos().then(() => {\r\n+            renderKpis(); renderFilters(); renderGrid(); enhanceAgendaUI();\r\n+          });\r\n+        }\r\n+      }\r\n+      if (e.key === 'n' || e.key === 'N') {\r\n+        e.preventDefault();\r\n+        openAddModal();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n   (async function init() {\r\n     if (!dateInput?.value) dateInput.value = todayStr();\r\n     loadFiltersFromStorage();\r\n     await loadStores();\r\n@@ -1224,14 +1243,14 @@\n     await loadAgendamentos();\r\n \r\n     ensureToolbar();\r\n     ensureTodayButton();\r\n+    setupShortcuts();\r\n \r\n     renderKpis();\r\n     renderFilters();\r\n     renderGrid();\r\n     enhanceAgendaUI();\r\n-    startAutoRefresh();\r\n   })();\r\n \r\n   // Atualizações após troca de loja/data/status etc.\r\n   storeSelect?.addEventListener('change', async () => {\r\n"
                },
                {
                    "date": 1757427918478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -353,18 +353,19 @@\n     for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n     clearChildren(agendaList);\r\n \r\n-    const profsAll = state.profissionais || [];\r\n-    const profs    = getVisibleProfissionais();\r\n+    const profsAll  = state.profissionais || [];\r\n+    const profs     = getVisibleProfissionais();\r\n     const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n \r\n     const colCount = 1 + (profs?.length || 0);\r\n \r\n     // Cabeçalho\r\n     const header = document.createElement('div');\r\n     header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n+    // ⬇️ colunas com largura fixa via variável CSS (não elástica)\r\n+    header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n     header.className = 'bg-white border-b';\r\n \r\n     const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n     headLabels.forEach((label, idx) => {\r\n@@ -376,8 +377,10 @@\n         const span = document.createElement('span');\r\n         span.className = 'agenda-head-label inline-block';\r\n         span.textContent = label || '';\r\n         cell.dataset.profId = String(profs[idx - 1]._id);\r\n+        // ⬇️ centraliza o nome do profissional no topo (além do CSS fallback)\r\n+        cell.style.textAlign = 'center';\r\n         cell.appendChild(span);\r\n       }\r\n       header.appendChild(cell);\r\n     });\r\n@@ -394,14 +397,15 @@\n \r\n     // Corpo\r\n     const body = document.createElement('div');\r\n     body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(220px, 1fr))`;\r\n+    // ⬇️ mesma largura fixa para as colunas do corpo\r\n+    body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n     agendaList.appendChild(body);\r\n \r\n     const isToday = normalizeDate(date) === todayStr();\r\n-    const now = new Date();\r\n-    const nowHH = `${pad(now.getHours())}:00`;\r\n+    const now     = new Date();\r\n+    const nowHH   = `${pad(now.getHours())}:00`;\r\n \r\n     hours.forEach(hh => {\r\n       const hourNumber = parseInt(hh.split(':')[0], 10);\r\n       const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n@@ -410,9 +414,8 @@\n       // coluna de horário\r\n       const timeCell = document.createElement('div');\r\n       timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n       timeCell.textContent = hh;\r\n-\r\n       body.appendChild(timeCell);\r\n \r\n       // células por profissional\r\n       (profs || []).forEach(p => {\r\n@@ -430,41 +433,40 @@\n     for (const a of items) {\r\n       const when = a.h || a.scheduledAt;\r\n       if (!when) continue;\r\n \r\n-      const d = new Date(when);\r\n+      const d  = new Date(when);\r\n       const hh = `${pad(d.getHours())}:00`;\r\n \r\n       let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n       if (!profId) {\r\n         let nameCandidate = '';\r\n         if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n-        else if (a.profissional && typeof a.profissional === 'object') {\r\n-          nameCandidate = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n-                          a.profissional.razaoSocial || a.profissional.nome || '';\r\n-        }\r\n-        profId = byNameAll.get(String(nameCandidate).trim().toLowerCase()) || null;\r\n+        else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n+        const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n+        if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n       }\r\n+      if (!profId) continue;\r\n \r\n-      let col = null;\r\n-      if (profId) col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n-      if (!col && profs[0]) {\r\n-        col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n-      }\r\n+      const selector = `.agenda-slot[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`;\r\n+      const col = body.querySelector(selector);\r\n       if (!col) continue;\r\n \r\n-      const meta = statusMeta(a.status);\r\n       const card = document.createElement('div');\r\n-      card.setAttribute('data-appointment-id', a._id || '');\r\n-      card.style.setProperty('--stripe', meta.stripe);\r\n-      card.style.setProperty('--card-max-w', '260px');\r\n-      card.className = `agenda-card border ${meta.borderClass}`;\r\n+      card.className = 'agenda-card group';\r\n+      card.style.setProperty('--stripe', STATUS_META[a.status]?.stripe || '#334155'); // fallback\r\n \r\n       const headerEl = document.createElement('div');\r\n-      headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+      headerEl.className = 'flex items-start justify-between gap-3';\r\n       headerEl.innerHTML = `\r\n-        <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n-        ${renderStatusBadge(a.status)}\r\n+        <div class=\"min-w-0\">\r\n+          <div class=\"text-[13px] text-slate-700\">${money(a.valor)} · <span class=\"font-medium\">${a.servico || ''}</span></div>\r\n+          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n+          ${renderStatusBadge(a.status)}\r\n+        </div>\r\n+        <div class=\"agenda-card__actions hidden items-center gap-1\">\r\n+          ${renderCardActions(a)}\r\n+        </div>\r\n       `;\r\n \r\n       const bodyEl = document.createElement('div');\r\n       bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n@@ -474,9 +476,8 @@\n       footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n       const price = document.createElement('div');\r\n       price.className = 'text-[13px] text-gray-800 font-medium';\r\n       price.textContent = money(a.valor);\r\n-\r\n       footerEl.appendChild(price);\r\n \r\n       card.appendChild(headerEl);\r\n       card.appendChild(bodyEl);\r\n"
                },
                {
                    "date": 1757428515849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,163 +337,165 @@\n   }\r\n \r\n   // Grade (sem coluna \"Outros\")\r\n   function renderGrid() {\r\n-    if (!agendaList) return;\r\n+      if (!agendaList) return;\r\n \r\n-    const date = normalizeDate(dateInput?.value || todayStr());\r\n-    if (dateLabelVisible) {\r\n-      dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-    }\r\n+      const date = normalizeDate(dateInput?.value || todayStr());\r\n+      if (dateLabelVisible) {\r\n+        dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      }\r\n \r\n-    // janelas de trabalho (ajuste se quiser)\r\n-    const BUSINESS_START = 8;   // 08:00\r\n-    const BUSINESS_END   = 19;  // 19:00\r\n+      // janelas de trabalho (ajuste se quiser)\r\n+      const BUSINESS_START = 8;   // 08:00\r\n+      const BUSINESS_END   = 19;  // 19:00\r\n \r\n-    const hours = [];\r\n-    for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+      const hours = [];\r\n+      for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n-    clearChildren(agendaList);\r\n+      clearChildren(agendaList);\r\n \r\n-    const profsAll  = state.profissionais || [];\r\n-    const profs     = getVisibleProfissionais();\r\n-    const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n+      const profsAll  = state.profissionais || [];\r\n+      const profs     = getVisibleProfissionais();\r\n+      const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n \r\n-    const colCount = 1 + (profs?.length || 0);\r\n+      const colCount = 1 + (profs?.length || 0);\r\n \r\n-    // Cabeçalho\r\n-    const header = document.createElement('div');\r\n-    header.style.display = 'grid';\r\n-    // ⬇️ colunas com largura fixa via variável CSS (não elástica)\r\n-    header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n-    header.className = 'bg-white border-b';\r\n+      // Cabeçalho\r\n+      const header = document.createElement('div');\r\n+      header.style.display = 'grid';\r\n+      // >>> LARGURA FIXA POR COLUNA: igual ao corpo (evita “vão gigante”)\r\n+      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n+      header.className = 'bg-white border-b';\r\n \r\n-    const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n-    headLabels.forEach((label, idx) => {\r\n-      const cell = document.createElement('div');\r\n-      cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n-      if (idx === 0) {\r\n-        cell.textContent = label;\r\n-      } else {\r\n-        const span = document.createElement('span');\r\n-        span.className = 'agenda-head-label inline-block';\r\n-        span.textContent = label || '';\r\n-        cell.dataset.profId = String(profs[idx - 1]._id);\r\n-        // ⬇️ centraliza o nome do profissional no topo (além do CSS fallback)\r\n-        cell.style.textAlign = 'center';\r\n-        cell.appendChild(span);\r\n-      }\r\n-      header.appendChild(cell);\r\n-    });\r\n+      const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n+      headLabels.forEach((label, idx) => {\r\n+        const cell = document.createElement('div');\r\n+        cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n+        if (idx === 0) {\r\n+          cell.textContent = label;\r\n+        }\r\n+        else {\r\n+          // >>> centraliza o nome do profissional\r\n+          cell.style.textAlign = 'center';\r\n+          const span = document.createElement('span');\r\n+          span.className = 'agenda-head-label inline-block';\r\n+          span.textContent = label || '';\r\n+          cell.dataset.profId = String(profs[idx - 1]._id);\r\n+          cell.appendChild(span);\r\n+        }\r\n+        header.appendChild(cell);\r\n+      });\r\n \r\n-    const counter = document.createElement('div');\r\n-    counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n-    const itemsAll = state.agendamentos || [];\r\n-    const items    = getFilteredAgendamentos(itemsAll);\r\n-    const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n-    counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n-    header.appendChild(counter);\r\n+      const counter = document.createElement('div');\r\n+      counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n+      const itemsAll = state.agendamentos || [];\r\n+      const items    = getFilteredAgendamentos(itemsAll);\r\n+      const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n+      counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n+      header.appendChild(counter);\r\n \r\n-    agendaList.appendChild(header);\r\n+      agendaList.appendChild(header);\r\n \r\n-    // Corpo\r\n-    const body = document.createElement('div');\r\n-    body.style.display = 'grid';\r\n-    // ⬇️ mesma largura fixa para as colunas do corpo\r\n-    body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n-    agendaList.appendChild(body);\r\n+      // Corpo\r\n+      const body = document.createElement('div');\r\n+      body.style.display = 'grid';\r\n+      // >>> LARGURA FIXA POR COLUNA: fica do tamanho do card + folga\r\n+      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n+      agendaList.appendChild(body);\r\n \r\n-    const isToday = normalizeDate(date) === todayStr();\r\n-    const now     = new Date();\r\n-    const nowHH   = `${pad(now.getHours())}:00`;\r\n+      const isToday = normalizeDate(date) === todayStr();\r\n+      const now = new Date();\r\n+      const nowHH = `${pad(now.getHours())}:00`;\r\n \r\n-    hours.forEach(hh => {\r\n-      const hourNumber = parseInt(hh.split(':')[0], 10);\r\n-      const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n-      const isNowRow   = isToday && hh === nowHH;\r\n+      hours.forEach(hh => {\r\n+        const hourNumber = parseInt(hh.split(':')[0], 10);\r\n+        const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n+        const isNowRow   = isToday && hh === nowHH;\r\n \r\n-      // coluna de horário\r\n-      const timeCell = document.createElement('div');\r\n-      timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n-      timeCell.textContent = hh;\r\n-      body.appendChild(timeCell);\r\n+        // coluna de horário\r\n+        const timeCell = document.createElement('div');\r\n+        timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n+        timeCell.textContent = hh;\r\n \r\n-      // células por profissional\r\n-      (profs || []).forEach(p => {\r\n-        const cell = document.createElement('div');\r\n-        // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n-        cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n-        cell.dataset.profissionalId = String(p._id);\r\n-        cell.dataset.hh = hh;\r\n-        body.appendChild(cell);\r\n+        body.appendChild(timeCell);\r\n+\r\n+        // células por profissional\r\n+        (profs || []).forEach(p => {\r\n+          const cell = document.createElement('div');\r\n+          // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n+          cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n+          cell.dataset.profissionalId = String(p._id);\r\n+          cell.dataset.hh = hh;\r\n+          body.appendChild(cell);\r\n+        });\r\n       });\r\n-    });\r\n \r\n-    // posiciona cartões\r\n-    let placed = 0;\r\n-    for (const a of items) {\r\n-      const when = a.h || a.scheduledAt;\r\n-      if (!when) continue;\r\n+      // posiciona cartões\r\n+      let placed = 0;\r\n+      for (const a of items) {\r\n+        const when = a.h || a.scheduledAt;\r\n+        if (!when) continue;\r\n \r\n-      const d  = new Date(when);\r\n-      const hh = `${pad(d.getHours())}:00`;\r\n+        const d  = new Date(when);\r\n+        const hh = `${pad(d.getHours())}:00`;\r\n \r\n-      let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-      if (!profId) {\r\n-        let nameCandidate = '';\r\n-        if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n-        else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n-        const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n-        if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n-      }\r\n-      if (!profId) continue;\r\n+        let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+        if (!profId) {\r\n+          let nameCandidate = '';\r\n+          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n+          else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n+          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n+          if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n+        }\r\n+        if (!profId) continue;\r\n \r\n-      const selector = `.agenda-slot[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`;\r\n-      const col = body.querySelector(selector);\r\n-      if (!col) continue;\r\n+        let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+        if (!col && profs[0]) {\r\n+          col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n+        }\r\n+        if (!col) continue;\r\n \r\n-      const card = document.createElement('div');\r\n-      card.className = 'agenda-card group';\r\n-      card.style.setProperty('--stripe', STATUS_META[a.status]?.stripe || '#334155'); // fallback\r\n+        const meta = statusMeta(a.status);\r\n+        const card = document.createElement('div');\r\n+        card.setAttribute('data-appointment-id', a._id || '');\r\n+        card.style.setProperty('--stripe', meta.stripe);\r\n+        card.style.setProperty('--card-max-w', '260px');\r\n+        card.className = `agenda-card border ${meta.borderClass}`;\r\n \r\n-      const headerEl = document.createElement('div');\r\n-      headerEl.className = 'flex items-start justify-between gap-3';\r\n-      headerEl.innerHTML = `\r\n-        <div class=\"min-w-0\">\r\n-          <div class=\"text-[13px] text-slate-700\">${money(a.valor)} · <span class=\"font-medium\">${a.servico || ''}</span></div>\r\n+        const headerEl = document.createElement('div');\r\n+        headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+        headerEl.innerHTML = `\r\n           <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n           ${renderStatusBadge(a.status)}\r\n-        </div>\r\n-        <div class=\"agenda-card__actions hidden items-center gap-1\">\r\n-          ${renderCardActions(a)}\r\n-        </div>\r\n-      `;\r\n+        `;\r\n \r\n-      const bodyEl = document.createElement('div');\r\n-      bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n-      bodyEl.textContent = a.servico || '';\r\n+        const bodyEl = document.createElement('div');\r\n+        bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+        bodyEl.textContent = a.servico || '';\r\n \r\n-      const footerEl = document.createElement('div');\r\n-      footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n-      const price = document.createElement('div');\r\n-      price.className = 'text-[13px] text-gray-800 font-medium';\r\n-      price.textContent = money(a.valor);\r\n-      footerEl.appendChild(price);\r\n+        const footerEl = document.createElement('div');\r\n+        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+        const price = document.createElement('div');\r\n+        price.className = 'text-[13px] text-gray-800 font-medium';\r\n+        price.textContent = money(a.valor);\r\n \r\n-      card.appendChild(headerEl);\r\n-      card.appendChild(bodyEl);\r\n-      card.appendChild(footerEl);\r\n+        footerEl.appendChild(price);\r\n \r\n-      col.appendChild(card);\r\n-      placed++;\r\n-    }\r\n+        card.appendChild(headerEl);\r\n+        card.appendChild(bodyEl);\r\n+        card.appendChild(footerEl);\r\n \r\n-    if (placed === 0) {\r\n-      const empty = document.createElement('div');\r\n-      empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n-      empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n-      agendaList.insertBefore(empty, header.nextSibling);\r\n-    }\r\n+        col.appendChild(card);\r\n+        placed++;\r\n+      }\r\n+\r\n+      if (placed === 0) {\r\n+        const empty = document.createElement('div');\r\n+        empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n+        empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n+        agendaList.insertBefore(empty, header.nextSibling);\r\n+      }\r\n   }\r\n \r\n   // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n   function statusMeta(s) {\r\n"
                },
                {
                    "date": 1757432785439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1294 @@\n+(function () {\r\n+  // Helper para requisições com token\r\n+  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n+  function api(url, opts = {}) {\r\n+    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n+      ...opts,\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        ...(opts.headers || {}),\r\n+        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Elements\r\n+  const agendaList = document.getElementById('agenda-list');\r\n+  const dateInput = document.getElementById('agenda-date');\r\n+  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n+  const addBtn = document.getElementById('add-service-btn');\r\n+  const storeSelect = document.getElementById('agenda-store');\r\n+  const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n+\r\n+  // Modal (reutilizado p/ adicionar e editar)\r\n+  const modal = document.getElementById('modal-add-servico');\r\n+  const modalClose = document.getElementById('modal-add-close');\r\n+  const modalCancel = document.getElementById('modal-add-cancel');\r\n+  const modalSave = document.getElementById('modal-add-save');\r\n+  const modalDelete = document.getElementById('modal-add-delete');\r\n+\r\n+  const addStoreSelect = document.getElementById('add-store-select');\r\n+  const addDateInput   = document.getElementById('add-date');\r\n+  const statusSelect   = document.getElementById('add-status');\r\n+\r\n+  const cliInput = document.getElementById('add-cli-input');\r\n+  const cliSug = document.getElementById('add-cli-sug');\r\n+  const petSelect = document.getElementById('add-pet-select');\r\n+  const servInput = document.getElementById('add-serv-input');\r\n+  const servSug = document.getElementById('add-serv-sug');\r\n+  const valorInput = document.getElementById('add-valor');\r\n+  const horaInput = document.getElementById('add-hora');\r\n+  const profSelect = document.getElementById('add-prof-select');\r\n+\r\n+  // State\r\n+  const FILTER_STORAGE_KEY = 'agenda_filters_v1';\r\n+\r\n+  const state = {\r\n+    stores: [],\r\n+    profissionais: [],\r\n+    agendamentos: [],\r\n+    selectedStoreId: null,\r\n+    selectedCliente: null,\r\n+    selectedServico: null,\r\n+    editing: null,\r\n+    lastSnapshotHash: '',\r\n+    __didInitialScroll: false,\r\n+    filters: {                 // filtros persistentes\r\n+      statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n+      profIds: new Set()       // _id dos profissionais\r\n+    }\r\n+  };\r\n+\r\n+  function loadFiltersFromStorage() {\r\n+    try {\r\n+      const raw = JSON.parse(localStorage.getItem(FILTER_STORAGE_KEY) || 'null');\r\n+      if (raw && typeof raw === 'object') {\r\n+        state.filters.statuses = new Set(Array.isArray(raw.statuses) ? raw.statuses : []);\r\n+        state.filters.profIds  = new Set(Array.isArray(raw.profIds)  ? raw.profIds  : []);\r\n+      }\r\n+    } catch(_) {}\r\n+  }\r\n+  function saveFiltersToStorage() {\r\n+    try {\r\n+      localStorage.setItem(FILTER_STORAGE_KEY, JSON.stringify({\r\n+        statuses: Array.from(state.filters.statuses),\r\n+        profIds : Array.from(state.filters.profIds)\r\n+      }));\r\n+    } catch(_) {}\r\n+  }\r\n+\r\n+  function ensureToolbar() {\r\n+    if (!agendaList) return;\r\n+    if (document.getElementById('agenda-toolbar')) return;\r\n+\r\n+    const bar = document.createElement('div');\r\n+    bar.id = 'agenda-toolbar';\r\n+    // sticky sob o cabeçalho; leve blur para legibilidade; borda inferior discreta\r\n+    bar.className = 'sticky top-0 z-30 bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/60 border-b border-slate-200 mb-2 flex flex-col gap-2 px-3 py-2 rounded-lg';\r\n+\r\n+    // KPIs\r\n+    const kpis = document.createElement('div');\r\n+    kpis.id = 'agenda-kpis';\r\n+    kpis.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(kpis);\r\n+\r\n+    // Filtros\r\n+    const filters = document.createElement('div');\r\n+    filters.id = 'agenda-filters';\r\n+    filters.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(filters);\r\n+\r\n+    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n+  }\r\n+\r\n+  function computeKPIs(items) {\r\n+    const total = items.length;\r\n+    const previsto = items.reduce((s, i) => s + Number(i.valor || 0), 0);\r\n+    const recebido = items.reduce((s, i) => s + (i.pago ? Number(i.valor || 0) : 0), 0);\r\n+    const pendente = previsto - recebido;\r\n+    return { total, previsto, recebido, pendente };\r\n+  }\r\n+\r\n+  function renderKpis() {\r\n+    const wrap = document.getElementById('agenda-kpis');\r\n+    if (!wrap) return;\r\n+\r\n+    const all = state.agendamentos || [];\r\n+    const f = getFilteredAgendamentos();   // filtrados atuais\r\n+    const kAll = computeKPIs(all);\r\n+    const kF   = computeKPIs(f);\r\n+\r\n+    wrap.innerHTML = `\r\n+      <div class=\"kpi-chip\">Total dia: <strong>${kAll.total}</strong></div>\r\n+      <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n+      <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n+      <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n+      ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n+          ? `<div class=\"kpi-chip kpi-muted\">Filtrados: <strong>${kF.total}</strong></div>` : '' }\r\n+    `;\r\n+  }\r\n+\r\n+  function renderFilters() {\r\n+    const el = document.getElementById('agenda-filters');\r\n+    if (!el) return;\r\n+\r\n+    // contadores por status\r\n+    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const key = String(a.status || 'agendado')\r\n+        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n+      if (counts[key] !== undefined) counts[key] += 1;\r\n+    }\r\n+\r\n+    // contadores por profissional\r\n+    const byProf = new Map();\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n+      if (!id) continue;\r\n+      const key = String(id);\r\n+      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n+    }\r\n+\r\n+    const statuses = [\r\n+      {key:'agendado', label:'Agend.'},\r\n+      {key:'em_espera', label:'Espera'},\r\n+      {key:'em_atendimento', label:'Atend.'},\r\n+      {key:'finalizado', label:'Fim.'}\r\n+    ];\r\n+\r\n+    // chips de status\r\n+    const chipsStatus = statuses.map(s => {\r\n+      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n+      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n+                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    // chips de profissional (apenas os que existem)\r\n+    const chipsProf = (state.profissionais || []).map(p => {\r\n+      const id = String(p._id);\r\n+      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n+      const n = byProf.get(id) || 0;\r\n+      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n+                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n+      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n+\r\n+    el.innerHTML = `\r\n+      <div class=\"flex flex-wrap items-center gap-2\">\r\n+        ${chipsStatus}\r\n+        <span class=\"chip-sep\"></span>\r\n+        ${chipsProf}\r\n+        ${clearBtn}\r\n+      </div>\r\n+    `;\r\n+\r\n+    // handlers\r\n+    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n+      btn.addEventListener('click', () => {\r\n+        const type = btn.getAttribute('data-filter');\r\n+        const val  = btn.getAttribute('data-value');\r\n+        if (type === 'status') {\r\n+          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n+        } else if (type === 'prof') {\r\n+          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n+        }\r\n+        saveFiltersToStorage();\r\n+        renderFilters();\r\n+        renderKpis();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      });\r\n+    });\r\n+\r\n+    const clear = document.getElementById('chip-clear');\r\n+    if (clear) clear.addEventListener('click', () => {\r\n+      state.filters.statuses.clear();\r\n+      state.filters.profIds.clear();\r\n+      saveFiltersToStorage();\r\n+      renderFilters();\r\n+      renderKpis();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    });\r\n+  }\r\n+\r\n+  function normalizeStatus(s) {\r\n+    return String(s || 'agendado')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n+  }\r\n+\r\n+  function getFilteredAgendamentos() {\r\n+    const hasStatus = state.filters.statuses.size > 0;\r\n+    const hasProf   = state.filters.profIds.size   > 0;\r\n+\r\n+    if (!hasStatus && !hasProf) return state.agendamentos || [];\r\n+\r\n+    const byNameAll = new Map(\r\n+      (state.profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n+    );\r\n+\r\n+    return (state.agendamentos || []).filter(a => {\r\n+      let ok = true;\r\n+      if (hasStatus) ok = ok && state.filters.statuses.has(normalizeStatus(a.status));\r\n+      if (hasProf) {\r\n+        let pid = a.profissionalId ? String(a.profissionalId) : null;\r\n+        if (!pid) {\r\n+          let nc = '';\r\n+          if (typeof a.profissional === 'string') nc = a.profissional;\r\n+          else if (a.profissional && typeof a.profissional === 'object') {\r\n+            nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n+                a.profissional.razaoSocial || a.profissional.nome || '';\r\n+          }\r\n+          pid = byNameAll.get(String(nc).trim().toLowerCase()) || null;\r\n+        }\r\n+        ok = ok && pid && state.filters.profIds.has(String(pid));\r\n+      }\r\n+      return ok;\r\n+    });\r\n+  }\r\n+\r\n+  function getVisibleProfissionais() {\r\n+    const profs = state.profissionais || [];\r\n+    if (!state.filters.profIds.size) return profs;\r\n+    return profs.filter(p => state.filters.profIds.has(String(p._id)));\r\n+  }\r\n+\r\n+  // Helpers de data e utilitários\r\n+  function todayStr() {\r\n+    // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n+    const d = new Date();\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n+  function buildLocalDateTime(dateStr, hhmm) {\r\n+    let y, m, d;\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) { [d, m, y] = dateStr.split('/').map(Number); }\r\n+    else { [y, m, d] = dateStr.split('-').map(Number); }\r\n+    const [hh, mm] = (hhmm || '00:00').split(':').map(Number);\r\n+    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n+  }\r\n+  function normalizeDate(v) {\r\n+    if (!v) return todayStr();\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n+    return v;\r\n+  }\r\n+  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n+  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n+  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n+\r\n+  // Stores\r\n+  async function loadStores() {\r\n+    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.stores = Array.isArray(list) ? list : [];\r\n+    if (storeSelect) {\r\n+      storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+    }\r\n+    if (!state.selectedStoreId && state.stores[0]) {\r\n+      state.selectedStoreId = state.stores[0]._id;\r\n+      if (storeSelect) storeSelect.value = state.selectedStoreId;\r\n+    }\r\n+    updateStoreLabel();\r\n+  }\r\n+  function updateStoreLabel() {\r\n+    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n+    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n+    const vis = document.getElementById('agenda-store-label-visible');\r\n+    if (vis) vis.textContent = s ? s.nome : '—';\r\n+  }\r\n+\r\n+  // Profissionais\r\n+  async function loadProfissionais() {\r\n+    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n+    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.profissionais = Array.isArray(list) ? list : [];\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+    }\r\n+  }\r\n+\r\n+  // Agendamentos\r\n+  async function loadAgendamentos() {\r\n+    const date = normalizeDate(dateInput?.value || todayStr());\r\n+    const url = `/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`;\r\n+    try {\r\n+      const resp = await api(url);\r\n+      if (!resp.ok) {\r\n+        const txt = await resp.text();\r\n+        console.error('GET', url, '->', resp.status, txt);\r\n+        state.agendamentos = [];\r\n+        return;\r\n+      }\r\n+      const list = await resp.json();\r\n+      state.agendamentos = Array.isArray(list) ? list : [];\r\n+      console.info('[Agenda] loja=', state.selectedStoreId, 'data=', date, 'itens=', state.agendamentos.length, state.agendamentos.slice(0, 3));\r\n+    } catch (e) {\r\n+      console.error('Erro ao carregar agendamentos', e);\r\n+      state.agendamentos = [];\r\n+    }\r\n+  }\r\n+\r\n+  // Grade (sem coluna \"Outros\")\r\n+  function renderGrid() {\r\n+    if (!agendaList) return;\r\n+\r\n+    const date = normalizeDate(dateInput?.value || todayStr());\r\n+    if (dateLabelVisible) {\r\n+      dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+    }\r\n+\r\n+    const BUSINESS_START = 8;\r\n+    const BUSINESS_END   = 19;\r\n+\r\n+    const hours = [];\r\n+    for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+\r\n+    clearChildren(agendaList);\r\n+\r\n+    const profsAll  = state.profissionais || [];\r\n+    let profs     = getVisibleProfissionais();\r\n+    const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n+      // Mostrar somente colunas de profissionais com agendamento quando nenhum filtro de profissional estiver ativo\r\n+      const itemsAll = state.agendamentos || [];\r\n+      if (!state.filters.profIds.size && Array.isArray(itemsAll)) {\r\n+        const profIdsWithItems = new Set();\r\n+        for (const a of itemsAll) {\r\n+          let pid = a && a.profissionalId ? String(a.profissionalId) : null;\r\n+          if (!pid) {\r\n+            let nameCandidate = '';\r\n+            if (a) {\r\n+              if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n+              else if (a.profissional && typeof a.profissional === 'object') {\r\n+                nameCandidate = a.profissional.nome || a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial || '';\r\n+              }\r\n+            }\r\n+            const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n+            if (normalized && byNameAll.has(normalized)) pid = String(byNameAll.get(normalized));\r\n+          }\r\n+          if (pid) profIdsWithItems.add(String(pid));\r\n+        }\r\n+        if (profIdsWithItems.size) {\r\n+          const original = profs;\r\n+          profs = (profs || []).filter(p => profIdsWithItems.has(String(p._id)));\r\n+          if (!profs.length) profs = original;\r\n+        }\r\n+      }\r\n+\r\n+    const colCount = 1 + (profs?.length || 0);\r\n+\r\n+    // Cabeçalho\r\n+    const header = document.createElement('div');\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n+    header.className = 'bg-white border-b';\r\n+\r\n+    const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n+    headLabels.forEach((label, idx) => {\r\n+      const cell = document.createElement('div');\r\n+      cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n+      if (idx === 0) {\r\n+        cell.textContent = label;\r\n+      }\r\n+      else {\r\n+        cell.style.textAlign = 'center';\r\n+        const span = document.createElement('span');\r\n+        span.className = 'agenda-head-label inline-block';\r\n+        span.textContent = label || '';\r\n+        cell.dataset.profId = String(profs[idx - 1]._id);\r\n+        cell.appendChild(span);\r\n+      }\r\n+      header.appendChild(cell);\r\n+    });\r\n+\r\n+    const counter = document.createElement('div');\r\n+    counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n+    const items    = getFilteredAgendamentos(itemsAll);\r\n+    const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n+    counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n+    header.appendChild(counter);\r\n+\r\n+    agendaList.appendChild(header);\r\n+\r\n+    // Corpo\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n+    agendaList.appendChild(body);\r\n+\r\n+    const isToday = normalizeDate(date) === todayStr();\r\n+    const now = new Date();\r\n+    const nowHH = `${pad(now.getHours())}:00`;\r\n+\r\n+    hours.forEach(hh => {\r\n+      const hourNumber = parseInt(hh.split(':')[0], 10);\r\n+      const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n+      const isNowRow   = isToday && hh === nowHH;\r\n+\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n+      timeCell.textContent = hh;\r\n+      body.appendChild(timeCell);\r\n+\r\n+      (profs || []).forEach(p => {\r\n+        const cell = document.createElement('div');\r\n+        cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n+        cell.dataset.profissionalId = String(p._id);\r\n+        cell.dataset.hh = hh;\r\n+        body.appendChild(cell);\r\n+      });\r\n+    });\r\n+\r\n+    // posiciona cartões\r\n+    let placed = 0;\r\n+    for (const a of items) {\r\n+      const when = a.h || a.scheduledAt;\r\n+      if (!when) continue;\r\n+      const d  = new Date(when);\r\n+      const hh = `${pad(d.getHours())}:00`;\r\n+\r\n+      let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+      if (!profId) {\r\n+        let nameCandidate = '';\r\n+        if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n+        else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n+        const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n+        if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n+      }\r\n+      if (!profId) continue;\r\n+\r\n+      let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+      if (!col && profs[0]) {\r\n+        col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n+      }\r\n+      if (!col) continue;\r\n+\r\n+      const meta = statusMeta(a.status);\r\n+      const card = document.createElement('div');\r\n+      card.setAttribute('data-appointment-id', a._id || '');\r\n+      card.style.setProperty('--stripe', meta.stripe);\r\n+      card.style.setProperty('--card-max-w', '260px');\r\n+      card.className = `agenda-card border ${meta.borderClass}`;\r\n+\r\n+      const headerEl = document.createElement('div');\r\n+      headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+      headerEl.innerHTML = `\r\n+        <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n+        ${renderStatusBadge(a.status)}\r\n+      `;\r\n+\r\n+      const bodyEl = document.createElement('div');\r\n+      bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+      bodyEl.textContent = a.servico || '';\r\n+\r\n+      const footerEl = document.createElement('div');\r\n+      footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+      const price = document.createElement('div');\r\n+      price.className = 'text-[13px] text-gray-800 font-medium';\r\n+      price.textContent = money(a.valor);\r\n+\r\n+      footerEl.appendChild(price);\r\n+\r\n+      card.appendChild(headerEl);\r\n+      card.appendChild(bodyEl);\r\n+      card.appendChild(footerEl);\r\n+\r\n+      col.appendChild(card);\r\n+      placed++;\r\n+    }\r\n+\r\n+    if (placed === 0) {\r\n+      const empty = document.createElement('div');\r\n+      empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n+      empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n+      body.appendChild(empty);\r\n+    }\r\n+  }\r\n+\r\n+  // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n+  function statusMeta(s) {\r\n+    // Normalização: acentos/maiúsculas/espaços/hífens\r\n+    const keyRaw = String(s || 'agendado')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n+\r\n+    const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+    const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n+\r\n+    // Paleta acessível (contraste AA) + info para faixa lateral e badge compacta\r\n+    const map = {\r\n+      agendado: {\r\n+        label: 'Agendado',\r\n+        short: 'Agend.',\r\n+        stripe: '#64748B',     // slate-500\r\n+        text: '#0F172A',       // slate-900\r\n+        badgeClass: 'bg-slate-100 text-slate-700 border border-slate-200',\r\n+        borderClass: 'border-slate-300'\r\n+      },\r\n+      em_espera: {\r\n+        label: 'Em espera',\r\n+        short: 'Espera',\r\n+        stripe: '#B45309',     // amber-700\r\n+        text: '#1F2937',       // gray-800\r\n+        badgeClass: 'bg-amber-50 text-amber-800 border border-amber-200',\r\n+        borderClass: 'border-amber-400'\r\n+      },\r\n+      em_atendimento: {\r\n+        label: 'Em atendimento',\r\n+        short: 'Atend.',\r\n+        stripe: '#1D4ED8',     // blue-700\r\n+        text: '#0B1235',\r\n+        badgeClass: 'bg-blue-50 text-blue-800 border border-blue-200',\r\n+        borderClass: 'border-blue-500'\r\n+      },\r\n+      finalizado: {\r\n+        label: 'Finalizado',\r\n+        short: 'Fim.',\r\n+        stripe: '#16A34A',     // green-600\r\n+        text: '#052E16',\r\n+        badgeClass: 'bg-green-50 text-green-800 border border-green-200',\r\n+        borderClass: 'border-green-500'\r\n+      }\r\n+    };\r\n+\r\n+    return map[k];\r\n+  }\r\n+\r\n+  function renderStatusBadge(s) {\r\n+    const { label, badgeClass } = statusMeta(s);\r\n+    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${badgeClass}\">${label}</span>`;\r\n+  }\r\n+\r\n+  // Modal — modo adicionar\r\n+  function openAddModal() {\r\n+    state.editing = null;\r\n+    if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n+\r\n+    // Campos editáveis habilitados\r\n+    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n+\r\n+    // Limpa estado/inputs\r\n+    state.selectedCliente = null;\r\n+    state.selectedServico = null;\r\n+    if (cliInput) { cliInput.value = ''; }\r\n+    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+    if (servInput) { servInput.value = ''; }\r\n+    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    if (valorInput) { valorInput.value = ''; }\r\n+    if (petSelect) { petSelect.innerHTML = ''; }\r\n+\r\n+    // Empresa (usa as mesmas opções do seletor da página)\r\n+    if (addStoreSelect) {\r\n+      if (storeSelect && storeSelect.options.length) {\r\n+        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n+      } else if (state.stores?.length) {\r\n+        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+      }\r\n+      const sid = state.selectedStoreId || storeSelect?.value || '';\r\n+      addStoreSelect.value = sid;\r\n+    }\r\n+\r\n+    // Data (usa a data visível na página)\r\n+    if (addDateInput) {\r\n+      const date = normalizeDate(dateInput?.value || todayStr()); // YYYY-MM-DD\r\n+      addDateInput.value = date;\r\n+    }\r\n+\r\n+    // Hora default (agora)\r\n+    const now = new Date();\r\n+    const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n+    if (horaInput) horaInput.value = hh;\r\n+\r\n+    // Status default\r\n+    if (statusSelect) statusSelect.value = 'agendado';\r\n+\r\n+    // Botão Excluir só em edição\r\n+    if (modalDelete) modalDelete.classList.add('hidden');\r\n+\r\n+    modal.classList.remove('hidden'); \r\n+    modal.classList.add('flex');\r\n+    cliInput?.focus();\r\n+  }\r\n+\r\n+  // cache simples: clienteId -> nome\r\n+  const _clienteNomeCache = new Map();\r\n+\r\n+  async function resolveClienteNome(a) {\r\n+    try {\r\n+      if (!a) return '';\r\n+\r\n+      // 1) nome direto vindo da API\r\n+      const direct =\r\n+        a.clienteNome ||\r\n+        (a.cliente && typeof a.cliente === 'object' && (a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial)) ||\r\n+        null;\r\n+      if (typeof direct === 'string' && direct.trim()) return direct.trim();\r\n+\r\n+      // 2) clienteId em qualquer formato\r\n+      let maybeId =\r\n+        a.clienteId ||\r\n+        a.clientId ||\r\n+        a.customerId ||\r\n+        (typeof a.cliente === 'string' ? a.cliente : null);\r\n+\r\n+      if (typeof maybeId === 'object' && maybeId !== null && maybeId._id) {\r\n+        maybeId = String(maybeId._id);\r\n+      }\r\n+      const id = (typeof maybeId === 'string' && /^[0-9a-fA-F]{24}$/.test(maybeId)) ? maybeId : null;\r\n+\r\n+      if (id) {\r\n+        if (_clienteNomeCache.has(id)) return _clienteNomeCache.get(id);\r\n+        const r = await api(`/func/clientes/${id}`);\r\n+        if (r.ok) {\r\n+          const c = await r.json();\r\n+          const nome = c?.nome || '';\r\n+          if (nome) { _clienteNomeCache.set(id, nome); return nome; }\r\n+        }\r\n+      }\r\n+\r\n+      // 3) fallback por petId\r\n+      const petId =\r\n+        a.petId ||\r\n+        (a.pet && typeof a.pet === 'object' && a.pet._id ? a.pet._id : null) ||\r\n+        null;\r\n+\r\n+      if (petId && /^[0-9a-fA-F]{24}$/.test(String(petId))) {\r\n+        const r2 = await api(`/func/pets/${petId}`);\r\n+        if (r2.ok) {\r\n+          const p = await r2.json();\r\n+          const nome =\r\n+            (p?.cliente && (p.cliente.nome || p.cliente.nomeCompleto || p.cliente.razaoSocial)) ||\r\n+            p?.clienteNome ||\r\n+            '';\r\n+          if (nome) return String(nome);\r\n+        }\r\n+      }\r\n+    } catch (e) {\r\n+      console.info('[resolveClienteNome] não foi possível resolver', e);\r\n+    }\r\n+    return '';\r\n+  }\r\n+\r\n+  // --- DEPOIS: openEditModal (indica carregamento e garante preenchimento) ---\r\n+  function toDateInputValueFromISO(isoStr) {\r\n+    const d = new Date(isoStr);\r\n+    if (isNaN(d.getTime())) return todayStr();\r\n+    const yyyy = d.getFullYear();\r\n+    const mm = String(d.getMonth() + 1).padStart(2, '0');\r\n+    const dd = String(d.getDate()).padStart(2, '0');\r\n+    return `${yyyy}-${mm}-${dd}`;\r\n+  }\r\n+\r\n+  async function openEditModal(a) {\r\n+    state.editing = a || null;\r\n+    if (!modal || !state.editing) return;\r\n+\r\n+    // Empresa (mostra a loja do agendamento; desabilitar evita lista de profissionais divergente)\r\n+    if (addStoreSelect) {\r\n+      if (storeSelect && storeSelect.options.length) {\r\n+        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n+      } else if (state.stores?.length) {\r\n+        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+      }\r\n+      addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n+      addStoreSelect.disabled = true; // opcional; remova se quiser permitir trocar a loja\r\n+    }\r\n+\r\n+    // Data do agendamento\r\n+    if (addDateInput) {\r\n+      const iso = a.h || a.scheduledAt || new Date().toISOString();\r\n+      addDateInput.value = toDateInputValueFromISO(iso);\r\n+    }\r\n+\r\n+    // Hora\r\n+    const d = new Date((a.h || a.scheduledAt) || new Date());\r\n+    const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n+    if (horaInput) horaInput.value = hh;\r\n+\r\n+    // Profissional\r\n+    let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+    if (!profId && typeof a.profissional === 'string') {\r\n+      const key = a.profissional.trim().toLowerCase();\r\n+      const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n+      if (match) profId = String(match._id);\r\n+    }\r\n+    if (profSelect && profId) profSelect.value = profId;\r\n+\r\n+    // Status (normalizado para bater com os values do <select>)\r\n+    if (statusSelect) {\r\n+      const keyRaw = String(a.status || 'agendado')\r\n+        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+        .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n+      const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+      statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n+    }\r\n+\r\n+    // Cliente (leitura)\r\n+    let clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n+    if (cliInput) {\r\n+      cliInput.disabled = true;\r\n+      cliInput.value = '(carregando...)';\r\n+      const nomeCli = await resolveClienteNome(a);\r\n+      cliInput.value = nomeCli || '';\r\n+    }\r\n+\r\n+    // Pet: editável\r\n+    if (petSelect) {\r\n+      petSelect.disabled = false;\r\n+      petSelect.innerHTML = '';\r\n+      try {\r\n+        if (clienteId) {\r\n+          const resp = await api(`/func/clientes/${clienteId}/pets`);\r\n+          const pets = await resp.json().catch(() => []);\r\n+          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+        }\r\n+      } catch (_) { /* silencioso */ }\r\n+      const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n+      if (currentPetId) petSelect.value = String(currentPetId);\r\n+    }\r\n+\r\n+    // Serviço/Valor: leitura\r\n+    if (servInput) { servInput.value = a.servico || ''; servInput.disabled = true; }\r\n+    if (valorInput) { valorInput.value = Number(a.valor || 0).toFixed(2); valorInput.disabled = true; }\r\n+\r\n+    // Botão excluir visível\r\n+    if (modalDelete) modalDelete.classList.remove('hidden');\r\n+\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n+  }\r\n+\r\n+  function closeModal() {\r\n+    if (!modal) return;\r\n+    modal.classList.add('hidden');\r\n+    modal.classList.remove('flex');\r\n+    state.editing = null;\r\n+    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n+  }\r\n+\r\n+  // Busca cliente\r\n+  async function searchClientes(term) {\r\n+    if (!term || term.length < 2) {\r\n+      if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+      return;\r\n+    }\r\n+    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    if (!cliSug) return;\r\n+    cliSug.innerHTML = list.map(u => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n+        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n+      </li>`).join('');\r\n+    cliSug.classList.remove('hidden');\r\n+    cliSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', async () => {\r\n+        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n+        if (cliInput) cliInput.value = li.dataset.nome;\r\n+        cliSug.classList.add('hidden');\r\n+        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n+        const pets = await resp.json().catch(() => []);\r\n+        if (petSelect) {\r\n+          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+        }\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  function confirmAsync(title, message, opts = {}) {\r\n+    const confirmText = opts.confirmText || 'Excluir';\r\n+    const cancelText  = opts.cancelText  || 'Cancelar';\r\n+\r\n+    if (typeof window.showModal === 'function') {\r\n+      return new Promise((resolve) => {\r\n+        // 1) Esconde temporariamente o modal de edição (sem desmontar)\r\n+        const prevVis = modal ? modal.style.visibility : '';\r\n+        const prevPe  = modal ? modal.style.pointerEvents : '';\r\n+        if (modal) {\r\n+          modal.style.visibility = 'hidden';\r\n+          modal.style.pointerEvents = 'none';\r\n+        }\r\n+\r\n+        // 2) Abre o modal padrão do projeto\r\n+        window.showModal({\r\n+          title: title || 'Confirmação',\r\n+          message: message || 'Deseja prosseguir?',\r\n+          confirmText,\r\n+          cancelText,\r\n+          onConfirm: () => { restore(); resolve(true); },\r\n+          onCancel : () => { restore(); resolve(false); }\r\n+        });\r\n+\r\n+        // 3) Após montar, garante overlay por cima de tudo\r\n+        //    (pega o último elemento \"fixed\" full-screen e sobe o z-index)\r\n+        const bump = () => {\r\n+          try {\r\n+            const all = Array.from(document.querySelectorAll('body *'));\r\n+            const overlays = all.filter(el => {\r\n+              const cs = getComputedStyle(el);\r\n+              if (cs.position !== 'fixed') return false;\r\n+              const r = el.getBoundingClientRect();\r\n+              return r.width >= window.innerWidth * 0.95 && r.height >= window.innerHeight * 0.95;\r\n+            });\r\n+            const overlay = overlays.at(-1);\r\n+            if (overlay) {\r\n+              overlay.style.zIndex = '9999';\r\n+              overlay.style.pointerEvents = 'auto';\r\n+            }\r\n+          } catch (_) { /* noop */ }\r\n+        };\r\n+        requestAnimationFrame(bump);\r\n+        setTimeout(bump, 0);\r\n+\r\n+        // 4) Restaura o modal de edição quando fechar a confirmação\r\n+        function restore() {\r\n+          if (modal) {\r\n+            modal.style.visibility = prevVis || '';\r\n+            modal.style.pointerEvents = prevPe || '';\r\n+          }\r\n+        }\r\n+      });\r\n+    }\r\n+\r\n+    // Fallback (apenas se o componente não existir)\r\n+    const ok = window.confirm(message || title || 'Confirmar?');\r\n+    return Promise.resolve(!!ok);\r\n+  }\r\n+\r\n+  async function handleDelete() {\r\n+    const id = state.editing && state.editing._id ? String(state.editing._id) : null;\r\n+    if (!id) return;\r\n+\r\n+    const ok = await confirmAsync('Excluir atendimento', 'Tem certeza que deseja excluir este atendimento? Esta ação não pode ser desfeita.', {\r\n+      confirmText: 'Excluir',\r\n+      cancelText: 'Cancelar'\r\n+    });\r\n+    if (!ok) return;\r\n+\r\n+    const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\r\n+    if (!resp.ok) {\r\n+      const err = await resp.json().catch(() => ({}));\r\n+      alert(err.message || 'Erro ao excluir agendamento');\r\n+      return;\r\n+    }\r\n+    await loadAgendamentos();\r\n+    closeModal();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  }\r\n+\r\n+  // Busca serviços\r\n+  async function searchServicos(term) {\r\n+    if (!term || term.length < 2) {\r\n+      if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+      return;\r\n+    }\r\n+    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    if (!servSug) return;\r\n+    servSug.innerHTML = list.map(s => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor}\">\r\n+        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${money(s.valor)}</div>\r\n+      </li>`).join('');\r\n+    servSug.classList.remove('hidden');\r\n+    servSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', () => {\r\n+        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n+        if (servInput) servInput.value = state.selectedServico.nome;\r\n+        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n+        servSug.classList.add('hidden');\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  // Salvar (adicionar/editar)\r\n+  async function saveAgendamento() {\r\n+    try {\r\n+      const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n+      const storeIdSelected = (addStoreSelect?.value) || state.selectedStoreId || storeSelect?.value;\r\n+      const hora = horaInput?.value;\r\n+      const profissionalId = profSelect?.value;\r\n+      const status = (statusSelect?.value) || 'agendado';\r\n+\r\n+      if (!hora || !profissionalId) { alert('Preencha hora e profissional.'); return; }\r\n+      if (!storeIdSelected) { alert('Selecione a empresa.'); return; }\r\n+\r\n+      const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n+\r\n+      // Edição\r\n+      if (state.editing && state.editing._id) {\r\n+        const id = state.editing._id;\r\n+        const body = {\r\n+          storeId: storeIdSelected,\r\n+          profissionalId,\r\n+          scheduledAt,\r\n+          status,\r\n+          ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n+          ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n+          ...(state.editing.servicoId ? { servicoId: state.editing.servicoId } : {}),\r\n+          ...(typeof state.editing.valor !== 'undefined' ? { valor: state.editing.valor } : {}),\r\n+          ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n+        };\r\n+        const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao atualizar agendamento');\r\n+        }\r\n+        await loadAgendamentos();\r\n+        closeModal();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();      // <-- já existia aqui; mantido\r\n+        return;\r\n+      }\r\n+\r\n+      // Adição\r\n+      const clienteId = state.selectedCliente?._id;\r\n+      const petId = petSelect?.value;\r\n+      const servicoId = state.selectedServico?._id;\r\n+      const valor = Number(valorInput?.value || 0);\r\n+\r\n+      if (!(clienteId && petId && servicoId)) { alert('Preencha cliente, pet e serviço.'); return; }\r\n+\r\n+      const body = {\r\n+        storeId: storeIdSelected,\r\n+        clienteId, petId, servicoId,\r\n+        profissionalId, scheduledAt, valor,\r\n+        status,\r\n+        pago: false\r\n+      };\r\n+\r\n+      const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(() => ({}));\r\n+        throw new Error(err.message || 'Erro ao salvar');\r\n+      }\r\n+\r\n+      await loadAgendamentos();\r\n+      closeModal();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();        // <-- ADICIONADO: aplica zebra, sublinhas, linha do agora e ações\r\n+    } catch (e) {\r\n+      console.error(e);\r\n+      alert(e.message || 'Erro ao salvar');\r\n+    }\r\n+  }\r\n+\r\n+  function enhanceAgendaUI() {\r\n+    try {\r\n+      applyZebraAndSublines();\r\n+      decorateCards();\r\n+      drawNowLine();\r\n+\r\n+      // Auto-scroll para o horário atual (somente na data de hoje e 1x por renderização)\r\n+      const date = normalizeDate(dateInput?.value || todayStr());\r\n+      if (!state.__didInitialScroll && date === todayStr()) {\r\n+        scrollToNow();\r\n+        state.__didInitialScroll = true;\r\n+      }\r\n+    } catch (e) {\r\n+      console.info('[enhanceAgendaUI] skip', e);\r\n+    }\r\n+  }\r\n+\r\n+  function scrollToNow() {\r\n+    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n+    if (!body || !state.profissionais?.length) return;\r\n+\r\n+    // encontra a célula da primeira coluna de profissional no horário atual\r\n+    const now = new Date();\r\n+    const hh = String(now.getHours()).padStart(2, '0') + ':00';\r\n+    const firstProfId = String(state.profissionais[0]._id);\r\n+    const target = body.querySelector(`div[data-profissional-id=\"${firstProfId}\"][data-hh=\"${hh}\"]`);\r\n+\r\n+    if (target) {\r\n+      const top = target.getBoundingClientRect().top + window.pageYOffset;\r\n+      // sobe um pouco para mostrar contexto acima do \"agora\"\r\n+      const offset = 80;\r\n+      window.scrollTo({ top: Math.max(0, top - offset), behavior: 'smooth' });\r\n+    }\r\n+  }\r\n+\r\n+  // compacta a lista para um hash leve (ordem estável)\r\n+  function snapshotHash(items) {\r\n+    try {\r\n+      const compact = (items || []).map(x => [\r\n+        String(x._id || ''),\r\n+        String(x.status || ''),\r\n+        String(x.h || x.scheduledAt || ''),\r\n+        Number(x.valor || 0),\r\n+        !!x.pago\r\n+      ]).sort((a, b) => a[0].localeCompare(b[0]));\r\n+      return JSON.stringify(compact);\r\n+    } catch (_) {\r\n+      return String(Date.now());\r\n+    }\r\n+  }\r\n+\r\n+  // reconsulta e só re-renderiza se houver mudança relevante\r\n+  async function refreshAgendaIfChanged() {\r\n+    const prev = state.lastSnapshotHash || '';\r\n+    await loadAgendamentos();\r\n+    const next = snapshotHash(state.agendamentos);\r\n+    if (next !== prev) {\r\n+      state.lastSnapshotHash = next;\r\n+      renderGrid();\r\n+      // ao re-render com mesma data de hoje, não repete o scroll\r\n+      enhanceAgendaUI();\r\n+    }\r\n+  }\r\n+\r\n+  // inicia/renova o timer de auto-refresh (60s)\r\n+  function startAutoRefresh() {\r\n+    if (window.__agendaRefreshTimer) clearInterval(window.__agendaRefreshTimer);\r\n+    state.lastSnapshotHash = snapshotHash(state.agendamentos);\r\n+    window.__agendaRefreshTimer = setInterval(refreshAgendaIfChanged, 60000);\r\n+  }\r\n+\r\n+  // cria o botão \"Hoje\" ao lado do input de data (uma vez)\r\n+  function ensureTodayButton() {\r\n+    if (!dateInput) return;\r\n+    if (document.getElementById('agenda-today-btn')) return;\r\n+\r\n+    const btn = document.createElement('button');\r\n+    btn.id = 'agenda-today-btn';\r\n+    btn.type = 'button';\r\n+    btn.className = 'ml-2 inline-flex items-center gap-1 text-xs px-2 py-1 rounded border border-slate-300 text-slate-700 hover:bg-slate-50';\r\n+    btn.textContent = 'Hoje';\r\n+\r\n+    dateInput.insertAdjacentElement('afterend', btn);\r\n+    btn.addEventListener('click', async () => {\r\n+      dateInput.value = todayStr();\r\n+      state.__didInitialScroll = false;   // permite novo auto-scroll\r\n+      await loadAgendamentos();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    });\r\n+  }\r\n+\r\n+  // Zebra de linhas + sublinha 30min com CSS (via classe)\r\n+  function applyZebraAndSublines() {\r\n+    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n+    if (!body) return;\r\n+\r\n+    body.style.position = 'relative'; // para linha do \"agora\"\r\n+    const totalCols = 1 + (state.profissionais?.length || 0); // 1 (hora) + N profissionais\r\n+    if (totalCols <= 0) return;\r\n+\r\n+    const cells = Array.from(body.children);\r\n+    const totalRows = Math.floor(cells.length / totalCols);\r\n+\r\n+    for (let row = 0; row < totalRows; row++) {\r\n+      const start = row * totalCols;\r\n+      const zebraClass = (row % 2 === 0) ? 'bg-white' : 'bg-slate-50';\r\n+\r\n+      // primeira célula = hora\r\n+      const timeCell = cells[start];\r\n+      timeCell.classList.remove('bg-gray-50');\r\n+      timeCell.classList.add(zebraClass);\r\n+\r\n+      // colunas da linha\r\n+      for (let i = 1; i < totalCols; i++) {\r\n+        const colCell = cells[start + i];\r\n+        colCell.classList.add(zebraClass, 'agenda-slot'); // agenda-slot desenha sublinha (CSS)\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  // Insere ícones de ação nos cartões (editar / mudar status)\r\n+  function decorateCards() {\r\n+    const cards = agendaList?.querySelectorAll('div[data-appointment-id]');\r\n+    if (!cards || !cards.length) return;\r\n+\r\n+    cards.forEach((card) => {\r\n+      if (card.querySelector('.agenda-card__actions')) return; // já decorado\r\n+      card.classList.add('agenda-card'); // ativa hover via CSS\r\n+      card.style.position = 'relative';\r\n+\r\n+      const id = card.getAttribute('data-appointment-id') || '';\r\n+      const actions = document.createElement('div');\r\n+      actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex items-center gap-1';\r\n+\r\n+      actions.innerHTML = `\r\n+        <button class=\"agenda-action edit\" data-id=\"${id}\" title=\"Editar\">\r\n+          <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"text-gray-600 hover:text-gray-900\"><path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 000-1.42l-2.34-2.34a1.003 1.003 0 00-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.82z\"/></svg>\r\n+        </button>\r\n+        <button class=\"agenda-action status\" data-id=\"${id}\" title=\"Mudar status\">\r\n+          <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\"><path d=\"M12 7v10M7 12h10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/></svg>\r\n+        </button>\r\n+      `;\r\n+      card.appendChild(actions);\r\n+    });\r\n+  }\r\n+\r\n+  // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n+  function drawNowLine() {\r\n+    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n+    if (!body) return;\r\n+\r\n+    body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n+\r\n+    const now = new Date();\r\n+    const minutes = now.getHours() * 60 + now.getMinutes();\r\n+    const percent = minutes / (24 * 60);\r\n+    const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n+\r\n+    const line = document.createElement('div');\r\n+    line.className = 'agenda-nowline';\r\n+    line.style.top = `${y}px`;\r\n+    body.appendChild(line);\r\n+\r\n+    if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n+    window.__agendaNowTimer = setInterval(() => {\r\n+      drawNowLine();\r\n+    }, 60000);\r\n+  }\r\n+\r\n+  // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n+  async function updateStatusQuick(id, status) {\r\n+    try {\r\n+      const resp = await api(`/func/agendamentos/${id}`, {\r\n+        method: 'PUT',\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify({ status })\r\n+      });\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(() => ({}));\r\n+        throw new Error(err.message || 'Erro ao mudar status');\r\n+      }\r\n+      await loadAgendamentos();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    } catch (e) {\r\n+      console.error('updateStatusQuick', e);\r\n+      alert(e.message || 'Erro ao mudar status');\r\n+    }\r\n+  }\r\n+\r\n+  // Events\r\n+  addBtn?.addEventListener('click', openAddModal);\r\n+  modalClose?.addEventListener('click', closeModal);\r\n+  modalCancel?.addEventListener('click', closeModal);\r\n+  modalSave?.addEventListener('click', saveAgendamento);\r\n+\r\n+  cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n+  servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n+\r\n+  modalDelete?.addEventListener('click', handleDelete);\r\n+\r\n+  // Ações rápidas nos cartões (delegação no container da agenda)\r\n+  agendaList?.addEventListener('click', (ev) => {\r\n+    // toggle do menu mobile\r\n+    const more = ev.target.closest('.agenda-card__more');\r\n+    if (more) {\r\n+      const holder = more.parentElement?.querySelector('.agenda-card__actions');\r\n+      if (holder) holder.classList.toggle('hidden');\r\n+      return;\r\n+    }\r\n+\r\n+    const btn = ev.target.closest('.agenda-action');\r\n+    if (!btn) return;\r\n+    const id = btn.getAttribute('data-id');\r\n+    if (!id) return;\r\n+\r\n+    if (btn.classList.contains('edit')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      if (item) openEditModal(item);\r\n+    } else if (btn.classList.contains('status')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+      const cur = (item && item.status) || 'agendado';\r\n+      const next = chain[(chain.indexOf(cur) + 1) % chain.length];\r\n+      updateStatusQuick(id, next);\r\n+    } else if (btn.classList.contains('cobrar')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      if (item) openEditModal(item); // reaproveite seu modal/fluxo de cobrança\r\n+    }\r\n+  });\r\n+\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    updateStoreLabel();\r\n+    state.__didInitialScroll = false;     // nova loja -> recalcula scroll\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;     // nova data -> permite auto-scroll\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  // Boot\r\n+  function setupShortcuts() {\r\n+    document.addEventListener('keydown', (e) => {\r\n+      if (e.target && ['INPUT','SELECT','TEXTAREA'].includes(e.target.tagName)) return; // não atrapalhar digitação\r\n+      if (e.key === 't' || e.key === 'T') {\r\n+        if (dateInput) {\r\n+          dateInput.value = todayStr();\r\n+          state.__didInitialScroll = false;\r\n+          loadAgendamentos().then(() => {\r\n+            renderKpis(); renderFilters(); renderGrid(); enhanceAgendaUI();\r\n+          });\r\n+        }\r\n+      }\r\n+      if (e.key === 'n' || e.key === 'N') {\r\n+        e.preventDefault();\r\n+        openAddModal();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  (async function init() {\r\n+    if (!dateInput?.value) dateInput.value = todayStr();\r\n+    loadFiltersFromStorage();\r\n+    await loadStores();\r\n+    if (!state.selectedStoreId && storeSelect?.value) {\r\n+      state.selectedStoreId = storeSelect.value;\r\n+    }\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+\r\n+    ensureToolbar();\r\n+    ensureTodayButton();\r\n+    setupShortcuts();\r\n+\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  })();\r\n+\r\n+  // Atualizações após troca de loja/data/status etc.\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    updateStoreLabel();\r\n+    state.__didInitialScroll = false;\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+})();\r\n"
                },
                {
                    "date": 1757432970184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,209 +17,113 @@\n   const dateInput = document.getElementById('agenda-date');\r\n   const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n   const addBtn = document.getElementById('add-service-btn');\r\n   const storeSelect = document.getElementById('agenda-store');\r\n+  const storeLabel = document.getElementById('agenda-store-label');\r\n   const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n \r\n-  // Modal (reutilizado p/ adicionar e editar)\r\n+  // KPIs e filtros (chips)\r\n+  const kpiWrap = document.getElementById('agenda-kpis');\r\n+\r\n+  const filterWrap = document.getElementById('agenda-filters');\r\n+  const clearFiltersBtn = document.getElementById('clear-filters');\r\n+\r\n+  // Modal elementos\r\n   const modal = document.getElementById('modal-add-servico');\r\n-  const modalClose = document.getElementById('modal-add-close');\r\n-  const modalCancel = document.getElementById('modal-add-cancel');\r\n-  const modalSave = document.getElementById('modal-add-save');\r\n-  const modalDelete = document.getElementById('modal-add-delete');\r\n+  const modalTitle = document.getElementById('modal-title');\r\n+  const modalDate = document.getElementById('modal-date');\r\n+  const modalHour = document.getElementById('modal-hour');\r\n+  const modalClose = document.getElementById('modal-close');\r\n \r\n-  const addStoreSelect = document.getElementById('add-store-select');\r\n-  const addDateInput   = document.getElementById('add-date');\r\n-  const statusSelect   = document.getElementById('add-status');\r\n+  // Campos do modal\r\n+  const cliInput = document.getElementById('modal-cli');\r\n+  const cliSug = document.getElementById('modal-cli-sug');\r\n+  const petSelect = document.getElementById('modal-pet');\r\n+  const servInput = document.getElementById('modal-serv');\r\n+  const valorInput = document.getElementById('modal-valor');\r\n+  const pagoCheck = document.getElementById('modal-pago');\r\n+  const profSelect = document.getElementById('modal-prof');\r\n+  const obsInput = document.getElementById('modal-obs');\r\n \r\n-  const cliInput = document.getElementById('add-cli-input');\r\n-  const cliSug = document.getElementById('add-cli-sug');\r\n-  const petSelect = document.getElementById('add-pet-select');\r\n-  const servInput = document.getElementById('add-serv-input');\r\n-  const servSug = document.getElementById('add-serv-sug');\r\n-  const valorInput = document.getElementById('add-valor');\r\n-  const horaInput = document.getElementById('add-hora');\r\n-  const profSelect = document.getElementById('add-prof-select');\r\n+  // Salvamento\r\n+  const modalSaveBtn = document.getElementById('modal-save');\r\n \r\n-  // State\r\n-  const FILTER_STORAGE_KEY = 'agenda_filters_v1';\r\n-\r\n   const state = {\r\n-    stores: [],\r\n+    selectedStoreId: null,\r\n+    selectedStoreName: '',\r\n+    agendamentos: [],\r\n     profissionais: [],\r\n-    agendamentos: [],\r\n-    selectedStoreId: null,\r\n-    selectedCliente: null,\r\n-    selectedServico: null,\r\n-    editing: null,\r\n-    lastSnapshotHash: '',\r\n-    __didInitialScroll: false,\r\n-    filters: {                 // filtros persistentes\r\n-      statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n-      profIds: new Set()       // _id dos profissionais\r\n-    }\r\n+    filters: {\r\n+      statuses: new Set(),  // normalizados com normalizeStatus\r\n+      profIds: new Set()\r\n+    },\r\n+    editing: null\r\n   };\r\n \r\n-  function loadFiltersFromStorage() {\r\n-    try {\r\n-      const raw = JSON.parse(localStorage.getItem(FILTER_STORAGE_KEY) || 'null');\r\n-      if (raw && typeof raw === 'object') {\r\n-        state.filters.statuses = new Set(Array.isArray(raw.statuses) ? raw.statuses : []);\r\n-        state.filters.profIds  = new Set(Array.isArray(raw.profIds)  ? raw.profIds  : []);\r\n-      }\r\n-    } catch(_) {}\r\n+  // ===== Helpers de UI =====\r\n+  function clearChildren(el) {\r\n+    if (!el) return;\r\n+    while (el.firstChild) el.removeChild(el.firstChild);\r\n   }\r\n-  function saveFiltersToStorage() {\r\n-    try {\r\n-      localStorage.setItem(FILTER_STORAGE_KEY, JSON.stringify({\r\n-        statuses: Array.from(state.filters.statuses),\r\n-        profIds : Array.from(state.filters.profIds)\r\n-      }));\r\n-    } catch(_) {}\r\n-  }\r\n \r\n-  function ensureToolbar() {\r\n-    if (!agendaList) return;\r\n-    if (document.getElementById('agenda-toolbar')) return;\r\n-\r\n-    const bar = document.createElement('div');\r\n-    bar.id = 'agenda-toolbar';\r\n-    // sticky sob o cabeçalho; leve blur para legibilidade; borda inferior discreta\r\n-    bar.className = 'sticky top-0 z-30 bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/60 border-b border-slate-200 mb-2 flex flex-col gap-2 px-3 py-2 rounded-lg';\r\n-\r\n-    // KPIs\r\n-    const kpis = document.createElement('div');\r\n-    kpis.id = 'agenda-kpis';\r\n-    kpis.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(kpis);\r\n-\r\n-    // Filtros\r\n-    const filters = document.createElement('div');\r\n-    filters.id = 'agenda-filters';\r\n-    filters.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(filters);\r\n-\r\n-    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n+  function money(v) {\r\n+    const n = Number(v || 0);\r\n+    return n.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n   }\r\n \r\n-  function computeKPIs(items) {\r\n-    const total = items.length;\r\n-    const previsto = items.reduce((s, i) => s + Number(i.valor || 0), 0);\r\n-    const recebido = items.reduce((s, i) => s + (i.pago ? Number(i.valor || 0) : 0), 0);\r\n-    const pendente = previsto - recebido;\r\n-    return { total, previsto, recebido, pendente };\r\n-  }\r\n+  function statusMeta(s) {\r\n+    const keyRaw = String(s || 'agendado')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n \r\n-  function renderKpis() {\r\n-    const wrap = document.getElementById('agenda-kpis');\r\n-    if (!wrap) return;\r\n+    const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+    const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n \r\n-    const all = state.agendamentos || [];\r\n-    const f = getFilteredAgendamentos();   // filtrados atuais\r\n-    const kAll = computeKPIs(all);\r\n-    const kF   = computeKPIs(f);\r\n+    const map = {\r\n+      agendado: {\r\n+        label: 'Agendado',\r\n+        short: 'Ag.',\r\n+        stripe: '#334155',\r\n+        text: '#0f172a',\r\n+        badgeClass: 'bg-slate-50 text-slate-800 border border-slate-200',\r\n+        borderClass: 'border-slate-500'\r\n+      },\r\n+      em_espera: {\r\n+        label: 'Em espera',\r\n+        short: 'Esp.',\r\n+        stripe: '#F59E0B',\r\n+        text: '#451A03',\r\n+        badgeClass: 'bg-amber-50 text-amber-800 border border-amber-200',\r\n+        borderClass: 'border-amber-500'\r\n+      },\r\n+      em_atendimento: {\r\n+        label: 'Em atendimento',\r\n+        short: 'Atend.',\r\n+        stripe: '#0EA5E9',\r\n+        text: '#082F49',\r\n+        badgeClass: 'bg-sky-50 text-sky-800 border border-sky-200',\r\n+        borderClass: 'border-sky-500'\r\n+      },\r\n+      finalizado: {\r\n+        label: 'Finalizado',\r\n+        short: 'Fim.',\r\n+        stripe: '#16A34A',\r\n+        text: '#052E16',\r\n+        badgeClass: 'bg-green-50 text-green-800 border border-green-200',\r\n+        borderClass: 'border-green-500'\r\n+      }\r\n+    };\r\n \r\n-    wrap.innerHTML = `\r\n-      <div class=\"kpi-chip\">Total dia: <strong>${kAll.total}</strong></div>\r\n-      <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n-      <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n-      <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n-      ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n-          ? `<div class=\"kpi-chip kpi-muted\">Filtrados: <strong>${kF.total}</strong></div>` : '' }\r\n-    `;\r\n+    return map[k];\r\n   }\r\n \r\n-  function renderFilters() {\r\n-    const el = document.getElementById('agenda-filters');\r\n-    if (!el) return;\r\n-\r\n-    // contadores por status\r\n-    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n-    for (const a of (state.agendamentos || [])) {\r\n-      const key = String(a.status || 'agendado')\r\n-        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n-      if (counts[key] !== undefined) counts[key] += 1;\r\n-    }\r\n-\r\n-    // contadores por profissional\r\n-    const byProf = new Map();\r\n-    for (const a of (state.agendamentos || [])) {\r\n-      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n-      if (!id) continue;\r\n-      const key = String(id);\r\n-      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n-    }\r\n-\r\n-    const statuses = [\r\n-      {key:'agendado', label:'Agend.'},\r\n-      {key:'em_espera', label:'Espera'},\r\n-      {key:'em_atendimento', label:'Atend.'},\r\n-      {key:'finalizado', label:'Fim.'}\r\n-    ];\r\n-\r\n-    // chips de status\r\n-    const chipsStatus = statuses.map(s => {\r\n-      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n-      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n-                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n-              </button>`;\r\n-    }).join('');\r\n-\r\n-    // chips de profissional (apenas os que existem)\r\n-    const chipsProf = (state.profissionais || []).map(p => {\r\n-      const id = String(p._id);\r\n-      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n-      const n = byProf.get(id) || 0;\r\n-      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n-                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n-              </button>`;\r\n-    }).join('');\r\n-\r\n-    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n-      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n-\r\n-    el.innerHTML = `\r\n-      <div class=\"flex flex-wrap items-center gap-2\">\r\n-        ${chipsStatus}\r\n-        <span class=\"chip-sep\"></span>\r\n-        ${chipsProf}\r\n-        ${clearBtn}\r\n-      </div>\r\n-    `;\r\n-\r\n-    // handlers\r\n-    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n-      btn.addEventListener('click', () => {\r\n-        const type = btn.getAttribute('data-filter');\r\n-        const val  = btn.getAttribute('data-value');\r\n-        if (type === 'status') {\r\n-          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n-        } else if (type === 'prof') {\r\n-          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n-        }\r\n-        saveFiltersToStorage();\r\n-        renderFilters();\r\n-        renderKpis();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      });\r\n-    });\r\n-\r\n-    const clear = document.getElementById('chip-clear');\r\n-    if (clear) clear.addEventListener('click', () => {\r\n-      state.filters.statuses.clear();\r\n-      state.filters.profIds.clear();\r\n-      saveFiltersToStorage();\r\n-      renderFilters();\r\n-      renderKpis();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    });\r\n+  function renderStatusBadge(s) {\r\n+    const { label, badgeClass } = statusMeta(s);\r\n+    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${badgeClass}\">${label}</span>`;\r\n   }\r\n \r\n   function normalizeStatus(s) {\r\n-    return String(s || 'agendado')\r\n+    return String(s || '')\r\n       .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n       .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n   }\r\n \r\n@@ -260,9 +164,8 @@\n   }\r\n \r\n   // Helpers de data e utilitários\r\n   function todayStr() {\r\n-    // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n     const d = new Date();\r\n     d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n     return d.toISOString().slice(0, 10);\r\n   }\r\n@@ -275,52 +178,34 @@\n     return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n   }\r\n   function normalizeDate(v) {\r\n     if (!v) return todayStr();\r\n-    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n-    return v;\r\n+    if (/^\\d{4}-\\d{2}-\\d{2}$/.test(v)) return v;\r\n+    const [d, m, y] = v.split('/').map(Number);\r\n+    return `${y}-${String(m).padStart(2,'0')}-${String(d).padStart(2,'0')}`;\r\n   }\r\n-  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n-  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n-  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n \r\n-  // Stores\r\n-  async function loadStores() {\r\n-    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    state.stores = Array.isArray(list) ? list : [];\r\n-    if (storeSelect) {\r\n-      storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+  // ===== Carregamento de dados =====\r\n+  async function loadProfissionais(storeId) {\r\n+    try {\r\n+      const url = `/func/profissionais?storeId=${storeId}`;\r\n+      const resp = await api(url);\r\n+      if (!resp.ok) {\r\n+        console.error('GET', url, '->', resp.status, await resp.text());\r\n+        state.profissionais = [];\r\n+        return;\r\n+      }\r\n+      const list = await resp.json();\r\n+      state.profissionais = Array.isArray(list) ? list : [];\r\n+    } catch (e) {\r\n+      console.error('Erro ao carregar profissionais', e);\r\n+      state.profissionais = [];\r\n     }\r\n-    if (!state.selectedStoreId && state.stores[0]) {\r\n-      state.selectedStoreId = state.stores[0]._id;\r\n-      if (storeSelect) storeSelect.value = state.selectedStoreId;\r\n-    }\r\n-    updateStoreLabel();\r\n   }\r\n-  function updateStoreLabel() {\r\n-    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n-    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n-    const vis = document.getElementById('agenda-store-label-visible');\r\n-    if (vis) vis.textContent = s ? s.nome : '—';\r\n-  }\r\n \r\n-  // Profissionais\r\n-  async function loadProfissionais() {\r\n-    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n-    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    state.profissionais = Array.isArray(list) ? list : [];\r\n-    if (profSelect) {\r\n-      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-    }\r\n-  }\r\n-\r\n-  // Agendamentos\r\n-  async function loadAgendamentos() {\r\n-    const date = normalizeDate(dateInput?.value || todayStr());\r\n-    const url = `/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`;\r\n+  async function loadAgendamentos(date) {\r\n     try {\r\n+      const url = `/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`;\r\n       const resp = await api(url);\r\n       if (!resp.ok) {\r\n         const txt = await resp.text();\r\n         console.error('GET', url, '->', resp.status, txt);\r\n@@ -335,9 +220,9 @@\n       state.agendamentos = [];\r\n     }\r\n   }\r\n \r\n-  // Grade (sem coluna \"Outros\")\r\n+  // ===== Renderização da grade =====\r\n   function renderGrid() {\r\n     if (!agendaList) return;\r\n \r\n     const date = normalizeDate(dateInput?.value || todayStr());\r\n@@ -1291,1283 +1176,4 @@\n     renderGrid();\r\n     enhanceAgendaUI();\r\n   });\r\n })();\r\n-(function () {\r\n-  // Helper para requisições com token\r\n-  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n-  function api(url, opts = {}) {\r\n-    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n-      ...opts,\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        ...(opts.headers || {}),\r\n-        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  // Elements\r\n-  const agendaList = document.getElementById('agenda-list');\r\n-  const dateInput = document.getElementById('agenda-date');\r\n-  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n-  const addBtn = document.getElementById('add-service-btn');\r\n-  const storeSelect = document.getElementById('agenda-store');\r\n-  const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n-\r\n-  // Modal (reutilizado p/ adicionar e editar)\r\n-  const modal = document.getElementById('modal-add-servico');\r\n-  const modalClose = document.getElementById('modal-add-close');\r\n-  const modalCancel = document.getElementById('modal-add-cancel');\r\n-  const modalSave = document.getElementById('modal-add-save');\r\n-  const modalDelete = document.getElementById('modal-add-delete');\r\n-\r\n-  const addStoreSelect = document.getElementById('add-store-select');\r\n-  const addDateInput   = document.getElementById('add-date');\r\n-  const statusSelect   = document.getElementById('add-status');\r\n-\r\n-  const cliInput = document.getElementById('add-cli-input');\r\n-  const cliSug = document.getElementById('add-cli-sug');\r\n-  const petSelect = document.getElementById('add-pet-select');\r\n-  const servInput = document.getElementById('add-serv-input');\r\n-  const servSug = document.getElementById('add-serv-sug');\r\n-  const valorInput = document.getElementById('add-valor');\r\n-  const horaInput = document.getElementById('add-hora');\r\n-  const profSelect = document.getElementById('add-prof-select');\r\n-\r\n-  // State\r\n-  const FILTER_STORAGE_KEY = 'agenda_filters_v1';\r\n-\r\n-  const state = {\r\n-    stores: [],\r\n-    profissionais: [],\r\n-    agendamentos: [],\r\n-    selectedStoreId: null,\r\n-    selectedCliente: null,\r\n-    selectedServico: null,\r\n-    editing: null,\r\n-    lastSnapshotHash: '',\r\n-    __didInitialScroll: false,\r\n-    filters: {                 // filtros persistentes\r\n-      statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n-      profIds: new Set()       // _id dos profissionais\r\n-    }\r\n-  };\r\n-\r\n-  function loadFiltersFromStorage() {\r\n-    try {\r\n-      const raw = JSON.parse(localStorage.getItem(FILTER_STORAGE_KEY) || 'null');\r\n-      if (raw && typeof raw === 'object') {\r\n-        state.filters.statuses = new Set(Array.isArray(raw.statuses) ? raw.statuses : []);\r\n-        state.filters.profIds  = new Set(Array.isArray(raw.profIds)  ? raw.profIds  : []);\r\n-      }\r\n-    } catch(_) {}\r\n-  }\r\n-  function saveFiltersToStorage() {\r\n-    try {\r\n-      localStorage.setItem(FILTER_STORAGE_KEY, JSON.stringify({\r\n-        statuses: Array.from(state.filters.statuses),\r\n-        profIds : Array.from(state.filters.profIds)\r\n-      }));\r\n-    } catch(_) {}\r\n-  }\r\n-\r\n-  function ensureToolbar() {\r\n-    if (!agendaList) return;\r\n-    if (document.getElementById('agenda-toolbar')) return;\r\n-\r\n-    const bar = document.createElement('div');\r\n-    bar.id = 'agenda-toolbar';\r\n-    // sticky sob o cabeçalho; leve blur para legibilidade; borda inferior discreta\r\n-    bar.className = 'sticky top-0 z-30 bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/60 border-b border-slate-200 mb-2 flex flex-col gap-2 px-3 py-2 rounded-lg';\r\n-\r\n-    // KPIs\r\n-    const kpis = document.createElement('div');\r\n-    kpis.id = 'agenda-kpis';\r\n-    kpis.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(kpis);\r\n-\r\n-    // Filtros\r\n-    const filters = document.createElement('div');\r\n-    filters.id = 'agenda-filters';\r\n-    filters.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(filters);\r\n-\r\n-    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n-  }\r\n-\r\n-  function computeKPIs(items) {\r\n-    const total = items.length;\r\n-    const previsto = items.reduce((s, i) => s + Number(i.valor || 0), 0);\r\n-    const recebido = items.reduce((s, i) => s + (i.pago ? Number(i.valor || 0) : 0), 0);\r\n-    const pendente = previsto - recebido;\r\n-    return { total, previsto, recebido, pendente };\r\n-  }\r\n-\r\n-  function renderKpis() {\r\n-    const wrap = document.getElementById('agenda-kpis');\r\n-    if (!wrap) return;\r\n-\r\n-    const all = state.agendamentos || [];\r\n-    const f = getFilteredAgendamentos();   // filtrados atuais\r\n-    const kAll = computeKPIs(all);\r\n-    const kF   = computeKPIs(f);\r\n-\r\n-    wrap.innerHTML = `\r\n-      <div class=\"kpi-chip\">Total dia: <strong>${kAll.total}</strong></div>\r\n-      <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n-      <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n-      <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n-      ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n-          ? `<div class=\"kpi-chip kpi-muted\">Filtrados: <strong>${kF.total}</strong></div>` : '' }\r\n-    `;\r\n-  }\r\n-\r\n-  function renderFilters() {\r\n-    const el = document.getElementById('agenda-filters');\r\n-    if (!el) return;\r\n-\r\n-    // contadores por status\r\n-    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n-    for (const a of (state.agendamentos || [])) {\r\n-      const key = String(a.status || 'agendado')\r\n-        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n-      if (counts[key] !== undefined) counts[key] += 1;\r\n-    }\r\n-\r\n-    // contadores por profissional\r\n-    const byProf = new Map();\r\n-    for (const a of (state.agendamentos || [])) {\r\n-      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n-      if (!id) continue;\r\n-      const key = String(id);\r\n-      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n-    }\r\n-\r\n-    const statuses = [\r\n-      {key:'agendado', label:'Agend.'},\r\n-      {key:'em_espera', label:'Espera'},\r\n-      {key:'em_atendimento', label:'Atend.'},\r\n-      {key:'finalizado', label:'Fim.'}\r\n-    ];\r\n-\r\n-    // chips de status\r\n-    const chipsStatus = statuses.map(s => {\r\n-      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n-      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n-                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n-              </button>`;\r\n-    }).join('');\r\n-\r\n-    // chips de profissional (apenas os que existem)\r\n-    const chipsProf = (state.profissionais || []).map(p => {\r\n-      const id = String(p._id);\r\n-      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n-      const n = byProf.get(id) || 0;\r\n-      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n-                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n-              </button>`;\r\n-    }).join('');\r\n-\r\n-    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n-      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n-\r\n-    el.innerHTML = `\r\n-      <div class=\"flex flex-wrap items-center gap-2\">\r\n-        ${chipsStatus}\r\n-        <span class=\"chip-sep\"></span>\r\n-        ${chipsProf}\r\n-        ${clearBtn}\r\n-      </div>\r\n-    `;\r\n-\r\n-    // handlers\r\n-    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n-      btn.addEventListener('click', () => {\r\n-        const type = btn.getAttribute('data-filter');\r\n-        const val  = btn.getAttribute('data-value');\r\n-        if (type === 'status') {\r\n-          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n-        } else if (type === 'prof') {\r\n-          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n-        }\r\n-        saveFiltersToStorage();\r\n-        renderFilters();\r\n-        renderKpis();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      });\r\n-    });\r\n-\r\n-    const clear = document.getElementById('chip-clear');\r\n-    if (clear) clear.addEventListener('click', () => {\r\n-      state.filters.statuses.clear();\r\n-      state.filters.profIds.clear();\r\n-      saveFiltersToStorage();\r\n-      renderFilters();\r\n-      renderKpis();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    });\r\n-  }\r\n-\r\n-  function normalizeStatus(s) {\r\n-    return String(s || 'agendado')\r\n-      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-      .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n-  }\r\n-\r\n-  function getFilteredAgendamentos() {\r\n-    const hasStatus = state.filters.statuses.size > 0;\r\n-    const hasProf   = state.filters.profIds.size   > 0;\r\n-\r\n-    if (!hasStatus && !hasProf) return state.agendamentos || [];\r\n-\r\n-    const byNameAll = new Map(\r\n-      (state.profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n-    );\r\n-\r\n-    return (state.agendamentos || []).filter(a => {\r\n-      let ok = true;\r\n-      if (hasStatus) ok = ok && state.filters.statuses.has(normalizeStatus(a.status));\r\n-      if (hasProf) {\r\n-        let pid = a.profissionalId ? String(a.profissionalId) : null;\r\n-        if (!pid) {\r\n-          let nc = '';\r\n-          if (typeof a.profissional === 'string') nc = a.profissional;\r\n-          else if (a.profissional && typeof a.profissional === 'object') {\r\n-            nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n-                a.profissional.razaoSocial || a.profissional.nome || '';\r\n-          }\r\n-          pid = byNameAll.get(String(nc).trim().toLowerCase()) || null;\r\n-        }\r\n-        ok = ok && pid && state.filters.profIds.has(String(pid));\r\n-      }\r\n-      return ok;\r\n-    });\r\n-  }\r\n-\r\n-  function getVisibleProfissionais() {\r\n-    const profs = state.profissionais || [];\r\n-    if (!state.filters.profIds.size) return profs;\r\n-    return profs.filter(p => state.filters.profIds.has(String(p._id)));\r\n-  }\r\n-\r\n-  // Helpers de data e utilitários\r\n-  function todayStr() {\r\n-    // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n-    const d = new Date();\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n-  function buildLocalDateTime(dateStr, hhmm) {\r\n-    let y, m, d;\r\n-    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) { [d, m, y] = dateStr.split('/').map(Number); }\r\n-    else { [y, m, d] = dateStr.split('-').map(Number); }\r\n-    const [hh, mm] = (hhmm || '00:00').split(':').map(Number);\r\n-    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n-  }\r\n-  function normalizeDate(v) {\r\n-    if (!v) return todayStr();\r\n-    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n-    return v;\r\n-  }\r\n-  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n-  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n-  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n-\r\n-  // Stores\r\n-  async function loadStores() {\r\n-    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    state.stores = Array.isArray(list) ? list : [];\r\n-    if (storeSelect) {\r\n-      storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-    }\r\n-    if (!state.selectedStoreId && state.stores[0]) {\r\n-      state.selectedStoreId = state.stores[0]._id;\r\n-      if (storeSelect) storeSelect.value = state.selectedStoreId;\r\n-    }\r\n-    updateStoreLabel();\r\n-  }\r\n-  function updateStoreLabel() {\r\n-    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n-    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n-    const vis = document.getElementById('agenda-store-label-visible');\r\n-    if (vis) vis.textContent = s ? s.nome : '—';\r\n-  }\r\n-\r\n-  // Profissionais\r\n-  async function loadProfissionais() {\r\n-    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n-    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    state.profissionais = Array.isArray(list) ? list : [];\r\n-    if (profSelect) {\r\n-      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-    }\r\n-  }\r\n-\r\n-  // Agendamentos\r\n-  async function loadAgendamentos() {\r\n-    const date = normalizeDate(dateInput?.value || todayStr());\r\n-    const url = `/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`;\r\n-    try {\r\n-      const resp = await api(url);\r\n-      if (!resp.ok) {\r\n-        const txt = await resp.text();\r\n-        console.error('GET', url, '->', resp.status, txt);\r\n-        state.agendamentos = [];\r\n-        return;\r\n-      }\r\n-      const list = await resp.json();\r\n-      state.agendamentos = Array.isArray(list) ? list : [];\r\n-      console.info('[Agenda] loja=', state.selectedStoreId, 'data=', date, 'itens=', state.agendamentos.length, state.agendamentos.slice(0, 3));\r\n-    } catch (e) {\r\n-      console.error('Erro ao carregar agendamentos', e);\r\n-      state.agendamentos = [];\r\n-    }\r\n-  }\r\n-\r\n-  // Grade (sem coluna \"Outros\")\r\n-  function renderGrid() {\r\n-      if (!agendaList) return;\r\n-\r\n-      const date = normalizeDate(dateInput?.value || todayStr());\r\n-      if (dateLabelVisible) {\r\n-        dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-      }\r\n-\r\n-      // janelas de trabalho (ajuste se quiser)\r\n-      const BUSINESS_START = 8;   // 08:00\r\n-      const BUSINESS_END   = 19;  // 19:00\r\n-\r\n-      const hours = [];\r\n-      for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n-\r\n-      clearChildren(agendaList);\r\n-\r\n-      const profsAll  = state.profissionais || [];\r\n-      const profs     = getVisibleProfissionais();\r\n-      const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n-\r\n-      const colCount = 1 + (profs?.length || 0);\r\n-\r\n-      // Cabeçalho\r\n-      const header = document.createElement('div');\r\n-      header.style.display = 'grid';\r\n-      // >>> LARGURA FIXA POR COLUNA: igual ao corpo (evita “vão gigante”)\r\n-      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n-      header.className = 'bg-white border-b';\r\n-\r\n-      const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n-      headLabels.forEach((label, idx) => {\r\n-        const cell = document.createElement('div');\r\n-        cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n-        if (idx === 0) {\r\n-          cell.textContent = label;\r\n-        }\r\n-        else {\r\n-          // >>> centraliza o nome do profissional\r\n-          cell.style.textAlign = 'center';\r\n-          const span = document.createElement('span');\r\n-          span.className = 'agenda-head-label inline-block';\r\n-          span.textContent = label || '';\r\n-          cell.dataset.profId = String(profs[idx - 1]._id);\r\n-          cell.appendChild(span);\r\n-        }\r\n-        header.appendChild(cell);\r\n-      });\r\n-\r\n-      const counter = document.createElement('div');\r\n-      counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n-      const itemsAll = state.agendamentos || [];\r\n-      const items    = getFilteredAgendamentos(itemsAll);\r\n-      const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n-      counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n-      header.appendChild(counter);\r\n-\r\n-      agendaList.appendChild(header);\r\n-\r\n-      // Corpo\r\n-      const body = document.createElement('div');\r\n-      body.style.display = 'grid';\r\n-      // >>> LARGURA FIXA POR COLUNA: fica do tamanho do card + folga\r\n-      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n-      agendaList.appendChild(body);\r\n-\r\n-      const isToday = normalizeDate(date) === todayStr();\r\n-      const now = new Date();\r\n-      const nowHH = `${pad(now.getHours())}:00`;\r\n-\r\n-      hours.forEach(hh => {\r\n-        const hourNumber = parseInt(hh.split(':')[0], 10);\r\n-        const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n-        const isNowRow   = isToday && hh === nowHH;\r\n-\r\n-        // coluna de horário\r\n-        const timeCell = document.createElement('div');\r\n-        timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n-        timeCell.textContent = hh;\r\n-\r\n-        body.appendChild(timeCell);\r\n-\r\n-        // células por profissional\r\n-        (profs || []).forEach(p => {\r\n-          const cell = document.createElement('div');\r\n-          // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n-          cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n-          cell.dataset.profissionalId = String(p._id);\r\n-          cell.dataset.hh = hh;\r\n-          body.appendChild(cell);\r\n-        });\r\n-      });\r\n-\r\n-      // posiciona cartões\r\n-      let placed = 0;\r\n-      for (const a of items) {\r\n-        const when = a.h || a.scheduledAt;\r\n-        if (!when) continue;\r\n-\r\n-        const d  = new Date(when);\r\n-        const hh = `${pad(d.getHours())}:00`;\r\n-\r\n-        let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-        if (!profId) {\r\n-          let nameCandidate = '';\r\n-          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n-          else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n-          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n-          if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n-        }\r\n-        if (!profId) continue;\r\n-\r\n-        let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n-        if (!col && profs[0]) {\r\n-          col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n-        }\r\n-        if (!col) continue;\r\n-\r\n-        const meta = statusMeta(a.status);\r\n-        const card = document.createElement('div');\r\n-        card.setAttribute('data-appointment-id', a._id || '');\r\n-        card.style.setProperty('--stripe', meta.stripe);\r\n-        card.style.setProperty('--card-max-w', '260px');\r\n-        card.className = `agenda-card border ${meta.borderClass}`;\r\n-\r\n-        const headerEl = document.createElement('div');\r\n-        headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n-        headerEl.innerHTML = `\r\n-          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n-          ${renderStatusBadge(a.status)}\r\n-        `;\r\n-\r\n-        const bodyEl = document.createElement('div');\r\n-        bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n-        bodyEl.textContent = a.servico || '';\r\n-\r\n-        const footerEl = document.createElement('div');\r\n-        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n-        const price = document.createElement('div');\r\n-        price.className = 'text-[13px] text-gray-800 font-medium';\r\n-        price.textContent = money(a.valor);\r\n-\r\n-        footerEl.appendChild(price);\r\n-\r\n-        card.appendChild(headerEl);\r\n-        card.appendChild(bodyEl);\r\n-        card.appendChild(footerEl);\r\n-\r\n-        col.appendChild(card);\r\n-        placed++;\r\n-      }\r\n-\r\n-      if (placed === 0) {\r\n-        const empty = document.createElement('div');\r\n-        empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n-        empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n-        agendaList.insertBefore(empty, header.nextSibling);\r\n-      }\r\n-  }\r\n-\r\n-  // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n-  function statusMeta(s) {\r\n-    // Normalização: acentos/maiúsculas/espaços/hífens\r\n-    const keyRaw = String(s || 'agendado')\r\n-      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-      .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n-\r\n-    const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-    const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n-\r\n-    // Paleta acessível (contraste AA) + info para faixa lateral e badge compacta\r\n-    const map = {\r\n-      agendado: {\r\n-        label: 'Agendado',\r\n-        short: 'Agend.',\r\n-        stripe: '#64748B',     // slate-500\r\n-        text: '#0F172A',       // slate-900\r\n-        badgeClass: 'bg-slate-100 text-slate-700 border border-slate-200',\r\n-        borderClass: 'border-slate-300'\r\n-      },\r\n-      em_espera: {\r\n-        label: 'Em espera',\r\n-        short: 'Espera',\r\n-        stripe: '#B45309',     // amber-700\r\n-        text: '#1F2937',       // gray-800\r\n-        badgeClass: 'bg-amber-50 text-amber-800 border border-amber-200',\r\n-        borderClass: 'border-amber-400'\r\n-      },\r\n-      em_atendimento: {\r\n-        label: 'Em atendimento',\r\n-        short: 'Atend.',\r\n-        stripe: '#1D4ED8',     // blue-700\r\n-        text: '#0B1235',\r\n-        badgeClass: 'bg-blue-50 text-blue-800 border border-blue-200',\r\n-        borderClass: 'border-blue-500'\r\n-      },\r\n-      finalizado: {\r\n-        label: 'Finalizado',\r\n-        short: 'Fim.',\r\n-        stripe: '#16A34A',     // green-600\r\n-        text: '#052E16',\r\n-        badgeClass: 'bg-green-50 text-green-800 border border-green-200',\r\n-        borderClass: 'border-green-500'\r\n-      }\r\n-    };\r\n-\r\n-    return map[k];\r\n-  }\r\n-\r\n-  function renderStatusBadge(s) {\r\n-    const { label, badgeClass } = statusMeta(s);\r\n-    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${badgeClass}\">${label}</span>`;\r\n-  }\r\n-\r\n-  // Modal — modo adicionar\r\n-  function openAddModal() {\r\n-    state.editing = null;\r\n-    if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n-\r\n-    // Campos editáveis habilitados\r\n-    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n-\r\n-    // Limpa estado/inputs\r\n-    state.selectedCliente = null;\r\n-    state.selectedServico = null;\r\n-    if (cliInput) { cliInput.value = ''; }\r\n-    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n-    if (servInput) { servInput.value = ''; }\r\n-    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-    if (valorInput) { valorInput.value = ''; }\r\n-    if (petSelect) { petSelect.innerHTML = ''; }\r\n-\r\n-    // Empresa (usa as mesmas opções do seletor da página)\r\n-    if (addStoreSelect) {\r\n-      if (storeSelect && storeSelect.options.length) {\r\n-        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n-      } else if (state.stores?.length) {\r\n-        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-      }\r\n-      const sid = state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.value = sid;\r\n-    }\r\n-\r\n-    // Data (usa a data visível na página)\r\n-    if (addDateInput) {\r\n-      const date = normalizeDate(dateInput?.value || todayStr()); // YYYY-MM-DD\r\n-      addDateInput.value = date;\r\n-    }\r\n-\r\n-    // Hora default (agora)\r\n-    const now = new Date();\r\n-    const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n-    if (horaInput) horaInput.value = hh;\r\n-\r\n-    // Status default\r\n-    if (statusSelect) statusSelect.value = 'agendado';\r\n-\r\n-    // Botão Excluir só em edição\r\n-    if (modalDelete) modalDelete.classList.add('hidden');\r\n-\r\n-    modal.classList.remove('hidden'); \r\n-    modal.classList.add('flex');\r\n-    cliInput?.focus();\r\n-  }\r\n-\r\n-  // cache simples: clienteId -> nome\r\n-  const _clienteNomeCache = new Map();\r\n-\r\n-  async function resolveClienteNome(a) {\r\n-    try {\r\n-      if (!a) return '';\r\n-\r\n-      // 1) nome direto vindo da API\r\n-      const direct =\r\n-        a.clienteNome ||\r\n-        (a.cliente && typeof a.cliente === 'object' && (a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial)) ||\r\n-        null;\r\n-      if (typeof direct === 'string' && direct.trim()) return direct.trim();\r\n-\r\n-      // 2) clienteId em qualquer formato\r\n-      let maybeId =\r\n-        a.clienteId ||\r\n-        a.clientId ||\r\n-        a.customerId ||\r\n-        (typeof a.cliente === 'string' ? a.cliente : null);\r\n-\r\n-      if (typeof maybeId === 'object' && maybeId !== null && maybeId._id) {\r\n-        maybeId = String(maybeId._id);\r\n-      }\r\n-      const id = (typeof maybeId === 'string' && /^[0-9a-fA-F]{24}$/.test(maybeId)) ? maybeId : null;\r\n-\r\n-      if (id) {\r\n-        if (_clienteNomeCache.has(id)) return _clienteNomeCache.get(id);\r\n-        const r = await api(`/func/clientes/${id}`);\r\n-        if (r.ok) {\r\n-          const c = await r.json();\r\n-          const nome = c?.nome || '';\r\n-          if (nome) { _clienteNomeCache.set(id, nome); return nome; }\r\n-        }\r\n-      }\r\n-\r\n-      // 3) fallback por petId\r\n-      const petId =\r\n-        a.petId ||\r\n-        (a.pet && typeof a.pet === 'object' && a.pet._id ? a.pet._id : null) ||\r\n-        null;\r\n-\r\n-      if (petId && /^[0-9a-fA-F]{24}$/.test(String(petId))) {\r\n-        const r2 = await api(`/func/pets/${petId}`);\r\n-        if (r2.ok) {\r\n-          const p = await r2.json();\r\n-          const nome =\r\n-            (p?.cliente && (p.cliente.nome || p.cliente.nomeCompleto || p.cliente.razaoSocial)) ||\r\n-            p?.clienteNome ||\r\n-            '';\r\n-          if (nome) return String(nome);\r\n-        }\r\n-      }\r\n-    } catch (e) {\r\n-      console.info('[resolveClienteNome] não foi possível resolver', e);\r\n-    }\r\n-    return '';\r\n-  }\r\n-\r\n-  // --- DEPOIS: openEditModal (indica carregamento e garante preenchimento) ---\r\n-  function toDateInputValueFromISO(isoStr) {\r\n-    const d = new Date(isoStr);\r\n-    if (isNaN(d.getTime())) return todayStr();\r\n-    const yyyy = d.getFullYear();\r\n-    const mm = String(d.getMonth() + 1).padStart(2, '0');\r\n-    const dd = String(d.getDate()).padStart(2, '0');\r\n-    return `${yyyy}-${mm}-${dd}`;\r\n-  }\r\n-\r\n-  async function openEditModal(a) {\r\n-    state.editing = a || null;\r\n-    if (!modal || !state.editing) return;\r\n-\r\n-    // Empresa (mostra a loja do agendamento; desabilitar evita lista de profissionais divergente)\r\n-    if (addStoreSelect) {\r\n-      if (storeSelect && storeSelect.options.length) {\r\n-        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n-      } else if (state.stores?.length) {\r\n-        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-      }\r\n-      addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.disabled = true; // opcional; remova se quiser permitir trocar a loja\r\n-    }\r\n-\r\n-    // Data do agendamento\r\n-    if (addDateInput) {\r\n-      const iso = a.h || a.scheduledAt || new Date().toISOString();\r\n-      addDateInput.value = toDateInputValueFromISO(iso);\r\n-    }\r\n-\r\n-    // Hora\r\n-    const d = new Date((a.h || a.scheduledAt) || new Date());\r\n-    const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n-    if (horaInput) horaInput.value = hh;\r\n-\r\n-    // Profissional\r\n-    let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-    if (!profId && typeof a.profissional === 'string') {\r\n-      const key = a.profissional.trim().toLowerCase();\r\n-      const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n-      if (match) profId = String(match._id);\r\n-    }\r\n-    if (profSelect && profId) profSelect.value = profId;\r\n-\r\n-    // Status (normalizado para bater com os values do <select>)\r\n-    if (statusSelect) {\r\n-      const keyRaw = String(a.status || 'agendado')\r\n-        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-        .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n-      const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-      statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n-    }\r\n-\r\n-    // Cliente (leitura)\r\n-    let clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n-    if (cliInput) {\r\n-      cliInput.disabled = true;\r\n-      cliInput.value = '(carregando...)';\r\n-      const nomeCli = await resolveClienteNome(a);\r\n-      cliInput.value = nomeCli || '';\r\n-    }\r\n-\r\n-    // Pet: editável\r\n-    if (petSelect) {\r\n-      petSelect.disabled = false;\r\n-      petSelect.innerHTML = '';\r\n-      try {\r\n-        if (clienteId) {\r\n-          const resp = await api(`/func/clientes/${clienteId}/pets`);\r\n-          const pets = await resp.json().catch(() => []);\r\n-          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-        }\r\n-      } catch (_) { /* silencioso */ }\r\n-      const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n-      if (currentPetId) petSelect.value = String(currentPetId);\r\n-    }\r\n-\r\n-    // Serviço/Valor: leitura\r\n-    if (servInput) { servInput.value = a.servico || ''; servInput.disabled = true; }\r\n-    if (valorInput) { valorInput.value = Number(a.valor || 0).toFixed(2); valorInput.disabled = true; }\r\n-\r\n-    // Botão excluir visível\r\n-    if (modalDelete) modalDelete.classList.remove('hidden');\r\n-\r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n-  }\r\n-\r\n-  function closeModal() {\r\n-    if (!modal) return;\r\n-    modal.classList.add('hidden');\r\n-    modal.classList.remove('flex');\r\n-    state.editing = null;\r\n-    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n-  }\r\n-\r\n-  // Busca cliente\r\n-  async function searchClientes(term) {\r\n-    if (!term || term.length < 2) {\r\n-      if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n-      return;\r\n-    }\r\n-    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    if (!cliSug) return;\r\n-    cliSug.innerHTML = list.map(u => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n-        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n-      </li>`).join('');\r\n-    cliSug.classList.remove('hidden');\r\n-    cliSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', async () => {\r\n-        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n-        if (cliInput) cliInput.value = li.dataset.nome;\r\n-        cliSug.classList.add('hidden');\r\n-        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n-        const pets = await resp.json().catch(() => []);\r\n-        if (petSelect) {\r\n-          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-        }\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  function confirmAsync(title, message, opts = {}) {\r\n-    const confirmText = opts.confirmText || 'Excluir';\r\n-    const cancelText  = opts.cancelText  || 'Cancelar';\r\n-\r\n-    if (typeof window.showModal === 'function') {\r\n-      return new Promise((resolve) => {\r\n-        // 1) Esconde temporariamente o modal de edição (sem desmontar)\r\n-        const prevVis = modal ? modal.style.visibility : '';\r\n-        const prevPe  = modal ? modal.style.pointerEvents : '';\r\n-        if (modal) {\r\n-          modal.style.visibility = 'hidden';\r\n-          modal.style.pointerEvents = 'none';\r\n-        }\r\n-\r\n-        // 2) Abre o modal padrão do projeto\r\n-        window.showModal({\r\n-          title: title || 'Confirmação',\r\n-          message: message || 'Deseja prosseguir?',\r\n-          confirmText,\r\n-          cancelText,\r\n-          onConfirm: () => { restore(); resolve(true); },\r\n-          onCancel : () => { restore(); resolve(false); }\r\n-        });\r\n-\r\n-        // 3) Após montar, garante overlay por cima de tudo\r\n-        //    (pega o último elemento \"fixed\" full-screen e sobe o z-index)\r\n-        const bump = () => {\r\n-          try {\r\n-            const all = Array.from(document.querySelectorAll('body *'));\r\n-            const overlays = all.filter(el => {\r\n-              const cs = getComputedStyle(el);\r\n-              if (cs.position !== 'fixed') return false;\r\n-              const r = el.getBoundingClientRect();\r\n-              return r.width >= window.innerWidth * 0.95 && r.height >= window.innerHeight * 0.95;\r\n-            });\r\n-            const overlay = overlays.at(-1);\r\n-            if (overlay) {\r\n-              overlay.style.zIndex = '9999';\r\n-              overlay.style.pointerEvents = 'auto';\r\n-            }\r\n-          } catch (_) { /* noop */ }\r\n-        };\r\n-        requestAnimationFrame(bump);\r\n-        setTimeout(bump, 0);\r\n-\r\n-        // 4) Restaura o modal de edição quando fechar a confirmação\r\n-        function restore() {\r\n-          if (modal) {\r\n-            modal.style.visibility = prevVis || '';\r\n-            modal.style.pointerEvents = prevPe || '';\r\n-          }\r\n-        }\r\n-      });\r\n-    }\r\n-\r\n-    // Fallback (apenas se o componente não existir)\r\n-    const ok = window.confirm(message || title || 'Confirmar?');\r\n-    return Promise.resolve(!!ok);\r\n-  }\r\n-\r\n-  async function handleDelete() {\r\n-    const id = state.editing && state.editing._id ? String(state.editing._id) : null;\r\n-    if (!id) return;\r\n-\r\n-    const ok = await confirmAsync('Excluir atendimento', 'Tem certeza que deseja excluir este atendimento? Esta ação não pode ser desfeita.', {\r\n-      confirmText: 'Excluir',\r\n-      cancelText: 'Cancelar'\r\n-    });\r\n-    if (!ok) return;\r\n-\r\n-    const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\r\n-    if (!resp.ok) {\r\n-      const err = await resp.json().catch(() => ({}));\r\n-      alert(err.message || 'Erro ao excluir agendamento');\r\n-      return;\r\n-    }\r\n-    await loadAgendamentos();\r\n-    closeModal();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  }\r\n-\r\n-  // Busca serviços\r\n-  async function searchServicos(term) {\r\n-    if (!term || term.length < 2) {\r\n-      if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-      return;\r\n-    }\r\n-    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    if (!servSug) return;\r\n-    servSug.innerHTML = list.map(s => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor}\">\r\n-        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${money(s.valor)}</div>\r\n-      </li>`).join('');\r\n-    servSug.classList.remove('hidden');\r\n-    servSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', () => {\r\n-        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n-        if (servInput) servInput.value = state.selectedServico.nome;\r\n-        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n-        servSug.classList.add('hidden');\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  // Salvar (adicionar/editar)\r\n-  async function saveAgendamento() {\r\n-    try {\r\n-      const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n-      const storeIdSelected = (addStoreSelect?.value) || state.selectedStoreId || storeSelect?.value;\r\n-      const hora = horaInput?.value;\r\n-      const profissionalId = profSelect?.value;\r\n-      const status = (statusSelect?.value) || 'agendado';\r\n-\r\n-      if (!hora || !profissionalId) { alert('Preencha hora e profissional.'); return; }\r\n-      if (!storeIdSelected) { alert('Selecione a empresa.'); return; }\r\n-\r\n-      const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n-\r\n-      // Edição\r\n-      if (state.editing && state.editing._id) {\r\n-        const id = state.editing._id;\r\n-        const body = {\r\n-          storeId: storeIdSelected,\r\n-          profissionalId,\r\n-          scheduledAt,\r\n-          status,\r\n-          ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n-          ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n-          ...(state.editing.servicoId ? { servicoId: state.editing.servicoId } : {}),\r\n-          ...(typeof state.editing.valor !== 'undefined' ? { valor: state.editing.valor } : {}),\r\n-          ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n-        };\r\n-        const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\r\n-        if (!resp.ok) {\r\n-          const err = await resp.json().catch(() => ({}));\r\n-          throw new Error(err.message || 'Erro ao atualizar agendamento');\r\n-        }\r\n-        await loadAgendamentos();\r\n-        closeModal();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();      // <-- já existia aqui; mantido\r\n-        return;\r\n-      }\r\n-\r\n-      // Adição\r\n-      const clienteId = state.selectedCliente?._id;\r\n-      const petId = petSelect?.value;\r\n-      const servicoId = state.selectedServico?._id;\r\n-      const valor = Number(valorInput?.value || 0);\r\n-\r\n-      if (!(clienteId && petId && servicoId)) { alert('Preencha cliente, pet e serviço.'); return; }\r\n-\r\n-      const body = {\r\n-        storeId: storeIdSelected,\r\n-        clienteId, petId, servicoId,\r\n-        profissionalId, scheduledAt, valor,\r\n-        status,\r\n-        pago: false\r\n-      };\r\n-\r\n-      const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(() => ({}));\r\n-        throw new Error(err.message || 'Erro ao salvar');\r\n-      }\r\n-\r\n-      await loadAgendamentos();\r\n-      closeModal();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();        // <-- ADICIONADO: aplica zebra, sublinhas, linha do agora e ações\r\n-    } catch (e) {\r\n-      console.error(e);\r\n-      alert(e.message || 'Erro ao salvar');\r\n-    }\r\n-  }\r\n-\r\n-  function enhanceAgendaUI() {\r\n-    try {\r\n-      applyZebraAndSublines();\r\n-      decorateCards();\r\n-      drawNowLine();\r\n-\r\n-      // Auto-scroll para o horário atual (somente na data de hoje e 1x por renderização)\r\n-      const date = normalizeDate(dateInput?.value || todayStr());\r\n-      if (!state.__didInitialScroll && date === todayStr()) {\r\n-        scrollToNow();\r\n-        state.__didInitialScroll = true;\r\n-      }\r\n-    } catch (e) {\r\n-      console.info('[enhanceAgendaUI] skip', e);\r\n-    }\r\n-  }\r\n-\r\n-  function scrollToNow() {\r\n-    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n-    if (!body || !state.profissionais?.length) return;\r\n-\r\n-    // encontra a célula da primeira coluna de profissional no horário atual\r\n-    const now = new Date();\r\n-    const hh = String(now.getHours()).padStart(2, '0') + ':00';\r\n-    const firstProfId = String(state.profissionais[0]._id);\r\n-    const target = body.querySelector(`div[data-profissional-id=\"${firstProfId}\"][data-hh=\"${hh}\"]`);\r\n-\r\n-    if (target) {\r\n-      const top = target.getBoundingClientRect().top + window.pageYOffset;\r\n-      // sobe um pouco para mostrar contexto acima do \"agora\"\r\n-      const offset = 80;\r\n-      window.scrollTo({ top: Math.max(0, top - offset), behavior: 'smooth' });\r\n-    }\r\n-  }\r\n-\r\n-  // compacta a lista para um hash leve (ordem estável)\r\n-  function snapshotHash(items) {\r\n-    try {\r\n-      const compact = (items || []).map(x => [\r\n-        String(x._id || ''),\r\n-        String(x.status || ''),\r\n-        String(x.h || x.scheduledAt || ''),\r\n-        Number(x.valor || 0),\r\n-        !!x.pago\r\n-      ]).sort((a, b) => a[0].localeCompare(b[0]));\r\n-      return JSON.stringify(compact);\r\n-    } catch (_) {\r\n-      return String(Date.now());\r\n-    }\r\n-  }\r\n-\r\n-  // reconsulta e só re-renderiza se houver mudança relevante\r\n-  async function refreshAgendaIfChanged() {\r\n-    const prev = state.lastSnapshotHash || '';\r\n-    await loadAgendamentos();\r\n-    const next = snapshotHash(state.agendamentos);\r\n-    if (next !== prev) {\r\n-      state.lastSnapshotHash = next;\r\n-      renderGrid();\r\n-      // ao re-render com mesma data de hoje, não repete o scroll\r\n-      enhanceAgendaUI();\r\n-    }\r\n-  }\r\n-\r\n-  // inicia/renova o timer de auto-refresh (60s)\r\n-  function startAutoRefresh() {\r\n-    if (window.__agendaRefreshTimer) clearInterval(window.__agendaRefreshTimer);\r\n-    state.lastSnapshotHash = snapshotHash(state.agendamentos);\r\n-    window.__agendaRefreshTimer = setInterval(refreshAgendaIfChanged, 60000);\r\n-  }\r\n-\r\n-  // cria o botão \"Hoje\" ao lado do input de data (uma vez)\r\n-  function ensureTodayButton() {\r\n-    if (!dateInput) return;\r\n-    if (document.getElementById('agenda-today-btn')) return;\r\n-\r\n-    const btn = document.createElement('button');\r\n-    btn.id = 'agenda-today-btn';\r\n-    btn.type = 'button';\r\n-    btn.className = 'ml-2 inline-flex items-center gap-1 text-xs px-2 py-1 rounded border border-slate-300 text-slate-700 hover:bg-slate-50';\r\n-    btn.textContent = 'Hoje';\r\n-\r\n-    dateInput.insertAdjacentElement('afterend', btn);\r\n-    btn.addEventListener('click', async () => {\r\n-      dateInput.value = todayStr();\r\n-      state.__didInitialScroll = false;   // permite novo auto-scroll\r\n-      await loadAgendamentos();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    });\r\n-  }\r\n-\r\n-  // Zebra de linhas + sublinha 30min com CSS (via classe)\r\n-  function applyZebraAndSublines() {\r\n-    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n-    if (!body) return;\r\n-\r\n-    body.style.position = 'relative'; // para linha do \"agora\"\r\n-    const totalCols = 1 + (state.profissionais?.length || 0); // 1 (hora) + N profissionais\r\n-    if (totalCols <= 0) return;\r\n-\r\n-    const cells = Array.from(body.children);\r\n-    const totalRows = Math.floor(cells.length / totalCols);\r\n-\r\n-    for (let row = 0; row < totalRows; row++) {\r\n-      const start = row * totalCols;\r\n-      const zebraClass = (row % 2 === 0) ? 'bg-white' : 'bg-slate-50';\r\n-\r\n-      // primeira célula = hora\r\n-      const timeCell = cells[start];\r\n-      timeCell.classList.remove('bg-gray-50');\r\n-      timeCell.classList.add(zebraClass);\r\n-\r\n-      // colunas da linha\r\n-      for (let i = 1; i < totalCols; i++) {\r\n-        const colCell = cells[start + i];\r\n-        colCell.classList.add(zebraClass, 'agenda-slot'); // agenda-slot desenha sublinha (CSS)\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  // Insere ícones de ação nos cartões (editar / mudar status)\r\n-  function decorateCards() {\r\n-    const cards = agendaList?.querySelectorAll('div[data-appointment-id]');\r\n-    if (!cards || !cards.length) return;\r\n-\r\n-    cards.forEach((card) => {\r\n-      if (card.querySelector('.agenda-card__actions')) return; // já decorado\r\n-      card.classList.add('agenda-card'); // ativa hover via CSS\r\n-      card.style.position = 'relative';\r\n-\r\n-      const id = card.getAttribute('data-appointment-id') || '';\r\n-      const actions = document.createElement('div');\r\n-      actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex items-center gap-1';\r\n-\r\n-      actions.innerHTML = `\r\n-        <button class=\"agenda-action edit\" data-id=\"${id}\" title=\"Editar\">\r\n-          <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"text-gray-600 hover:text-gray-900\"><path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 000-1.42l-2.34-2.34a1.003 1.003 0 00-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.82z\"/></svg>\r\n-        </button>\r\n-        <button class=\"agenda-action status\" data-id=\"${id}\" title=\"Mudar status\">\r\n-          <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\"><path d=\"M12 7v10M7 12h10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/></svg>\r\n-        </button>\r\n-      `;\r\n-      card.appendChild(actions);\r\n-    });\r\n-  }\r\n-\r\n-  // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n-  function drawNowLine() {\r\n-    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n-    if (!body) return;\r\n-\r\n-    body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n-\r\n-    const now = new Date();\r\n-    const minutes = now.getHours() * 60 + now.getMinutes();\r\n-    const percent = minutes / (24 * 60);\r\n-    const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n-\r\n-    const line = document.createElement('div');\r\n-    line.className = 'agenda-nowline';\r\n-    line.style.top = `${y}px`;\r\n-    body.appendChild(line);\r\n-\r\n-    if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n-    window.__agendaNowTimer = setInterval(() => {\r\n-      drawNowLine();\r\n-    }, 60000);\r\n-  }\r\n-\r\n-  // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n-  async function updateStatusQuick(id, status) {\r\n-    try {\r\n-      const resp = await api(`/func/agendamentos/${id}`, {\r\n-        method: 'PUT',\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify({ status })\r\n-      });\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(() => ({}));\r\n-        throw new Error(err.message || 'Erro ao mudar status');\r\n-      }\r\n-      await loadAgendamentos();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    } catch (e) {\r\n-      console.error('updateStatusQuick', e);\r\n-      alert(e.message || 'Erro ao mudar status');\r\n-    }\r\n-  }\r\n-\r\n-  // Events\r\n-  addBtn?.addEventListener('click', openAddModal);\r\n-  modalClose?.addEventListener('click', closeModal);\r\n-  modalCancel?.addEventListener('click', closeModal);\r\n-  modalSave?.addEventListener('click', saveAgendamento);\r\n-\r\n-  cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n-  servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n-\r\n-  modalDelete?.addEventListener('click', handleDelete);\r\n-\r\n-  // Ações rápidas nos cartões (delegação no container da agenda)\r\n-  agendaList?.addEventListener('click', (ev) => {\r\n-    // toggle do menu mobile\r\n-    const more = ev.target.closest('.agenda-card__more');\r\n-    if (more) {\r\n-      const holder = more.parentElement?.querySelector('.agenda-card__actions');\r\n-      if (holder) holder.classList.toggle('hidden');\r\n-      return;\r\n-    }\r\n-\r\n-    const btn = ev.target.closest('.agenda-action');\r\n-    if (!btn) return;\r\n-    const id = btn.getAttribute('data-id');\r\n-    if (!id) return;\r\n-\r\n-    if (btn.classList.contains('edit')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      if (item) openEditModal(item);\r\n-    } else if (btn.classList.contains('status')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-      const cur = (item && item.status) || 'agendado';\r\n-      const next = chain[(chain.indexOf(cur) + 1) % chain.length];\r\n-      updateStatusQuick(id, next);\r\n-    } else if (btn.classList.contains('cobrar')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      if (item) openEditModal(item); // reaproveite seu modal/fluxo de cobrança\r\n-    }\r\n-  });\r\n-\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    updateStoreLabel();\r\n-    state.__didInitialScroll = false;     // nova loja -> recalcula scroll\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    state.__didInitialScroll = false;     // nova data -> permite auto-scroll\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  // Boot\r\n-  function setupShortcuts() {\r\n-    document.addEventListener('keydown', (e) => {\r\n-      if (e.target && ['INPUT','SELECT','TEXTAREA'].includes(e.target.tagName)) return; // não atrapalhar digitação\r\n-      if (e.key === 't' || e.key === 'T') {\r\n-        if (dateInput) {\r\n-          dateInput.value = todayStr();\r\n-          state.__didInitialScroll = false;\r\n-          loadAgendamentos().then(() => {\r\n-            renderKpis(); renderFilters(); renderGrid(); enhanceAgendaUI();\r\n-          });\r\n-        }\r\n-      }\r\n-      if (e.key === 'n' || e.key === 'N') {\r\n-        e.preventDefault();\r\n-        openAddModal();\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  (async function init() {\r\n-    if (!dateInput?.value) dateInput.value = todayStr();\r\n-    loadFiltersFromStorage();\r\n-    await loadStores();\r\n-    if (!state.selectedStoreId && storeSelect?.value) {\r\n-      state.selectedStoreId = storeSelect.value;\r\n-    }\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-\r\n-    ensureToolbar();\r\n-    ensureTodayButton();\r\n-    setupShortcuts();\r\n-\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  })();\r\n-\r\n-  // Atualizações após troca de loja/data/status etc.\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    updateStoreLabel();\r\n-    state.__didInitialScroll = false;\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    state.__didInitialScroll = false;\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-})();\r\n"
                },
                {
                    "date": 1757432978843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,113 +17,209 @@\n   const dateInput = document.getElementById('agenda-date');\r\n   const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n   const addBtn = document.getElementById('add-service-btn');\r\n   const storeSelect = document.getElementById('agenda-store');\r\n-  const storeLabel = document.getElementById('agenda-store-label');\r\n   const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n \r\n-  // KPIs e filtros (chips)\r\n-  const kpiWrap = document.getElementById('agenda-kpis');\r\n+  // Modal (reutilizado p/ adicionar e editar)\r\n+  const modal = document.getElementById('modal-add-servico');\r\n+  const modalClose = document.getElementById('modal-add-close');\r\n+  const modalCancel = document.getElementById('modal-add-cancel');\r\n+  const modalSave = document.getElementById('modal-add-save');\r\n+  const modalDelete = document.getElementById('modal-add-delete');\r\n \r\n-  const filterWrap = document.getElementById('agenda-filters');\r\n-  const clearFiltersBtn = document.getElementById('clear-filters');\r\n+  const addStoreSelect = document.getElementById('add-store-select');\r\n+  const addDateInput   = document.getElementById('add-date');\r\n+  const statusSelect   = document.getElementById('add-status');\r\n \r\n-  // Modal elementos\r\n-  const modal = document.getElementById('modal-add-servico');\r\n-  const modalTitle = document.getElementById('modal-title');\r\n-  const modalDate = document.getElementById('modal-date');\r\n-  const modalHour = document.getElementById('modal-hour');\r\n-  const modalClose = document.getElementById('modal-close');\r\n+  const cliInput = document.getElementById('add-cli-input');\r\n+  const cliSug = document.getElementById('add-cli-sug');\r\n+  const petSelect = document.getElementById('add-pet-select');\r\n+  const servInput = document.getElementById('add-serv-input');\r\n+  const servSug = document.getElementById('add-serv-sug');\r\n+  const valorInput = document.getElementById('add-valor');\r\n+  const horaInput = document.getElementById('add-hora');\r\n+  const profSelect = document.getElementById('add-prof-select');\r\n \r\n-  // Campos do modal\r\n-  const cliInput = document.getElementById('modal-cli');\r\n-  const cliSug = document.getElementById('modal-cli-sug');\r\n-  const petSelect = document.getElementById('modal-pet');\r\n-  const servInput = document.getElementById('modal-serv');\r\n-  const valorInput = document.getElementById('modal-valor');\r\n-  const pagoCheck = document.getElementById('modal-pago');\r\n-  const profSelect = document.getElementById('modal-prof');\r\n-  const obsInput = document.getElementById('modal-obs');\r\n+  // State\r\n+  const FILTER_STORAGE_KEY = 'agenda_filters_v1';\r\n \r\n-  // Salvamento\r\n-  const modalSaveBtn = document.getElementById('modal-save');\r\n-\r\n   const state = {\r\n+    stores: [],\r\n+    profissionais: [],\r\n+    agendamentos: [],\r\n     selectedStoreId: null,\r\n-    selectedStoreName: '',\r\n-    agendamentos: [],\r\n-    profissionais: [],\r\n-    filters: {\r\n-      statuses: new Set(),  // normalizados com normalizeStatus\r\n-      profIds: new Set()\r\n-    },\r\n-    editing: null\r\n+    selectedCliente: null,\r\n+    selectedServico: null,\r\n+    editing: null,\r\n+    lastSnapshotHash: '',\r\n+    __didInitialScroll: false,\r\n+    filters: {                 // filtros persistentes\r\n+      statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n+      profIds: new Set()       // _id dos profissionais\r\n+    }\r\n   };\r\n \r\n-  // ===== Helpers de UI =====\r\n-  function clearChildren(el) {\r\n-    if (!el) return;\r\n-    while (el.firstChild) el.removeChild(el.firstChild);\r\n+  function loadFiltersFromStorage() {\r\n+    try {\r\n+      const raw = JSON.parse(localStorage.getItem(FILTER_STORAGE_KEY) || 'null');\r\n+      if (raw && typeof raw === 'object') {\r\n+        state.filters.statuses = new Set(Array.isArray(raw.statuses) ? raw.statuses : []);\r\n+        state.filters.profIds  = new Set(Array.isArray(raw.profIds)  ? raw.profIds  : []);\r\n+      }\r\n+    } catch(_) {}\r\n   }\r\n+  function saveFiltersToStorage() {\r\n+    try {\r\n+      localStorage.setItem(FILTER_STORAGE_KEY, JSON.stringify({\r\n+        statuses: Array.from(state.filters.statuses),\r\n+        profIds : Array.from(state.filters.profIds)\r\n+      }));\r\n+    } catch(_) {}\r\n+  }\r\n \r\n-  function money(v) {\r\n-    const n = Number(v || 0);\r\n-    return n.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\r\n+  function ensureToolbar() {\r\n+    if (!agendaList) return;\r\n+    if (document.getElementById('agenda-toolbar')) return;\r\n+\r\n+    const bar = document.createElement('div');\r\n+    bar.id = 'agenda-toolbar';\r\n+    // sticky sob o cabeçalho; leve blur para legibilidade; borda inferior discreta\r\n+    bar.className = 'sticky top-0 z-30 bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/60 border-b border-slate-200 mb-2 flex flex-col gap-2 px-3 py-2 rounded-lg';\r\n+\r\n+    // KPIs\r\n+    const kpis = document.createElement('div');\r\n+    kpis.id = 'agenda-kpis';\r\n+    kpis.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(kpis);\r\n+\r\n+    // Filtros\r\n+    const filters = document.createElement('div');\r\n+    filters.id = 'agenda-filters';\r\n+    filters.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(filters);\r\n+\r\n+    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n   }\r\n \r\n-  function statusMeta(s) {\r\n-    const keyRaw = String(s || 'agendado')\r\n-      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-      .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n+  function computeKPIs(items) {\r\n+    const total = items.length;\r\n+    const previsto = items.reduce((s, i) => s + Number(i.valor || 0), 0);\r\n+    const recebido = items.reduce((s, i) => s + (i.pago ? Number(i.valor || 0) : 0), 0);\r\n+    const pendente = previsto - recebido;\r\n+    return { total, previsto, recebido, pendente };\r\n+  }\r\n \r\n-    const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-    const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n+  function renderKpis() {\r\n+    const wrap = document.getElementById('agenda-kpis');\r\n+    if (!wrap) return;\r\n \r\n-    const map = {\r\n-      agendado: {\r\n-        label: 'Agendado',\r\n-        short: 'Ag.',\r\n-        stripe: '#334155',\r\n-        text: '#0f172a',\r\n-        badgeClass: 'bg-slate-50 text-slate-800 border border-slate-200',\r\n-        borderClass: 'border-slate-500'\r\n-      },\r\n-      em_espera: {\r\n-        label: 'Em espera',\r\n-        short: 'Esp.',\r\n-        stripe: '#F59E0B',\r\n-        text: '#451A03',\r\n-        badgeClass: 'bg-amber-50 text-amber-800 border border-amber-200',\r\n-        borderClass: 'border-amber-500'\r\n-      },\r\n-      em_atendimento: {\r\n-        label: 'Em atendimento',\r\n-        short: 'Atend.',\r\n-        stripe: '#0EA5E9',\r\n-        text: '#082F49',\r\n-        badgeClass: 'bg-sky-50 text-sky-800 border border-sky-200',\r\n-        borderClass: 'border-sky-500'\r\n-      },\r\n-      finalizado: {\r\n-        label: 'Finalizado',\r\n-        short: 'Fim.',\r\n-        stripe: '#16A34A',\r\n-        text: '#052E16',\r\n-        badgeClass: 'bg-green-50 text-green-800 border border-green-200',\r\n-        borderClass: 'border-green-500'\r\n-      }\r\n-    };\r\n+    const all = state.agendamentos || [];\r\n+    const f = getFilteredAgendamentos();   // filtrados atuais\r\n+    const kAll = computeKPIs(all);\r\n+    const kF   = computeKPIs(f);\r\n \r\n-    return map[k];\r\n+    wrap.innerHTML = `\r\n+      <div class=\"kpi-chip\">Total dia: <strong>${kAll.total}</strong></div>\r\n+      <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n+      <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n+      <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n+      ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n+          ? `<div class=\"kpi-chip kpi-muted\">Filtrados: <strong>${kF.total}</strong></div>` : '' }\r\n+    `;\r\n   }\r\n \r\n-  function renderStatusBadge(s) {\r\n-    const { label, badgeClass } = statusMeta(s);\r\n-    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${badgeClass}\">${label}</span>`;\r\n+  function renderFilters() {\r\n+    const el = document.getElementById('agenda-filters');\r\n+    if (!el) return;\r\n+\r\n+    // contadores por status\r\n+    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const key = String(a.status || 'agendado')\r\n+        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n+      if (counts[key] !== undefined) counts[key] += 1;\r\n+    }\r\n+\r\n+    // contadores por profissional\r\n+    const byProf = new Map();\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n+      if (!id) continue;\r\n+      const key = String(id);\r\n+      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n+    }\r\n+\r\n+    const statuses = [\r\n+      {key:'agendado', label:'Agend.'},\r\n+      {key:'em_espera', label:'Espera'},\r\n+      {key:'em_atendimento', label:'Atend.'},\r\n+      {key:'finalizado', label:'Fim.'}\r\n+    ];\r\n+\r\n+    // chips de status\r\n+    const chipsStatus = statuses.map(s => {\r\n+      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n+      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n+                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    // chips de profissional (apenas os que existem)\r\n+    const chipsProf = (state.profissionais || []).map(p => {\r\n+      const id = String(p._id);\r\n+      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n+      const n = byProf.get(id) || 0;\r\n+      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n+                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n+      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n+\r\n+    el.innerHTML = `\r\n+      <div class=\"flex flex-wrap items-center gap-2\">\r\n+        ${chipsStatus}\r\n+        <span class=\"chip-sep\"></span>\r\n+        ${chipsProf}\r\n+        ${clearBtn}\r\n+      </div>\r\n+    `;\r\n+\r\n+    // handlers\r\n+    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n+      btn.addEventListener('click', () => {\r\n+        const type = btn.getAttribute('data-filter');\r\n+        const val  = btn.getAttribute('data-value');\r\n+        if (type === 'status') {\r\n+          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n+        } else if (type === 'prof') {\r\n+          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n+        }\r\n+        saveFiltersToStorage();\r\n+        renderFilters();\r\n+        renderKpis();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      });\r\n+    });\r\n+\r\n+    const clear = document.getElementById('chip-clear');\r\n+    if (clear) clear.addEventListener('click', () => {\r\n+      state.filters.statuses.clear();\r\n+      state.filters.profIds.clear();\r\n+      saveFiltersToStorage();\r\n+      renderFilters();\r\n+      renderKpis();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    });\r\n   }\r\n \r\n   function normalizeStatus(s) {\r\n-    return String(s || '')\r\n+    return String(s || 'agendado')\r\n       .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n       .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n   }\r\n \r\n@@ -164,8 +260,9 @@\n   }\r\n \r\n   // Helpers de data e utilitários\r\n   function todayStr() {\r\n+    // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n     const d = new Date();\r\n     d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n     return d.toISOString().slice(0, 10);\r\n   }\r\n@@ -178,34 +275,52 @@\n     return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n   }\r\n   function normalizeDate(v) {\r\n     if (!v) return todayStr();\r\n-    if (/^\\d{4}-\\d{2}-\\d{2}$/.test(v)) return v;\r\n-    const [d, m, y] = v.split('/').map(Number);\r\n-    return `${y}-${String(m).padStart(2,'0')}-${String(d).padStart(2,'0')}`;\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n+    return v;\r\n   }\r\n+  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n+  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n+  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n \r\n-  // ===== Carregamento de dados =====\r\n-  async function loadProfissionais(storeId) {\r\n-    try {\r\n-      const url = `/func/profissionais?storeId=${storeId}`;\r\n-      const resp = await api(url);\r\n-      if (!resp.ok) {\r\n-        console.error('GET', url, '->', resp.status, await resp.text());\r\n-        state.profissionais = [];\r\n-        return;\r\n-      }\r\n-      const list = await resp.json();\r\n-      state.profissionais = Array.isArray(list) ? list : [];\r\n-    } catch (e) {\r\n-      console.error('Erro ao carregar profissionais', e);\r\n-      state.profissionais = [];\r\n+  // Stores\r\n+  async function loadStores() {\r\n+    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.stores = Array.isArray(list) ? list : [];\r\n+    if (storeSelect) {\r\n+      storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n     }\r\n+    if (!state.selectedStoreId && state.stores[0]) {\r\n+      state.selectedStoreId = state.stores[0]._id;\r\n+      if (storeSelect) storeSelect.value = state.selectedStoreId;\r\n+    }\r\n+    updateStoreLabel();\r\n   }\r\n+  function updateStoreLabel() {\r\n+    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n+    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n+    const vis = document.getElementById('agenda-store-label-visible');\r\n+    if (vis) vis.textContent = s ? s.nome : '—';\r\n+  }\r\n \r\n-  async function loadAgendamentos(date) {\r\n+  // Profissionais\r\n+  async function loadProfissionais() {\r\n+    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n+    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.profissionais = Array.isArray(list) ? list : [];\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+    }\r\n+  }\r\n+\r\n+  // Agendamentos\r\n+  async function loadAgendamentos() {\r\n+    const date = normalizeDate(dateInput?.value || todayStr());\r\n+    const url = `/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`;\r\n     try {\r\n-      const url = `/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`;\r\n       const resp = await api(url);\r\n       if (!resp.ok) {\r\n         const txt = await resp.text();\r\n         console.error('GET', url, '->', resp.status, txt);\r\n@@ -220,182 +335,167 @@\n       state.agendamentos = [];\r\n     }\r\n   }\r\n \r\n-  // ===== Renderização da grade =====\r\n+  // Grade (sem coluna \"Outros\")\r\n   function renderGrid() {\r\n-    if (!agendaList) return;\r\n+      if (!agendaList) return;\r\n \r\n-    const date = normalizeDate(dateInput?.value || todayStr());\r\n-    if (dateLabelVisible) {\r\n-      dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-    }\r\n+      const date = normalizeDate(dateInput?.value || todayStr());\r\n+      if (dateLabelVisible) {\r\n+        dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      }\r\n \r\n-    const BUSINESS_START = 8;\r\n-    const BUSINESS_END   = 19;\r\n+      // janelas de trabalho (ajuste se quiser)\r\n+      const BUSINESS_START = 8;   // 08:00\r\n+      const BUSINESS_END   = 19;  // 19:00\r\n \r\n-    const hours = [];\r\n-    for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+      const hours = [];\r\n+      for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n-    clearChildren(agendaList);\r\n+      clearChildren(agendaList);\r\n \r\n-    const profsAll  = state.profissionais || [];\r\n-    let profs     = getVisibleProfissionais();\r\n-    const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n-      // Mostrar somente colunas de profissionais com agendamento quando nenhum filtro de profissional estiver ativo\r\n-      const itemsAll = state.agendamentos || [];\r\n-      if (!state.filters.profIds.size && Array.isArray(itemsAll)) {\r\n-        const profIdsWithItems = new Set();\r\n-        for (const a of itemsAll) {\r\n-          let pid = a && a.profissionalId ? String(a.profissionalId) : null;\r\n-          if (!pid) {\r\n-            let nameCandidate = '';\r\n-            if (a) {\r\n-              if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n-              else if (a.profissional && typeof a.profissional === 'object') {\r\n-                nameCandidate = a.profissional.nome || a.profissional.nomeCompleto || a.profissional.nomeContato || a.profissional.razaoSocial || '';\r\n-              }\r\n-            }\r\n-            const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n-            if (normalized && byNameAll.has(normalized)) pid = String(byNameAll.get(normalized));\r\n-          }\r\n-          if (pid) profIdsWithItems.add(String(pid));\r\n+      const profsAll  = state.profissionais || [];\r\n+      const profs     = getVisibleProfissionais();\r\n+      const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n+\r\n+      const colCount = 1 + (profs?.length || 0);\r\n+\r\n+      // Cabeçalho\r\n+      const header = document.createElement('div');\r\n+      header.style.display = 'grid';\r\n+      // >>> LARGURA FIXA POR COLUNA: igual ao corpo (evita “vão gigante”)\r\n+      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n+      header.className = 'bg-white border-b';\r\n+\r\n+      const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n+      headLabels.forEach((label, idx) => {\r\n+        const cell = document.createElement('div');\r\n+        cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n+        if (idx === 0) {\r\n+          cell.textContent = label;\r\n         }\r\n-        if (profIdsWithItems.size) {\r\n-          const original = profs;\r\n-          profs = (profs || []).filter(p => profIdsWithItems.has(String(p._id)));\r\n-          if (!profs.length) profs = original;\r\n+        else {\r\n+          // >>> centraliza o nome do profissional\r\n+          cell.style.textAlign = 'center';\r\n+          const span = document.createElement('span');\r\n+          span.className = 'agenda-head-label inline-block';\r\n+          span.textContent = label || '';\r\n+          cell.dataset.profId = String(profs[idx - 1]._id);\r\n+          cell.appendChild(span);\r\n         }\r\n-      }\r\n+        header.appendChild(cell);\r\n+      });\r\n \r\n-    const colCount = 1 + (profs?.length || 0);\r\n+      const counter = document.createElement('div');\r\n+      counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n+      const itemsAll = state.agendamentos || [];\r\n+      const items    = getFilteredAgendamentos(itemsAll);\r\n+      const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n+      counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n+      header.appendChild(counter);\r\n \r\n-    // Cabeçalho\r\n-    const header = document.createElement('div');\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n-    header.className = 'bg-white border-b';\r\n+      agendaList.appendChild(header);\r\n \r\n-    const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n-    headLabels.forEach((label, idx) => {\r\n-      const cell = document.createElement('div');\r\n-      cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n-      if (idx === 0) {\r\n-        cell.textContent = label;\r\n-      }\r\n-      else {\r\n-        cell.style.textAlign = 'center';\r\n-        const span = document.createElement('span');\r\n-        span.className = 'agenda-head-label inline-block';\r\n-        span.textContent = label || '';\r\n-        cell.dataset.profId = String(profs[idx - 1]._id);\r\n-        cell.appendChild(span);\r\n-      }\r\n-      header.appendChild(cell);\r\n-    });\r\n+      // Corpo\r\n+      const body = document.createElement('div');\r\n+      body.style.display = 'grid';\r\n+      // >>> LARGURA FIXA POR COLUNA: fica do tamanho do card + folga\r\n+      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n+      agendaList.appendChild(body);\r\n \r\n-    const counter = document.createElement('div');\r\n-    counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n-    const items    = getFilteredAgendamentos(itemsAll);\r\n-    const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n-    counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n-    header.appendChild(counter);\r\n+      const isToday = normalizeDate(date) === todayStr();\r\n+      const now = new Date();\r\n+      const nowHH = `${pad(now.getHours())}:00`;\r\n \r\n-    agendaList.appendChild(header);\r\n+      hours.forEach(hh => {\r\n+        const hourNumber = parseInt(hh.split(':')[0], 10);\r\n+        const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n+        const isNowRow   = isToday && hh === nowHH;\r\n \r\n-    // Corpo\r\n-    const body = document.createElement('div');\r\n-    body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n-    agendaList.appendChild(body);\r\n+        // coluna de horário\r\n+        const timeCell = document.createElement('div');\r\n+        timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n+        timeCell.textContent = hh;\r\n \r\n-    const isToday = normalizeDate(date) === todayStr();\r\n-    const now = new Date();\r\n-    const nowHH = `${pad(now.getHours())}:00`;\r\n+        body.appendChild(timeCell);\r\n \r\n-    hours.forEach(hh => {\r\n-      const hourNumber = parseInt(hh.split(':')[0], 10);\r\n-      const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n-      const isNowRow   = isToday && hh === nowHH;\r\n+        // células por profissional\r\n+        (profs || []).forEach(p => {\r\n+          const cell = document.createElement('div');\r\n+          // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n+          cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n+          cell.dataset.profissionalId = String(p._id);\r\n+          cell.dataset.hh = hh;\r\n+          body.appendChild(cell);\r\n+        });\r\n+      });\r\n \r\n-      const timeCell = document.createElement('div');\r\n-      timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n-      timeCell.textContent = hh;\r\n-      body.appendChild(timeCell);\r\n+      // posiciona cartões\r\n+      let placed = 0;\r\n+      for (const a of items) {\r\n+        const when = a.h || a.scheduledAt;\r\n+        if (!when) continue;\r\n \r\n-      (profs || []).forEach(p => {\r\n-        const cell = document.createElement('div');\r\n-        cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n-        cell.dataset.profissionalId = String(p._id);\r\n-        cell.dataset.hh = hh;\r\n-        body.appendChild(cell);\r\n-      });\r\n-    });\r\n+        const d  = new Date(when);\r\n+        const hh = `${pad(d.getHours())}:00`;\r\n \r\n-    // posiciona cartões\r\n-    let placed = 0;\r\n-    for (const a of items) {\r\n-      const when = a.h || a.scheduledAt;\r\n-      if (!when) continue;\r\n-      const d  = new Date(when);\r\n-      const hh = `${pad(d.getHours())}:00`;\r\n+        let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+        if (!profId) {\r\n+          let nameCandidate = '';\r\n+          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n+          else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n+          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n+          if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n+        }\r\n+        if (!profId) continue;\r\n \r\n-      let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-      if (!profId) {\r\n-        let nameCandidate = '';\r\n-        if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n-        else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n-        const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n-        if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n-      }\r\n-      if (!profId) continue;\r\n+        let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+        if (!col && profs[0]) {\r\n+          col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n+        }\r\n+        if (!col) continue;\r\n \r\n-      let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n-      if (!col && profs[0]) {\r\n-        col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n-      }\r\n-      if (!col) continue;\r\n+        const meta = statusMeta(a.status);\r\n+        const card = document.createElement('div');\r\n+        card.setAttribute('data-appointment-id', a._id || '');\r\n+        card.style.setProperty('--stripe', meta.stripe);\r\n+        card.style.setProperty('--card-max-w', '260px');\r\n+        card.className = `agenda-card border ${meta.borderClass}`;\r\n \r\n-      const meta = statusMeta(a.status);\r\n-      const card = document.createElement('div');\r\n-      card.setAttribute('data-appointment-id', a._id || '');\r\n-      card.style.setProperty('--stripe', meta.stripe);\r\n-      card.style.setProperty('--card-max-w', '260px');\r\n-      card.className = `agenda-card border ${meta.borderClass}`;\r\n+        const headerEl = document.createElement('div');\r\n+        headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+        headerEl.innerHTML = `\r\n+          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n+          ${renderStatusBadge(a.status)}\r\n+        `;\r\n \r\n-      const headerEl = document.createElement('div');\r\n-      headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n-      headerEl.innerHTML = `\r\n-        <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n-        ${renderStatusBadge(a.status)}\r\n-      `;\r\n+        const bodyEl = document.createElement('div');\r\n+        bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+        bodyEl.textContent = a.servico || '';\r\n \r\n-      const bodyEl = document.createElement('div');\r\n-      bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n-      bodyEl.textContent = a.servico || '';\r\n+        const footerEl = document.createElement('div');\r\n+        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+        const price = document.createElement('div');\r\n+        price.className = 'text-[13px] text-gray-800 font-medium';\r\n+        price.textContent = money(a.valor);\r\n \r\n-      const footerEl = document.createElement('div');\r\n-      footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n-      const price = document.createElement('div');\r\n-      price.className = 'text-[13px] text-gray-800 font-medium';\r\n-      price.textContent = money(a.valor);\r\n+        footerEl.appendChild(price);\r\n \r\n-      footerEl.appendChild(price);\r\n+        card.appendChild(headerEl);\r\n+        card.appendChild(bodyEl);\r\n+        card.appendChild(footerEl);\r\n \r\n-      card.appendChild(headerEl);\r\n-      card.appendChild(bodyEl);\r\n-      card.appendChild(footerEl);\r\n+        col.appendChild(card);\r\n+        placed++;\r\n+      }\r\n \r\n-      col.appendChild(card);\r\n-      placed++;\r\n-    }\r\n-\r\n-    if (placed === 0) {\r\n-      const empty = document.createElement('div');\r\n-      empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n-      empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n-      body.appendChild(empty);\r\n-    }\r\n+      if (placed === 0) {\r\n+        const empty = document.createElement('div');\r\n+        empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n+        empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n+        agendaList.insertBefore(empty, header.nextSibling);\r\n+      }\r\n   }\r\n \r\n   // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n   function statusMeta(s) {\r\n"
                },
                {
                    "date": 1757433207213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,165 +337,169 @@\n   }\r\n \r\n   // Grade (sem coluna \"Outros\")\r\n   function renderGrid() {\r\n-      if (!agendaList) return;\r\n+    if (!agendaList) return;\r\n \r\n-      const date = normalizeDate(dateInput?.value || todayStr());\r\n-      if (dateLabelVisible) {\r\n-        dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-      }\r\n+    const date = normalizeDate(dateInput?.value || todayStr());\r\n+    if (dateLabelVisible) {\r\n+      dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+    }\r\n \r\n-      // janelas de trabalho (ajuste se quiser)\r\n-      const BUSINESS_START = 8;   // 08:00\r\n-      const BUSINESS_END   = 19;  // 19:00\r\n+    // 00:00..23:00\r\n+    const hours = Array.from({ length: 24 }, (_, h) => `${pad(h)}:00`);\r\n+    clearChildren(agendaList);\r\n \r\n-      const hours = [];\r\n-      for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+    const profsAll = state.profissionais || [];\r\n+    let profs = getVisibleProfissionais();\r\n \r\n-      clearChildren(agendaList);\r\n+    // Mapa nome→_id para resolver itens que só têm o nome do profissional\r\n+    const byNameAll = new Map(\r\n+      (profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n+    );\r\n \r\n-      const profsAll  = state.profissionais || [];\r\n-      const profs     = getVisibleProfissionais();\r\n-      const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n-\r\n-      const colCount = 1 + (profs?.length || 0);\r\n-\r\n-      // Cabeçalho\r\n-      const header = document.createElement('div');\r\n-      header.style.display = 'grid';\r\n-      // >>> LARGURA FIXA POR COLUNA: igual ao corpo (evita “vão gigante”)\r\n-      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n-      header.className = 'bg-white border-b';\r\n-\r\n-      const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n-      headLabels.forEach((label, idx) => {\r\n-        const cell = document.createElement('div');\r\n-        cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n-        if (idx === 0) {\r\n-          cell.textContent = label;\r\n+    // Quando NÃO há filtro de profissional, mostra só colunas de quem tem agendamento no dia\r\n+    if (!state.filters.profIds.size && Array.isArray(state.agendamentos)) {\r\n+      const withItems = new Set();\r\n+      for (const a of state.agendamentos) {\r\n+        let pid = a && a.profissionalId ? String(a.profissionalId) : null;\r\n+        if (!pid) {\r\n+          let nameCandidate = '';\r\n+          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n+          else if (a.profissional && typeof a.profissional === 'object') {\r\n+            nameCandidate = a.profissional.nome || a.profissional.nomeCompleto ||\r\n+                            a.profissional.nomeContato || a.profissional.razaoSocial || '';\r\n+          }\r\n+          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n+          if (normalized && byNameAll.has(normalized)) pid = String(byNameAll.get(normalized));\r\n         }\r\n-        else {\r\n-          // >>> centraliza o nome do profissional\r\n-          cell.style.textAlign = 'center';\r\n-          const span = document.createElement('span');\r\n-          span.className = 'agenda-head-label inline-block';\r\n-          span.textContent = label || '';\r\n-          cell.dataset.profId = String(profs[idx - 1]._id);\r\n-          cell.appendChild(span);\r\n-        }\r\n-        header.appendChild(cell);\r\n-      });\r\n+        if (pid) withItems.add(pid);\r\n+      }\r\n+      if (withItems.size) {\r\n+        const original = profs;\r\n+        profs = (profs || []).filter(p => withItems.has(String(p._id)));\r\n+        if (!profs.length) profs = original; // fallback seguro\r\n+      }\r\n+    }\r\n \r\n-      const counter = document.createElement('div');\r\n-      counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n-      const itemsAll = state.agendamentos || [];\r\n-      const items    = getFilteredAgendamentos(itemsAll);\r\n-      const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n-      counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n-      header.appendChild(counter);\r\n+    const colCount = 1 + (profs?.length || 0);\r\n \r\n-      agendaList.appendChild(header);\r\n+    // Cabeçalho\r\n+    const header = document.createElement('div');\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n+    header.className = 'bg-white border-b';\r\n \r\n-      // Corpo\r\n-      const body = document.createElement('div');\r\n-      body.style.display = 'grid';\r\n-      // >>> LARGURA FIXA POR COLUNA: fica do tamanho do card + folga\r\n-      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n-      agendaList.appendChild(body);\r\n+    const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n+    headLabels.forEach((label, idx) => {\r\n+      const cell = document.createElement('div');\r\n+      cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n+      if (idx === 0) {\r\n+        cell.textContent = label;\r\n+      } else {\r\n+        cell.style.textAlign = 'center';\r\n+        const span = document.createElement('span');\r\n+        span.className = 'agenda-head-label inline-block';\r\n+        span.textContent = label || '';\r\n+        cell.dataset.profId = String(profs[idx - 1]._id);\r\n+        cell.appendChild(span);\r\n+      }\r\n+      header.appendChild(cell);\r\n+    });\r\n+    agendaList.appendChild(header);\r\n \r\n-      const isToday = normalizeDate(date) === todayStr();\r\n-      const now = new Date();\r\n-      const nowHH = `${pad(now.getHours())}:00`;\r\n+    // Corpo\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n+    agendaList.appendChild(body);\r\n \r\n-      hours.forEach(hh => {\r\n-        const hourNumber = parseInt(hh.split(':')[0], 10);\r\n-        const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n-        const isNowRow   = isToday && hh === nowHH;\r\n+    const isToday = normalizeDate(date) === todayStr();\r\n+    const nowHH = `${pad(new Date().getHours())}:00`;\r\n \r\n-        // coluna de horário\r\n-        const timeCell = document.createElement('div');\r\n-        timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n-        timeCell.textContent = hh;\r\n+    hours.forEach(hh => {\r\n+      const isNowRow = isToday && hh === nowHH;\r\n \r\n-        body.appendChild(timeCell);\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = 'px-3 py-3 border-b text-sm ' +\r\n+        (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n+      timeCell.textContent = hh;\r\n+      body.appendChild(timeCell);\r\n \r\n-        // células por profissional\r\n-        (profs || []).forEach(p => {\r\n-          const cell = document.createElement('div');\r\n-          // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n-          cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n-          cell.dataset.profissionalId = String(p._id);\r\n-          cell.dataset.hh = hh;\r\n-          body.appendChild(cell);\r\n-        });\r\n+      (profs || []).forEach(p => {\r\n+        const cell = document.createElement('div');\r\n+        cell.className = `px-2 py-2 border-b agenda-slot ${isNowRow ? 'bg-sky-50' : ''}`;\r\n+        cell.dataset.profissionalId = String(p._id);\r\n+        cell.dataset.hh = hh;\r\n+        body.appendChild(cell);\r\n       });\r\n+    });\r\n \r\n-      // posiciona cartões\r\n-      let placed = 0;\r\n-      for (const a of items) {\r\n-        const when = a.h || a.scheduledAt;\r\n-        if (!when) continue;\r\n+    // Cartões (respeitam filtros ativos)\r\n+    const items = getFilteredAgendamentos();\r\n+    let placed = 0;\r\n \r\n-        const d  = new Date(when);\r\n-        const hh = `${pad(d.getHours())}:00`;\r\n+    for (const a of items) {\r\n+      const when = a.h || a.scheduledAt;\r\n+      if (!when) continue;\r\n+      const d = new Date(when);\r\n+      const hh = `${pad(d.getHours())}:00`;\r\n \r\n-        let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-        if (!profId) {\r\n-          let nameCandidate = '';\r\n-          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n-          else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n-          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n-          if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n+      let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+      if (!profId) {\r\n+        let nameCandidate = '';\r\n+        if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n+        else if (a.profissional && typeof a.profissional === 'object') {\r\n+          nameCandidate = a.profissional.nome || a.profissional.nomeCompleto ||\r\n+                          a.profissional.nomeContato || a.profissional.razaoSocial || '';\r\n         }\r\n-        if (!profId) continue;\r\n+        const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n+        if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n+      }\r\n+      if (!profId) continue;\r\n \r\n-        let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n-        if (!col && profs[0]) {\r\n-          col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n-        }\r\n-        if (!col) continue;\r\n+      const col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+      if (!col) continue;\r\n \r\n-        const meta = statusMeta(a.status);\r\n-        const card = document.createElement('div');\r\n-        card.setAttribute('data-appointment-id', a._id || '');\r\n-        card.style.setProperty('--stripe', meta.stripe);\r\n-        card.style.setProperty('--card-max-w', '260px');\r\n-        card.className = `agenda-card border ${meta.borderClass}`;\r\n+      const meta = statusMeta(a.status);\r\n \r\n-        const headerEl = document.createElement('div');\r\n-        headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n-        headerEl.innerHTML = `\r\n-          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n-          ${renderStatusBadge(a.status)}\r\n-        `;\r\n+      const card = document.createElement('div');\r\n+      card.setAttribute('data-appointment-id', a._id || '');\r\n+      card.style.setProperty('--stripe', meta.stripe);\r\n+      card.className = `agenda-card border ${meta.borderClass}`; // largura via CSS (100%)\r\n \r\n-        const bodyEl = document.createElement('div');\r\n-        bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n-        bodyEl.textContent = a.servico || '';\r\n+      const headerEl = document.createElement('div');\r\n+      headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+      headerEl.innerHTML = `\r\n+        <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n+        ${renderStatusBadge(a.status)}\r\n+      `;\r\n \r\n-        const footerEl = document.createElement('div');\r\n-        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n-        const price = document.createElement('div');\r\n-        price.className = 'text-[13px] text-gray-800 font-medium';\r\n-        price.textContent = money(a.valor);\r\n+      const bodyEl = document.createElement('div');\r\n+      bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+      bodyEl.textContent = a.servico || '';\r\n \r\n-        footerEl.appendChild(price);\r\n+      const footerEl = document.createElement('div');\r\n+      footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+      const price = document.createElement('div');\r\n+      price.className = 'text-[13px] text-gray-800 font-medium';\r\n+      price.textContent = money(a.valor);\r\n \r\n-        card.appendChild(headerEl);\r\n-        card.appendChild(bodyEl);\r\n-        card.appendChild(footerEl);\r\n+      footerEl.appendChild(price);\r\n+      card.appendChild(headerEl);\r\n+      card.appendChild(bodyEl);\r\n+      card.appendChild(footerEl);\r\n \r\n-        col.appendChild(card);\r\n-        placed++;\r\n-      }\r\n+      col.appendChild(card);\r\n+      placed++;\r\n+    }\r\n \r\n-      if (placed === 0) {\r\n-        const empty = document.createElement('div');\r\n-        empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n-        empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n-        agendaList.insertBefore(empty, header.nextSibling);\r\n-      }\r\n+    if (!placed) {\r\n+      const empty = document.createElement('div');\r\n+      empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n+      empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n+      body.appendChild(empty);\r\n+    }\r\n   }\r\n \r\n   // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n   function statusMeta(s) {\r\n"
                },
                {
                    "date": 1757433219517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,169 +337,165 @@\n   }\r\n \r\n   // Grade (sem coluna \"Outros\")\r\n   function renderGrid() {\r\n-    if (!agendaList) return;\r\n+      if (!agendaList) return;\r\n \r\n-    const date = normalizeDate(dateInput?.value || todayStr());\r\n-    if (dateLabelVisible) {\r\n-      dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-    }\r\n+      const date = normalizeDate(dateInput?.value || todayStr());\r\n+      if (dateLabelVisible) {\r\n+        dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      }\r\n \r\n-    // 00:00..23:00\r\n-    const hours = Array.from({ length: 24 }, (_, h) => `${pad(h)}:00`);\r\n-    clearChildren(agendaList);\r\n+      // janelas de trabalho (ajuste se quiser)\r\n+      const BUSINESS_START = 8;   // 08:00\r\n+      const BUSINESS_END   = 19;  // 19:00\r\n \r\n-    const profsAll = state.profissionais || [];\r\n-    let profs = getVisibleProfissionais();\r\n+      const hours = [];\r\n+      for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n-    // Mapa nome→_id para resolver itens que só têm o nome do profissional\r\n-    const byNameAll = new Map(\r\n-      (profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n-    );\r\n+      clearChildren(agendaList);\r\n \r\n-    // Quando NÃO há filtro de profissional, mostra só colunas de quem tem agendamento no dia\r\n-    if (!state.filters.profIds.size && Array.isArray(state.agendamentos)) {\r\n-      const withItems = new Set();\r\n-      for (const a of state.agendamentos) {\r\n-        let pid = a && a.profissionalId ? String(a.profissionalId) : null;\r\n-        if (!pid) {\r\n-          let nameCandidate = '';\r\n-          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n-          else if (a.profissional && typeof a.profissional === 'object') {\r\n-            nameCandidate = a.profissional.nome || a.profissional.nomeCompleto ||\r\n-                            a.profissional.nomeContato || a.profissional.razaoSocial || '';\r\n-          }\r\n-          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n-          if (normalized && byNameAll.has(normalized)) pid = String(byNameAll.get(normalized));\r\n+      const profsAll  = state.profissionais || [];\r\n+      const profs     = getVisibleProfissionais();\r\n+      const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n+\r\n+      const colCount = 1 + (profs?.length || 0);\r\n+\r\n+      // Cabeçalho\r\n+      const header = document.createElement('div');\r\n+      header.style.display = 'grid';\r\n+      // >>> LARGURA FIXA POR COLUNA: igual ao corpo (evita “vão gigante”)\r\n+      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n+      header.className = 'bg-white border-b';\r\n+\r\n+      const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n+      headLabels.forEach((label, idx) => {\r\n+        const cell = document.createElement('div');\r\n+        cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n+        if (idx === 0) {\r\n+          cell.textContent = label;\r\n         }\r\n-        if (pid) withItems.add(pid);\r\n-      }\r\n-      if (withItems.size) {\r\n-        const original = profs;\r\n-        profs = (profs || []).filter(p => withItems.has(String(p._id)));\r\n-        if (!profs.length) profs = original; // fallback seguro\r\n-      }\r\n-    }\r\n+        else {\r\n+          // >>> centraliza o nome do profissional\r\n+          cell.style.textAlign = 'center';\r\n+          const span = document.createElement('span');\r\n+          span.className = 'agenda-head-label inline-block';\r\n+          span.textContent = label || '';\r\n+          cell.dataset.profId = String(profs[idx - 1]._id);\r\n+          cell.appendChild(span);\r\n+        }\r\n+        header.appendChild(cell);\r\n+      });\r\n \r\n-    const colCount = 1 + (profs?.length || 0);\r\n+      const counter = document.createElement('div');\r\n+      counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n+      const itemsAll = state.agendamentos || [];\r\n+      const items    = getFilteredAgendamentos(itemsAll);\r\n+      const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n+      counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n+      header.appendChild(counter);\r\n \r\n-    // Cabeçalho\r\n-    const header = document.createElement('div');\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n-    header.className = 'bg-white border-b';\r\n+      agendaList.appendChild(header);\r\n \r\n-    const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n-    headLabels.forEach((label, idx) => {\r\n-      const cell = document.createElement('div');\r\n-      cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n-      if (idx === 0) {\r\n-        cell.textContent = label;\r\n-      } else {\r\n-        cell.style.textAlign = 'center';\r\n-        const span = document.createElement('span');\r\n-        span.className = 'agenda-head-label inline-block';\r\n-        span.textContent = label || '';\r\n-        cell.dataset.profId = String(profs[idx - 1]._id);\r\n-        cell.appendChild(span);\r\n-      }\r\n-      header.appendChild(cell);\r\n-    });\r\n-    agendaList.appendChild(header);\r\n+      // Corpo\r\n+      const body = document.createElement('div');\r\n+      body.style.display = 'grid';\r\n+      // >>> LARGURA FIXA POR COLUNA: fica do tamanho do card + folga\r\n+      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n+      agendaList.appendChild(body);\r\n \r\n-    // Corpo\r\n-    const body = document.createElement('div');\r\n-    body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n-    agendaList.appendChild(body);\r\n+      const isToday = normalizeDate(date) === todayStr();\r\n+      const now = new Date();\r\n+      const nowHH = `${pad(now.getHours())}:00`;\r\n \r\n-    const isToday = normalizeDate(date) === todayStr();\r\n-    const nowHH = `${pad(new Date().getHours())}:00`;\r\n+      hours.forEach(hh => {\r\n+        const hourNumber = parseInt(hh.split(':')[0], 10);\r\n+        const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n+        const isNowRow   = isToday && hh === nowHH;\r\n \r\n-    hours.forEach(hh => {\r\n-      const isNowRow = isToday && hh === nowHH;\r\n+        // coluna de horário\r\n+        const timeCell = document.createElement('div');\r\n+        timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n+        timeCell.textContent = hh;\r\n \r\n-      const timeCell = document.createElement('div');\r\n-      timeCell.className = 'px-3 py-3 border-b text-sm ' +\r\n-        (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n-      timeCell.textContent = hh;\r\n-      body.appendChild(timeCell);\r\n+        body.appendChild(timeCell);\r\n \r\n-      (profs || []).forEach(p => {\r\n-        const cell = document.createElement('div');\r\n-        cell.className = `px-2 py-2 border-b agenda-slot ${isNowRow ? 'bg-sky-50' : ''}`;\r\n-        cell.dataset.profissionalId = String(p._id);\r\n-        cell.dataset.hh = hh;\r\n-        body.appendChild(cell);\r\n+        // células por profissional\r\n+        (profs || []).forEach(p => {\r\n+          const cell = document.createElement('div');\r\n+          // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n+          cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n+          cell.dataset.profissionalId = String(p._id);\r\n+          cell.dataset.hh = hh;\r\n+          body.appendChild(cell);\r\n+        });\r\n       });\r\n-    });\r\n \r\n-    // Cartões (respeitam filtros ativos)\r\n-    const items = getFilteredAgendamentos();\r\n-    let placed = 0;\r\n+      // posiciona cartões\r\n+      let placed = 0;\r\n+      for (const a of items) {\r\n+        const when = a.h || a.scheduledAt;\r\n+        if (!when) continue;\r\n \r\n-    for (const a of items) {\r\n-      const when = a.h || a.scheduledAt;\r\n-      if (!when) continue;\r\n-      const d = new Date(when);\r\n-      const hh = `${pad(d.getHours())}:00`;\r\n+        const d  = new Date(when);\r\n+        const hh = `${pad(d.getHours())}:00`;\r\n \r\n-      let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-      if (!profId) {\r\n-        let nameCandidate = '';\r\n-        if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n-        else if (a.profissional && typeof a.profissional === 'object') {\r\n-          nameCandidate = a.profissional.nome || a.profissional.nomeCompleto ||\r\n-                          a.profissional.nomeContato || a.profissional.razaoSocial || '';\r\n+        let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+        if (!profId) {\r\n+          let nameCandidate = '';\r\n+          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n+          else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n+          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n+          if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n         }\r\n-        const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n-        if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n-      }\r\n-      if (!profId) continue;\r\n+        if (!profId) continue;\r\n \r\n-      const col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n-      if (!col) continue;\r\n+        let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+        if (!col && profs[0]) {\r\n+          col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n+        }\r\n+        if (!col) continue;\r\n \r\n-      const meta = statusMeta(a.status);\r\n+        const meta = statusMeta(a.status);\r\n+        const card = document.createElement('div');\r\n+        card.setAttribute('data-appointment-id', a._id || '');\r\n+        card.style.setProperty('--stripe', meta.stripe);\r\n+        card.style.setProperty('--card-max-w', '260px');\r\n+        card.className = `agenda-card border ${meta.borderClass}`;\r\n \r\n-      const card = document.createElement('div');\r\n-      card.setAttribute('data-appointment-id', a._id || '');\r\n-      card.style.setProperty('--stripe', meta.stripe);\r\n-      card.className = `agenda-card border ${meta.borderClass}`; // largura via CSS (100%)\r\n+        const headerEl = document.createElement('div');\r\n+        headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+        headerEl.innerHTML = `\r\n+          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n+          ${renderStatusBadge(a.status)}\r\n+        `;\r\n \r\n-      const headerEl = document.createElement('div');\r\n-      headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n-      headerEl.innerHTML = `\r\n-        <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n-        ${renderStatusBadge(a.status)}\r\n-      `;\r\n+        const bodyEl = document.createElement('div');\r\n+        bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+        bodyEl.textContent = a.servico || '';\r\n \r\n-      const bodyEl = document.createElement('div');\r\n-      bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n-      bodyEl.textContent = a.servico || '';\r\n+        const footerEl = document.createElement('div');\r\n+        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+        const price = document.createElement('div');\r\n+        price.className = 'text-[13px] text-gray-800 font-medium';\r\n+        price.textContent = money(a.valor);\r\n \r\n-      const footerEl = document.createElement('div');\r\n-      footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n-      const price = document.createElement('div');\r\n-      price.className = 'text-[13px] text-gray-800 font-medium';\r\n-      price.textContent = money(a.valor);\r\n+        footerEl.appendChild(price);\r\n \r\n-      footerEl.appendChild(price);\r\n-      card.appendChild(headerEl);\r\n-      card.appendChild(bodyEl);\r\n-      card.appendChild(footerEl);\r\n+        card.appendChild(headerEl);\r\n+        card.appendChild(bodyEl);\r\n+        card.appendChild(footerEl);\r\n \r\n-      col.appendChild(card);\r\n-      placed++;\r\n-    }\r\n+        col.appendChild(card);\r\n+        placed++;\r\n+      }\r\n \r\n-    if (!placed) {\r\n-      const empty = document.createElement('div');\r\n-      empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n-      empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n-      body.appendChild(empty);\r\n-    }\r\n+      if (placed === 0) {\r\n+        const empty = document.createElement('div');\r\n+        empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n+        empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n+        agendaList.insertBefore(empty, header.nextSibling);\r\n+      }\r\n   }\r\n \r\n   // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n   function statusMeta(s) {\r\n"
                },
                {
                    "date": 1757434228520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -362,10 +362,10 @@\n \r\n       // Cabeçalho\r\n       const header = document.createElement('div');\r\n       header.style.display = 'grid';\r\n-      // >>> LARGURA FIXA POR COLUNA: igual ao corpo (evita “vão gigante”)\r\n-      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n+      // >>> COLUNAS ELÁSTICAS: ocupam o espaço restante sem “vão” à direita\r\n+      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n       header.className = 'bg-white border-b';\r\n \r\n       const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n       headLabels.forEach((label, idx) => {\r\n@@ -398,10 +398,10 @@\n \r\n       // Corpo\r\n       const body = document.createElement('div');\r\n       body.style.display = 'grid';\r\n-      // >>> LARGURA FIXA POR COLUNA: fica do tamanho do card + folga\r\n-      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, var(--agenda-col-w, 360px))`;\r\n+      // >>> COLUNAS ELÁSTICAS: cada profissional tem no mínimo 360px e expande até preencher\r\n+      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n       agendaList.appendChild(body);\r\n \r\n       const isToday = normalizeDate(date) === todayStr();\r\n       const now = new Date();\r\n"
                },
                {
                    "date": 1757434801999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -462,9 +462,10 @@\n         card.style.setProperty('--card-max-w', '260px');\r\n         card.className = `agenda-card border ${meta.borderClass}`;\r\n \r\n         const headerEl = document.createElement('div');\r\n-        headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+        // reserva espaço à direita para os botões flutuantes (evita o chip “ficar por baixo”)\r\n+        headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n         headerEl.innerHTML = `\r\n           <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n           ${renderStatusBadge(a.status)}\r\n         `;\r\n@@ -547,9 +548,10 @@\n   }\r\n \r\n   function renderStatusBadge(s) {\r\n     const { label, badgeClass } = statusMeta(s);\r\n-    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${badgeClass}\">${label}</span>`;\r\n+    // `whitespace-nowrap` garante que o chip não quebre em duas linhas\r\n+    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium whitespace-nowrap ${badgeClass}\">${label}</span>`;\r\n   }\r\n \r\n   // Modal — modo adicionar\r\n   function openAddModal() {\r\n"
                },
                {
                    "date": 1757437500226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1158,14 +1158,102 @@\n       alert(e.message || 'Erro ao mudar status');\r\n     }\r\n   }\r\n \r\n+  // === Impressão em cupom (80mm) ===\r\n+function buildCupomHTML(items, meta = {}) {\r\n+  const storeName = (meta.storeName || '').trim();\r\n+  const dateStr   = (meta.dateStr || '').trim();\r\n+\r\n+  const rows = (items || []).map(a => {\r\n+    const pet   = (a.pet || '').toString().trim();\r\n+    const serv  = (a.servico || '').toString().trim();\r\n+    const valor = money(Number(a.valor || 0));\r\n+    // Linha única: \"Pet Serviço - R$ X\"\r\n+    return `<div class=\"row\"><span class=\"txt\">${pet} ${serv}</span><span class=\"val\">${valor}</span></div>`;\r\n+  }).join('');\r\n+\r\n+  return `\r\n+<!doctype html>\r\n+<html>\r\n+<head>\r\n+  <meta charset=\"utf-8\">\r\n+  <title>Impressão</title>\r\n+  <style>\r\n+    @page { size: 80mm auto; margin: 3mm; }\r\n+    * { box-sizing: border-box; }\r\n+    html, body { padding: 0; margin: 0; }\r\n+    body { width: 74mm; font: 12px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\"; color: #111; }\r\n+    .wrap { padding: 2mm 0; }\r\n+    .h1 { text-align:center; font-weight:600; font-size: 14px; margin-bottom: 1mm; }\r\n+    .meta { text-align:center; font-size: 11px; color:#333; margin-bottom: 2mm; }\r\n+    .hr { border-top: 1px dashed #555; margin: 2mm 0; }\r\n+    .row { display:flex; align-items:flex-start; justify-content:space-between; gap: 4mm; padding: 1mm 0; }\r\n+    .row .txt { flex: 1 1 auto; word-break: break-word; }\r\n+    .row .val { flex: 0 0 auto; white-space: nowrap; }\r\n+    .foot { text-align:center; margin-top: 2mm; font-size: 11px; color:#333; }\r\n+    @media print { .no-print { display: none !important; } }\r\n+  </style>\r\n+</head>\r\n+<body>\r\n+  <div class=\"wrap\">\r\n+    <div class=\"h1\">Agenda</div>\r\n+    <div class=\"meta\">${storeName ? storeName + ' • ' : ''}${dateStr}</div>\r\n+    <div class=\"hr\"></div>\r\n+    ${rows || '<div class=\"row\"><span class=\"txt\">Sem itens</span><span class=\"val\"></span></div>'}\r\n+    <div class=\"hr\"></div>\r\n+    <div class=\"foot\">Obrigado!</div>\r\n+  </div>\r\n+  <script>\r\n+    window.onload = function(){ setTimeout(function(){ window.print(); }, 50); };\r\n+    window.onafterprint = function(){ setTimeout(function(){ window.close(); }, 50); };\r\n+  </script>\r\n+</body>\r\n+</html>`;\r\n+}\r\n+\r\n+function handlePrintCupom() {\r\n+  try {\r\n+    const items = getFilteredAgendamentos();\r\n+\r\n+    // Ordena por horário (se houver)\r\n+    items.sort((a, b) => {\r\n+      const da = new Date(a.h || a.scheduledAt || 0).getTime();\r\n+      const db = new Date(b.h || b.scheduledAt || 0).getTime();\r\n+      return da - db;\r\n+    });\r\n+\r\n+    const dateStr =\r\n+      (document.getElementById('agenda-date-label-visible')?.textContent || '').trim() ||\r\n+      new Date((normalizeDate(dateInput?.value || todayStr())) + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+\r\n+    const storeName =\r\n+      (document.getElementById('agenda-store-label-visible')?.textContent || '').trim();\r\n+\r\n+    const html = buildCupomHTML(items, { storeName, dateStr });\r\n+\r\n+    const w = window.open('', 'print_cupom', 'width=420,height=600');\r\n+    if (!w) { alert('O navegador bloqueou a janela de impressão. Habilite pop-ups para continuar.'); return; }\r\n+    w.document.open('text/html');\r\n+    w.document.write(html);\r\n+    w.document.close();\r\n+    w.focus();\r\n+  } catch (e) {\r\n+    console.error('handlePrintCupom', e);\r\n+    alert('Não foi possível preparar a impressão.');\r\n+  }\r\n+}\r\n+\r\n   // Events\r\n   addBtn?.addEventListener('click', openAddModal);\r\n   modalClose?.addEventListener('click', closeModal);\r\n   modalCancel?.addEventListener('click', closeModal);\r\n   modalSave?.addEventListener('click', saveAgendamento);\r\n \r\n+  // Botão \"Imprimir\" (impressão de cupom 80mm com \"Pet Serviço - Valor\")\r\n+  const printBtn = document.getElementById('print-agenda-btn');\r\n+  printBtn?.addEventListener('click', handlePrintCupom);\r\n+\r\n   cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n   servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n \r\n   modalDelete?.addEventListener('click', handleDelete);\r\n"
                },
                {
                    "date": 1757438032875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1158,101 +1158,113 @@\n       alert(e.message || 'Erro ao mudar status');\r\n     }\r\n   }\r\n \r\n-  // === Impressão em cupom (80mm) ===\r\n-function buildCupomHTML(items, meta = {}) {\r\n-  const storeName = (meta.storeName || '').trim();\r\n-  const dateStr   = (meta.dateStr || '').trim();\r\n+    // === Impressão em cupom (80mm) ===\r\n+  function buildCupomHTML(items, meta = {}) {\r\n+    const storeName = (meta.storeName || '').trim();\r\n+    const dateStr   = (meta.dateStr || '').trim();\r\n \r\n-  const rows = (items || []).map(a => {\r\n-    const pet   = (a.pet || '').toString().trim();\r\n-    const serv  = (a.servico || '').toString().trim();\r\n-    const valor = money(Number(a.valor || 0));\r\n-    // Linha única: \"Pet Serviço - R$ X\"\r\n-    return `<div class=\"row\"><span class=\"txt\">${pet} ${serv}</span><span class=\"val\">${valor}</span></div>`;\r\n-  }).join('');\r\n+    const rows = (items || []).map(a => {\r\n+      const pet   = (a.pet || '').toString().trim();\r\n+      const serv  = (a.servico || '').toString().trim();\r\n+      const valor = money(Number(a.valor || 0));\r\n+      // Linha única: \"Pet Serviço - R$ X\"\r\n+      return `<div class=\"row\"><span class=\"txt\">${pet} ${serv}</span><span class=\"val\">${valor}</span></div>`;\r\n+    }).join('');\r\n \r\n-  return `\r\n-<!doctype html>\r\n-<html>\r\n-<head>\r\n-  <meta charset=\"utf-8\">\r\n-  <title>Impressão</title>\r\n-  <style>\r\n-    @page { size: 80mm auto; margin: 3mm; }\r\n-    * { box-sizing: border-box; }\r\n-    html, body { padding: 0; margin: 0; }\r\n-    body { width: 74mm; font: 12px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\"; color: #111; }\r\n-    .wrap { padding: 2mm 0; }\r\n-    .h1 { text-align:center; font-weight:600; font-size: 14px; margin-bottom: 1mm; }\r\n-    .meta { text-align:center; font-size: 11px; color:#333; margin-bottom: 2mm; }\r\n-    .hr { border-top: 1px dashed #555; margin: 2mm 0; }\r\n-    .row { display:flex; align-items:flex-start; justify-content:space-between; gap: 4mm; padding: 1mm 0; }\r\n-    .row .txt { flex: 1 1 auto; word-break: break-word; }\r\n-    .row .val { flex: 0 0 auto; white-space: nowrap; }\r\n-    .foot { text-align:center; margin-top: 2mm; font-size: 11px; color:#333; }\r\n-    @media print { .no-print { display: none !important; } }\r\n-  </style>\r\n-</head>\r\n-<body>\r\n-  <div class=\"wrap\">\r\n-    <div class=\"h1\">Agenda</div>\r\n-    <div class=\"meta\">${storeName ? storeName + ' • ' : ''}${dateStr}</div>\r\n-    <div class=\"hr\"></div>\r\n-    ${rows || '<div class=\"row\"><span class=\"txt\">Sem itens</span><span class=\"val\"></span></div>'}\r\n-    <div class=\"hr\"></div>\r\n-    <div class=\"foot\">Obrigado!</div>\r\n-  </div>\r\n-  <script>\r\n-    window.onload = function(){ setTimeout(function(){ window.print(); }, 50); };\r\n-    window.onafterprint = function(){ setTimeout(function(){ window.close(); }, 50); };\r\n-  </script>\r\n-</body>\r\n-</html>`;\r\n-}\r\n+    return `\r\n+  <!doctype html>\r\n+  <html>\r\n+  <head>\r\n+    <meta charset=\"utf-8\">\r\n+    <title>Impressão</title>\r\n+    <style>\r\n+      @page { size: 80mm auto; margin: 3mm; }\r\n+      * { box-sizing: border-box; }\r\n+      html, body { padding: 0; margin: 0; }\r\n+      body { width: 74mm; font: 12px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\"; color: #111; }\r\n+      .wrap { padding: 2mm 0; }\r\n+      .h1 { text-align:center; font-weight:600; font-size: 14px; margin-bottom: 1mm; }\r\n+      .meta { text-align:center; font-size: 11px; color:#333; margin-bottom: 2mm; }\r\n+      .hr { border-top: 1px dashed #555; margin: 2mm 0; }\r\n+      .row { display:flex; align-items:flex-start; justify-content:space-between; gap: 4mm; padding: 1mm 0; }\r\n+      .row .txt { flex: 1 1 auto; word-break: break-word; }\r\n+      .row .val { flex: 0 0 auto; white-space: nowrap; }\r\n+      .foot { text-align:center; margin-top: 2mm; font-size: 11px; color:#333; }\r\n+      @media print { .no-print { display: none !important; } }\r\n+    </style>\r\n+  </head>\r\n+  <body>\r\n+    <div class=\"wrap\">\r\n+      <div class=\"h1\">Agenda</div>\r\n+      <div class=\"meta\">${storeName ? storeName + ' • ' : ''}${dateStr}</div>\r\n+      <div class=\"hr\"></div>\r\n+      ${rows || '<div class=\"row\"><span class=\"txt\">Sem itens</span><span class=\"val\"></span></div>'}\r\n+      <div class=\"hr\"></div>\r\n+      <div class=\"foot\">Obrigado!</div>\r\n+    </div>\r\n+    <script>\r\n+      window.onload = function(){ setTimeout(function(){ window.print(); }, 50); };\r\n+      window.onafterprint = function(){ setTimeout(function(){ window.close(); }, 50); };\r\n+    </script>\r\n+  </body>\r\n+  </html>`;\r\n+  }\r\n \r\n-function handlePrintCupom() {\r\n-  try {\r\n-    const items = getFilteredAgendamentos();\r\n+  function handlePrintCupom() {\r\n+    try {\r\n+      const items = getFilteredAgendamentos();\r\n \r\n-    // Ordena por horário (se houver)\r\n-    items.sort((a, b) => {\r\n-      const da = new Date(a.h || a.scheduledAt || 0).getTime();\r\n-      const db = new Date(b.h || b.scheduledAt || 0).getTime();\r\n-      return da - db;\r\n-    });\r\n+      // Ordena por horário (se houver)\r\n+      items.sort((a, b) => {\r\n+        const da = new Date(a.h || a.scheduledAt || 0).getTime();\r\n+        const db = new Date(b.h || b.scheduledAt || 0).getTime();\r\n+        return da - db;\r\n+      });\r\n \r\n-    const dateStr =\r\n-      (document.getElementById('agenda-date-label-visible')?.textContent || '').trim() ||\r\n-      new Date((normalizeDate(dateInput?.value || todayStr())) + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      const dateStr =\r\n+        (document.getElementById('agenda-date-label-visible')?.textContent || '').trim() ||\r\n+        new Date((normalizeDate(dateInput?.value || todayStr())) + 'T00:00:00').toLocaleDateString('pt-BR');\r\n \r\n-    const storeName =\r\n-      (document.getElementById('agenda-store-label-visible')?.textContent || '').trim();\r\n+      const storeName =\r\n+        (document.getElementById('agenda-store-label-visible')?.textContent || '').trim();\r\n \r\n-    const html = buildCupomHTML(items, { storeName, dateStr });\r\n+      const html = buildCupomHTML(items, { storeName, dateStr });\r\n \r\n-    const w = window.open('', 'print_cupom', 'width=420,height=600');\r\n-    if (!w) { alert('O navegador bloqueou a janela de impressão. Habilite pop-ups para continuar.'); return; }\r\n-    w.document.open('text/html');\r\n-    w.document.write(html);\r\n-    w.document.close();\r\n-    w.focus();\r\n-  } catch (e) {\r\n-    console.error('handlePrintCupom', e);\r\n-    alert('Não foi possível preparar a impressão.');\r\n+      const w = window.open('', 'print_cupom', 'width=420,height=600');\r\n+      if (!w) { alert('O navegador bloqueou a janela de impressão. Habilite pop-ups para continuar.'); return; }\r\n+      w.document.open('text/html');\r\n+      w.document.write(html);\r\n+      w.document.close();\r\n+      w.focus();\r\n+    } catch (e) {\r\n+      console.error('handlePrintCupom', e);\r\n+      alert('Não foi possível preparar a impressão.');\r\n+    }\r\n   }\r\n-}\r\n \r\n   // Events\r\n   addBtn?.addEventListener('click', openAddModal);\r\n   modalClose?.addEventListener('click', closeModal);\r\n   modalCancel?.addEventListener('click', closeModal);\r\n   modalSave?.addEventListener('click', saveAgendamento);\r\n \r\n-  // Botão \"Imprimir\" (impressão de cupom 80mm com \"Pet Serviço - Valor\")\r\n-  const printBtn = document.getElementById('print-agenda-btn');\r\n-  printBtn?.addEventListener('click', handlePrintCupom);\r\n+  // Botão \"Imprimir\" — cupom 80mm com \"Pet Serviço - Valor\"\r\n+    (function () {\r\n+      const btn0 = document.getElementById('print-agenda-btn');\r\n+      // (se algum listener antigo ainda existir em outro build, garantimos o nosso fluxo)\r\n+      if (btn0) {\r\n+        // remove listeners antigos (se houver) clonando o nó\r\n+        const clone = btn0.cloneNode(true);\r\n+        btn0.parentNode.replaceChild(clone, btn0);\r\n+        clone.addEventListener('click', (ev) => {\r\n+          ev.preventDefault();\r\n+          ev.stopImmediatePropagation?.();\r\n+          handlePrintCupom();\r\n+        });\r\n+      }\r\n+    })();\r\n \r\n   cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n   servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n \r\n"
                },
                {
                    "date": 1757438195868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1167,9 +1167,9 @@\n     const rows = (items || []).map(a => {\r\n       const pet   = (a.pet || '').toString().trim();\r\n       const serv  = (a.servico || '').toString().trim();\r\n       const valor = money(Number(a.valor || 0));\r\n-      // Linha única: \"Pet Serviço - R$ X\"\r\n+      // \"Pet Serviço - Valor\" em linha única\r\n       return `<div class=\"row\"><span class=\"txt\">${pet} ${serv}</span><span class=\"val\">${valor}</span></div>`;\r\n     }).join('');\r\n \r\n     return `\r\n@@ -1181,17 +1181,25 @@\n     <style>\r\n       @page { size: 80mm auto; margin: 3mm; }\r\n       * { box-sizing: border-box; }\r\n       html, body { padding: 0; margin: 0; }\r\n-      body { width: 74mm; font: 12px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\"; color: #111; }\r\n+      /* Aumenta um pouco o tamanho e usa preto sólido para ganhar contraste na térmica */\r\n+      body {\r\n+        width: 74mm;\r\n+        font: 13px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\";\r\n+        color: #000;\r\n+        -webkit-font-smoothing: none; /* deixa o traço mais “cheio” na impressão */\r\n+        font-weight: 600; /* base mais pesada */\r\n+      }\r\n       .wrap { padding: 2mm 0; }\r\n-      .h1 { text-align:center; font-weight:600; font-size: 14px; margin-bottom: 1mm; }\r\n-      .meta { text-align:center; font-size: 11px; color:#333; margin-bottom: 2mm; }\r\n-      .hr { border-top: 1px dashed #555; margin: 2mm 0; }\r\n+      .h1 { text-align:center; font-weight:700; font-size: 15px; margin-bottom: 1mm; }\r\n+      .meta { text-align:center; font-size: 12px; color:#000; font-weight:700; margin-bottom: 2mm; }\r\n+      .hr { border-top: 1px dashed #000; margin: 2mm 0; }\r\n       .row { display:flex; align-items:flex-start; justify-content:space-between; gap: 4mm; padding: 1mm 0; }\r\n-      .row .txt { flex: 1 1 auto; word-break: break-word; }\r\n-      .row .val { flex: 0 0 auto; white-space: nowrap; }\r\n-      .foot { text-align:center; margin-top: 2mm; font-size: 11px; color:#333; }\r\n+      /* Linhas do cupom bem escuras */\r\n+      .row .txt { flex: 1 1 auto; word-break: break-word; font-weight:700; }\r\n+      .row .val { flex: 0 0 auto; white-space: nowrap; font-weight:700; }\r\n+      .foot { text-align:center; margin-top: 2mm; font-size: 12px; color:#000; font-weight:700; }\r\n       @media print { .no-print { display: none !important; } }\r\n     </style>\r\n   </head>\r\n   <body>\r\n"
                },
                {
                    "date": 1757438672621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -459,9 +459,10 @@\n         const card = document.createElement('div');\r\n         card.setAttribute('data-appointment-id', a._id || '');\r\n         card.style.setProperty('--stripe', meta.stripe);\r\n         card.style.setProperty('--card-max-w', '260px');\r\n-        card.className = `agenda-card border ${meta.borderClass}`;\r\n+        card.className = `agenda-card border ${meta.borderClass} cursor-move select-none`;\r\n+        card.setAttribute('draggable', 'true');\r\n \r\n         const headerEl = document.createElement('div');\r\n         // reserva espaço à direita para os botões flutuantes (evita o chip “ficar por baixo”)\r\n         headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n"
                },
                {
                    "date": 1757438701135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -972,8 +972,9 @@\n   function enhanceAgendaUI() {\r\n     try {\r\n       applyZebraAndSublines();\r\n       decorateCards();\r\n+      enableDragDrop();\r\n       drawNowLine();\r\n \r\n       // Auto-scroll para o horário atual (somente na data de hoje e 1x por renderização)\r\n       const date = normalizeDate(dateInput?.value || todayStr());\r\n"
                },
                {
                    "date": 1757438741109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1116,8 +1116,107 @@\n       card.appendChild(actions);\r\n     });\r\n   }\r\n \r\n+  /* === Drag & Drop na agenda: mover card entre horários/profissionais === */\r\n+  function injectDndStylesOnce() {\r\n+    if (document.getElementById('agenda-dnd-style')) return;\r\n+    const st = document.createElement('style');\r\n+    st.id = 'agenda-dnd-style';\r\n+    st.textContent = `\r\n+      .agenda-card.is-dragging { opacity: .6; }\r\n+      .agenda-drop-target { outline: 2px dashed #0ea5e9; outline-offset: -2px; background: rgba(14,165,233,0.06); }\r\n+    `;\r\n+    document.head.appendChild(st);\r\n+  }\r\n+\r\n+  // PUT rápido para mover agendamento (profissional/horário)\r\n+  async function moveAppointmentQuick(id, payload) {\r\n+    try {\r\n+      const body = {\r\n+        ...payload,\r\n+        storeId: state.selectedStoreId || storeSelect?.value\r\n+      };\r\n+      const resp = await api(`/func/agendamentos/${id}`, {\r\n+        method: 'PUT',\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify(body)\r\n+      });\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(() => ({}));\r\n+        throw new Error(err.message || 'Erro ao mover agendamento');\r\n+      }\r\n+      await loadAgendamentos();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    } catch (e) {\r\n+      console.error('moveAppointmentQuick', e);\r\n+      alert(e.message || 'Não foi possível mover o agendamento.');\r\n+    }\r\n+  }\r\n+\r\n+  function enableDragDrop() {\r\n+    injectDndStylesOnce();\r\n+\r\n+    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n+    if (!body) return;\r\n+\r\n+    // 1) tornar todos os cards \"draggables\"\r\n+    body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n+      if (card.__dndBoundCard) return;\r\n+      card.__dndBoundCard = true;\r\n+\r\n+      // garantir que o atributo esteja presente\r\n+      if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n+\r\n+      card.addEventListener('dragstart', (ev) => {\r\n+        const id = card.getAttribute('data-appointment-id') || '';\r\n+        ev.dataTransfer?.setData('text/plain', id);\r\n+        ev.dataTransfer?.setDragImage?.(card, 10, 10);\r\n+        ev.dataTransfer.effectAllowed = 'move';\r\n+        card.classList.add('is-dragging');\r\n+      });\r\n+\r\n+      card.addEventListener('dragend', () => {\r\n+        card.classList.remove('is-dragging');\r\n+        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n+      });\r\n+    });\r\n+\r\n+    // 2) permitir soltar em qualquer célula de agenda (agenda-slot)\r\n+    body.querySelectorAll('.agenda-slot').forEach((slot) => {\r\n+      if (slot.__dndBoundSlot) return;\r\n+      slot.__dndBoundSlot = true;\r\n+\r\n+      slot.addEventListener('dragover', (ev) => {\r\n+        ev.preventDefault();\r\n+        ev.dataTransfer.dropEffect = 'move';\r\n+        slot.classList.add('agenda-drop-target');\r\n+      });\r\n+\r\n+      slot.addEventListener('dragleave', () => {\r\n+        slot.classList.remove('agenda-drop-target');\r\n+      });\r\n+\r\n+      slot.addEventListener('drop', async (ev) => {\r\n+        ev.preventDefault();\r\n+        slot.classList.remove('agenda-drop-target');\r\n+\r\n+        const id = ev.dataTransfer?.getData('text/plain');\r\n+        if (!id) return;\r\n+\r\n+        const newProf = slot.dataset.profissionalId;\r\n+        const hh      = slot.dataset.hh; // ex: \"14:00\"\r\n+        if (!newProf || !hh) return;\r\n+\r\n+        const dateRaw = normalizeDate(dateInput?.value || todayStr());\r\n+        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n+\r\n+        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n   // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n   function drawNowLine() {\r\n     const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n     if (!body) return;\r\n"
                },
                {
                    "date": 1757439855354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1159,61 +1159,72 @@\n \r\n     const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n     if (!body) return;\r\n \r\n-    // 1) tornar todos os cards \"draggables\"\r\n+    // Garante que todos os cards possam ser arrastados (caso algum seja criado sem o atributo)\r\n     body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n-      if (card.__dndBoundCard) return;\r\n-      card.__dndBoundCard = true;\r\n-\r\n-      // garantir que o atributo esteja presente\r\n       if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n+    });\r\n \r\n-      card.addEventListener('dragstart', (ev) => {\r\n-        const id = card.getAttribute('data-appointment-id') || '';\r\n-        ev.dataTransfer?.setData('text/plain', id);\r\n-        ev.dataTransfer?.setDragImage?.(card, 10, 10);\r\n-        ev.dataTransfer.effectAllowed = 'move';\r\n-        card.classList.add('is-dragging');\r\n-      });\r\n+    // Evita registrar handlers duplicados a cada render\r\n+    if (body.__dndDelegated) return;\r\n+    body.__dndDelegated = true;\r\n \r\n-      card.addEventListener('dragend', () => {\r\n-        card.classList.remove('is-dragging');\r\n-        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n-      });\r\n-    });\r\n+    // Delegação: dragstart no contêiner (captura arrastos iniciados em filhos do card)\r\n+    body.addEventListener('dragstart', (ev) => {\r\n+      const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+      if (!card) return;\r\n \r\n-    // 2) permitir soltar em qualquer célula de agenda (agenda-slot)\r\n-    body.querySelectorAll('.agenda-slot').forEach((slot) => {\r\n-      if (slot.__dndBoundSlot) return;\r\n-      slot.__dndBoundSlot = true;\r\n+      const id = card.getAttribute('data-appointment-id') || '';\r\n+      if (!id || !ev.dataTransfer) return;\r\n \r\n-      slot.addEventListener('dragover', (ev) => {\r\n-        ev.preventDefault();\r\n-        ev.dataTransfer.dropEffect = 'move';\r\n-        slot.classList.add('agenda-drop-target');\r\n-      });\r\n+      try { ev.dataTransfer.setData('text/plain', id); } catch(_) {}\r\n+      try { ev.dataTransfer.setDragImage(card, 10, 10); } catch(_) {}\r\n+      ev.dataTransfer.effectAllowed = 'move';\r\n+      card.classList.add('is-dragging');\r\n+    }, true); // << captura para garantir quando começa em filhos\r\n \r\n-      slot.addEventListener('dragleave', () => {\r\n-        slot.classList.remove('agenda-drop-target');\r\n-      });\r\n+    // Delegação: dragend para limpar estados visuais\r\n+    body.addEventListener('dragend', (ev) => {\r\n+      const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+      if (card) card.classList.remove('is-dragging');\r\n+      body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n+    }, true);\r\n \r\n-      slot.addEventListener('drop', async (ev) => {\r\n-        ev.preventDefault();\r\n-        slot.classList.remove('agenda-drop-target');\r\n+    // Delegação: dragover — ativa visual do alvo quando sobre qualquer elemento dentro da célula\r\n+    body.addEventListener('dragover', (ev) => {\r\n+      const slot = ev.target?.closest?.('.agenda-slot');\r\n+      if (!slot) return;\r\n+      ev.preventDefault();\r\n+      if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n+      slot.classList.add('agenda-drop-target');\r\n+    });\r\n \r\n-        const id = ev.dataTransfer?.getData('text/plain');\r\n-        if (!id) return;\r\n+    // Delegação: dragleave — remove realce quando sai da célula\r\n+    body.addEventListener('dragleave', (ev) => {\r\n+      const slot = ev.target?.closest?.('.agenda-slot');\r\n+      if (!slot) return;\r\n+      slot.classList.remove('agenda-drop-target');\r\n+    });\r\n \r\n-        const newProf = slot.dataset.profissionalId;\r\n-        const hh      = slot.dataset.hh; // ex: \"14:00\"\r\n-        if (!newProf || !hh) return;\r\n+    // Delegação: drop — aceita soltar sobre a célula mesmo que ela tenha um card dentro\r\n+    body.addEventListener('drop', async (ev) => {\r\n+      const slot = ev.target?.closest?.('.agenda-slot');\r\n+      if (!slot) return;\r\n+      ev.preventDefault();\r\n+      slot.classList.remove('agenda-drop-target');\r\n \r\n-        const dateRaw = normalizeDate(dateInput?.value || todayStr());\r\n-        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n+      const id = ev.dataTransfer?.getData('text/plain');\r\n+      if (!id) return;\r\n \r\n-        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n-      });\r\n+      const newProf = slot.dataset.profissionalId;\r\n+      const hh = slot.dataset.hh; // ex: \"14:00\"\r\n+      if (!newProf || !hh) return;\r\n+\r\n+      const dateRaw = normalizeDate(dateInput?.value || todayStr());\r\n+      const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n+\r\n+      await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n     });\r\n   }\r\n \r\n   // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n"
                },
                {
                    "date": 1757440421505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -404,9 +404,10 @@\n       agendaList.appendChild(body);\r\n \r\n       const isToday = normalizeDate(date) === todayStr();\r\n       const now = new Date();\r\n-      const nowHH = `${pad(now.getHours())}:00`;\r\n+      const nowHH = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n+      let hasEmpty = true; // controla exibição da mensagem \"sem agendamentos\"\r\n \r\n       hours.forEach(hh => {\r\n         const hourNumber = parseInt(hh.split(':')[0], 10);\r\n         const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n@@ -488,11 +489,12 @@\n         card.appendChild(footerEl);\r\n \r\n         col.appendChild(card);\r\n         placed++;\r\n+        hasEmpty = false;\r\n       }\r\n \r\n-      if (placed === 0) {\r\n+      if (placed === 0 && hasEmpty) {\r\n         const empty = document.createElement('div');\r\n         empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n         empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n         agendaList.insertBefore(empty, header.nextSibling);\r\n"
                },
                {
                    "date": 1757440515767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1182,15 +1182,19 @@\n       try { ev.dataTransfer.setData('text/plain', id); } catch(_) {}\r\n       try { ev.dataTransfer.setDragImage(card, 10, 10); } catch(_) {}\r\n       ev.dataTransfer.effectAllowed = 'move';\r\n       card.classList.add('is-dragging');\r\n+\r\n+      console.log(`[DragStart] Card ID: ${id}`); // Log para depuração\r\n     }, true); // << captura para garantir quando começa em filhos\r\n \r\n     // Delegação: dragend para limpar estados visuais\r\n     body.addEventListener('dragend', (ev) => {\r\n       const card = ev.target?.closest?.('div[data-appointment-id]');\r\n       if (card) card.classList.remove('is-dragging');\r\n       body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n+\r\n+      console.log('[DragEnd] Finalizado'); // Log para depuração\r\n     }, true);\r\n \r\n     // Delegação: dragover — ativa visual do alvo quando sobre qualquer elemento dentro da célula\r\n     body.addEventListener('dragover', (ev) => {\r\n@@ -1198,15 +1202,19 @@\n       if (!slot) return;\r\n       ev.preventDefault();\r\n       if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n       slot.classList.add('agenda-drop-target');\r\n+\r\n+      console.log(`[DragOver] Slot: ${slot.dataset.profissionalId}, Hora: ${slot.dataset.hh}`); // Log para depuração\r\n     });\r\n \r\n     // Delegação: dragleave — remove realce quando sai da célula\r\n     body.addEventListener('dragleave', (ev) => {\r\n       const slot = ev.target?.closest?.('.agenda-slot');\r\n       if (!slot) return;\r\n       slot.classList.remove('agenda-drop-target');\r\n+\r\n+      console.log('[DragLeave] Slot removido'); // Log para depuração\r\n     });\r\n \r\n     // Delegação: drop — aceita soltar sobre a célula mesmo que ela tenha um card dentro\r\n     body.addEventListener('drop', async (ev) => {\r\n@@ -1215,17 +1223,25 @@\n       ev.preventDefault();\r\n       slot.classList.remove('agenda-drop-target');\r\n \r\n       const id = ev.dataTransfer?.getData('text/plain');\r\n-      if (!id) return;\r\n+      if (!id) {\r\n+        console.error('[Drop] ID do card não encontrado');\r\n+        return;\r\n+      }\r\n \r\n       const newProf = slot.dataset.profissionalId;\r\n       const hh = slot.dataset.hh; // ex: \"14:00\"\r\n-      if (!newProf || !hh) return;\r\n+      if (!newProf || !hh) {\r\n+        console.error('[Drop] Dados do slot incompletos');\r\n+        return;\r\n+      }\r\n \r\n       const dateRaw = normalizeDate(dateInput?.value || todayStr());\r\n       const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n \r\n+      console.log(`[Drop] Movendo Card ID: ${id} para Profissional: ${newProf}, Hora: ${hh}`); // Log para depuração\r\n+\r\n       await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n     });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1757440846044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1102,8 +1102,11 @@\n       if (card.querySelector('.agenda-card__actions')) return; // já decorado\r\n       card.classList.add('agenda-card'); // ativa hover via CSS\r\n       card.style.position = 'relative';\r\n \r\n+      // Assegura que o cartão seja arrastável (duplo reforço: aqui e no enableDragDrop)\r\n+      try { card.setAttribute('draggable', 'true'); } catch(_) {}\r\n+\r\n       const id = card.getAttribute('data-appointment-id') || '';\r\n       const actions = document.createElement('div');\r\n       actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex items-center gap-1';\r\n \r\n@@ -1118,270 +1121,45 @@\n       card.appendChild(actions);\r\n     });\r\n   }\r\n \r\n-  /* === Drag & Drop na agenda: mover card entre horários/profissionais === */\r\n-  function injectDndStylesOnce() {\r\n-    if (document.getElementById('agenda-dnd-style')) return;\r\n-    const st = document.createElement('style');\r\n-    st.id = 'agenda-dnd-style';\r\n-    st.textContent = `\r\n-      .agenda-card.is-dragging { opacity: .6; }\r\n-      .agenda-drop-target { outline: 2px dashed #0ea5e9; outline-offset: -2px; background: rgba(14,165,233,0.06); }\r\n-    `;\r\n-    document.head.appendChild(st);\r\n-  }\r\n+  // DEBUG: listeners globais para capturar eventos de drag/pointer/mouse caso os logs locais não apareçam\r\n+  (function attachGlobalDebug() {\r\n+    if (window.__agendaDebugAttached) return;\r\n+    window.__agendaDebugAttached = true;\r\n \r\n-  // PUT rápido para mover agendamento (profissional/horário)\r\n-  async function moveAppointmentQuick(id, payload) {\r\n-    try {\r\n-      const body = {\r\n-        ...payload,\r\n-        storeId: state.selectedStoreId || storeSelect?.value\r\n-      };\r\n-      const resp = await api(`/func/agendamentos/${id}`, {\r\n-        method: 'PUT',\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify(body)\r\n-      });\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(() => ({}));\r\n-        throw new Error(err.message || 'Erro ao mover agendamento');\r\n-      }\r\n-      await loadAgendamentos();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    } catch (e) {\r\n-      console.error('moveAppointmentQuick', e);\r\n-      alert(e.message || 'Não foi possível mover o agendamento.');\r\n-    }\r\n-  }\r\n+    const dbg = (...args) => { try { console.debug('[Agenda-Debug]', ...args); } catch(_) {} };\r\n \r\n-  function enableDragDrop() {\r\n-    injectDndStylesOnce();\r\n+    document.addEventListener('dragstart', (ev) => {\r\n+      const t = ev.target;\r\n+      dbg('document.dragstart target:', t && t.getAttribute ? t.getAttribute('data-appointment-id') || t.tagName : t);\r\n+    }, true);\r\n \r\n-    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n-    if (!body) return;\r\n+    document.addEventListener('dragend', (ev) => { dbg('document.dragend'); }, true);\r\n+    document.addEventListener('dragover', (ev) => { dbg('document.dragover target:', ev.target && ev.target.tagName); }, true);\r\n+    document.addEventListener('drop', (ev) => { dbg('document.drop target:', ev.target && ev.target.tagName); }, true);\r\n \r\n-    // Garante que todos os cards possam ser arrastados (caso algum seja criado sem o atributo)\r\n-    body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n-      if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n-    });\r\n-\r\n-    // Evita registrar handlers duplicados a cada render\r\n-    if (body.__dndDelegated) return;\r\n-    body.__dndDelegated = true;\r\n-\r\n-    // Delegação: dragstart no contêiner (captura arrastos iniciados em filhos do card)\r\n-    body.addEventListener('dragstart', (ev) => {\r\n-      const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-      if (!card) return;\r\n-\r\n-      const id = card.getAttribute('data-appointment-id') || '';\r\n-      if (!id || !ev.dataTransfer) return;\r\n-\r\n-      try { ev.dataTransfer.setData('text/plain', id); } catch(_) {}\r\n-      try { ev.dataTransfer.setDragImage(card, 10, 10); } catch(_) {}\r\n-      ev.dataTransfer.effectAllowed = 'move';\r\n-      card.classList.add('is-dragging');\r\n-\r\n-      console.log(`[DragStart] Card ID: ${id}`); // Log para depuração\r\n-    }, true); // << captura para garantir quando começa em filhos\r\n-\r\n-    // Delegação: dragend para limpar estados visuais\r\n-    body.addEventListener('dragend', (ev) => {\r\n-      const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-      if (card) card.classList.remove('is-dragging');\r\n-      body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n-\r\n-      console.log('[DragEnd] Finalizado'); // Log para depuração\r\n+    // mousedown/pointerdown para ver se algo intercepta antes do drag\r\n+    document.addEventListener('pointerdown', (ev) => {\r\n+      const t = ev.target;\r\n+      dbg('pointerdown on', t && (t.getAttribute ? (t.getAttribute('data-appointment-id') || t.tagName) : t));\r\n     }, true);\r\n+    document.addEventListener('mousedown', (ev) => {\r\n+      const t = ev.target;\r\n+      dbg('mousedown on', t && (t.getAttribute ? (t.getAttribute('data-appointment-id') || t.tagName) : t));\r\n+    }, true);\r\n \r\n-    // Delegação: dragover — ativa visual do alvo quando sobre qualquer elemento dentro da célula\r\n-    body.addEventListener('dragover', (ev) => {\r\n-      const slot = ev.target?.closest?.('.agenda-slot');\r\n-      if (!slot) return;\r\n-      ev.preventDefault();\r\n-      if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n-      slot.classList.add('agenda-drop-target');\r\n-\r\n-      console.log(`[DragOver] Slot: ${slot.dataset.profissionalId}, Hora: ${slot.dataset.hh}`); // Log para depuração\r\n-    });\r\n-\r\n-    // Delegação: dragleave — remove realce quando sai da célula\r\n-    body.addEventListener('dragleave', (ev) => {\r\n-      const slot = ev.target?.closest?.('.agenda-slot');\r\n-      if (!slot) return;\r\n-      slot.classList.remove('agenda-drop-target');\r\n-\r\n-      console.log('[DragLeave] Slot removido'); // Log para depuração\r\n-    });\r\n-\r\n-    // Delegação: drop — aceita soltar sobre a célula mesmo que ela tenha um card dentro\r\n-    body.addEventListener('drop', async (ev) => {\r\n-      const slot = ev.target?.closest?.('.agenda-slot');\r\n-      if (!slot) return;\r\n-      ev.preventDefault();\r\n-      slot.classList.remove('agenda-drop-target');\r\n-\r\n-      const id = ev.dataTransfer?.getData('text/plain');\r\n-      if (!id) {\r\n-        console.error('[Drop] ID do card não encontrado');\r\n-        return;\r\n-      }\r\n-\r\n-      const newProf = slot.dataset.profissionalId;\r\n-      const hh = slot.dataset.hh; // ex: \"14:00\"\r\n-      if (!newProf || !hh) {\r\n-        console.error('[Drop] Dados do slot incompletos');\r\n-        return;\r\n-      }\r\n-\r\n-      const dateRaw = normalizeDate(dateInput?.value || todayStr());\r\n-      const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n-\r\n-      console.log(`[Drop] Movendo Card ID: ${id} para Profissional: ${newProf}, Hora: ${hh}`); // Log para depuração\r\n-\r\n-      await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n-    });\r\n-  }\r\n-\r\n-  // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n-  function drawNowLine() {\r\n-    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n-    if (!body) return;\r\n-\r\n-    body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n-\r\n-    const now = new Date();\r\n-    const minutes = now.getHours() * 60 + now.getMinutes();\r\n-    const percent = minutes / (24 * 60);\r\n-    const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n-\r\n-    const line = document.createElement('div');\r\n-    line.className = 'agenda-nowline';\r\n-    line.style.top = `${y}px`;\r\n-    body.appendChild(line);\r\n-\r\n-    if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n-    window.__agendaNowTimer = setInterval(() => {\r\n-      drawNowLine();\r\n-    }, 60000);\r\n-  }\r\n-\r\n-  // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n-  async function updateStatusQuick(id, status) {\r\n-    try {\r\n-      const resp = await api(`/func/agendamentos/${id}`, {\r\n-        method: 'PUT',\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify({ status })\r\n-      });\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(() => ({}));\r\n-        throw new Error(err.message || 'Erro ao mudar status');\r\n-      }\r\n-      await loadAgendamentos();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    } catch (e) {\r\n-      console.error('updateStatusQuick', e);\r\n-      alert(e.message || 'Erro ao mudar status');\r\n-    }\r\n-  }\r\n-\r\n-    // === Impressão em cupom (80mm) ===\r\n-  function buildCupomHTML(items, meta = {}) {\r\n-    const storeName = (meta.storeName || '').trim();\r\n-    const dateStr   = (meta.dateStr || '').trim();\r\n-\r\n-    const rows = (items || []).map(a => {\r\n-      const pet   = (a.pet || '').toString().trim();\r\n-      const serv  = (a.servico || '').toString().trim();\r\n-      const valor = money(Number(a.valor || 0));\r\n-      // \"Pet Serviço - Valor\" em linha única\r\n-      return `<div class=\"row\"><span class=\"txt\">${pet} ${serv}</span><span class=\"val\">${valor}</span></div>`;\r\n-    }).join('');\r\n-\r\n-    return `\r\n-  <!doctype html>\r\n-  <html>\r\n-  <head>\r\n-    <meta charset=\"utf-8\">\r\n-    <title>Impressão</title>\r\n-    <style>\r\n-      @page { size: 80mm auto; margin: 3mm; }\r\n-      * { box-sizing: border-box; }\r\n-      html, body { padding: 0; margin: 0; }\r\n-      /* Aumenta um pouco o tamanho e usa preto sólido para ganhar contraste na térmica */\r\n-      body {\r\n-        width: 74mm;\r\n-        font: 13px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\";\r\n-        color: #000;\r\n-        -webkit-font-smoothing: none; /* deixa o traço mais “cheio” na impressão */\r\n-        font-weight: 600; /* base mais pesada */\r\n-      }\r\n-      .wrap { padding: 2mm 0; }\r\n-      .h1 { text-align:center; font-weight:700; font-size: 15px; margin-bottom: 1mm; }\r\n-      .meta { text-align:center; font-size: 12px; color:#000; font-weight:700; margin-bottom: 2mm; }\r\n-      .hr { border-top: 1px dashed #000; margin: 2mm 0; }\r\n-      .row { display:flex; align-items:flex-start; justify-content:space-between; gap: 4mm; padding: 1mm 0; }\r\n-      /* Linhas do cupom bem escuras */\r\n-      .row .txt { flex: 1 1 auto; word-break: break-word; font-weight:700; }\r\n-      .row .val { flex: 0 0 auto; white-space: nowrap; font-weight:700; }\r\n-      .foot { text-align:center; margin-top: 2mm; font-size: 12px; color:#000; font-weight:700; }\r\n-      @media print { .no-print { display: none !important; } }\r\n-    </style>\r\n-  </head>\r\n-  <body>\r\n-    <div class=\"wrap\">\r\n-      <div class=\"h1\">Agenda</div>\r\n-      <div class=\"meta\">${storeName ? storeName + ' • ' : ''}${dateStr}</div>\r\n-      <div class=\"hr\"></div>\r\n-      ${rows || '<div class=\"row\"><span class=\"txt\">Sem itens</span><span class=\"val\"></span></div>'}\r\n-      <div class=\"hr\"></div>\r\n-      <div class=\"foot\">Obrigado!</div>\r\n-    </div>\r\n-    <script>\r\n-      window.onload = function(){ setTimeout(function(){ window.print(); }, 50); };\r\n-      window.onafterprint = function(){ setTimeout(function(){ window.close(); }, 50); };\r\n-    </script>\r\n-  </body>\r\n-  </html>`;\r\n-  }\r\n-\r\n-  function handlePrintCupom() {\r\n-    try {\r\n-      const items = getFilteredAgendamentos();\r\n-\r\n-      // Ordena por horário (se houver)\r\n-      items.sort((a, b) => {\r\n-        const da = new Date(a.h || a.scheduledAt || 0).getTime();\r\n-        const db = new Date(b.h || b.scheduledAt || 0).getTime();\r\n-        return da - db;\r\n-      });\r\n-\r\n-      const dateStr =\r\n-        (document.getElementById('agenda-date-label-visible')?.textContent || '').trim() ||\r\n-        new Date((normalizeDate(dateInput?.value || todayStr())) + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-\r\n-      const storeName =\r\n-        (document.getElementById('agenda-store-label-visible')?.textContent || '').trim();\r\n-\r\n-      const html = buildCupomHTML(items, { storeName, dateStr });\r\n-\r\n-      const w = window.open('', 'print_cupom', 'width=420,height=600');\r\n-      if (!w) { alert('O navegador bloqueou a janela de impressão. Habilite pop-ups para continuar.'); return; }\r\n-      w.document.open('text/html');\r\n-      w.document.write(html);\r\n-      w.document.close();\r\n-      w.focus();\r\n-    } catch (e) {\r\n-      console.error('handlePrintCupom', e);\r\n-      alert('Não foi possível preparar a impressão.');\r\n-    }\r\n-  }\r\n-\r\n+    // monitora atributos draggable em cards periodicamente por 2s após render\r\n+    let checks = 0;\r\n+    const iv = setInterval(() => {\r\n+      checks++;\r\n+      const any = document.querySelectorAll('div[data-appointment-id]');\r\n+      dbg('audit: cards count=', any.length);\r\n+      any.forEach(c => dbg('  card', c.getAttribute('data-appointment-id'), 'draggable=', c.getAttribute('draggable'), 'style.pointerEvents=', getComputedStyle(c).pointerEvents));\r\n+      if (checks > 4) clearInterval(iv);\r\n+    }, 400);\r\n+  })();\r\n+  \r\n   // Events\r\n   addBtn?.addEventListener('click', openAddModal);\r\n   modalClose?.addEventListener('click', closeModal);\r\n   modalCancel?.addEventListener('click', closeModal);\r\n"
                },
                {
                    "date": 1757441060033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1121,8 +1121,115 @@\n       card.appendChild(actions);\r\n     });\r\n   }\r\n \r\n+  // PUT rápido para mover agendamento (profissional/horário)\r\n+  async function moveAppointmentQuick(id, payload) {\r\n+    try {\r\n+      const body = {\r\n+        ...payload,\r\n+        storeId: state.selectedStoreId || storeSelect?.value\r\n+      };\r\n+      const resp = await api(`/func/agendamentos/${id}`, {\r\n+        method: 'PUT',\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify(body)\r\n+      });\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(() => ({}));\r\n+        throw new Error(err.message || 'Erro ao mover agendamento');\r\n+      }\r\n+      await loadAgendamentos();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    } catch (e) {\r\n+      console.error('moveAppointmentQuick', e);\r\n+      alert(e.message || 'Não foi possível mover o agendamento.');\r\n+    }\r\n+  }\r\n+\r\n+  // === Reimplementa enableDragDrop (estava faltando) ===\r\n+  function enableDragDrop() {\r\n+    try {\r\n+      injectDndStylesOnce();\r\n+\r\n+      const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n+      if (!body) {\r\n+        console.debug('[enableDragDrop] body não encontrado');\r\n+        return;\r\n+      }\r\n+\r\n+      // Garante que todos os cards possam ser arrastados\r\n+      body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n+        try { card.setAttribute('draggable', 'true'); } catch(_) {}\r\n+      });\r\n+\r\n+      if (body.__dndDelegated) return;\r\n+      body.__dndDelegated = true;\r\n+\r\n+      // dragstart\r\n+      body.addEventListener('dragstart', (ev) => {\r\n+        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+        if (!card) return;\r\n+        const id = card.getAttribute('data-appointment-id') || '';\r\n+        if (!id || !ev.dataTransfer) return;\r\n+        try { ev.dataTransfer.setData('text/plain', id); } catch(_) {}\r\n+        try { ev.dataTransfer.setDragImage(card, 10, 10); } catch(_) {}\r\n+        ev.dataTransfer.effectAllowed = 'move';\r\n+        card.classList.add('is-dragging');\r\n+        console.debug('[enableDragDrop] dragstart id=', id);\r\n+      }, true);\r\n+\r\n+      // dragend\r\n+      body.addEventListener('dragend', (ev) => {\r\n+        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+        if (card) card.classList.remove('is-dragging');\r\n+        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n+        console.debug('[enableDragDrop] dragend');\r\n+      }, true);\r\n+\r\n+      // dragover\r\n+      body.addEventListener('dragover', (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        ev.preventDefault();\r\n+        if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n+        slot.classList.add('agenda-drop-target');\r\n+      });\r\n+\r\n+      // dragleave\r\n+      body.addEventListener('dragleave', (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        slot.classList.remove('agenda-drop-target');\r\n+      });\r\n+\r\n+      // drop\r\n+      body.addEventListener('drop', async (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        ev.preventDefault();\r\n+        slot.classList.remove('agenda-drop-target');\r\n+\r\n+        const id = ev.dataTransfer?.getData('text/plain');\r\n+        if (!id) { console.error('[enableDragDrop] drop: id ausente'); return; }\r\n+\r\n+        const newProf = slot.dataset.profissionalId;\r\n+        const hh = slot.dataset.hh;\r\n+        if (!newProf || !hh) { console.error('[enableDragDrop] drop: slot incompleto', newProf, hh); return; }\r\n+\r\n+        const dateRaw = normalizeDate(dateInput?.value || todayStr());\r\n+        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n+\r\n+        console.debug('[enableDragDrop] drop ->', { id, newProf, hh, scheduledAt });\r\n+\r\n+        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n+      });\r\n+    } catch (e) {\r\n+      console.error('[enableDragDrop] erro', e);\r\n+    }\r\n+  }\r\n+\r\n   // DEBUG: listeners globais para capturar eventos de drag/pointer/mouse caso os logs locais não apareçam\r\n   (function attachGlobalDebug() {\r\n     if (window.__agendaDebugAttached) return;\r\n     window.__agendaDebugAttached = true;\r\n"
                },
                {
                    "date": 1757441283288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1146,8 +1146,58 @@\n       alert(e.message || 'Não foi possível mover o agendamento.');\r\n     }\r\n   }\r\n \r\n+  // === Garantia de estilos para DnD (recriado) ===\r\n+  function injectDndStylesOnce() {\r\n+    if (document.getElementById('agenda-dnd-style')) return;\r\n+    try {\r\n+      const st = document.createElement('style');\r\n+      st.id = 'agenda-dnd-style';\r\n+      st.textContent = `\r\n+        .agenda-card.is-dragging { opacity: .6; }\r\n+        .agenda-drop-target { outline: 2px dashed #0ea5e9; outline-offset: -2px; background: rgba(14,165,233,0.06); }\r\n+      `;\r\n+      document.head.appendChild(st);\r\n+    } catch (e) {\r\n+      console.debug('[injectDndStylesOnce] failed', e);\r\n+    }\r\n+  }\r\n+\r\n+  // Linha do \"agora\" (reimplementada) — desenha uma linha absoluta dentro do body da grade\r\n+  function drawNowLine() {\r\n+    try {\r\n+      const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n+      if (!body) return;\r\n+\r\n+      // remove linhas antigas\r\n+      body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n+\r\n+      const now = new Date();\r\n+      const minutes = now.getHours() * 60 + now.getMinutes();\r\n+      const percent = minutes / (24 * 60);\r\n+      const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n+\r\n+      const line = document.createElement('div');\r\n+      line.className = 'agenda-nowline';\r\n+      line.style.position = 'absolute';\r\n+      line.style.left = '0';\r\n+      line.style.right = '0';\r\n+      line.style.top = `${y}px`;\r\n+      line.style.borderTop = '2px solid #f43f5e';\r\n+      line.style.pointerEvents = 'none';\r\n+      line.style.zIndex = '4';\r\n+      body.appendChild(line);\r\n+\r\n+      if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n+      window.__agendaNowTimer = setInterval(() => {\r\n+        try { drawNowLine(); } catch (_) {}\r\n+      }, 60000);\r\n+    } catch (e) {\r\n+      console.error('[drawNowLine] erro', e);\r\n+    }\r\n+  }\r\n+\r\n   // === Reimplementa enableDragDrop (estava faltando) ===\r\n   function enableDragDrop() {\r\n     try {\r\n       injectDndStylesOnce();\r\n"
                },
                {
                    "date": 1757441354389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1198,86 +1198,78 @@\n   }\r\n \r\n   // === Reimplementa enableDragDrop (estava faltando) ===\r\n   function enableDragDrop() {\r\n-    try {\r\n-      injectDndStylesOnce();\r\n+    injectDndStylesOnce();\r\n \r\n-      const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n-      if (!body) {\r\n-        console.debug('[enableDragDrop] body não encontrado');\r\n-        return;\r\n-      }\r\n+    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n+    if (!body) return;\r\n \r\n-      // Garante que todos os cards possam ser arrastados\r\n-      body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n-        try { card.setAttribute('draggable', 'true'); } catch(_) {}\r\n-      });\r\n+    // Garante que todos os cards possam ser arrastados (caso algum tenha sido criado sem o atributo)\r\n+    body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n+      if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n+    });\r\n \r\n-      if (body.__dndDelegated) return;\r\n-      body.__dndDelegated = true;\r\n+    // Evita registrar handlers duplicados a cada re-render\r\n+    if (body.__dndDelegated) return;\r\n+    body.__dndDelegated = true;\r\n \r\n-      // dragstart\r\n-      body.addEventListener('dragstart', (ev) => {\r\n-        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-        if (!card) return;\r\n-        const id = card.getAttribute('data-appointment-id') || '';\r\n-        if (!id || !ev.dataTransfer) return;\r\n-        try { ev.dataTransfer.setData('text/plain', id); } catch(_) {}\r\n-        try { ev.dataTransfer.setDragImage(card, 10, 10); } catch(_) {}\r\n-        ev.dataTransfer.effectAllowed = 'move';\r\n-        card.classList.add('is-dragging');\r\n-        console.debug('[enableDragDrop] dragstart id=', id);\r\n-      }, true);\r\n+    // DRAGSTART (captura) — funciona mesmo se o usuário começar o arrasto por um filho (ex.: ícone)\r\n+    body.addEventListener('dragstart', (ev) => {\r\n+      const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+      if (!card || !ev.dataTransfer) return;\r\n \r\n-      // dragend\r\n-      body.addEventListener('dragend', (ev) => {\r\n-        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-        if (card) card.classList.remove('is-dragging');\r\n-        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n-        console.debug('[enableDragDrop] dragend');\r\n-      }, true);\r\n+      const id = card.getAttribute('data-appointment-id') || '';\r\n+      if (!id) return;\r\n \r\n-      // dragover\r\n-      body.addEventListener('dragover', (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        ev.preventDefault();\r\n-        if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n-        slot.classList.add('agenda-drop-target');\r\n-      });\r\n+      try { ev.dataTransfer.setData('text/plain', id); } catch (_) {}\r\n+      try { ev.dataTransfer.setDragImage(card, 10, 10); } catch (_) {}\r\n+      ev.dataTransfer.effectAllowed = 'move';\r\n+      card.classList.add('is-dragging');\r\n+    }, true);\r\n \r\n-      // dragleave\r\n-      body.addEventListener('dragleave', (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        slot.classList.remove('agenda-drop-target');\r\n-      });\r\n+    // DRAGEND — limpeza de estados visuais\r\n+    body.addEventListener('dragend', (ev) => {\r\n+      const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+      if (card) card.classList.remove('is-dragging');\r\n+      body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n+    }, true);\r\n \r\n-      // drop\r\n-      body.addEventListener('drop', async (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        ev.preventDefault();\r\n-        slot.classList.remove('agenda-drop-target');\r\n+    // DRAGOVER — precisa de preventDefault para permitir drop\r\n+    body.addEventListener('dragover', (ev) => {\r\n+      const slot = ev.target?.closest?.('.agenda-slot');\r\n+      if (!slot) return;\r\n+      ev.preventDefault();\r\n+      if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n+      slot.classList.add('agenda-drop-target');\r\n+    });\r\n \r\n-        const id = ev.dataTransfer?.getData('text/plain');\r\n-        if (!id) { console.error('[enableDragDrop] drop: id ausente'); return; }\r\n+    // DRAGLEAVE — remove realce\r\n+    body.addEventListener('dragleave', (ev) => {\r\n+      const slot = ev.target?.closest?.('.agenda-slot');\r\n+      if (!slot) return;\r\n+      slot.classList.remove('agenda-drop-target');\r\n+    });\r\n \r\n-        const newProf = slot.dataset.profissionalId;\r\n-        const hh = slot.dataset.hh;\r\n-        if (!newProf || !hh) { console.error('[enableDragDrop] drop: slot incompleto', newProf, hh); return; }\r\n+    // DROP — aceita soltura mesmo quando há um card dentro da célula\r\n+    body.addEventListener('drop', async (ev) => {\r\n+      const slot = ev.target?.closest?.('.agenda-slot');\r\n+      if (!slot) return;\r\n+      ev.preventDefault();\r\n+      slot.classList.remove('agenda-drop-target');\r\n \r\n-        const dateRaw = normalizeDate(dateInput?.value || todayStr());\r\n-        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n+      const id = ev.dataTransfer?.getData('text/plain');\r\n+      if (!id) return;\r\n \r\n-        console.debug('[enableDragDrop] drop ->', { id, newProf, hh, scheduledAt });\r\n+      const newProf = slot.dataset.profissionalId;\r\n+      const hh = slot.dataset.hh; // ex.: \"14:00\"\r\n+      if (!newProf || !hh) return;\r\n \r\n-        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n-      });\r\n-    } catch (e) {\r\n-      console.error('[enableDragDrop] erro', e);\r\n-    }\r\n+      const dateRaw = normalizeDate(dateInput?.value || todayStr());\r\n+      const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n+\r\n+      await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n+    });\r\n   }\r\n \r\n   // DEBUG: listeners globais para capturar eventos de drag/pointer/mouse caso os logs locais não apareçam\r\n   (function attachGlobalDebug() {\r\n"
                },
                {
                    "date": 1757441401257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1198,78 +1198,86 @@\n   }\r\n \r\n   // === Reimplementa enableDragDrop (estava faltando) ===\r\n   function enableDragDrop() {\r\n-    injectDndStylesOnce();\r\n+    try {\r\n+      injectDndStylesOnce();\r\n \r\n-    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n-    if (!body) return;\r\n+      const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n+      if (!body) {\r\n+        console.debug('[enableDragDrop] body não encontrado');\r\n+        return;\r\n+      }\r\n \r\n-    // Garante que todos os cards possam ser arrastados (caso algum tenha sido criado sem o atributo)\r\n-    body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n-      if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n-    });\r\n+      // Garante que todos os cards possam ser arrastados\r\n+      body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n+        try { card.setAttribute('draggable', 'true'); } catch(_) {}\r\n+      });\r\n \r\n-    // Evita registrar handlers duplicados a cada re-render\r\n-    if (body.__dndDelegated) return;\r\n-    body.__dndDelegated = true;\r\n+      if (body.__dndDelegated) return;\r\n+      body.__dndDelegated = true;\r\n \r\n-    // DRAGSTART (captura) — funciona mesmo se o usuário começar o arrasto por um filho (ex.: ícone)\r\n-    body.addEventListener('dragstart', (ev) => {\r\n-      const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-      if (!card || !ev.dataTransfer) return;\r\n+      // dragstart\r\n+      body.addEventListener('dragstart', (ev) => {\r\n+        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+        if (!card) return;\r\n+        const id = card.getAttribute('data-appointment-id') || '';\r\n+        if (!id || !ev.dataTransfer) return;\r\n+        try { ev.dataTransfer.setData('text/plain', id); } catch(_) {}\r\n+        try { ev.dataTransfer.setDragImage(card, 10, 10); } catch(_) {}\r\n+        ev.dataTransfer.effectAllowed = 'move';\r\n+        card.classList.add('is-dragging');\r\n+        console.debug('[enableDragDrop] dragstart id=', id);\r\n+      }, true);\r\n \r\n-      const id = card.getAttribute('data-appointment-id') || '';\r\n-      if (!id) return;\r\n+      // dragend\r\n+      body.addEventListener('dragend', (ev) => {\r\n+        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+        if (card) card.classList.remove('is-dragging');\r\n+        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n+        console.debug('[enableDragDrop] dragend');\r\n+      }, true);\r\n \r\n-      try { ev.dataTransfer.setData('text/plain', id); } catch (_) {}\r\n-      try { ev.dataTransfer.setDragImage(card, 10, 10); } catch (_) {}\r\n-      ev.dataTransfer.effectAllowed = 'move';\r\n-      card.classList.add('is-dragging');\r\n-    }, true);\r\n+      // dragover\r\n+      body.addEventListener('dragover', (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        ev.preventDefault();\r\n+        if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n+        slot.classList.add('agenda-drop-target');\r\n+      });\r\n \r\n-    // DRAGEND — limpeza de estados visuais\r\n-    body.addEventListener('dragend', (ev) => {\r\n-      const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-      if (card) card.classList.remove('is-dragging');\r\n-      body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n-    }, true);\r\n+      // dragleave\r\n+      body.addEventListener('dragleave', (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        slot.classList.remove('agenda-drop-target');\r\n+      });\r\n \r\n-    // DRAGOVER — precisa de preventDefault para permitir drop\r\n-    body.addEventListener('dragover', (ev) => {\r\n-      const slot = ev.target?.closest?.('.agenda-slot');\r\n-      if (!slot) return;\r\n-      ev.preventDefault();\r\n-      if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n-      slot.classList.add('agenda-drop-target');\r\n-    });\r\n+      // drop\r\n+      body.addEventListener('drop', async (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        ev.preventDefault();\r\n+        slot.classList.remove('agenda-drop-target');\r\n \r\n-    // DRAGLEAVE — remove realce\r\n-    body.addEventListener('dragleave', (ev) => {\r\n-      const slot = ev.target?.closest?.('.agenda-slot');\r\n-      if (!slot) return;\r\n-      slot.classList.remove('agenda-drop-target');\r\n-    });\r\n+        const id = ev.dataTransfer?.getData('text/plain');\r\n+        if (!id) { console.error('[enableDragDrop] drop: id ausente'); return; }\r\n \r\n-    // DROP — aceita soltura mesmo quando há um card dentro da célula\r\n-    body.addEventListener('drop', async (ev) => {\r\n-      const slot = ev.target?.closest?.('.agenda-slot');\r\n-      if (!slot) return;\r\n-      ev.preventDefault();\r\n-      slot.classList.remove('agenda-drop-target');\r\n+        const newProf = slot.dataset.profissionalId;\r\n+        const hh = slot.dataset.hh;\r\n+        if (!newProf || !hh) { console.error('[enableDragDrop] drop: slot incompleto', newProf, hh); return; }\r\n \r\n-      const id = ev.dataTransfer?.getData('text/plain');\r\n-      if (!id) return;\r\n+        const dateRaw = normalizeDate(dateInput?.value || todayStr());\r\n+        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n \r\n-      const newProf = slot.dataset.profissionalId;\r\n-      const hh = slot.dataset.hh; // ex.: \"14:00\"\r\n-      if (!newProf || !hh) return;\r\n+        console.debug('[enableDragDrop] drop ->', { id, newProf, hh, scheduledAt });\r\n \r\n-      const dateRaw = normalizeDate(dateInput?.value || todayStr());\r\n-      const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n-\r\n-      await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n-    });\r\n+        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n+      });\r\n+    } catch (e) {\r\n+      console.error('[enableDragDrop] erro', e);\r\n+    }\r\n   }\r\n \r\n   // DEBUG: listeners globais para capturar eventos de drag/pointer/mouse caso os logs locais não apareçam\r\n   (function attachGlobalDebug() {\r\n"
                },
                {
                    "date": 1757441503563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -404,10 +404,9 @@\n       agendaList.appendChild(body);\r\n \r\n       const isToday = normalizeDate(date) === todayStr();\r\n       const now = new Date();\r\n-      const nowHH = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n-      let hasEmpty = true; // controla exibição da mensagem \"sem agendamentos\"\r\n+      const nowHH = `${pad(now.getHours())}:00`;\r\n \r\n       hours.forEach(hh => {\r\n         const hourNumber = parseInt(hh.split(':')[0], 10);\r\n         const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n@@ -489,12 +488,11 @@\n         card.appendChild(footerEl);\r\n \r\n         col.appendChild(card);\r\n         placed++;\r\n-        hasEmpty = false;\r\n       }\r\n \r\n-      if (placed === 0 && hasEmpty) {\r\n+      if (placed === 0) {\r\n         const empty = document.createElement('div');\r\n         empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n         empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n         agendaList.insertBefore(empty, header.nextSibling);\r\n@@ -1102,11 +1100,8 @@\n       if (card.querySelector('.agenda-card__actions')) return; // já decorado\r\n       card.classList.add('agenda-card'); // ativa hover via CSS\r\n       card.style.position = 'relative';\r\n \r\n-      // Assegura que o cartão seja arrastável (duplo reforço: aqui e no enableDragDrop)\r\n-      try { card.setAttribute('draggable', 'true'); } catch(_) {}\r\n-\r\n       const id = card.getAttribute('data-appointment-id') || '';\r\n       const actions = document.createElement('div');\r\n       actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex items-center gap-1';\r\n \r\n@@ -1121,8 +1116,20 @@\n       card.appendChild(actions);\r\n     });\r\n   }\r\n \r\n+  /* === Drag & Drop na agenda: mover card entre horários/profissionais === */\r\n+  function injectDndStylesOnce() {\r\n+    if (document.getElementById('agenda-dnd-style')) return;\r\n+    const st = document.createElement('style');\r\n+    st.id = 'agenda-dnd-style';\r\n+    st.textContent = `\r\n+      .agenda-card.is-dragging { opacity: .6; }\r\n+      .agenda-drop-target { outline: 2px dashed #0ea5e9; outline-offset: -2px; background: rgba(14,165,233,0.06); }\r\n+    `;\r\n+    document.head.appendChild(st);\r\n+  }\r\n+\r\n   // PUT rápido para mover agendamento (profissional/horário)\r\n   async function moveAppointmentQuick(id, payload) {\r\n     try {\r\n       const body = {\r\n@@ -1146,177 +1153,206 @@\n       alert(e.message || 'Não foi possível mover o agendamento.');\r\n     }\r\n   }\r\n \r\n-  // === Garantia de estilos para DnD (recriado) ===\r\n-  function injectDndStylesOnce() {\r\n-    if (document.getElementById('agenda-dnd-style')) return;\r\n-    try {\r\n-      const st = document.createElement('style');\r\n-      st.id = 'agenda-dnd-style';\r\n-      st.textContent = `\r\n-        .agenda-card.is-dragging { opacity: .6; }\r\n-        .agenda-drop-target { outline: 2px dashed #0ea5e9; outline-offset: -2px; background: rgba(14,165,233,0.06); }\r\n-      `;\r\n-      document.head.appendChild(st);\r\n-    } catch (e) {\r\n-      console.debug('[injectDndStylesOnce] failed', e);\r\n-    }\r\n-  }\r\n-\r\n-  // Linha do \"agora\" (reimplementada) — desenha uma linha absoluta dentro do body da grade\r\n-  function drawNowLine() {\r\n-    try {\r\n-      const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n-      if (!body) return;\r\n-\r\n-      // remove linhas antigas\r\n-      body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n-\r\n-      const now = new Date();\r\n-      const minutes = now.getHours() * 60 + now.getMinutes();\r\n-      const percent = minutes / (24 * 60);\r\n-      const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n-\r\n-      const line = document.createElement('div');\r\n-      line.className = 'agenda-nowline';\r\n-      line.style.position = 'absolute';\r\n-      line.style.left = '0';\r\n-      line.style.right = '0';\r\n-      line.style.top = `${y}px`;\r\n-      line.style.borderTop = '2px solid #f43f5e';\r\n-      line.style.pointerEvents = 'none';\r\n-      line.style.zIndex = '4';\r\n-      body.appendChild(line);\r\n-\r\n-      if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n-      window.__agendaNowTimer = setInterval(() => {\r\n-        try { drawNowLine(); } catch (_) {}\r\n-      }, 60000);\r\n-    } catch (e) {\r\n-      console.error('[drawNowLine] erro', e);\r\n-    }\r\n-  }\r\n-\r\n-  // === Reimplementa enableDragDrop (estava faltando) ===\r\n   function enableDragDrop() {\r\n-    try {\r\n-      injectDndStylesOnce();\r\n+    injectDndStylesOnce();\r\n \r\n-      const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n-      if (!body) {\r\n-        console.debug('[enableDragDrop] body não encontrado');\r\n-        return;\r\n-      }\r\n+    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n+    if (!body) return;\r\n \r\n-      // Garante que todos os cards possam ser arrastados\r\n-      body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n-        try { card.setAttribute('draggable', 'true'); } catch(_) {}\r\n-      });\r\n+    // 1) tornar todos os cards \"draggables\"\r\n+    body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n+      if (card.__dndBoundCard) return;\r\n+      card.__dndBoundCard = true;\r\n \r\n-      if (body.__dndDelegated) return;\r\n-      body.__dndDelegated = true;\r\n+      // garantir que o atributo esteja presente\r\n+      if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n \r\n-      // dragstart\r\n-      body.addEventListener('dragstart', (ev) => {\r\n-        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-        if (!card) return;\r\n+      card.addEventListener('dragstart', (ev) => {\r\n         const id = card.getAttribute('data-appointment-id') || '';\r\n-        if (!id || !ev.dataTransfer) return;\r\n-        try { ev.dataTransfer.setData('text/plain', id); } catch(_) {}\r\n-        try { ev.dataTransfer.setDragImage(card, 10, 10); } catch(_) {}\r\n+        ev.dataTransfer?.setData('text/plain', id);\r\n+        ev.dataTransfer?.setDragImage?.(card, 10, 10);\r\n         ev.dataTransfer.effectAllowed = 'move';\r\n         card.classList.add('is-dragging');\r\n-        console.debug('[enableDragDrop] dragstart id=', id);\r\n-      }, true);\r\n+      });\r\n \r\n-      // dragend\r\n-      body.addEventListener('dragend', (ev) => {\r\n-        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-        if (card) card.classList.remove('is-dragging');\r\n+      card.addEventListener('dragend', () => {\r\n+        card.classList.remove('is-dragging');\r\n         body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n-        console.debug('[enableDragDrop] dragend');\r\n-      }, true);\r\n+      });\r\n+    });\r\n \r\n-      // dragover\r\n-      body.addEventListener('dragover', (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n+    // 2) permitir soltar em qualquer célula de agenda (agenda-slot)\r\n+    body.querySelectorAll('.agenda-slot').forEach((slot) => {\r\n+      if (slot.__dndBoundSlot) return;\r\n+      slot.__dndBoundSlot = true;\r\n+\r\n+      slot.addEventListener('dragover', (ev) => {\r\n         ev.preventDefault();\r\n-        if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n+        ev.dataTransfer.dropEffect = 'move';\r\n         slot.classList.add('agenda-drop-target');\r\n       });\r\n \r\n-      // dragleave\r\n-      body.addEventListener('dragleave', (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n+      slot.addEventListener('dragleave', () => {\r\n         slot.classList.remove('agenda-drop-target');\r\n       });\r\n \r\n-      // drop\r\n-      body.addEventListener('drop', async (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n+      slot.addEventListener('drop', async (ev) => {\r\n         ev.preventDefault();\r\n         slot.classList.remove('agenda-drop-target');\r\n \r\n         const id = ev.dataTransfer?.getData('text/plain');\r\n-        if (!id) { console.error('[enableDragDrop] drop: id ausente'); return; }\r\n+        if (!id) return;\r\n \r\n         const newProf = slot.dataset.profissionalId;\r\n-        const hh = slot.dataset.hh;\r\n-        if (!newProf || !hh) { console.error('[enableDragDrop] drop: slot incompleto', newProf, hh); return; }\r\n+        const hh      = slot.dataset.hh; // ex: \"14:00\"\r\n+        if (!newProf || !hh) return;\r\n \r\n         const dateRaw = normalizeDate(dateInput?.value || todayStr());\r\n         const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n \r\n-        console.debug('[enableDragDrop] drop ->', { id, newProf, hh, scheduledAt });\r\n-\r\n         await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n       });\r\n+    });\r\n+  }\r\n+\r\n+  // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n+  function drawNowLine() {\r\n+    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n+    if (!body) return;\r\n+\r\n+    body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n+\r\n+    const now = new Date();\r\n+    const minutes = now.getHours() * 60 + now.getMinutes();\r\n+    const percent = minutes / (24 * 60);\r\n+    const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n+\r\n+    const line = document.createElement('div');\r\n+    line.className = 'agenda-nowline';\r\n+    line.style.top = `${y}px`;\r\n+    body.appendChild(line);\r\n+\r\n+    if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n+    window.__agendaNowTimer = setInterval(() => {\r\n+      drawNowLine();\r\n+    }, 60000);\r\n+  }\r\n+\r\n+  // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n+  async function updateStatusQuick(id, status) {\r\n+    try {\r\n+      const resp = await api(`/func/agendamentos/${id}`, {\r\n+        method: 'PUT',\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify({ status })\r\n+      });\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(() => ({}));\r\n+        throw new Error(err.message || 'Erro ao mudar status');\r\n+      }\r\n+      await loadAgendamentos();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n     } catch (e) {\r\n-      console.error('[enableDragDrop] erro', e);\r\n+      console.error('updateStatusQuick', e);\r\n+      alert(e.message || 'Erro ao mudar status');\r\n     }\r\n   }\r\n \r\n-  // DEBUG: listeners globais para capturar eventos de drag/pointer/mouse caso os logs locais não apareçam\r\n-  (function attachGlobalDebug() {\r\n-    if (window.__agendaDebugAttached) return;\r\n-    window.__agendaDebugAttached = true;\r\n+    // === Impressão em cupom (80mm) ===\r\n+  function buildCupomHTML(items, meta = {}) {\r\n+    const storeName = (meta.storeName || '').trim();\r\n+    const dateStr   = (meta.dateStr || '').trim();\r\n \r\n-    const dbg = (...args) => { try { console.debug('[Agenda-Debug]', ...args); } catch(_) {} };\r\n+    const rows = (items || []).map(a => {\r\n+      const pet   = (a.pet || '').toString().trim();\r\n+      const serv  = (a.servico || '').toString().trim();\r\n+      const valor = money(Number(a.valor || 0));\r\n+      // \"Pet Serviço - Valor\" em linha única\r\n+      return `<div class=\"row\"><span class=\"txt\">${pet} ${serv}</span><span class=\"val\">${valor}</span></div>`;\r\n+    }).join('');\r\n \r\n-    document.addEventListener('dragstart', (ev) => {\r\n-      const t = ev.target;\r\n-      dbg('document.dragstart target:', t && t.getAttribute ? t.getAttribute('data-appointment-id') || t.tagName : t);\r\n-    }, true);\r\n+    return `\r\n+  <!doctype html>\r\n+  <html>\r\n+  <head>\r\n+    <meta charset=\"utf-8\">\r\n+    <title>Impressão</title>\r\n+    <style>\r\n+      @page { size: 80mm auto; margin: 3mm; }\r\n+      * { box-sizing: border-box; }\r\n+      html, body { padding: 0; margin: 0; }\r\n+      /* Aumenta um pouco o tamanho e usa preto sólido para ganhar contraste na térmica */\r\n+      body {\r\n+        width: 74mm;\r\n+        font: 13px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\";\r\n+        color: #000;\r\n+        -webkit-font-smoothing: none; /* deixa o traço mais “cheio” na impressão */\r\n+        font-weight: 600; /* base mais pesada */\r\n+      }\r\n+      .wrap { padding: 2mm 0; }\r\n+      .h1 { text-align:center; font-weight:700; font-size: 15px; margin-bottom: 1mm; }\r\n+      .meta { text-align:center; font-size: 12px; color:#000; font-weight:700; margin-bottom: 2mm; }\r\n+      .hr { border-top: 1px dashed #000; margin: 2mm 0; }\r\n+      .row { display:flex; align-items:flex-start; justify-content:space-between; gap: 4mm; padding: 1mm 0; }\r\n+      /* Linhas do cupom bem escuras */\r\n+      .row .txt { flex: 1 1 auto; word-break: break-word; font-weight:700; }\r\n+      .row .val { flex: 0 0 auto; white-space: nowrap; font-weight:700; }\r\n+      .foot { text-align:center; margin-top: 2mm; font-size: 12px; color:#000; font-weight:700; }\r\n+      @media print { .no-print { display: none !important; } }\r\n+    </style>\r\n+  </head>\r\n+  <body>\r\n+    <div class=\"wrap\">\r\n+      <div class=\"h1\">Agenda</div>\r\n+      <div class=\"meta\">${storeName ? storeName + ' • ' : ''}${dateStr}</div>\r\n+      <div class=\"hr\"></div>\r\n+      ${rows || '<div class=\"row\"><span class=\"txt\">Sem itens</span><span class=\"val\"></span></div>'}\r\n+      <div class=\"hr\"></div>\r\n+      <div class=\"foot\">Obrigado!</div>\r\n+    </div>\r\n+    <script>\r\n+      window.onload = function(){ setTimeout(function(){ window.print(); }, 50); };\r\n+      window.onafterprint = function(){ setTimeout(function(){ window.close(); }, 50); };\r\n+    </script>\r\n+  </body>\r\n+  </html>`;\r\n+  }\r\n \r\n-    document.addEventListener('dragend', (ev) => { dbg('document.dragend'); }, true);\r\n-    document.addEventListener('dragover', (ev) => { dbg('document.dragover target:', ev.target && ev.target.tagName); }, true);\r\n-    document.addEventListener('drop', (ev) => { dbg('document.drop target:', ev.target && ev.target.tagName); }, true);\r\n+  function handlePrintCupom() {\r\n+    try {\r\n+      const items = getFilteredAgendamentos();\r\n \r\n-    // mousedown/pointerdown para ver se algo intercepta antes do drag\r\n-    document.addEventListener('pointerdown', (ev) => {\r\n-      const t = ev.target;\r\n-      dbg('pointerdown on', t && (t.getAttribute ? (t.getAttribute('data-appointment-id') || t.tagName) : t));\r\n-    }, true);\r\n-    document.addEventListener('mousedown', (ev) => {\r\n-      const t = ev.target;\r\n-      dbg('mousedown on', t && (t.getAttribute ? (t.getAttribute('data-appointment-id') || t.tagName) : t));\r\n-    }, true);\r\n+      // Ordena por horário (se houver)\r\n+      items.sort((a, b) => {\r\n+        const da = new Date(a.h || a.scheduledAt || 0).getTime();\r\n+        const db = new Date(b.h || b.scheduledAt || 0).getTime();\r\n+        return da - db;\r\n+      });\r\n \r\n-    // monitora atributos draggable em cards periodicamente por 2s após render\r\n-    let checks = 0;\r\n-    const iv = setInterval(() => {\r\n-      checks++;\r\n-      const any = document.querySelectorAll('div[data-appointment-id]');\r\n-      dbg('audit: cards count=', any.length);\r\n-      any.forEach(c => dbg('  card', c.getAttribute('data-appointment-id'), 'draggable=', c.getAttribute('draggable'), 'style.pointerEvents=', getComputedStyle(c).pointerEvents));\r\n-      if (checks > 4) clearInterval(iv);\r\n-    }, 400);\r\n-  })();\r\n-  \r\n+      const dateStr =\r\n+        (document.getElementById('agenda-date-label-visible')?.textContent || '').trim() ||\r\n+        new Date((normalizeDate(dateInput?.value || todayStr())) + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+\r\n+      const storeName =\r\n+        (document.getElementById('agenda-store-label-visible')?.textContent || '').trim();\r\n+\r\n+      const html = buildCupomHTML(items, { storeName, dateStr });\r\n+\r\n+      const w = window.open('', 'print_cupom', 'width=420,height=600');\r\n+      if (!w) { alert('O navegador bloqueou a janela de impressão. Habilite pop-ups para continuar.'); return; }\r\n+      w.document.open('text/html');\r\n+      w.document.write(html);\r\n+      w.document.close();\r\n+      w.focus();\r\n+    } catch (e) {\r\n+      console.error('handlePrintCupom', e);\r\n+      alert('Não foi possível preparar a impressão.');\r\n+    }\r\n+  }\r\n+\r\n   // Events\r\n   addBtn?.addEventListener('click', openAddModal);\r\n   modalClose?.addEventListener('click', closeModal);\r\n   modalCancel?.addEventListener('click', closeModal);\r\n"
                },
                {
                    "date": 1757442502130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1159,61 +1159,72 @@\n \r\n     const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n     if (!body) return;\r\n \r\n-    // 1) tornar todos os cards \"draggables\"\r\n+    // Garante que todos os cards estejam \"arrastáveis\"\r\n     body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n-      if (card.__dndBoundCard) return;\r\n-      card.__dndBoundCard = true;\r\n-\r\n-      // garantir que o atributo esteja presente\r\n       if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n+    });\r\n \r\n-      card.addEventListener('dragstart', (ev) => {\r\n-        const id = card.getAttribute('data-appointment-id') || '';\r\n-        ev.dataTransfer?.setData('text/plain', id);\r\n-        ev.dataTransfer?.setDragImage?.(card, 10, 10);\r\n-        ev.dataTransfer.effectAllowed = 'move';\r\n-        card.classList.add('is-dragging');\r\n-      });\r\n+    // Evita múltiplos binds ao re-renderizar a agenda\r\n+    if (body.__dndDelegated) return;\r\n+    body.__dndDelegated = true;\r\n \r\n-      card.addEventListener('dragend', () => {\r\n-        card.classList.remove('is-dragging');\r\n-        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n-      });\r\n-    });\r\n+    // DRAGSTART (captura): funciona mesmo se o usuário começar o arrasto em um filho do card\r\n+    body.addEventListener('dragstart', (ev) => {\r\n+      const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+      if (!card || !ev.dataTransfer) return;\r\n \r\n-    // 2) permitir soltar em qualquer célula de agenda (agenda-slot)\r\n-    body.querySelectorAll('.agenda-slot').forEach((slot) => {\r\n-      if (slot.__dndBoundSlot) return;\r\n-      slot.__dndBoundSlot = true;\r\n+      const id = card.getAttribute('data-appointment-id') || '';\r\n+      if (!id) return;\r\n \r\n-      slot.addEventListener('dragover', (ev) => {\r\n-        ev.preventDefault();\r\n-        ev.dataTransfer.dropEffect = 'move';\r\n-        slot.classList.add('agenda-drop-target');\r\n-      });\r\n+      try { ev.dataTransfer.setData('text/plain', id); } catch (_) {}\r\n+      try { ev.dataTransfer.setDragImage(card, 10, 10); } catch (_) {}\r\n+      ev.dataTransfer.effectAllowed = 'move';\r\n+      card.classList.add('is-dragging');\r\n+    }, true);\r\n \r\n-      slot.addEventListener('dragleave', () => {\r\n-        slot.classList.remove('agenda-drop-target');\r\n-      });\r\n+    // DRAGEND: limpa estados visuais\r\n+    body.addEventListener('dragend', (ev) => {\r\n+      const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+      if (card) card.classList.remove('is-dragging');\r\n+      body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n+    }, true);\r\n \r\n-      slot.addEventListener('drop', async (ev) => {\r\n-        ev.preventDefault();\r\n-        slot.classList.remove('agenda-drop-target');\r\n+    // DRAGOVER: habilita drop quando o ponteiro está sobre QUALQUER filho dentro da célula\r\n+    body.addEventListener('dragover', (ev) => {\r\n+      const slot = ev.target?.closest?.('.agenda-slot');\r\n+      if (!slot) return;\r\n+      ev.preventDefault();                 // obrigatório para permitir drop\r\n+      if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n+      slot.classList.add('agenda-drop-target');\r\n+    });\r\n \r\n-        const id = ev.dataTransfer?.getData('text/plain');\r\n-        if (!id) return;\r\n+    // DRAGLEAVE: remove realce\r\n+    body.addEventListener('dragleave', (ev) => {\r\n+      const slot = ev.target?.closest?.('.agenda-slot');\r\n+      if (!slot) return;\r\n+      slot.classList.remove('agenda-drop-target');\r\n+    });\r\n \r\n-        const newProf = slot.dataset.profissionalId;\r\n-        const hh      = slot.dataset.hh; // ex: \"14:00\"\r\n-        if (!newProf || !hh) return;\r\n+    // DROP: pega a célula alvo e move (profissional + horário)\r\n+    body.addEventListener('drop', async (ev) => {\r\n+      const slot = ev.target?.closest?.('.agenda-slot');\r\n+      if (!slot) return;\r\n+      ev.preventDefault();\r\n+      slot.classList.remove('agenda-drop-target');\r\n \r\n-        const dateRaw = normalizeDate(dateInput?.value || todayStr());\r\n-        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n+      const id = ev.dataTransfer?.getData('text/plain');\r\n+      if (!id) return;\r\n \r\n-        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n-      });\r\n+      const newProf = slot.dataset.profissionalId;\r\n+      const hh      = slot.dataset.hh; // ex.: \"14:00\"\r\n+      if (!newProf || !hh) return;\r\n+\r\n+      const dateRaw    = normalizeDate(dateInput?.value || todayStr());\r\n+      const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n+\r\n+      await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n     });\r\n   }\r\n \r\n   // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n"
                },
                {
                    "date": 1757444424936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1154,78 +1154,79 @@\n     }\r\n   }\r\n \r\n   function enableDragDrop() {\r\n-    injectDndStylesOnce();\r\n+      injectDndStylesOnce();\r\n \r\n-    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n-    if (!body) return;\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n \r\n-    // Garante que todos os cards estejam \"arrastáveis\"\r\n-    body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n-      if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n-    });\r\n+      // Garante que todos os cards estejam \"arrastáveis\"\r\n+      body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n+        if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n+      });\r\n \r\n-    // Evita múltiplos binds ao re-renderizar a agenda\r\n-    if (body.__dndDelegated) return;\r\n-    body.__dndDelegated = true;\r\n+      // Evita múltiplos binds ao re-renderizar a agenda\r\n+      if (body.__dndDelegated) return;\r\n+      body.__dndDelegated = true;\r\n \r\n-    // DRAGSTART (captura): funciona mesmo se o usuário começar o arrasto em um filho do card\r\n-    body.addEventListener('dragstart', (ev) => {\r\n-      const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-      if (!card || !ev.dataTransfer) return;\r\n+      // DRAGSTART (captura): funciona mesmo se o usuário começar o arrasto em um filho do card\r\n+      body.addEventListener('dragstart', (ev) => {\r\n+        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+        if (!card || !ev.dataTransfer) return;\r\n \r\n-      const id = card.getAttribute('data-appointment-id') || '';\r\n-      if (!id) return;\r\n+        const id = card.getAttribute('data-appointment-id') || '';\r\n+        if (!id) return;\r\n \r\n-      try { ev.dataTransfer.setData('text/plain', id); } catch (_) {}\r\n-      try { ev.dataTransfer.setDragImage(card, 10, 10); } catch (_) {}\r\n-      ev.dataTransfer.effectAllowed = 'move';\r\n-      card.classList.add('is-dragging');\r\n-    }, true);\r\n+        try { ev.dataTransfer.setData('text/plain', id); } catch (_) {}\r\n+        try { ev.dataTransfer.setDragImage(card, 10, 10); } catch (_) {}\r\n+        ev.dataTransfer.effectAllowed = 'move';\r\n+        card.classList.add('is-dragging');\r\n+      }, true);\r\n \r\n-    // DRAGEND: limpa estados visuais\r\n-    body.addEventListener('dragend', (ev) => {\r\n-      const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-      if (card) card.classList.remove('is-dragging');\r\n-      body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n-    }, true);\r\n+      // DRAGEND: limpa estados visuais\r\n+      body.addEventListener('dragend', (ev) => {\r\n+        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+        if (card) card.classList.remove('is-dragging');\r\n+        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n+      }, true);\r\n \r\n-    // DRAGOVER: habilita drop quando o ponteiro está sobre QUALQUER filho dentro da célula\r\n-    body.addEventListener('dragover', (ev) => {\r\n-      const slot = ev.target?.closest?.('.agenda-slot');\r\n-      if (!slot) return;\r\n-      ev.preventDefault();                 // obrigatório para permitir drop\r\n-      if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n-      slot.classList.add('agenda-drop-target');\r\n-    });\r\n+      // DRAGOVER: habilita drop quando o ponteiro está sobre QUALQUER filho dentro da célula\r\n+      body.addEventListener('dragover', (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        ev.preventDefault();                 // obrigatório para permitir drop\r\n+        if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n+        slot.classList.add('agenda-drop-target');\r\n+      });\r\n \r\n-    // DRAGLEAVE: remove realce\r\n-    body.addEventListener('dragleave', (ev) => {\r\n-      const slot = ev.target?.closest?.('.agenda-slot');\r\n-      if (!slot) return;\r\n-      slot.classList.remove('agenda-drop-target');\r\n-    });\r\n+      // DRAGLEAVE: remove realce\r\n+      body.addEventListener('dragleave', (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        slot.classList.remove('agenda-drop-target');\r\n+      });\r\n \r\n-    // DROP: pega a célula alvo e move (profissional + horário)\r\n-    body.addEventListener('drop', async (ev) => {\r\n-      const slot = ev.target?.closest?.('.agenda-slot');\r\n-      if (!slot) return;\r\n-      ev.preventDefault();\r\n-      slot.classList.remove('agenda-drop-target');\r\n+      // DROP: pega a célula alvo e move (profissional + horário)\r\n+      body.addEventListener('drop', async (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        ev.preventDefault();\r\n+        slot.classList.remove('agenda-drop-target');\r\n \r\n-      const id = ev.dataTransfer?.getData('text/plain');\r\n-      if (!id) return;\r\n+        const id = ev.dataTransfer?.getData('text/plain');\r\n+        if (!id) return;\r\n \r\n-      const newProf = slot.dataset.profissionalId;\r\n-      const hh      = slot.dataset.hh; // ex.: \"14:00\"\r\n-      if (!newProf || !hh) return;\r\n+        const newProf = slot.dataset.profissionalId;\r\n+        const hh      = slot.dataset.hh; // ex.: \"14:00\"\r\n+        if (!newProf || !hh) return;\r\n \r\n-      const dateRaw    = normalizeDate(dateInput?.value || todayStr());\r\n-      const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n+        const dateRaw     = normalizeDate(dateInput?.value || todayStr());\r\n+        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n \r\n-      await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n-    });\r\n+        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n+      });\r\n   }\r\n \r\n   // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n   function drawNowLine() {\r\n"
                },
                {
                    "date": 1757444439263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1229,27 +1229,33 @@\n   }\r\n \r\n   // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n   function drawNowLine() {\r\n-    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n-    if (!body) return;\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n \r\n-    body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n+      body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n \r\n-    const now = new Date();\r\n-    const minutes = now.getHours() * 60 + now.getMinutes();\r\n-    const percent = minutes / (24 * 60);\r\n-    const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n+      const now = new Date();\r\n+      const minutes = now.getHours() * 60 + now.getMinutes();\r\n+      const percent = minutes / (24 * 60);\r\n+      const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n \r\n-    const line = document.createElement('div');\r\n-    line.className = 'agenda-nowline';\r\n-    line.style.top = `${y}px`;\r\n-    body.appendChild(line);\r\n+      const line = document.createElement('div');\r\n+      line.className = 'agenda-nowline';\r\n+      line.style.top = `${y}px`;\r\n+      body.appendChild(line);\r\n \r\n-    if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n-    window.__agendaNowTimer = setInterval(() => {\r\n-      drawNowLine();\r\n-    }, 60000);\r\n+      if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n+      window.__agendaNowTimer = setInterval(() => {\r\n+        const now2 = new Date();\r\n+        const minutes2 = now2.getHours() * 60 + now2.getMinutes();\r\n+        const percent2 = minutes2 / (24 * 60);\r\n+        const y2 = Math.max(0, Math.min(1, percent2)) * body.scrollHeight;\r\n+        const ln = body.querySelector('.agenda-nowline');\r\n+        if (ln) ln.style.top = `${y2}px`;\r\n+      }, 60_000);\r\n   }\r\n \r\n   // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n   async function updateStatusQuick(id, status) {\r\n"
                },
                {
                    "date": 1757444452009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1063,33 +1063,39 @@\n   }\r\n \r\n   // Zebra de linhas + sublinha 30min com CSS (via classe)\r\n   function applyZebraAndSublines() {\r\n-    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n-    if (!body) return;\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n \r\n-    body.style.position = 'relative'; // para linha do \"agora\"\r\n-    const totalCols = 1 + (state.profissionais?.length || 0); // 1 (hora) + N profissionais\r\n-    if (totalCols <= 0) return;\r\n+      body.style.position = 'relative'; // para linha do \"agora\"\r\n+      const totalCols = 1 + (state.profissionais?.length || 0); // 1 (hora) + N profissionais\r\n+      if (totalCols <= 0) return;\r\n \r\n-    const cells = Array.from(body.children);\r\n-    const totalRows = Math.floor(cells.length / totalCols);\r\n+      const cells = Array.from(body.children);\r\n+      const totalRows = Math.floor(cells.length / totalCols);\r\n \r\n-    for (let row = 0; row < totalRows; row++) {\r\n-      const start = row * totalCols;\r\n-      const zebraClass = (row % 2 === 0) ? 'bg-white' : 'bg-slate-50';\r\n+      for (let row = 0; row < totalRows; row++) {\r\n+        const start = row * totalCols;\r\n+        const zebraClass = (row % 2 === 0) ? 'bg-white' : 'bg-slate-50';\r\n \r\n-      // primeira célula = hora\r\n-      const timeCell = cells[start];\r\n-      timeCell.classList.remove('bg-gray-50');\r\n-      timeCell.classList.add(zebraClass);\r\n+        // primeira coluna (hora)\r\n+        const tCell = cells[start];\r\n+        if (tCell) {\r\n+          tCell.classList.remove('bg-white','bg-slate-50');\r\n+          tCell.classList.add(zebraClass);\r\n+        }\r\n \r\n-      // colunas da linha\r\n-      for (let i = 1; i < totalCols; i++) {\r\n-        const colCell = cells[start + i];\r\n-        colCell.classList.add(zebraClass, 'agenda-slot'); // agenda-slot desenha sublinha (CSS)\r\n+        // colunas dos profissionais\r\n+        for (let col = 1; col < totalCols; col++) {\r\n+          const idx = start + col;\r\n+          const slot = cells[idx];\r\n+          if (!slot) continue;\r\n+          slot.classList.remove('bg-white','bg-slate-50');\r\n+          slot.classList.add(zebraClass, 'agenda-slot'); // garante classe\r\n+        }\r\n       }\r\n-    }\r\n   }\r\n \r\n   // Insere ícones de ação nos cartões (editar / mudar status)\r\n   function decorateCards() {\r\n"
                },
                {
                    "date": 1757444463463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -987,23 +987,23 @@\n     }\r\n   }\r\n \r\n   function scrollToNow() {\r\n-    const body = agendaList?.querySelector(':scope > div[style*=\"grid\"]');\r\n-    if (!body || !state.profissionais?.length) return;\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body || !state.profissionais?.length) return;\r\n \r\n-    // encontra a célula da primeira coluna de profissional no horário atual\r\n-    const now = new Date();\r\n-    const hh = String(now.getHours()).padStart(2, '0') + ':00';\r\n-    const firstProfId = String(state.profissionais[0]._id);\r\n-    const target = body.querySelector(`div[data-profissional-id=\"${firstProfId}\"][data-hh=\"${hh}\"]`);\r\n+      // encontra a célula da primeira coluna de profissional no horário atual\r\n+      const now = new Date();\r\n+      const hh = String(now.getHours()).padStart(2, '0') + ':00';\r\n+      const firstProfId = String(state.profissionais[0]._id);\r\n+      const target = body.querySelector(`div[data-profissional-id=\"${firstProfId}\"][data-hh=\"${hh}\"]`);\r\n \r\n-    if (target) {\r\n-      const top = target.getBoundingClientRect().top + window.pageYOffset;\r\n-      // sobe um pouco para mostrar contexto acima do \"agora\"\r\n-      const offset = 80;\r\n-      window.scrollTo({ top: Math.max(0, top - offset), behavior: 'smooth' });\r\n-    }\r\n+      if (target) {\r\n+        const top = target.getBoundingClientRect().top + window.pageYOffset;\r\n+        const offset = 80; // sobe um pouco para contexto\r\n+        window.scrollTo({ top: Math.max(0, top - offset), behavior: 'smooth' });\r\n+      }\r\n   }\r\n \r\n   // compacta a lista para um hash leve (ordem estável)\r\n   function snapshotHash(items) {\r\n"
                },
                {
                    "date": 1757445178871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -673,21 +673,22 @@\n     const dd = String(d.getDate()).padStart(2, '0');\r\n     return `${yyyy}-${mm}-${dd}`;\r\n   }\r\n \r\n-  async function openEditModal(a) {\r\n+  function openEditModal(a) {\r\n     state.editing = a || null;\r\n     if (!modal || !state.editing) return;\r\n \r\n-    // Empresa (mostra a loja do agendamento; desabilitar evita lista de profissionais divergente)\r\n+    // Empresa (mostra a loja do agendamento e permite trocar)\r\n     if (addStoreSelect) {\r\n       if (storeSelect && storeSelect.options.length) {\r\n         addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n       } else if (state.stores?.length) {\r\n         addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n       }\r\n       addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.disabled = true; // opcional; remova se quiser permitir trocar a loja\r\n+      // habilitado para permitir a troca de empresa no modal\r\n+      addStoreSelect.disabled = false;\r\n     }\r\n \r\n     // Data do agendamento\r\n     if (addDateInput) {\r\n@@ -699,48 +700,47 @@\n     const d = new Date((a.h || a.scheduledAt) || new Date());\r\n     const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n \r\n-    // Profissional\r\n+    // Profissional (tenta resolver o id atual)\r\n     let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n     if (!profId && typeof a.profissional === 'string') {\r\n       const key = a.profissional.trim().toLowerCase();\r\n       const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n       if (match) profId = String(match._id);\r\n     }\r\n     if (profSelect && profId) profSelect.value = profId;\r\n \r\n-    // Status (normalizado para bater com os values do <select>)\r\n+    // Ao abrir, carrega a lista de profissionais da empresa do modal e pré-seleciona o profissional\r\n+    try {\r\n+      const sid = addStoreSelect?.value || a.storeId || '';\r\n+      if (sid) { populateModalProfissionais(sid, profId); } // sem await para não travar a abertura\r\n+    } catch(_) {}\r\n+\r\n+    // Status (normalizado p/ os values do <select>)\r\n     if (statusSelect) {\r\n       const keyRaw = String(a.status || 'agendado')\r\n         .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n         .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n       const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n       statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n     }\r\n \r\n-    // Cliente (leitura)\r\n-    let clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n-    if (cliInput) {\r\n-      cliInput.disabled = true;\r\n-      cliInput.value = '(carregando...)';\r\n-      const nomeCli = await resolveClienteNome(a);\r\n-      cliInput.value = nomeCli || '';\r\n-    }\r\n-\r\n-    // Pet: editável\r\n+    // Cliente e Pet (preenche e bloqueia busca no modo edição)\r\n+    if (cliInput) { cliInput.value = (a.clienteNome || ''); cliInput.disabled = true; }\r\n     if (petSelect) {\r\n-      petSelect.disabled = false;\r\n       petSelect.innerHTML = '';\r\n       try {\r\n+        const clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n         if (clienteId) {\r\n-          const resp = await api(`/func/clientes/${clienteId}/pets`);\r\n-          const pets = await resp.json().catch(() => []);\r\n-          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+          api(`/func/clientes/${clienteId}/pets`).then(r => r.json().catch(() => []))\r\n+            .then(pets => {\r\n+              petSelect.innerHTML = (Array.isArray(pets) ? pets : []).map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+              const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n+              if (currentPetId) petSelect.value = String(currentPetId);\r\n+            });\r\n         }\r\n-      } catch (_) { /* silencioso */ }\r\n-      const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n-      if (currentPetId) petSelect.value = String(currentPetId);\r\n+      } catch (_) {}\r\n     }\r\n \r\n     // Serviço/Valor: leitura\r\n     if (servInput) { servInput.value = a.servico || ''; servInput.disabled = true; }\r\n"
                },
                {
                    "date": 1757445194648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,16 +304,22 @@\n     if (vis) vis.textContent = s ? s.nome : '—';\r\n   }\r\n \r\n   // Profissionais\r\n-  async function loadProfissionais() {\r\n-    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n-    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    state.profissionais = Array.isArray(list) ? list : [];\r\n-    if (profSelect) {\r\n-      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-    }\r\n+  async function populateModalProfissionais(storeId, preselectId) {\r\n+    try {\r\n+      if (!storeId || !profSelect) return;\r\n+      const resp = await api(`/func/profissionais/esteticistas?storeId=${storeId}`);\r\n+      const list = await resp.json().catch(() => []);\r\n+      const arr = Array.isArray(list) ? list : [];\r\n+      profSelect.innerHTML = arr.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+      const pid = preselectId ? String(preselectId) : '';\r\n+      if (pid && arr.some(p => String(p._id) === pid)) {\r\n+        profSelect.value = pid;\r\n+      } else if (arr[0]) {\r\n+        profSelect.value = String(arr[0]._id);\r\n+      }\r\n+    } catch(_) { /* silencioso no modal */ }\r\n   }\r\n \r\n   // Agendamentos\r\n   async function loadAgendamentos() {\r\n"
                },
                {
                    "date": 1757445215604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1387,8 +1387,14 @@\n   modalClose?.addEventListener('click', closeModal);\r\n   modalCancel?.addEventListener('click', closeModal);\r\n   modalSave?.addEventListener('click', saveAgendamento);\r\n \r\n+  addStoreSelect?.addEventListener('change', () => {\r\n+    const sid = addStoreSelect.value;\r\n+    const pre = profSelect?.value || '';\r\n+    populateModalProfissionais(sid, pre);\r\n+  });\r\n+\r\n   // Botão \"Imprimir\" — cupom 80mm com \"Pet Serviço - Valor\"\r\n     (function () {\r\n       const btn0 = document.getElementById('print-agenda-btn');\r\n       // (se algum listener antigo ainda existir em outro build, garantimos o nosso fluxo)\r\n"
                },
                {
                    "date": 1757445230366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,22 +304,16 @@\n     if (vis) vis.textContent = s ? s.nome : '—';\r\n   }\r\n \r\n   // Profissionais\r\n-  async function populateModalProfissionais(storeId, preselectId) {\r\n-    try {\r\n-      if (!storeId || !profSelect) return;\r\n-      const resp = await api(`/func/profissionais/esteticistas?storeId=${storeId}`);\r\n-      const list = await resp.json().catch(() => []);\r\n-      const arr = Array.isArray(list) ? list : [];\r\n-      profSelect.innerHTML = arr.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-      const pid = preselectId ? String(preselectId) : '';\r\n-      if (pid && arr.some(p => String(p._id) === pid)) {\r\n-        profSelect.value = pid;\r\n-      } else if (arr[0]) {\r\n-        profSelect.value = String(arr[0]._id);\r\n-      }\r\n-    } catch(_) { /* silencioso no modal */ }\r\n+  async function loadProfissionais() {\r\n+    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n+    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.profissionais = Array.isArray(list) ? list : [];\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+    }\r\n   }\r\n \r\n   // Agendamentos\r\n   async function loadAgendamentos() {\r\n@@ -679,22 +673,21 @@\n     const dd = String(d.getDate()).padStart(2, '0');\r\n     return `${yyyy}-${mm}-${dd}`;\r\n   }\r\n \r\n-  function openEditModal(a) {\r\n+  async function openEditModal(a) {\r\n     state.editing = a || null;\r\n     if (!modal || !state.editing) return;\r\n \r\n-    // Empresa (mostra a loja do agendamento e permite trocar)\r\n+    // Empresa (mostra a loja do agendamento; desabilitar evita lista de profissionais divergente)\r\n     if (addStoreSelect) {\r\n       if (storeSelect && storeSelect.options.length) {\r\n         addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n       } else if (state.stores?.length) {\r\n         addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n       }\r\n       addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n-      // habilitado para permitir a troca de empresa no modal\r\n-      addStoreSelect.disabled = false;\r\n+      addStoreSelect.disabled = true; // opcional; remova se quiser permitir trocar a loja\r\n     }\r\n \r\n     // Data do agendamento\r\n     if (addDateInput) {\r\n@@ -706,47 +699,48 @@\n     const d = new Date((a.h || a.scheduledAt) || new Date());\r\n     const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n \r\n-    // Profissional (tenta resolver o id atual)\r\n+    // Profissional\r\n     let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n     if (!profId && typeof a.profissional === 'string') {\r\n       const key = a.profissional.trim().toLowerCase();\r\n       const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n       if (match) profId = String(match._id);\r\n     }\r\n     if (profSelect && profId) profSelect.value = profId;\r\n \r\n-    // Ao abrir, carrega a lista de profissionais da empresa do modal e pré-seleciona o profissional\r\n-    try {\r\n-      const sid = addStoreSelect?.value || a.storeId || '';\r\n-      if (sid) { populateModalProfissionais(sid, profId); } // sem await para não travar a abertura\r\n-    } catch(_) {}\r\n-\r\n-    // Status (normalizado p/ os values do <select>)\r\n+    // Status (normalizado para bater com os values do <select>)\r\n     if (statusSelect) {\r\n       const keyRaw = String(a.status || 'agendado')\r\n         .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n         .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n       const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n       statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n     }\r\n \r\n-    // Cliente e Pet (preenche e bloqueia busca no modo edição)\r\n-    if (cliInput) { cliInput.value = (a.clienteNome || ''); cliInput.disabled = true; }\r\n+    // Cliente (leitura)\r\n+    let clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n+    if (cliInput) {\r\n+      cliInput.disabled = true;\r\n+      cliInput.value = '(carregando...)';\r\n+      const nomeCli = await resolveClienteNome(a);\r\n+      cliInput.value = nomeCli || '';\r\n+    }\r\n+\r\n+    // Pet: editável\r\n     if (petSelect) {\r\n+      petSelect.disabled = false;\r\n       petSelect.innerHTML = '';\r\n       try {\r\n-        const clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n         if (clienteId) {\r\n-          api(`/func/clientes/${clienteId}/pets`).then(r => r.json().catch(() => []))\r\n-            .then(pets => {\r\n-              petSelect.innerHTML = (Array.isArray(pets) ? pets : []).map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-              const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n-              if (currentPetId) petSelect.value = String(currentPetId);\r\n-            });\r\n+          const resp = await api(`/func/clientes/${clienteId}/pets`);\r\n+          const pets = await resp.json().catch(() => []);\r\n+          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n         }\r\n-      } catch (_) {}\r\n+      } catch (_) { /* silencioso */ }\r\n+      const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n+      if (currentPetId) petSelect.value = String(currentPetId);\r\n     }\r\n \r\n     // Serviço/Valor: leitura\r\n     if (servInput) { servInput.value = a.servico || ''; servInput.disabled = true; }\r\n@@ -1387,14 +1381,8 @@\n   modalClose?.addEventListener('click', closeModal);\r\n   modalCancel?.addEventListener('click', closeModal);\r\n   modalSave?.addEventListener('click', saveAgendamento);\r\n \r\n-  addStoreSelect?.addEventListener('change', () => {\r\n-    const sid = addStoreSelect.value;\r\n-    const pre = profSelect?.value || '';\r\n-    populateModalProfissionais(sid, pre);\r\n-  });\r\n-\r\n   // Botão \"Imprimir\" — cupom 80mm com \"Pet Serviço - Valor\"\r\n     (function () {\r\n       const btn0 = document.getElementById('print-agenda-btn');\r\n       // (se algum listener antigo ainda existir em outro build, garantimos o nosso fluxo)\r\n"
                },
                {
                    "date": 1757449231444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,16 +304,22 @@\n     if (vis) vis.textContent = s ? s.nome : '—';\r\n   }\r\n \r\n   // Profissionais\r\n-  async function loadProfissionais() {\r\n-    if (!state.selectedStoreId) { state.profissionais = []; return; }\r\n-    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    state.profissionais = Array.isArray(list) ? list : [];\r\n-    if (profSelect) {\r\n-      profSelect.innerHTML = state.profissionais.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-    }\r\n+  async function populateModalProfissionais(storeId, preselectId) {\r\n+    try {\r\n+      if (!storeId || !profSelect) return;\r\n+      const resp = await api(`/func/profissionais/esteticistas?storeId=${storeId}`);\r\n+      const list = await resp.json().catch(() => []);\r\n+      const arr = Array.isArray(list) ? list : [];\r\n+      profSelect.innerHTML = arr.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+      const pid = preselectId ? String(preselectId) : '';\r\n+      if (pid && arr.some(p => String(p._id) === pid)) {\r\n+        profSelect.value = pid;\r\n+      } else if (arr[0]) {\r\n+        profSelect.value = String(arr[0]._id);\r\n+      }\r\n+    } catch(_) { /* silencioso no modal */ }\r\n   }\r\n \r\n   // Agendamentos\r\n   async function loadAgendamentos() {\r\n@@ -580,8 +586,10 @@\n         addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n       }\r\n       const sid = state.selectedStoreId || storeSelect?.value || '';\r\n       addStoreSelect.value = sid;\r\n+\r\n+      try { if (sid) { populateModalProfissionais(sid); } } catch(_) {}\r\n     }\r\n \r\n     // Data (usa a data visível na página)\r\n     if (addDateInput) {\r\n@@ -673,21 +681,21 @@\n     const dd = String(d.getDate()).padStart(2, '0');\r\n     return `${yyyy}-${mm}-${dd}`;\r\n   }\r\n \r\n-  async function openEditModal(a) {\r\n+  function openEditModal(a) {\r\n     state.editing = a || null;\r\n     if (!modal || !state.editing) return;\r\n \r\n-    // Empresa (mostra a loja do agendamento; desabilitar evita lista de profissionais divergente)\r\n+    // Empresa (mostra a loja do agendamento e permite trocar)\r\n     if (addStoreSelect) {\r\n       if (storeSelect && storeSelect.options.length) {\r\n         addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n       } else if (state.stores?.length) {\r\n         addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n       }\r\n       addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.disabled = true; // opcional; remova se quiser permitir trocar a loja\r\n+      addStoreSelect.disabled = false;\r\n     }\r\n \r\n     // Data do agendamento\r\n     if (addDateInput) {\r\n@@ -699,48 +707,47 @@\n     const d = new Date((a.h || a.scheduledAt) || new Date());\r\n     const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n \r\n-    // Profissional\r\n+    // Profissional (tenta resolver o id atual)\r\n     let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n     if (!profId && typeof a.profissional === 'string') {\r\n       const key = a.profissional.trim().toLowerCase();\r\n       const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n       if (match) profId = String(match._id);\r\n     }\r\n     if (profSelect && profId) profSelect.value = profId;\r\n \r\n-    // Status (normalizado para bater com os values do <select>)\r\n+    // Ao abrir, carrega a lista de profissionais da empresa do modal e pré-seleciona o profissional\r\n+    try {\r\n+      const sid = addStoreSelect?.value || a.storeId || '';\r\n+      if (sid) { populateModalProfissionais(sid, profId); } // sem await para não travar a abertura\r\n+    } catch(_) {}\r\n+\r\n+    // Status (normalizado p/ os values do <select>)\r\n     if (statusSelect) {\r\n       const keyRaw = String(a.status || 'agendado')\r\n         .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n         .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n       const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n       statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n     }\r\n \r\n-    // Cliente (leitura)\r\n-    let clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n-    if (cliInput) {\r\n-      cliInput.disabled = true;\r\n-      cliInput.value = '(carregando...)';\r\n-      const nomeCli = await resolveClienteNome(a);\r\n-      cliInput.value = nomeCli || '';\r\n-    }\r\n-\r\n-    // Pet: editável\r\n+    // Cliente e Pet (preenche e bloqueia busca no modo edição)\r\n+    if (cliInput) { cliInput.value = (a.clienteNome || ''); cliInput.disabled = true; }\r\n     if (petSelect) {\r\n-      petSelect.disabled = false;\r\n       petSelect.innerHTML = '';\r\n       try {\r\n+        const clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n         if (clienteId) {\r\n-          const resp = await api(`/func/clientes/${clienteId}/pets`);\r\n-          const pets = await resp.json().catch(() => []);\r\n-          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+          api(`/func/clientes/${clienteId}/pets`).then(r => r.json().catch(() => []))\r\n+            .then(pets => {\r\n+              petSelect.innerHTML = (Array.isArray(pets) ? pets : []).map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+              const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n+              if (currentPetId) petSelect.value = String(currentPetId);\r\n+            });\r\n         }\r\n-      } catch (_) { /* silencioso */ }\r\n-      const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n-      if (currentPetId) petSelect.value = String(currentPetId);\r\n+      } catch (_) {}\r\n     }\r\n \r\n     // Serviço/Valor: leitura\r\n     if (servInput) { servInput.value = a.servico || ''; servInput.disabled = true; }\r\n@@ -1381,8 +1388,14 @@\n   modalClose?.addEventListener('click', closeModal);\r\n   modalCancel?.addEventListener('click', closeModal);\r\n   modalSave?.addEventListener('click', saveAgendamento);\r\n \r\n+  addStoreSelect?.addEventListener('change', () => {\r\n+    const sid = addStoreSelect.value;\r\n+    const pre = profSelect?.value || '';\r\n+    populateModalProfissionais(sid, pre);\r\n+  });\r\n+\r\n   // Botão \"Imprimir\" — cupom 80mm com \"Pet Serviço - Valor\"\r\n     (function () {\r\n       const btn0 = document.getElementById('print-agenda-btn');\r\n       // (se algum listener antigo ainda existir em outro build, garantimos o nosso fluxo)\r\n"
                },
                {
                    "date": 1757449293731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -693,9 +693,9 @@\n       } else if (state.stores?.length) {\r\n         addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n       }\r\n       addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.disabled = false;\r\n+      addStoreSelect.disabled = true;\r\n     }\r\n \r\n     // Data do agendamento\r\n     if (addDateInput) {\r\n"
                },
                {
                    "date": 1757449340929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -693,9 +693,9 @@\n       } else if (state.stores?.length) {\r\n         addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n       }\r\n       addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.disabled = true;\r\n+      addStoreSelect.disabled = false;\r\n     }\r\n \r\n     // Data do agendamento\r\n     if (addDateInput) {\r\n"
                },
                {
                    "date": 1757449419610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,9 +317,9 @@\n         profSelect.value = pid;\r\n       } else if (arr[0]) {\r\n         profSelect.value = String(arr[0]._id);\r\n       }\r\n-    } catch(_) { /* silencioso no modal */ }\r\n+    } catch (_) { /* silencioso no modal */ }\r\n   }\r\n \r\n   // Agendamentos\r\n   async function loadAgendamentos() {\r\n@@ -716,13 +716,13 @@\n       if (match) profId = String(match._id);\r\n     }\r\n     if (profSelect && profId) profSelect.value = profId;\r\n \r\n-    // Ao abrir, carrega a lista de profissionais da empresa do modal e pré-seleciona o profissional\r\n+    // Ao abrir o modal de edição, carregamos os profissionais da EMPRESA selecionada no modal\r\n     try {\r\n       const sid = addStoreSelect?.value || a.storeId || '';\r\n-      if (sid) { populateModalProfissionais(sid, profId); } // sem await para não travar a abertura\r\n-    } catch(_) {}\r\n+      if (sid) { populateModalProfissionais(sid, profId); } // não bloqueia a abertura do modal\r\n+    } catch (_) {}\r\n \r\n     // Status (normalizado p/ os values do <select>)\r\n     if (statusSelect) {\r\n       const keyRaw = String(a.status || 'agendado')\r\n@@ -1390,10 +1390,10 @@\n   modalSave?.addEventListener('click', saveAgendamento);\r\n \r\n   addStoreSelect?.addEventListener('change', () => {\r\n     const sid = addStoreSelect.value;\r\n-    const pre = profSelect?.value || '';\r\n-    populateModalProfissionais(sid, pre);\r\n+    const current = profSelect?.value || '';\r\n+    populateModalProfissionais(sid, current);\r\n   });\r\n \r\n   // Botão \"Imprimir\" — cupom 80mm com \"Pet Serviço - Valor\"\r\n     (function () {\r\n"
                },
                {
                    "date": 1757449453115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -587,8 +587,9 @@\n       }\r\n       const sid = state.selectedStoreId || storeSelect?.value || '';\r\n       addStoreSelect.value = sid;\r\n \r\n+      // Carrega os profissionais correspondentes à empresa escolhida no modal (sem travar a abertura)\r\n       try { if (sid) { populateModalProfissionais(sid); } } catch(_) {}\r\n     }\r\n \r\n     // Data (usa a data visível na página)\r\n"
                },
                {
                    "date": 1757449684838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1241,8 +1241,26 @@\n         await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n       });\r\n   }\r\n \r\n+  async function loadProfissionais() {\r\n+    if (!state.selectedStoreId) {\r\n+      state.profissionais = [];\r\n+      if (profSelect) profSelect.innerHTML = '';\r\n+      return;\r\n+    }\r\n+\r\n+    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.profissionais = Array.isArray(list) ? list : [];\r\n+\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais\r\n+        .map(p => `<option value=\"${p._id}\">${p.nome}</option>`)\r\n+        .join('');\r\n+    }\r\n+  }\r\n+\r\n   // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n   function drawNowLine() {\r\n       const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n       const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n"
                },
                {
                    "date": 1757450542121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -858,27 +858,29 @@\n     return Promise.resolve(!!ok);\r\n   }\r\n \r\n   async function handleDelete() {\r\n-    const id = state.editing && state.editing._id ? String(state.editing._id) : null;\r\n-    if (!id) return;\r\n+      const id = state.editing && state.editing._id ? String(state.editing._id) : null;\r\n+      if (!id) return;\r\n \r\n-    const ok = await confirmAsync('Excluir atendimento', 'Tem certeza que deseja excluir este atendimento? Esta ação não pode ser desfeita.', {\r\n-      confirmText: 'Excluir',\r\n-      cancelText: 'Cancelar'\r\n-    });\r\n-    if (!ok) return;\r\n+      const ok = await confirmAsync('Excluir atendimento', 'Tem ce...a excluir este atendimento? Esta ação não pode ser desfeita.', {\r\n+        confirmText: 'Excluir',\r\n+        cancelText: 'Cancelar'\r\n+      });\r\n+      if (!ok) return;\r\n \r\n-    const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\r\n-    if (!resp.ok) {\r\n-      const err = await resp.json().catch(() => ({}));\r\n-      alert(err.message || 'Erro ao excluir agendamento');\r\n-      return;\r\n-    }\r\n-    await loadAgendamentos();\r\n-    closeModal();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n+      const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(() => ({}));\r\n+        alert(err.message || 'Erro ao excluir agendamento');\r\n+        return;\r\n+      }\r\n+      await loadAgendamentos();\r\n+      renderKpis();\r\n+      renderFilters();\r\n+      closeModal();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n   }\r\n \r\n   // Busca serviços\r\n   async function searchServicos(term) {\r\n@@ -906,77 +908,81 @@\n   }\r\n \r\n   // Salvar (adicionar/editar)\r\n   async function saveAgendamento() {\r\n-    try {\r\n-      const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n-      const storeIdSelected = (addStoreSelect?.value) || state.selectedStoreId || storeSelect?.value;\r\n-      const hora = horaInput?.value;\r\n-      const profissionalId = profSelect?.value;\r\n-      const status = (statusSelect?.value) || 'agendado';\r\n+      try {\r\n+        const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n+        const storeIdSelected = (addStoreSelect?.value) || state.selectedStoreId || storeSelect?.value;\r\n+        const hora = horaInput?.value;\r\n+        const profissionalId = profSelect?.value;\r\n+        const status = (statusSelect?.value) || 'agendado';\r\n \r\n-      if (!hora || !profissionalId) { alert('Preencha hora e profissional.'); return; }\r\n-      if (!storeIdSelected) { alert('Selecione a empresa.'); return; }\r\n+        if (!hora || !profissionalId) { alert('Preencha hora e profissional.'); return; }\r\n+        if (!storeIdSelected) { alert('Selecione a empresa.'); return; }\r\n \r\n-      const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n+        const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n \r\n-      // Edição\r\n-      if (state.editing && state.editing._id) {\r\n-        const id = state.editing._id;\r\n+        // Edição\r\n+        if (state.editing && state.editing._id) {\r\n+          const id = state.editing._id;\r\n+          const body = {\r\n+            storeId: storeIdSelected,\r\n+            profissionalId,\r\n+            scheduledAt,\r\n+            status,\r\n+            ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n+            ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n+            ...(state.editing.servicoId ? { servicoId: state.editing.servicoId } : {}),\r\n+            ...(typeof state.editing.valor !== 'undefined' ? { valor: state.editing.valor } : {}),\r\n+            ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n+          };\r\n+          const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\r\n+          if (!resp.ok) {\r\n+            const err = await resp.json().catch(() => ({}));\r\n+            throw new Error(err.message || 'Erro ao atualizar agendamento');\r\n+          }\r\n+          await loadAgendamentos();\r\n+          renderKpis();\r\n+          renderFilters();\r\n+          closeModal();\r\n+          renderGrid();\r\n+          enhanceAgendaUI();      // mantém zebra/linhas/auto-scroll\r\n+          return;\r\n+        }\r\n+\r\n+        // Adição\r\n+        const clienteId = state.selectedCliente?._id;\r\n+        const petId = petSelect?.value;\r\n+        const servicoId = state.selectedServico?._id;\r\n+        const valor = Number(valorInput?.value || 0);\r\n+\r\n+        if (!(clienteId && petId && servicoId)) { alert('Preencha cliente, pet e serviço.'); return; }\r\n+\r\n         const body = {\r\n           storeId: storeIdSelected,\r\n-          profissionalId,\r\n-          scheduledAt,\r\n+          clienteId, petId, servicoId,\r\n+          profissionalId, scheduledAt, valor,\r\n           status,\r\n-          ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n-          ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n-          ...(state.editing.servicoId ? { servicoId: state.editing.servicoId } : {}),\r\n-          ...(typeof state.editing.valor !== 'undefined' ? { valor: state.editing.valor } : {}),\r\n-          ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n+          pago: false\r\n         };\r\n-        const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\r\n+\r\n+        const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n         if (!resp.ok) {\r\n           const err = await resp.json().catch(() => ({}));\r\n-          throw new Error(err.message || 'Erro ao atualizar agendamento');\r\n+          throw new Error(err.message || 'Erro ao salvar');\r\n         }\r\n+\r\n         await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n         closeModal();\r\n         renderGrid();\r\n-        enhanceAgendaUI();      // <-- já existia aqui; mantido\r\n-        return;\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error(e);\r\n+        alert(e.message || 'Erro ao salvar');\r\n       }\r\n-\r\n-      // Adição\r\n-      const clienteId = state.selectedCliente?._id;\r\n-      const petId = petSelect?.value;\r\n-      const servicoId = state.selectedServico?._id;\r\n-      const valor = Number(valorInput?.value || 0);\r\n-\r\n-      if (!(clienteId && petId && servicoId)) { alert('Preencha cliente, pet e serviço.'); return; }\r\n-\r\n-      const body = {\r\n-        storeId: storeIdSelected,\r\n-        clienteId, petId, servicoId,\r\n-        profissionalId, scheduledAt, valor,\r\n-        status,\r\n-        pago: false\r\n-      };\r\n-\r\n-      const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(() => ({}));\r\n-        throw new Error(err.message || 'Erro ao salvar');\r\n-      }\r\n-\r\n-      await loadAgendamentos();\r\n-      closeModal();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();        // <-- ADICIONADO: aplica zebra, sublinhas, linha do agora e ações\r\n-    } catch (e) {\r\n-      console.error(e);\r\n-      alert(e.message || 'Erro ao salvar');\r\n     }\r\n-  }\r\n \r\n   function enhanceAgendaUI() {\r\n     try {\r\n       applyZebraAndSublines();\r\n@@ -1144,30 +1150,32 @@\n   }\r\n \r\n   // PUT rápido para mover agendamento (profissional/horário)\r\n   async function moveAppointmentQuick(id, payload) {\r\n-    try {\r\n-      const body = {\r\n-        ...payload,\r\n-        storeId: state.selectedStoreId || storeSelect?.value\r\n-      };\r\n-      const resp = await api(`/func/agendamentos/${id}`, {\r\n-        method: 'PUT',\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify(body)\r\n-      });\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(() => ({}));\r\n-        throw new Error(err.message || 'Erro ao mover agendamento');\r\n+      try {\r\n+        const body = {\r\n+          ...payload,\r\n+          storeId: state.selectedStoreId || storeSelect?.value\r\n+        };\r\n+        const resp = await api(`/func/agendamentos/${id}`, {\r\n+          method: 'PUT',\r\n+          headers: { 'Content-Type': 'application/json' },\r\n+          body: JSON.stringify(body)\r\n+        });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao mover agendamento');\r\n+        }\r\n+        await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error('moveAppointmentQuick', e);\r\n+        alert(e.message || 'Não foi possível mover o agendamento.');\r\n       }\r\n-      await loadAgendamentos();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    } catch (e) {\r\n-      console.error('moveAppointmentQuick', e);\r\n-      alert(e.message || 'Não foi possível mover o agendamento.');\r\n     }\r\n-  }\r\n \r\n   function enableDragDrop() {\r\n       injectDndStylesOnce();\r\n \r\n@@ -1290,26 +1298,28 @@\n   }\r\n \r\n   // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n   async function updateStatusQuick(id, status) {\r\n-    try {\r\n-      const resp = await api(`/func/agendamentos/${id}`, {\r\n-        method: 'PUT',\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify({ status })\r\n-      });\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(() => ({}));\r\n-        throw new Error(err.message || 'Erro ao mudar status');\r\n+      try {\r\n+        const resp = await api(`/func/agendamentos/${id}`, {\r\n+          method: 'PUT',\r\n+          headers: { 'Content-Type': 'application/json' },\r\n+          body: JSON.stringify({ status })\r\n+        });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao mudar status');\r\n+        }\r\n+        await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error('updateStatusQuick', e);\r\n+        alert(e.message || 'Erro ao mudar status');\r\n       }\r\n-      await loadAgendamentos();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    } catch (e) {\r\n-      console.error('updateStatusQuick', e);\r\n-      alert(e.message || 'Erro ao mudar status');\r\n     }\r\n-  }\r\n \r\n     // === Impressão em cupom (80mm) ===\r\n   function buildCupomHTML(items, meta = {}) {\r\n     const storeName = (meta.storeName || '').trim();\r\n"
                },
                {
                    "date": 1757452979860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,13 +33,16 @@\n \r\n   const cliInput = document.getElementById('add-cli-input');\r\n   const cliSug = document.getElementById('add-cli-sug');\r\n   const petSelect = document.getElementById('add-pet-select');\r\n-  const servInput = document.getElementById('add-serv-input');\r\n-  const servSug = document.getElementById('add-serv-sug');\r\n-  const valorInput = document.getElementById('add-valor');\r\n-  const horaInput = document.getElementById('add-hora');\r\n-  const profSelect = document.getElementById('add-prof-select');\r\n+  const servInput   = document.getElementById('add-serv-input');\r\n+  const servSug     = document.getElementById('add-serv-sug');\r\n+  const valorInput  = document.getElementById('add-valor');\r\n+  const addServAddBtn = document.getElementById('add-serv-add-btn');\r\n+  const servListUL  = document.getElementById('add-serv-list');\r\n+  const servTotalEl = document.getElementById('add-serv-total');\r\n+  const horaInput   = document.getElementById('add-hora');\r\n+  const profSelect  = document.getElementById('add-prof-select');\r\n \r\n   // State\r\n   const FILTER_STORAGE_KEY = 'agenda_filters_v1';\r\n \r\n"
                },
                {
                    "date": 1757452995674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n     agendamentos: [],\r\n     selectedStoreId: null,\r\n     selectedCliente: null,\r\n     selectedServico: null,\r\n+    tempServicos: [],\r\n     editing: null,\r\n     lastSnapshotHash: '',\r\n     __didInitialScroll: false,\r\n     filters: {                 // filtros persistentes\r\n"
                },
                {
                    "date": 1757453059216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -568,8 +568,13 @@\n   function openAddModal() {\r\n     state.editing = null;\r\n     if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n \r\n+    // Reset serviços temporários\r\n+    state.tempServicos = [];\r\n+    renderServicosLista();\r\n+    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n+\r\n     // Campos editáveis habilitados\r\n     [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n \r\n     // Limpa estado/inputs\r\n@@ -690,8 +695,15 @@\n   function openEditModal(a) {\r\n     state.editing = a || null;\r\n     if (!modal || !state.editing) return;\r\n \r\n+    // Preenche lista de serviços no modo edição (somente leitura)\r\n+    state.tempServicos = Array.isArray(a.servicos)\r\n+      ? a.servicos.map(x => ({ _id: x._id, nome: x.nome, valor: Number(x.valor || 0) }))\r\n+      : (a.servico ? [{ _id: null, nome: a.servico, valor: Number(a.valor || 0) }] : []);\r\n+    renderServicosLista();\r\n+    if (addServAddBtn) addServAddBtn.classList.add('hidden');\r\n+\r\n     // Empresa (mostra a loja do agendamento e permite trocar)\r\n     if (addStoreSelect) {\r\n       if (storeSelect && storeSelect.options.length) {\r\n         addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n"
                },
                {
                    "date": 1757453100453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -922,8 +922,36 @@\n       });\r\n     });\r\n   }\r\n \r\n+  // --- Lista de serviços no modal ---\r\n+  function renderServicosLista() {\r\n+    if (!servListUL || !servTotalEl) return;\r\n+    const items = state.tempServicos || [];\r\n+    servListUL.innerHTML = items.map((it, idx) => `\r\n+      <li class=\"flex items-center justify-between px-3 py-2 text-sm\">\r\n+        <div class=\"flex items-center gap-3\">\r\n+          <span class=\"w-20 text-right tabular-nums\">${money(Number(it.valor || 0))}</span>\r\n+          <span class=\"text-gray-700\">${it.nome || ''}</span>\r\n+        </div>\r\n+        ${state.editing ? '' : `<button data-idx=\"${idx}\" class=\"remove-serv px-2 py-1 rounded-md border text-gray-600 hover:bg-gray-50\">Remover</button>`}\r\n+      </li>\r\n+    `).join('');\r\n+    const total = items.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+    servTotalEl.textContent = money(total);\r\n+    if (!state.editing) {\r\n+      servListUL.querySelectorAll('.remove-serv').forEach(btn => {\r\n+        btn.addEventListener('click', () => {\r\n+          const i = parseInt(btn.getAttribute('data-idx'), 10);\r\n+          if (!isNaN(i)) {\r\n+            state.tempServicos.splice(i, 1);\r\n+            renderServicosLista();\r\n+          }\r\n+        });\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n   // Salvar (adicionar/editar)\r\n   async function saveAgendamento() {\r\n       try {\r\n         const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n"
                },
                {
                    "date": 1757453115659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1486,8 +1486,22 @@\n \r\n   cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n   servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n \r\n+  addServAddBtn?.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    const s = state.selectedServico;\r\n+    const v = Number(valorInput?.value || 0);\r\n+    if (!s || !s._id) { alert('Escolha um serviço na busca.'); return; }\r\n+    if (!(v >= 0)) { alert('Valor inválido.'); return; }\r\n+    state.tempServicos.push({ _id: s._id, nome: s.nome, valor: v });\r\n+    // limpa seleção\r\n+    state.selectedServico = null;\r\n+    if (servInput)  servInput.value = '';\r\n+    if (valorInput) valorInput.value = '';\r\n+    renderServicosLista();\r\n+  });\r\n+\r\n   modalDelete?.addEventListener('click', handleDelete);\r\n \r\n   // Ações rápidas nos cartões (delegação no container da agenda)\r\n   agendaList?.addEventListener('click', (ev) => {\r\n"
                },
                {
                    "date": 1757453146862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -995,21 +995,20 @@\n \r\n         // Adição\r\n         const clienteId = state.selectedCliente?._id;\r\n         const petId = petSelect?.value;\r\n-        const servicoId = state.selectedServico?._id;\r\n-        const valor = Number(valorInput?.value || 0);\r\n+        const items = state.tempServicos || [];\r\n \r\n-        if (!(clienteId && petId && servicoId)) { alert('Preencha cliente, pet e serviço.'); return; }\r\n+        if (!(clienteId && petId && items.length)) { alert('Preencha cliente, pet e adicione pelo menos 1 serviço.'); return; }\r\n \r\n         const body = {\r\n           storeId: storeIdSelected,\r\n-          clienteId, petId, servicoId,\r\n-          profissionalId, scheduledAt, valor,\r\n+          clienteId, petId,\r\n+          servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n+          profissionalId, scheduledAt,\r\n           status,\r\n           pago: false\r\n         };\r\n-\r\n         const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n         if (!resp.ok) {\r\n           const err = await resp.json().catch(() => ({}));\r\n           throw new Error(err.message || 'Erro ao salvar');\r\n"
                },
                {
                    "date": 1757510364971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -700,10 +700,17 @@\n     state.tempServicos = Array.isArray(a.servicos)\r\n       ? a.servicos.map(x => ({ _id: x._id, nome: x.nome, valor: Number(x.valor || 0) }))\r\n       : (a.servico ? [{ _id: null, nome: a.servico, valor: Number(a.valor || 0) }] : []);\r\n     renderServicosLista();\r\n-    if (addServAddBtn) addServAddBtn.classList.add('hidden');\r\n \r\n+    // habilita campo de busca/valor para adicionar novos serviços\r\n+    state.selectedServico = null;\r\n+    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n+    if (servSug)   { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    if (valorInput){ valorInput.value = ''; valorInput.disabled = false; }\r\n+\r\n+    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n+\r\n     // Empresa (mostra a loja do agendamento e permite trocar)\r\n     if (addStoreSelect) {\r\n       if (storeSelect && storeSelect.options.length) {\r\n         addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n@@ -766,10 +773,10 @@\n       } catch (_) {}\r\n     }\r\n \r\n     // Serviço/Valor: leitura\r\n-    if (servInput) { servInput.value = a.servico || ''; servInput.disabled = true; }\r\n-    if (valorInput) { valorInput.value = Number(a.valor || 0).toFixed(2); valorInput.disabled = true; }\r\n+    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n+    if (valorInput) { valorInput.value = ''; valorInput.disabled = false; }\r\n \r\n     // Botão excluir visível\r\n     if (modalDelete) modalDelete.classList.remove('hidden');\r\n \r\n@@ -932,24 +939,23 @@\n         <div class=\"flex items-center gap-3\">\r\n           <span class=\"w-20 text-right tabular-nums\">${money(Number(it.valor || 0))}</span>\r\n           <span class=\"text-gray-700\">${it.nome || ''}</span>\r\n         </div>\r\n-        ${state.editing ? '' : `<button data-idx=\"${idx}\" class=\"remove-serv px-2 py-1 rounded-md border text-gray-600 hover:bg-gray-50\">Remover</button>`}\r\n+        <button data-idx=\"${idx}\" class=\"remove-serv px-2 py-1 rounded-md border text-gray-600 hover:bg-gray-50\">Remover</button>\r\n       </li>\r\n     `).join('');\r\n     const total = items.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n     servTotalEl.textContent = money(total);\r\n-    if (!state.editing) {\r\n-      servListUL.querySelectorAll('.remove-serv').forEach(btn => {\r\n-        btn.addEventListener('click', () => {\r\n-          const i = parseInt(btn.getAttribute('data-idx'), 10);\r\n-          if (!isNaN(i)) {\r\n-            state.tempServicos.splice(i, 1);\r\n-            renderServicosLista();\r\n-          }\r\n-        });\r\n+\r\n+    servListUL.querySelectorAll('.remove-serv').forEach(btn => {\r\n+      btn.addEventListener('click', () => {\r\n+        const i = parseInt(btn.getAttribute('data-idx'), 10);\r\n+        if (!isNaN(i)) {\r\n+          state.tempServicos.splice(i, 1);\r\n+          renderServicosLista();\r\n+        }\r\n       });\r\n-    }\r\n+    });\r\n   }\r\n \r\n   // Salvar (adicionar/editar)\r\n   async function saveAgendamento() {\r\n"
                },
                {
                    "date": 1757510434564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -973,30 +973,37 @@\n \r\n         // Edição\r\n         if (state.editing && state.editing._id) {\r\n           const id = state.editing._id;\r\n+\r\n+          // usa os itens montados na UI (edição agora permite adicionar/remover)\r\n+          const items = Array.isArray(state.tempServicos) ? state.tempServicos : [];\r\n+          if (!items.length) { alert('Adicione pelo menos 1 serviço ao agendamento.'); return; }\r\n+\r\n           const body = {\r\n             storeId: storeIdSelected,\r\n             profissionalId,\r\n             scheduledAt,\r\n             status,\r\n+            servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n             ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n             ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n-            ...(state.editing.servicoId ? { servicoId: state.editing.servicoId } : {}),\r\n-            ...(typeof state.editing.valor !== 'undefined' ? { valor: state.editing.valor } : {}),\r\n             ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n           };\r\n+\r\n           const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\r\n           if (!resp.ok) {\r\n             const err = await resp.json().catch(() => ({}));\r\n-            throw new Error(err.message || 'Erro ao atualizar agendamento');\r\n+            alert(err.message || 'Erro ao atualizar agendamento.');\r\n+            return;\r\n           }\r\n+\r\n           await loadAgendamentos();\r\n           renderKpis();\r\n           renderFilters();\r\n           closeModal();\r\n           renderGrid();\r\n-          enhanceAgendaUI();      // mantém zebra/linhas/auto-scroll\r\n+          enhanceAgendaUI();\r\n           return;\r\n         }\r\n \r\n         // Adição\r\n"
                },
                {
                    "date": 1757517197935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,9 @@\n   const valorInput  = document.getElementById('add-valor');\r\n   const addServAddBtn = document.getElementById('add-serv-add-btn');\r\n   const servListUL  = document.getElementById('add-serv-list');\r\n   const servTotalEl = document.getElementById('add-serv-total');\r\n+  const obsInput   = document.getElementById('add-observacoes');\r\n   const horaInput   = document.getElementById('add-hora');\r\n   const profSelect  = document.getElementById('add-prof-select');\r\n \r\n   // State\r\n"
                },
                {
                    "date": 1757517214755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -586,8 +586,9 @@\n     if (servInput) { servInput.value = ''; }\r\n     if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n     if (valorInput) { valorInput.value = ''; }\r\n     if (petSelect) { petSelect.innerHTML = ''; }\r\n+    if (obsInput) { obsInput.value = ''; }\r\n \r\n     // Empresa (usa as mesmas opções do seletor da página)\r\n     if (addStoreSelect) {\r\n       if (storeSelect && storeSelect.options.length) {\r\n"
                },
                {
                    "date": 1757517238780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -612,8 +612,11 @@\n     // Hora default (agora)\r\n     const now = new Date();\r\n     const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n+    \r\n+    // Observações\r\n+    if (obsInput) { obsInput.value = a.observacoes || ''; }\r\n \r\n     // Status default\r\n     if (statusSelect) statusSelect.value = 'agendado';\r\n \r\n"
                },
                {
                    "date": 1757517265425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1023,8 +1023,9 @@\n           clienteId, petId,\r\n           servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n           profissionalId, scheduledAt,\r\n           status,\r\n+          observacoes: (obsInput?.value || '').trim(),\r\n           pago: false\r\n         };\r\n         const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n         if (!resp.ok) {\r\n"
                },
                {
                    "date": 1757517316442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1633 @@\n+(function () {\r\n+  // Helper para requisições com token\r\n+  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n+  function api(url, opts = {}) {\r\n+    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n+      ...opts,\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        ...(opts.headers || {}),\r\n+        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Elements\r\n+  const agendaList = document.getElementById('agenda-list');\r\n+  const dateInput = document.getElementById('agenda-date');\r\n+  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n+  const addBtn = document.getElementById('add-service-btn');\r\n+  const storeSelect = document.getElementById('agenda-store');\r\n+  const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n+\r\n+  // Modal (reutilizado p/ adicionar e editar)\r\n+  const modal = document.getElementById('modal-add-servico');\r\n+  const modalClose = document.getElementById('modal-add-close');\r\n+  const modalCancel = document.getElementById('modal-add-cancel');\r\n+  const modalSave = document.getElementById('modal-add-save');\r\n+  const modalDelete = document.getElementById('modal-add-delete');\r\n+\r\n+  const addStoreSelect = document.getElementById('add-store-select');\r\n+  const addDateInput   = document.getElementById('add-date');\r\n+  const statusSelect   = document.getElementById('add-status');\r\n+\r\n+  const cliInput = document.getElementById('add-cli-input');\r\n+  const cliSug = document.getElementById('add-cli-sug');\r\n+  const petSelect = document.getElementById('add-pet-select');\r\n+  const servInput   = document.getElementById('add-serv-input');\r\n+  const servSug     = document.getElementById('add-serv-sug');\r\n+  const valorInput  = document.getElementById('add-valor');\r\n+  const addServAddBtn = document.getElementById('add-serv-add-btn');\r\n+  const servListUL  = document.getElementById('add-serv-list');\r\n+  const servTotalEl = document.getElementById('add-serv-total');\r\n+  const obsInput   = document.getElementById('add-observacoes');\r\n+  const horaInput   = document.getElementById('add-hora');\r\n+  const profSelect  = document.getElementById('add-prof-select');\r\n+\r\n+  // State\r\n+  const FILTER_STORAGE_KEY = 'agenda_filters_v1';\r\n+\r\n+  const state = {\r\n+    stores: [],\r\n+    profissionais: [],\r\n+    agendamentos: [],\r\n+    selectedStoreId: null,\r\n+    selectedCliente: null,\r\n+    selectedServico: null,\r\n+    tempServicos: [],\r\n+    editing: null,\r\n+    lastSnapshotHash: '',\r\n+    __didInitialScroll: false,\r\n+    filters: {                 // filtros persistentes\r\n+      statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n+      profIds: new Set()       // _id dos profissionais\r\n+    }\r\n+  };\r\n+\r\n+  function loadFiltersFromStorage() {\r\n+    try {\r\n+      const raw = JSON.parse(localStorage.getItem(FILTER_STORAGE_KEY) || 'null');\r\n+      if (raw && typeof raw === 'object') {\r\n+        state.filters.statuses = new Set(Array.isArray(raw.statuses) ? raw.statuses : []);\r\n+        state.filters.profIds  = new Set(Array.isArray(raw.profIds)  ? raw.profIds  : []);\r\n+      }\r\n+    } catch(_) {}\r\n+  }\r\n+  function saveFiltersToStorage() {\r\n+    try {\r\n+      localStorage.setItem(FILTER_STORAGE_KEY, JSON.stringify({\r\n+        statuses: Array.from(state.filters.statuses),\r\n+        profIds : Array.from(state.filters.profIds)\r\n+      }));\r\n+    } catch(_) {}\r\n+  }\r\n+\r\n+  function ensureToolbar() {\r\n+    if (!agendaList) return;\r\n+    if (document.getElementById('agenda-toolbar')) return;\r\n+\r\n+    const bar = document.createElement('div');\r\n+    bar.id = 'agenda-toolbar';\r\n+    // sticky sob o cabeçalho; leve blur para legibilidade; borda inferior discreta\r\n+    bar.className = 'sticky top-0 z-30 bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/60 border-b border-slate-200 mb-2 flex flex-col gap-2 px-3 py-2 rounded-lg';\r\n+\r\n+    // KPIs\r\n+    const kpis = document.createElement('div');\r\n+    kpis.id = 'agenda-kpis';\r\n+    kpis.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(kpis);\r\n+\r\n+    // Filtros\r\n+    const filters = document.createElement('div');\r\n+    filters.id = 'agenda-filters';\r\n+    filters.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(filters);\r\n+\r\n+    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n+  }\r\n+\r\n+  function computeKPIs(items) {\r\n+    const total = items.length;\r\n+    const previsto = items.reduce((s, i) => s + Number(i.valor || 0), 0);\r\n+    const recebido = items.reduce((s, i) => s + (i.pago ? Number(i.valor || 0) : 0), 0);\r\n+    const pendente = previsto - recebido;\r\n+    return { total, previsto, recebido, pendente };\r\n+  }\r\n+\r\n+  function renderKpis() {\r\n+    const wrap = document.getElementById('agenda-kpis');\r\n+    if (!wrap) return;\r\n+\r\n+    const all = state.agendamentos || [];\r\n+    const f = getFilteredAgendamentos();   // filtrados atuais\r\n+    const kAll = computeKPIs(all);\r\n+    const kF   = computeKPIs(f);\r\n+\r\n+    wrap.innerHTML = `\r\n+      <div class=\"kpi-chip\">Total dia: <strong>${kAll.total}</strong></div>\r\n+      <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n+      <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n+      <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n+      ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n+          ? `<div class=\"kpi-chip kpi-muted\">Filtrados: <strong>${kF.total}</strong></div>` : '' }\r\n+    `;\r\n+  }\r\n+\r\n+  function renderFilters() {\r\n+    const el = document.getElementById('agenda-filters');\r\n+    if (!el) return;\r\n+\r\n+    // contadores por status\r\n+    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const key = String(a.status || 'agendado')\r\n+        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n+      if (counts[key] !== undefined) counts[key] += 1;\r\n+    }\r\n+\r\n+    // contadores por profissional\r\n+    const byProf = new Map();\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n+      if (!id) continue;\r\n+      const key = String(id);\r\n+      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n+    }\r\n+\r\n+    const statuses = [\r\n+      {key:'agendado', label:'Agend.'},\r\n+      {key:'em_espera', label:'Espera'},\r\n+      {key:'em_atendimento', label:'Atend.'},\r\n+      {key:'finalizado', label:'Fim.'}\r\n+    ];\r\n+\r\n+    // chips de status\r\n+    const chipsStatus = statuses.map(s => {\r\n+      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n+      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n+                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    // chips de profissional (apenas os que existem)\r\n+    const chipsProf = (state.profissionais || []).map(p => {\r\n+      const id = String(p._id);\r\n+      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n+      const n = byProf.get(id) || 0;\r\n+      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n+                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n+      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n+\r\n+    el.innerHTML = `\r\n+      <div class=\"flex flex-wrap items-center gap-2\">\r\n+        ${chipsStatus}\r\n+        <span class=\"chip-sep\"></span>\r\n+        ${chipsProf}\r\n+        ${clearBtn}\r\n+      </div>\r\n+    `;\r\n+\r\n+    // handlers\r\n+    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n+      btn.addEventListener('click', () => {\r\n+        const type = btn.getAttribute('data-filter');\r\n+        const val  = btn.getAttribute('data-value');\r\n+        if (type === 'status') {\r\n+          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n+        } else if (type === 'prof') {\r\n+          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n+        }\r\n+        saveFiltersToStorage();\r\n+        renderFilters();\r\n+        renderKpis();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      });\r\n+    });\r\n+\r\n+    const clear = document.getElementById('chip-clear');\r\n+    if (clear) clear.addEventListener('click', () => {\r\n+      state.filters.statuses.clear();\r\n+      state.filters.profIds.clear();\r\n+      saveFiltersToStorage();\r\n+      renderFilters();\r\n+      renderKpis();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    });\r\n+  }\r\n+\r\n+  function normalizeStatus(s) {\r\n+    return String(s || 'agendado')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n+  }\r\n+\r\n+  function getFilteredAgendamentos() {\r\n+    const hasStatus = state.filters.statuses.size > 0;\r\n+    const hasProf   = state.filters.profIds.size   > 0;\r\n+\r\n+    if (!hasStatus && !hasProf) return state.agendamentos || [];\r\n+\r\n+    const byNameAll = new Map(\r\n+      (state.profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n+    );\r\n+\r\n+    return (state.agendamentos || []).filter(a => {\r\n+      let ok = true;\r\n+      if (hasStatus) ok = ok && state.filters.statuses.has(normalizeStatus(a.status));\r\n+      if (hasProf) {\r\n+        let pid = a.profissionalId ? String(a.profissionalId) : null;\r\n+        if (!pid) {\r\n+          let nc = '';\r\n+          if (typeof a.profissional === 'string') nc = a.profissional;\r\n+          else if (a.profissional && typeof a.profissional === 'object') {\r\n+            nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n+                a.profissional.razaoSocial || a.profissional.nome || '';\r\n+          }\r\n+          pid = byNameAll.get(String(nc).trim().toLowerCase()) || null;\r\n+        }\r\n+        ok = ok && pid && state.filters.profIds.has(String(pid));\r\n+      }\r\n+      return ok;\r\n+    });\r\n+  }\r\n+\r\n+  function getVisibleProfissionais() {\r\n+    const profs = state.profissionais || [];\r\n+    if (!state.filters.profIds.size) return profs;\r\n+    return profs.filter(p => state.filters.profIds.has(String(p._id)));\r\n+  }\r\n+\r\n+  // Helpers de data e utilitários\r\n+  function todayStr() {\r\n+    // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n+    const d = new Date();\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n+  function buildLocalDateTime(dateStr, hhmm) {\r\n+    let y, m, d;\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) { [d, m, y] = dateStr.split('/').map(Number); }\r\n+    else { [y, m, d] = dateStr.split('-').map(Number); }\r\n+    const [hh, mm] = (hhmm || '00:00').split(':').map(Number);\r\n+    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n+  }\r\n+  function normalizeDate(v) {\r\n+    if (!v) return todayStr();\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n+    return v;\r\n+  }\r\n+  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n+  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n+  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n+\r\n+  // Stores\r\n+  async function loadStores() {\r\n+    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.stores = Array.isArray(list) ? list : [];\r\n+    if (storeSelect) {\r\n+      storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+    }\r\n+    if (!state.selectedStoreId && state.stores[0]) {\r\n+      state.selectedStoreId = state.stores[0]._id;\r\n+      if (storeSelect) storeSelect.value = state.selectedStoreId;\r\n+    }\r\n+    updateStoreLabel();\r\n+  }\r\n+  function updateStoreLabel() {\r\n+    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n+    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n+    const vis = document.getElementById('agenda-store-label-visible');\r\n+    if (vis) vis.textContent = s ? s.nome : '—';\r\n+  }\r\n+\r\n+  // Profissionais\r\n+  async function populateModalProfissionais(storeId, preselectId) {\r\n+    try {\r\n+      if (!storeId || !profSelect) return;\r\n+      const resp = await api(`/func/profissionais/esteticistas?storeId=${storeId}`);\r\n+      const list = await resp.json().catch(() => []);\r\n+      const arr = Array.isArray(list) ? list : [];\r\n+      profSelect.innerHTML = arr.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+      const pid = preselectId ? String(preselectId) : '';\r\n+      if (pid && arr.some(p => String(p._id) === pid)) {\r\n+        profSelect.value = pid;\r\n+      } else if (arr[0]) {\r\n+        profSelect.value = String(arr[0]._id);\r\n+      }\r\n+    } catch (_) { /* silencioso no modal */ }\r\n+  }\r\n+\r\n+  // Agendamentos\r\n+  async function loadAgendamentos() {\r\n+    const date = normalizeDate(dateInput?.value || todayStr());\r\n+    const url = `/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`;\r\n+    try {\r\n+      const resp = await api(url);\r\n+      if (!resp.ok) {\r\n+        const txt = await resp.text();\r\n+        console.error('GET', url, '->', resp.status, txt);\r\n+        state.agendamentos = [];\r\n+        return;\r\n+      }\r\n+      const list = await resp.json();\r\n+      state.agendamentos = Array.isArray(list) ? list : [];\r\n+      console.info('[Agenda] loja=', state.selectedStoreId, 'data=', date, 'itens=', state.agendamentos.length, state.agendamentos.slice(0, 3));\r\n+    } catch (e) {\r\n+      console.error('Erro ao carregar agendamentos', e);\r\n+      state.agendamentos = [];\r\n+    }\r\n+  }\r\n+\r\n+  // Grade (sem coluna \"Outros\")\r\n+  function renderGrid() {\r\n+      if (!agendaList) return;\r\n+\r\n+      const date = normalizeDate(dateInput?.value || todayStr());\r\n+      if (dateLabelVisible) {\r\n+        dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      }\r\n+\r\n+      // janelas de trabalho (ajuste se quiser)\r\n+      const BUSINESS_START = 8;   // 08:00\r\n+      const BUSINESS_END   = 19;  // 19:00\r\n+\r\n+      const hours = [];\r\n+      for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+\r\n+      clearChildren(agendaList);\r\n+\r\n+      const profsAll  = state.profissionais || [];\r\n+      const profs     = getVisibleProfissionais();\r\n+      const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n+\r\n+      const colCount = 1 + (profs?.length || 0);\r\n+\r\n+      // Cabeçalho\r\n+      const header = document.createElement('div');\r\n+      header.style.display = 'grid';\r\n+      // >>> COLUNAS ELÁSTICAS: ocupam o espaço restante sem “vão” à direita\r\n+      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n+      header.className = 'bg-white border-b';\r\n+\r\n+      const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n+      headLabels.forEach((label, idx) => {\r\n+        const cell = document.createElement('div');\r\n+        cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n+        if (idx === 0) {\r\n+          cell.textContent = label;\r\n+        }\r\n+        else {\r\n+          // >>> centraliza o nome do profissional\r\n+          cell.style.textAlign = 'center';\r\n+          const span = document.createElement('span');\r\n+          span.className = 'agenda-head-label inline-block';\r\n+          span.textContent = label || '';\r\n+          cell.dataset.profId = String(profs[idx - 1]._id);\r\n+          cell.appendChild(span);\r\n+        }\r\n+        header.appendChild(cell);\r\n+      });\r\n+\r\n+      const counter = document.createElement('div');\r\n+      counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n+      const itemsAll = state.agendamentos || [];\r\n+      const items    = getFilteredAgendamentos(itemsAll);\r\n+      const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n+      counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n+      header.appendChild(counter);\r\n+\r\n+      agendaList.appendChild(header);\r\n+\r\n+      // Corpo\r\n+      const body = document.createElement('div');\r\n+      body.style.display = 'grid';\r\n+      // >>> COLUNAS ELÁSTICAS: cada profissional tem no mínimo 360px e expande até preencher\r\n+      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n+      agendaList.appendChild(body);\r\n+\r\n+      const isToday = normalizeDate(date) === todayStr();\r\n+      const now = new Date();\r\n+      const nowHH = `${pad(now.getHours())}:00`;\r\n+\r\n+      hours.forEach(hh => {\r\n+        const hourNumber = parseInt(hh.split(':')[0], 10);\r\n+        const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n+        const isNowRow   = isToday && hh === nowHH;\r\n+\r\n+        // coluna de horário\r\n+        const timeCell = document.createElement('div');\r\n+        timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n+        timeCell.textContent = hh;\r\n+\r\n+        body.appendChild(timeCell);\r\n+\r\n+        // células por profissional\r\n+        (profs || []).forEach(p => {\r\n+          const cell = document.createElement('div');\r\n+          // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n+          cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n+          cell.dataset.profissionalId = String(p._id);\r\n+          cell.dataset.hh = hh;\r\n+          body.appendChild(cell);\r\n+        });\r\n+      });\r\n+\r\n+      // posiciona cartões\r\n+      let placed = 0;\r\n+      for (const a of items) {\r\n+        const when = a.h || a.scheduledAt;\r\n+        if (!when) continue;\r\n+\r\n+        const d  = new Date(when);\r\n+        const hh = `${pad(d.getHours())}:00`;\r\n+\r\n+        let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+        if (!profId) {\r\n+          let nameCandidate = '';\r\n+          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n+          else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n+          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n+          if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n+        }\r\n+        if (!profId) continue;\r\n+\r\n+        let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+        if (!col && profs[0]) {\r\n+          col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n+        }\r\n+        if (!col) continue;\r\n+\r\n+        const meta = statusMeta(a.status);\r\n+        const card = document.createElement('div');\r\n+        card.setAttribute('data-appointment-id', a._id || '');\r\n+        card.style.setProperty('--stripe', meta.stripe);\r\n+        card.style.setProperty('--card-max-w', '260px');\r\n+        card.className = `agenda-card border ${meta.borderClass} cursor-move select-none`;\r\n+        card.setAttribute('draggable', 'true');\r\n+\r\n+        const headerEl = document.createElement('div');\r\n+        // reserva espaço à direita para os botões flutuantes (evita o chip “ficar por baixo”)\r\n+        headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n+        headerEl.innerHTML = `\r\n+          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n+          ${renderStatusBadge(a.status)}\r\n+        `;\r\n+\r\n+        const bodyEl = document.createElement('div');\r\n+        bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+        bodyEl.textContent = a.servico || '';\r\n+\r\n+        const footerEl = document.createElement('div');\r\n+        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+        const price = document.createElement('div');\r\n+        price.className = 'text-[13px] text-gray-800 font-medium';\r\n+        price.textContent = money(a.valor);\r\n+\r\n+        footerEl.appendChild(price);\r\n+\r\n+        card.appendChild(headerEl);\r\n+        card.appendChild(bodyEl);\r\n+        card.appendChild(footerEl);\r\n+\r\n+        col.appendChild(card);\r\n+        placed++;\r\n+      }\r\n+\r\n+      if (placed === 0) {\r\n+        const empty = document.createElement('div');\r\n+        empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n+        empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n+        agendaList.insertBefore(empty, header.nextSibling);\r\n+      }\r\n+  }\r\n+\r\n+  // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n+  function statusMeta(s) {\r\n+    // Normalização: acentos/maiúsculas/espaços/hífens\r\n+    const keyRaw = String(s || 'agendado')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n+\r\n+    const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+    const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n+\r\n+    // Paleta acessível (contraste AA) + info para faixa lateral e badge compacta\r\n+    const map = {\r\n+      agendado: {\r\n+        label: 'Agendado',\r\n+        short: 'Agend.',\r\n+        stripe: '#64748B',     // slate-500\r\n+        text: '#0F172A',       // slate-900\r\n+        badgeClass: 'bg-slate-100 text-slate-700 border border-slate-200',\r\n+        borderClass: 'border-slate-300'\r\n+      },\r\n+      em_espera: {\r\n+        label: 'Em espera',\r\n+        short: 'Espera',\r\n+        stripe: '#B45309',     // amber-700\r\n+        text: '#1F2937',       // gray-800\r\n+        badgeClass: 'bg-amber-50 text-amber-800 border border-amber-200',\r\n+        borderClass: 'border-amber-400'\r\n+      },\r\n+      em_atendimento: {\r\n+        label: 'Em atendimento',\r\n+        short: 'Atend.',\r\n+        stripe: '#1D4ED8',     // blue-700\r\n+        text: '#0B1235',\r\n+        badgeClass: 'bg-blue-50 text-blue-800 border border-blue-200',\r\n+        borderClass: 'border-blue-500'\r\n+      },\r\n+      finalizado: {\r\n+        label: 'Finalizado',\r\n+        short: 'Fim.',\r\n+        stripe: '#16A34A',     // green-600\r\n+        text: '#052E16',\r\n+        badgeClass: 'bg-green-50 text-green-800 border border-green-200',\r\n+        borderClass: 'border-green-500'\r\n+      }\r\n+    };\r\n+\r\n+    return map[k];\r\n+  }\r\n+\r\n+  function renderStatusBadge(s) {\r\n+    const { label, badgeClass } = statusMeta(s);\r\n+    // `whitespace-nowrap` garante que o chip não quebre em duas linhas\r\n+    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium whitespace-nowrap ${badgeClass}\">${label}</span>`;\r\n+  }\r\n+\r\n+  // Modal — modo adicionar\r\n+  function openAddModal() {\r\n+    state.editing = null;\r\n+    if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n+\r\n+    // Reset serviços temporários\r\n+    state.tempServicos = [];\r\n+    renderServicosLista();\r\n+    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n+\r\n+    // Campos editáveis habilitados\r\n+    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n+\r\n+    // Limpa estado/inputs\r\n+    state.selectedCliente = null;\r\n+    state.selectedServico = null;\r\n+    if (cliInput) { cliInput.value = ''; }\r\n+    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+    if (servInput) { servInput.value = ''; }\r\n+    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    if (valorInput) { valorInput.value = ''; }\r\n+    if (petSelect) { petSelect.innerHTML = ''; }\r\n+    if (obsInput) { obsInput.value = ''; }\r\n+\r\n+    // Empresa (usa as mesmas opções do seletor da página)\r\n+    if (addStoreSelect) {\r\n+      if (storeSelect && storeSelect.options.length) {\r\n+        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n+      } else if (state.stores?.length) {\r\n+        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+      }\r\n+      const sid = state.selectedStoreId || storeSelect?.value || '';\r\n+      addStoreSelect.value = sid;\r\n+\r\n+      // Carrega os profissionais correspondentes à empresa escolhida no modal (sem travar a abertura)\r\n+      try { if (sid) { populateModalProfissionais(sid); } } catch(_) {}\r\n+    }\r\n+\r\n+    // Data (usa a data visível na página)\r\n+    if (addDateInput) {\r\n+      const date = normalizeDate(dateInput?.value || todayStr()); // YYYY-MM-DD\r\n+      addDateInput.value = date;\r\n+    }\r\n+\r\n+    // Hora default (agora)\r\n+    const now = new Date();\r\n+    const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n+    if (horaInput) horaInput.value = hh;\r\n+    \r\n+    // Observações\r\n+    if (obsInput) { obsInput.value = a.observacoes || ''; }\r\n+\r\n+    // Status default\r\n+    if (statusSelect) statusSelect.value = 'agendado';\r\n+\r\n+    // Botão Excluir só em edição\r\n+    if (modalDelete) modalDelete.classList.add('hidden');\r\n+\r\n+    modal.classList.remove('hidden'); \r\n+    modal.classList.add('flex');\r\n+    cliInput?.focus();\r\n+  }\r\n+\r\n+  // cache simples: clienteId -> nome\r\n+  const _clienteNomeCache = new Map();\r\n+\r\n+  async function resolveClienteNome(a) {\r\n+    try {\r\n+      if (!a) return '';\r\n+\r\n+      // 1) nome direto vindo da API\r\n+      const direct =\r\n+        a.clienteNome ||\r\n+        (a.cliente && typeof a.cliente === 'object' && (a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial)) ||\r\n+        null;\r\n+      if (typeof direct === 'string' && direct.trim()) return direct.trim();\r\n+\r\n+      // 2) clienteId em qualquer formato\r\n+      let maybeId =\r\n+        a.clienteId ||\r\n+        a.clientId ||\r\n+        a.customerId ||\r\n+        (typeof a.cliente === 'string' ? a.cliente : null);\r\n+\r\n+      if (typeof maybeId === 'object' && maybeId !== null && maybeId._id) {\r\n+        maybeId = String(maybeId._id);\r\n+      }\r\n+      const id = (typeof maybeId === 'string' && /^[0-9a-fA-F]{24}$/.test(maybeId)) ? maybeId : null;\r\n+\r\n+      if (id) {\r\n+        if (_clienteNomeCache.has(id)) return _clienteNomeCache.get(id);\r\n+        const r = await api(`/func/clientes/${id}`);\r\n+        if (r.ok) {\r\n+          const c = await r.json();\r\n+          const nome = c?.nome || '';\r\n+          if (nome) { _clienteNomeCache.set(id, nome); return nome; }\r\n+        }\r\n+      }\r\n+\r\n+      // 3) fallback por petId\r\n+      const petId =\r\n+        a.petId ||\r\n+        (a.pet && typeof a.pet === 'object' && a.pet._id ? a.pet._id : null) ||\r\n+        null;\r\n+\r\n+      if (petId && /^[0-9a-fA-F]{24}$/.test(String(petId))) {\r\n+        const r2 = await api(`/func/pets/${petId}`);\r\n+        if (r2.ok) {\r\n+          const p = await r2.json();\r\n+          const nome =\r\n+            (p?.cliente && (p.cliente.nome || p.cliente.nomeCompleto || p.cliente.razaoSocial)) ||\r\n+            p?.clienteNome ||\r\n+            '';\r\n+          if (nome) return String(nome);\r\n+        }\r\n+      }\r\n+    } catch (e) {\r\n+      console.info('[resolveClienteNome] não foi possível resolver', e);\r\n+    }\r\n+    return '';\r\n+  }\r\n+\r\n+  // --- DEPOIS: openEditModal (indica carregamento e garante preenchimento) ---\r\n+  function toDateInputValueFromISO(isoStr) {\r\n+    const d = new Date(isoStr);\r\n+    if (isNaN(d.getTime())) return todayStr();\r\n+    const yyyy = d.getFullYear();\r\n+    const mm = String(d.getMonth() + 1).padStart(2, '0');\r\n+    const dd = String(d.getDate()).padStart(2, '0');\r\n+    return `${yyyy}-${mm}-${dd}`;\r\n+  }\r\n+\r\n+  function openEditModal(a) {\r\n+    state.editing = a || null;\r\n+    if (!modal || !state.editing) return;\r\n+\r\n+    // Preenche lista de serviços no modo edição (somente leitura)\r\n+    state.tempServicos = Array.isArray(a.servicos)\r\n+      ? a.servicos.map(x => ({ _id: x._id, nome: x.nome, valor: Number(x.valor || 0) }))\r\n+      : (a.servico ? [{ _id: null, nome: a.servico, valor: Number(a.valor || 0) }] : []);\r\n+    renderServicosLista();\r\n+\r\n+    // habilita campo de busca/valor para adicionar novos serviços\r\n+    state.selectedServico = null;\r\n+    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n+    if (servSug)   { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    if (valorInput){ valorInput.value = ''; valorInput.disabled = false; }\r\n+\r\n+    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n+\r\n+    // Empresa (mostra a loja do agendamento e permite trocar)\r\n+    if (addStoreSelect) {\r\n+      if (storeSelect && storeSelect.options.length) {\r\n+        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n+      } else if (state.stores?.length) {\r\n+        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+      }\r\n+      addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n+      addStoreSelect.disabled = false;\r\n+    }\r\n+\r\n+    // Data do agendamento\r\n+    if (addDateInput) {\r\n+      const iso = a.h || a.scheduledAt || new Date().toISOString();\r\n+      addDateInput.value = toDateInputValueFromISO(iso);\r\n+    }\r\n+\r\n+    // Hora\r\n+    const d = new Date((a.h || a.scheduledAt) || new Date());\r\n+    const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n+    if (horaInput) horaInput.value = hh;\r\n+\r\n+    // Profissional (tenta resolver o id atual)\r\n+    let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+    if (!profId && typeof a.profissional === 'string') {\r\n+      const key = a.profissional.trim().toLowerCase();\r\n+      const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n+      if (match) profId = String(match._id);\r\n+    }\r\n+    if (profSelect && profId) profSelect.value = profId;\r\n+\r\n+    // Ao abrir o modal de edição, carregamos os profissionais da EMPRESA selecionada no modal\r\n+    try {\r\n+      const sid = addStoreSelect?.value || a.storeId || '';\r\n+      if (sid) { populateModalProfissionais(sid, profId); } // não bloqueia a abertura do modal\r\n+    } catch (_) {}\r\n+\r\n+    // Status (normalizado p/ os values do <select>)\r\n+    if (statusSelect) {\r\n+      const keyRaw = String(a.status || 'agendado')\r\n+        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+        .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n+      const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+      statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n+    }\r\n+\r\n+    // Cliente e Pet (preenche e bloqueia busca no modo edição)\r\n+    if (cliInput) { cliInput.value = (a.clienteNome || ''); cliInput.disabled = true; }\r\n+    if (petSelect) {\r\n+      petSelect.innerHTML = '';\r\n+      try {\r\n+        const clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n+        if (clienteId) {\r\n+          api(`/func/clientes/${clienteId}/pets`).then(r => r.json().catch(() => []))\r\n+            .then(pets => {\r\n+              petSelect.innerHTML = (Array.isArray(pets) ? pets : []).map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+              const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n+              if (currentPetId) petSelect.value = String(currentPetId);\r\n+            });\r\n+        }\r\n+      } catch (_) {}\r\n+    }\r\n+\r\n+    // Serviço/Valor: leitura\r\n+    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n+    if (valorInput) { valorInput.value = ''; valorInput.disabled = false; }\r\n+\r\n+    // Botão excluir visível\r\n+    if (modalDelete) modalDelete.classList.remove('hidden');\r\n+\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n+  }\r\n+\r\n+  function closeModal() {\r\n+    if (!modal) return;\r\n+    modal.classList.add('hidden');\r\n+    modal.classList.remove('flex');\r\n+    state.editing = null;\r\n+    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n+  }\r\n+\r\n+  // Busca cliente\r\n+  async function searchClientes(term) {\r\n+    if (!term || term.length < 2) {\r\n+      if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+      return;\r\n+    }\r\n+    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    if (!cliSug) return;\r\n+    cliSug.innerHTML = list.map(u => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n+        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n+      </li>`).join('');\r\n+    cliSug.classList.remove('hidden');\r\n+    cliSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', async () => {\r\n+        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n+        if (cliInput) cliInput.value = li.dataset.nome;\r\n+        cliSug.classList.add('hidden');\r\n+        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n+        const pets = await resp.json().catch(() => []);\r\n+        if (petSelect) {\r\n+          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+        }\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  function confirmAsync(title, message, opts = {}) {\r\n+    const confirmText = opts.confirmText || 'Excluir';\r\n+    const cancelText  = opts.cancelText  || 'Cancelar';\r\n+\r\n+    if (typeof window.showModal === 'function') {\r\n+      return new Promise((resolve) => {\r\n+        // 1) Esconde temporariamente o modal de edição (sem desmontar)\r\n+        const prevVis = modal ? modal.style.visibility : '';\r\n+        const prevPe  = modal ? modal.style.pointerEvents : '';\r\n+        if (modal) {\r\n+          modal.style.visibility = 'hidden';\r\n+          modal.style.pointerEvents = 'none';\r\n+        }\r\n+\r\n+        // 2) Abre o modal padrão do projeto\r\n+        window.showModal({\r\n+          title: title || 'Confirmação',\r\n+          message: message || 'Deseja prosseguir?',\r\n+          confirmText,\r\n+          cancelText,\r\n+          onConfirm: () => { restore(); resolve(true); },\r\n+          onCancel : () => { restore(); resolve(false); }\r\n+        });\r\n+\r\n+        // 3) Após montar, garante overlay por cima de tudo\r\n+        //    (pega o último elemento \"fixed\" full-screen e sobe o z-index)\r\n+        const bump = () => {\r\n+          try {\r\n+            const all = Array.from(document.querySelectorAll('body *'));\r\n+            const overlays = all.filter(el => {\r\n+              const cs = getComputedStyle(el);\r\n+              if (cs.position !== 'fixed') return false;\r\n+              const r = el.getBoundingClientRect();\r\n+              return r.width >= window.innerWidth * 0.95 && r.height >= window.innerHeight * 0.95;\r\n+            });\r\n+            const overlay = overlays.at(-1);\r\n+            if (overlay) {\r\n+              overlay.style.zIndex = '9999';\r\n+              overlay.style.pointerEvents = 'auto';\r\n+            }\r\n+          } catch (_) { /* noop */ }\r\n+        };\r\n+        requestAnimationFrame(bump);\r\n+        setTimeout(bump, 0);\r\n+\r\n+        // 4) Restaura o modal de edição quando fechar a confirmação\r\n+        function restore() {\r\n+          if (modal) {\r\n+            modal.style.visibility = prevVis || '';\r\n+            modal.style.pointerEvents = prevPe || '';\r\n+          }\r\n+        }\r\n+      });\r\n+    }\r\n+\r\n+    // Fallback (apenas se o componente não existir)\r\n+    const ok = window.confirm(message || title || 'Confirmar?');\r\n+    return Promise.resolve(!!ok);\r\n+  }\r\n+\r\n+  async function handleDelete() {\r\n+      const id = state.editing && state.editing._id ? String(state.editing._id) : null;\r\n+      if (!id) return;\r\n+\r\n+      const ok = await confirmAsync('Excluir atendimento', 'Tem ce...a excluir este atendimento? Esta ação não pode ser desfeita.', {\r\n+        confirmText: 'Excluir',\r\n+        cancelText: 'Cancelar'\r\n+      });\r\n+      if (!ok) return;\r\n+\r\n+      const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(() => ({}));\r\n+        alert(err.message || 'Erro ao excluir agendamento');\r\n+        return;\r\n+      }\r\n+      await loadAgendamentos();\r\n+      renderKpis();\r\n+      renderFilters();\r\n+      closeModal();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+  }\r\n+\r\n+  // Busca serviços\r\n+  async function searchServicos(term) {\r\n+    if (!term || term.length < 2) {\r\n+      if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+      return;\r\n+    }\r\n+    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    if (!servSug) return;\r\n+    servSug.innerHTML = list.map(s => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor}\">\r\n+        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${money(s.valor)}</div>\r\n+      </li>`).join('');\r\n+    servSug.classList.remove('hidden');\r\n+    servSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', () => {\r\n+        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n+        if (servInput) servInput.value = state.selectedServico.nome;\r\n+        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n+        servSug.classList.add('hidden');\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  // --- Lista de serviços no modal ---\r\n+  function renderServicosLista() {\r\n+    if (!servListUL || !servTotalEl) return;\r\n+    const items = state.tempServicos || [];\r\n+    servListUL.innerHTML = items.map((it, idx) => `\r\n+      <li class=\"flex items-center justify-between px-3 py-2 text-sm\">\r\n+        <div class=\"flex items-center gap-3\">\r\n+          <span class=\"w-20 text-right tabular-nums\">${money(Number(it.valor || 0))}</span>\r\n+          <span class=\"text-gray-700\">${it.nome || ''}</span>\r\n+        </div>\r\n+        <button data-idx=\"${idx}\" class=\"remove-serv px-2 py-1 rounded-md border text-gray-600 hover:bg-gray-50\">Remover</button>\r\n+      </li>\r\n+    `).join('');\r\n+    const total = items.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+    servTotalEl.textContent = money(total);\r\n+\r\n+    servListUL.querySelectorAll('.remove-serv').forEach(btn => {\r\n+      btn.addEventListener('click', () => {\r\n+        const i = parseInt(btn.getAttribute('data-idx'), 10);\r\n+        if (!isNaN(i)) {\r\n+          state.tempServicos.splice(i, 1);\r\n+          renderServicosLista();\r\n+        }\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  // Salvar (adicionar/editar)\r\n+  async function saveAgendamento() {\r\n+      try {\r\n+        const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n+        const storeIdSelected = (addStoreSelect?.value) || state.selectedStoreId || storeSelect?.value;\r\n+        const hora = horaInput?.value;\r\n+        const profissionalId = profSelect?.value;\r\n+        const status = (statusSelect?.value) || 'agendado';\r\n+\r\n+        if (!hora || !profissionalId) { alert('Preencha hora e profissional.'); return; }\r\n+        if (!storeIdSelected) { alert('Selecione a empresa.'); return; }\r\n+\r\n+        const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n+\r\n+        // Edição\r\n+        if (state.editing && state.editing._id) {\r\n+          const id = state.editing._id;\r\n+\r\n+          // usa os itens montados na UI (edição agora permite adicionar/remover)\r\n+          const items = Array.isArray(state.tempServicos) ? state.tempServicos : [];\r\n+          if (!items.length) { alert('Adicione pelo menos 1 serviço ao agendamento.'); return; }\r\n+\r\n+          const body = {\r\n+            storeId: storeIdSelected,\r\n+            profissionalId,\r\n+            scheduledAt,\r\n+            status,\r\n+            observacoes: (obsInput?.value || '').trim(),\r\n+            servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n+            ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n+            ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n+            ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n+          };\r\n+\r\n+          const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\r\n+          if (!resp.ok) {\r\n+            const err = await resp.json().catch(() => ({}));\r\n+            alert(err.message || 'Erro ao atualizar agendamento.');\r\n+            return;\r\n+          }\r\n+\r\n+          await loadAgendamentos();\r\n+          renderKpis();\r\n+          renderFilters();\r\n+          closeModal();\r\n+          renderGrid();\r\n+          enhanceAgendaUI();\r\n+          return;\r\n+        }\r\n+\r\n+        // Adição\r\n+        const clienteId = state.selectedCliente?._id;\r\n+        const petId = petSelect?.value;\r\n+        const items = state.tempServicos || [];\r\n+\r\n+        if (!(clienteId && petId && items.length)) { alert('Preencha cliente, pet e adicione pelo menos 1 serviço.'); return; }\r\n+\r\n+        const body = {\r\n+          storeId: storeIdSelected,\r\n+          clienteId, petId,\r\n+          servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n+          profissionalId, scheduledAt,\r\n+          status,\r\n+          observacoes: (obsInput?.value || '').trim(),\r\n+          pago: false\r\n+        };\r\n+        const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao salvar');\r\n+        }\r\n+\r\n+        await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n+        closeModal();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error(e);\r\n+        alert(e.message || 'Erro ao salvar');\r\n+      }\r\n+    }\r\n+\r\n+  function enhanceAgendaUI() {\r\n+    try {\r\n+      applyZebraAndSublines();\r\n+      decorateCards();\r\n+      enableDragDrop();\r\n+      drawNowLine();\r\n+\r\n+      // Auto-scroll para o horário atual (somente na data de hoje e 1x por renderização)\r\n+      const date = normalizeDate(dateInput?.value || todayStr());\r\n+      if (!state.__didInitialScroll && date === todayStr()) {\r\n+        scrollToNow();\r\n+        state.__didInitialScroll = true;\r\n+      }\r\n+    } catch (e) {\r\n+      console.info('[enhanceAgendaUI] skip', e);\r\n+    }\r\n+  }\r\n+\r\n+  function scrollToNow() {\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body || !state.profissionais?.length) return;\r\n+\r\n+      // encontra a célula da primeira coluna de profissional no horário atual\r\n+      const now = new Date();\r\n+      const hh = String(now.getHours()).padStart(2, '0') + ':00';\r\n+      const firstProfId = String(state.profissionais[0]._id);\r\n+      const target = body.querySelector(`div[data-profissional-id=\"${firstProfId}\"][data-hh=\"${hh}\"]`);\r\n+\r\n+      if (target) {\r\n+        const top = target.getBoundingClientRect().top + window.pageYOffset;\r\n+        const offset = 80; // sobe um pouco para contexto\r\n+        window.scrollTo({ top: Math.max(0, top - offset), behavior: 'smooth' });\r\n+      }\r\n+  }\r\n+\r\n+  // compacta a lista para um hash leve (ordem estável)\r\n+  function snapshotHash(items) {\r\n+    try {\r\n+      const compact = (items || []).map(x => [\r\n+        String(x._id || ''),\r\n+        String(x.status || ''),\r\n+        String(x.h || x.scheduledAt || ''),\r\n+        Number(x.valor || 0),\r\n+        !!x.pago\r\n+      ]).sort((a, b) => a[0].localeCompare(b[0]));\r\n+      return JSON.stringify(compact);\r\n+    } catch (_) {\r\n+      return String(Date.now());\r\n+    }\r\n+  }\r\n+\r\n+  // reconsulta e só re-renderiza se houver mudança relevante\r\n+  async function refreshAgendaIfChanged() {\r\n+    const prev = state.lastSnapshotHash || '';\r\n+    await loadAgendamentos();\r\n+    const next = snapshotHash(state.agendamentos);\r\n+    if (next !== prev) {\r\n+      state.lastSnapshotHash = next;\r\n+      renderGrid();\r\n+      // ao re-render com mesma data de hoje, não repete o scroll\r\n+      enhanceAgendaUI();\r\n+    }\r\n+  }\r\n+\r\n+  // inicia/renova o timer de auto-refresh (60s)\r\n+  function startAutoRefresh() {\r\n+    if (window.__agendaRefreshTimer) clearInterval(window.__agendaRefreshTimer);\r\n+    state.lastSnapshotHash = snapshotHash(state.agendamentos);\r\n+    window.__agendaRefreshTimer = setInterval(refreshAgendaIfChanged, 60000);\r\n+  }\r\n+\r\n+  // cria o botão \"Hoje\" ao lado do input de data (uma vez)\r\n+  function ensureTodayButton() {\r\n+    if (!dateInput) return;\r\n+    if (document.getElementById('agenda-today-btn')) return;\r\n+\r\n+    const btn = document.createElement('button');\r\n+    btn.id = 'agenda-today-btn';\r\n+    btn.type = 'button';\r\n+    btn.className = 'ml-2 inline-flex items-center gap-1 text-xs px-2 py-1 rounded border border-slate-300 text-slate-700 hover:bg-slate-50';\r\n+    btn.textContent = 'Hoje';\r\n+\r\n+    dateInput.insertAdjacentElement('afterend', btn);\r\n+    btn.addEventListener('click', async () => {\r\n+      dateInput.value = todayStr();\r\n+      state.__didInitialScroll = false;   // permite novo auto-scroll\r\n+      await loadAgendamentos();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    });\r\n+  }\r\n+\r\n+  // Zebra de linhas + sublinha 30min com CSS (via classe)\r\n+  function applyZebraAndSublines() {\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n+\r\n+      body.style.position = 'relative'; // para linha do \"agora\"\r\n+      const totalCols = 1 + (state.profissionais?.length || 0); // 1 (hora) + N profissionais\r\n+      if (totalCols <= 0) return;\r\n+\r\n+      const cells = Array.from(body.children);\r\n+      const totalRows = Math.floor(cells.length / totalCols);\r\n+\r\n+      for (let row = 0; row < totalRows; row++) {\r\n+        const start = row * totalCols;\r\n+        const zebraClass = (row % 2 === 0) ? 'bg-white' : 'bg-slate-50';\r\n+\r\n+        // primeira coluna (hora)\r\n+        const tCell = cells[start];\r\n+        if (tCell) {\r\n+          tCell.classList.remove('bg-white','bg-slate-50');\r\n+          tCell.classList.add(zebraClass);\r\n+        }\r\n+\r\n+        // colunas dos profissionais\r\n+        for (let col = 1; col < totalCols; col++) {\r\n+          const idx = start + col;\r\n+          const slot = cells[idx];\r\n+          if (!slot) continue;\r\n+          slot.classList.remove('bg-white','bg-slate-50');\r\n+          slot.classList.add(zebraClass, 'agenda-slot'); // garante classe\r\n+        }\r\n+      }\r\n+  }\r\n+\r\n+  // Insere ícones de ação nos cartões (editar / mudar status)\r\n+  function decorateCards() {\r\n+    const cards = agendaList?.querySelectorAll('div[data-appointment-id]');\r\n+    if (!cards || !cards.length) return;\r\n+\r\n+    cards.forEach((card) => {\r\n+      if (card.querySelector('.agenda-card__actions')) return; // já decorado\r\n+      card.classList.add('agenda-card'); // ativa hover via CSS\r\n+      card.style.position = 'relative';\r\n+\r\n+      const id = card.getAttribute('data-appointment-id') || '';\r\n+      const actions = document.createElement('div');\r\n+      actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex items-center gap-1';\r\n+\r\n+      actions.innerHTML = `\r\n+        <button class=\"agenda-action edit\" data-id=\"${id}\" title=\"Editar\">\r\n+          <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"text-gray-600 hover:text-gray-900\"><path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 000-1.42l-2.34-2.34a1.003 1.003 0 00-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.82z\"/></svg>\r\n+        </button>\r\n+        <button class=\"agenda-action status\" data-id=\"${id}\" title=\"Mudar status\">\r\n+          <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\"><path d=\"M12 7v10M7 12h10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/></svg>\r\n+        </button>\r\n+      `;\r\n+      card.appendChild(actions);\r\n+    });\r\n+  }\r\n+\r\n+  /* === Drag & Drop na agenda: mover card entre horários/profissionais === */\r\n+  function injectDndStylesOnce() {\r\n+    if (document.getElementById('agenda-dnd-style')) return;\r\n+    const st = document.createElement('style');\r\n+    st.id = 'agenda-dnd-style';\r\n+    st.textContent = `\r\n+      .agenda-card.is-dragging { opacity: .6; }\r\n+      .agenda-drop-target { outline: 2px dashed #0ea5e9; outline-offset: -2px; background: rgba(14,165,233,0.06); }\r\n+    `;\r\n+    document.head.appendChild(st);\r\n+  }\r\n+\r\n+  // PUT rápido para mover agendamento (profissional/horário)\r\n+  async function moveAppointmentQuick(id, payload) {\r\n+      try {\r\n+        const body = {\r\n+          ...payload,\r\n+          storeId: state.selectedStoreId || storeSelect?.value\r\n+        };\r\n+        const resp = await api(`/func/agendamentos/${id}`, {\r\n+          method: 'PUT',\r\n+          headers: { 'Content-Type': 'application/json' },\r\n+          body: JSON.stringify(body)\r\n+        });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao mover agendamento');\r\n+        }\r\n+        await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error('moveAppointmentQuick', e);\r\n+        alert(e.message || 'Não foi possível mover o agendamento.');\r\n+      }\r\n+    }\r\n+\r\n+  function enableDragDrop() {\r\n+      injectDndStylesOnce();\r\n+\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n+\r\n+      // Garante que todos os cards estejam \"arrastáveis\"\r\n+      body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n+        if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n+      });\r\n+\r\n+      // Evita múltiplos binds ao re-renderizar a agenda\r\n+      if (body.__dndDelegated) return;\r\n+      body.__dndDelegated = true;\r\n+\r\n+      // DRAGSTART (captura): funciona mesmo se o usuário começar o arrasto em um filho do card\r\n+      body.addEventListener('dragstart', (ev) => {\r\n+        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+        if (!card || !ev.dataTransfer) return;\r\n+\r\n+        const id = card.getAttribute('data-appointment-id') || '';\r\n+        if (!id) return;\r\n+\r\n+        try { ev.dataTransfer.setData('text/plain', id); } catch (_) {}\r\n+        try { ev.dataTransfer.setDragImage(card, 10, 10); } catch (_) {}\r\n+        ev.dataTransfer.effectAllowed = 'move';\r\n+        card.classList.add('is-dragging');\r\n+      }, true);\r\n+\r\n+      // DRAGEND: limpa estados visuais\r\n+      body.addEventListener('dragend', (ev) => {\r\n+        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+        if (card) card.classList.remove('is-dragging');\r\n+        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n+      }, true);\r\n+\r\n+      // DRAGOVER: habilita drop quando o ponteiro está sobre QUALQUER filho dentro da célula\r\n+      body.addEventListener('dragover', (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        ev.preventDefault();                 // obrigatório para permitir drop\r\n+        if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n+        slot.classList.add('agenda-drop-target');\r\n+      });\r\n+\r\n+      // DRAGLEAVE: remove realce\r\n+      body.addEventListener('dragleave', (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        slot.classList.remove('agenda-drop-target');\r\n+      });\r\n+\r\n+      // DROP: pega a célula alvo e move (profissional + horário)\r\n+      body.addEventListener('drop', async (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        ev.preventDefault();\r\n+        slot.classList.remove('agenda-drop-target');\r\n+\r\n+        const id = ev.dataTransfer?.getData('text/plain');\r\n+        if (!id) return;\r\n+\r\n+        const newProf = slot.dataset.profissionalId;\r\n+        const hh      = slot.dataset.hh; // ex.: \"14:00\"\r\n+        if (!newProf || !hh) return;\r\n+\r\n+        const dateRaw     = normalizeDate(dateInput?.value || todayStr());\r\n+        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n+\r\n+        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n+      });\r\n+  }\r\n+\r\n+  async function loadProfissionais() {\r\n+    if (!state.selectedStoreId) {\r\n+      state.profissionais = [];\r\n+      if (profSelect) profSelect.innerHTML = '';\r\n+      return;\r\n+    }\r\n+\r\n+    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.profissionais = Array.isArray(list) ? list : [];\r\n+\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais\r\n+        .map(p => `<option value=\"${p._id}\">${p.nome}</option>`)\r\n+        .join('');\r\n+    }\r\n+  }\r\n+\r\n+  // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n+  function drawNowLine() {\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n+\r\n+      body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n+\r\n+      const now = new Date();\r\n+      const minutes = now.getHours() * 60 + now.getMinutes();\r\n+      const percent = minutes / (24 * 60);\r\n+      const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n+\r\n+      const line = document.createElement('div');\r\n+      line.className = 'agenda-nowline';\r\n+      line.style.top = `${y}px`;\r\n+      body.appendChild(line);\r\n+\r\n+      if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n+      window.__agendaNowTimer = setInterval(() => {\r\n+        const now2 = new Date();\r\n+        const minutes2 = now2.getHours() * 60 + now2.getMinutes();\r\n+        const percent2 = minutes2 / (24 * 60);\r\n+        const y2 = Math.max(0, Math.min(1, percent2)) * body.scrollHeight;\r\n+        const ln = body.querySelector('.agenda-nowline');\r\n+        if (ln) ln.style.top = `${y2}px`;\r\n+      }, 60_000);\r\n+  }\r\n+\r\n+  // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n+  async function updateStatusQuick(id, status) {\r\n+      try {\r\n+        const resp = await api(`/func/agendamentos/${id}`, {\r\n+          method: 'PUT',\r\n+          headers: { 'Content-Type': 'application/json' },\r\n+          body: JSON.stringify({ status })\r\n+        });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao mudar status');\r\n+        }\r\n+        await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error('updateStatusQuick', e);\r\n+        alert(e.message || 'Erro ao mudar status');\r\n+      }\r\n+    }\r\n+\r\n+    // === Impressão em cupom (80mm) ===\r\n+  function buildCupomHTML(items, meta = {}) {\r\n+    const storeName = (meta.storeName || '').trim();\r\n+    const dateStr   = (meta.dateStr || '').trim();\r\n+\r\n+    const rows = (items || []).map(a => {\r\n+      const pet   = (a.pet || '').toString().trim();\r\n+      const serv  = (a.servico || '').toString().trim();\r\n+      const valor = money(Number(a.valor || 0));\r\n+      // \"Pet Serviço - Valor\" em linha única\r\n+      return `<div class=\"row\"><span class=\"txt\">${pet} ${serv}</span><span class=\"val\">${valor}</span></div>`;\r\n+    }).join('');\r\n+\r\n+    return `\r\n+  <!doctype html>\r\n+  <html>\r\n+  <head>\r\n+    <meta charset=\"utf-8\">\r\n+    <title>Impressão</title>\r\n+    <style>\r\n+      @page { size: 80mm auto; margin: 3mm; }\r\n+      * { box-sizing: border-box; }\r\n+      html, body { padding: 0; margin: 0; }\r\n+      /* Aumenta um pouco o tamanho e usa preto sólido para ganhar contraste na térmica */\r\n+      body {\r\n+        width: 74mm;\r\n+        font: 13px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\";\r\n+        color: #000;\r\n+        -webkit-font-smoothing: none; /* deixa o traço mais “cheio” na impressão */\r\n+        font-weight: 600; /* base mais pesada */\r\n+      }\r\n+      .wrap { padding: 2mm 0; }\r\n+      .h1 { text-align:center; font-weight:700; font-size: 15px; margin-bottom: 1mm; }\r\n+      .meta { text-align:center; font-size: 12px; color:#000; font-weight:700; margin-bottom: 2mm; }\r\n+      .hr { border-top: 1px dashed #000; margin: 2mm 0; }\r\n+      .row { display:flex; align-items:flex-start; justify-content:space-between; gap: 4mm; padding: 1mm 0; }\r\n+      /* Linhas do cupom bem escuras */\r\n+      .row .txt { flex: 1 1 auto; word-break: break-word; font-weight:700; }\r\n+      .row .val { flex: 0 0 auto; white-space: nowrap; font-weight:700; }\r\n+      .foot { text-align:center; margin-top: 2mm; font-size: 12px; color:#000; font-weight:700; }\r\n+      @media print { .no-print { display: none !important; } }\r\n+    </style>\r\n+  </head>\r\n+  <body>\r\n+    <div class=\"wrap\">\r\n+      <div class=\"h1\">Agenda</div>\r\n+      <div class=\"meta\">${storeName ? storeName + ' • ' : ''}${dateStr}</div>\r\n+      <div class=\"hr\"></div>\r\n+      ${rows || '<div class=\"row\"><span class=\"txt\">Sem itens</span><span class=\"val\"></span></div>'}\r\n+      <div class=\"hr\"></div>\r\n+      <div class=\"foot\">Obrigado!</div>\r\n+    </div>\r\n+    <script>\r\n+      window.onload = function(){ setTimeout(function(){ window.print(); }, 50); };\r\n+      window.onafterprint = function(){ setTimeout(function(){ window.close(); }, 50); };\r\n+    </script>\r\n+  </body>\r\n+  </html>`;\r\n+  }\r\n+\r\n+  function handlePrintCupom() {\r\n+    try {\r\n+      const items = getFilteredAgendamentos();\r\n+\r\n+      // Ordena por horário (se houver)\r\n+      items.sort((a, b) => {\r\n+        const da = new Date(a.h || a.scheduledAt || 0).getTime();\r\n+        const db = new Date(b.h || b.scheduledAt || 0).getTime();\r\n+        return da - db;\r\n+      });\r\n+\r\n+      const dateStr =\r\n+        (document.getElementById('agenda-date-label-visible')?.textContent || '').trim() ||\r\n+        new Date((normalizeDate(dateInput?.value || todayStr())) + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+\r\n+      const storeName =\r\n+        (document.getElementById('agenda-store-label-visible')?.textContent || '').trim();\r\n+\r\n+      const html = buildCupomHTML(items, { storeName, dateStr });\r\n+\r\n+      const w = window.open('', 'print_cupom', 'width=420,height=600');\r\n+      if (!w) { alert('O navegador bloqueou a janela de impressão. Habilite pop-ups para continuar.'); return; }\r\n+      w.document.open('text/html');\r\n+      w.document.write(html);\r\n+      w.document.close();\r\n+      w.focus();\r\n+    } catch (e) {\r\n+      console.error('handlePrintCupom', e);\r\n+      alert('Não foi possível preparar a impressão.');\r\n+    }\r\n+  }\r\n+\r\n+  // Events\r\n+  addBtn?.addEventListener('click', openAddModal);\r\n+  modalClose?.addEventListener('click', closeModal);\r\n+  modalCancel?.addEventListener('click', closeModal);\r\n+  modalSave?.addEventListener('click', saveAgendamento);\r\n+\r\n+  addStoreSelect?.addEventListener('change', () => {\r\n+    const sid = addStoreSelect.value;\r\n+    const current = profSelect?.value || '';\r\n+    populateModalProfissionais(sid, current);\r\n+  });\r\n+\r\n+  // Botão \"Imprimir\" — cupom 80mm com \"Pet Serviço - Valor\"\r\n+    (function () {\r\n+      const btn0 = document.getElementById('print-agenda-btn');\r\n+      // (se algum listener antigo ainda existir em outro build, garantimos o nosso fluxo)\r\n+      if (btn0) {\r\n+        // remove listeners antigos (se houver) clonando o nó\r\n+        const clone = btn0.cloneNode(true);\r\n+        btn0.parentNode.replaceChild(clone, btn0);\r\n+        clone.addEventListener('click', (ev) => {\r\n+          ev.preventDefault();\r\n+          ev.stopImmediatePropagation?.();\r\n+          handlePrintCupom();\r\n+        });\r\n+      }\r\n+    })();\r\n+\r\n+  cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n+  servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n+\r\n+  addServAddBtn?.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    const s = state.selectedServico;\r\n+    const v = Number(valorInput?.value || 0);\r\n+    if (!s || !s._id) { alert('Escolha um serviço na busca.'); return; }\r\n+    if (!(v >= 0)) { alert('Valor inválido.'); return; }\r\n+    state.tempServicos.push({ _id: s._id, nome: s.nome, valor: v });\r\n+    // limpa seleção\r\n+    state.selectedServico = null;\r\n+    if (servInput)  servInput.value = '';\r\n+    if (valorInput) valorInput.value = '';\r\n+    renderServicosLista();\r\n+  });\r\n+\r\n+  modalDelete?.addEventListener('click', handleDelete);\r\n+\r\n+  // Ações rápidas nos cartões (delegação no container da agenda)\r\n+  agendaList?.addEventListener('click', (ev) => {\r\n+    // toggle do menu mobile\r\n+    const more = ev.target.closest('.agenda-card__more');\r\n+    if (more) {\r\n+      const holder = more.parentElement?.querySelector('.agenda-card__actions');\r\n+      if (holder) holder.classList.toggle('hidden');\r\n+      return;\r\n+    }\r\n+\r\n+    const btn = ev.target.closest('.agenda-action');\r\n+    if (!btn) return;\r\n+    const id = btn.getAttribute('data-id');\r\n+    if (!id) return;\r\n+\r\n+    if (btn.classList.contains('edit')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      if (item) openEditModal(item);\r\n+    } else if (btn.classList.contains('status')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+      const cur = (item && item.status) || 'agendado';\r\n+      const next = chain[(chain.indexOf(cur) + 1) % chain.length];\r\n+      updateStatusQuick(id, next);\r\n+    } else if (btn.classList.contains('cobrar')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      if (item) openEditModal(item); // reaproveite seu modal/fluxo de cobrança\r\n+    }\r\n+  });\r\n+\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    updateStoreLabel();\r\n+    state.__didInitialScroll = false;     // nova loja -> recalcula scroll\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;     // nova data -> permite auto-scroll\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  // Boot\r\n+  function setupShortcuts() {\r\n+    document.addEventListener('keydown', (e) => {\r\n+      if (e.target && ['INPUT','SELECT','TEXTAREA'].includes(e.target.tagName)) return; // não atrapalhar digitação\r\n+      if (e.key === 't' || e.key === 'T') {\r\n+        if (dateInput) {\r\n+          dateInput.value = todayStr();\r\n+          state.__didInitialScroll = false;\r\n+          loadAgendamentos().then(() => {\r\n+            renderKpis(); renderFilters(); renderGrid(); enhanceAgendaUI();\r\n+          });\r\n+        }\r\n+      }\r\n+      if (e.key === 'n' || e.key === 'N') {\r\n+        e.preventDefault();\r\n+        openAddModal();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  (async function init() {\r\n+    if (!dateInput?.value) dateInput.value = todayStr();\r\n+    loadFiltersFromStorage();\r\n+    await loadStores();\r\n+    if (!state.selectedStoreId && storeSelect?.value) {\r\n+      state.selectedStoreId = storeSelect.value;\r\n+    }\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+\r\n+    ensureToolbar();\r\n+    ensureTodayButton();\r\n+    setupShortcuts();\r\n+\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  })();\r\n+\r\n+  // Atualizações após troca de loja/data/status etc.\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    updateStoreLabel();\r\n+    state.__didInitialScroll = false;\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+})();\r\n"
                },
                {
                    "date": 1757517343194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -482,10 +482,21 @@\n           ${renderStatusBadge(a.status)}\r\n         `;\r\n \r\n         const bodyEl = document.createElement('div');\r\n-        bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n-        bodyEl.textContent = a.servico || '';\r\n+        if (a.observacoes && String(a.observacoes).trim()) {\r\n+          const svc = document.createElement('div');\r\n+          svc.className = 'text-[13px] text-gray-600 clamp-2';\r\n+          svc.textContent = a.servico || '';\r\n+          const obs = document.createElement('div');\r\n+          obs.className = 'mt-1 text-[12px] text-gray-700 italic clamp-2';\r\n+          obs.textContent = String(a.observacoes).trim();\r\n+          bodyEl.appendChild(svc);\r\n+          bodyEl.appendChild(obs);\r\n+        } else {\r\n+          bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+          bodyEl.textContent = a.servico || '';\r\n+        }\r\n \r\n         const footerEl = document.createElement('div');\r\n         footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n         const price = document.createElement('div');\r\n@@ -1630,1636 +1641,4 @@\n     renderGrid();\r\n     enhanceAgendaUI();\r\n   });\r\n })();\r\n-(function () {\r\n-  // Helper para requisições com token\r\n-  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n-  function api(url, opts = {}) {\r\n-    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n-      ...opts,\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        ...(opts.headers || {}),\r\n-        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  // Elements\r\n-  const agendaList = document.getElementById('agenda-list');\r\n-  const dateInput = document.getElementById('agenda-date');\r\n-  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n-  const addBtn = document.getElementById('add-service-btn');\r\n-  const storeSelect = document.getElementById('agenda-store');\r\n-  const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n-\r\n-  // Modal (reutilizado p/ adicionar e editar)\r\n-  const modal = document.getElementById('modal-add-servico');\r\n-  const modalClose = document.getElementById('modal-add-close');\r\n-  const modalCancel = document.getElementById('modal-add-cancel');\r\n-  const modalSave = document.getElementById('modal-add-save');\r\n-  const modalDelete = document.getElementById('modal-add-delete');\r\n-\r\n-  const addStoreSelect = document.getElementById('add-store-select');\r\n-  const addDateInput   = document.getElementById('add-date');\r\n-  const statusSelect   = document.getElementById('add-status');\r\n-\r\n-  const cliInput = document.getElementById('add-cli-input');\r\n-  const cliSug = document.getElementById('add-cli-sug');\r\n-  const petSelect = document.getElementById('add-pet-select');\r\n-  const servInput   = document.getElementById('add-serv-input');\r\n-  const servSug     = document.getElementById('add-serv-sug');\r\n-  const valorInput  = document.getElementById('add-valor');\r\n-  const addServAddBtn = document.getElementById('add-serv-add-btn');\r\n-  const servListUL  = document.getElementById('add-serv-list');\r\n-  const servTotalEl = document.getElementById('add-serv-total');\r\n-  const obsInput   = document.getElementById('add-observacoes');\r\n-  const horaInput   = document.getElementById('add-hora');\r\n-  const profSelect  = document.getElementById('add-prof-select');\r\n-\r\n-  // State\r\n-  const FILTER_STORAGE_KEY = 'agenda_filters_v1';\r\n-\r\n-  const state = {\r\n-    stores: [],\r\n-    profissionais: [],\r\n-    agendamentos: [],\r\n-    selectedStoreId: null,\r\n-    selectedCliente: null,\r\n-    selectedServico: null,\r\n-    tempServicos: [],\r\n-    editing: null,\r\n-    lastSnapshotHash: '',\r\n-    __didInitialScroll: false,\r\n-    filters: {                 // filtros persistentes\r\n-      statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n-      profIds: new Set()       // _id dos profissionais\r\n-    }\r\n-  };\r\n-\r\n-  function loadFiltersFromStorage() {\r\n-    try {\r\n-      const raw = JSON.parse(localStorage.getItem(FILTER_STORAGE_KEY) || 'null');\r\n-      if (raw && typeof raw === 'object') {\r\n-        state.filters.statuses = new Set(Array.isArray(raw.statuses) ? raw.statuses : []);\r\n-        state.filters.profIds  = new Set(Array.isArray(raw.profIds)  ? raw.profIds  : []);\r\n-      }\r\n-    } catch(_) {}\r\n-  }\r\n-  function saveFiltersToStorage() {\r\n-    try {\r\n-      localStorage.setItem(FILTER_STORAGE_KEY, JSON.stringify({\r\n-        statuses: Array.from(state.filters.statuses),\r\n-        profIds : Array.from(state.filters.profIds)\r\n-      }));\r\n-    } catch(_) {}\r\n-  }\r\n-\r\n-  function ensureToolbar() {\r\n-    if (!agendaList) return;\r\n-    if (document.getElementById('agenda-toolbar')) return;\r\n-\r\n-    const bar = document.createElement('div');\r\n-    bar.id = 'agenda-toolbar';\r\n-    // sticky sob o cabeçalho; leve blur para legibilidade; borda inferior discreta\r\n-    bar.className = 'sticky top-0 z-30 bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/60 border-b border-slate-200 mb-2 flex flex-col gap-2 px-3 py-2 rounded-lg';\r\n-\r\n-    // KPIs\r\n-    const kpis = document.createElement('div');\r\n-    kpis.id = 'agenda-kpis';\r\n-    kpis.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(kpis);\r\n-\r\n-    // Filtros\r\n-    const filters = document.createElement('div');\r\n-    filters.id = 'agenda-filters';\r\n-    filters.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(filters);\r\n-\r\n-    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n-  }\r\n-\r\n-  function computeKPIs(items) {\r\n-    const total = items.length;\r\n-    const previsto = items.reduce((s, i) => s + Number(i.valor || 0), 0);\r\n-    const recebido = items.reduce((s, i) => s + (i.pago ? Number(i.valor || 0) : 0), 0);\r\n-    const pendente = previsto - recebido;\r\n-    return { total, previsto, recebido, pendente };\r\n-  }\r\n-\r\n-  function renderKpis() {\r\n-    const wrap = document.getElementById('agenda-kpis');\r\n-    if (!wrap) return;\r\n-\r\n-    const all = state.agendamentos || [];\r\n-    const f = getFilteredAgendamentos();   // filtrados atuais\r\n-    const kAll = computeKPIs(all);\r\n-    const kF   = computeKPIs(f);\r\n-\r\n-    wrap.innerHTML = `\r\n-      <div class=\"kpi-chip\">Total dia: <strong>${kAll.total}</strong></div>\r\n-      <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n-      <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n-      <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n-      ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n-          ? `<div class=\"kpi-chip kpi-muted\">Filtrados: <strong>${kF.total}</strong></div>` : '' }\r\n-    `;\r\n-  }\r\n-\r\n-  function renderFilters() {\r\n-    const el = document.getElementById('agenda-filters');\r\n-    if (!el) return;\r\n-\r\n-    // contadores por status\r\n-    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n-    for (const a of (state.agendamentos || [])) {\r\n-      const key = String(a.status || 'agendado')\r\n-        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n-      if (counts[key] !== undefined) counts[key] += 1;\r\n-    }\r\n-\r\n-    // contadores por profissional\r\n-    const byProf = new Map();\r\n-    for (const a of (state.agendamentos || [])) {\r\n-      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n-      if (!id) continue;\r\n-      const key = String(id);\r\n-      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n-    }\r\n-\r\n-    const statuses = [\r\n-      {key:'agendado', label:'Agend.'},\r\n-      {key:'em_espera', label:'Espera'},\r\n-      {key:'em_atendimento', label:'Atend.'},\r\n-      {key:'finalizado', label:'Fim.'}\r\n-    ];\r\n-\r\n-    // chips de status\r\n-    const chipsStatus = statuses.map(s => {\r\n-      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n-      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n-                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n-              </button>`;\r\n-    }).join('');\r\n-\r\n-    // chips de profissional (apenas os que existem)\r\n-    const chipsProf = (state.profissionais || []).map(p => {\r\n-      const id = String(p._id);\r\n-      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n-      const n = byProf.get(id) || 0;\r\n-      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n-                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n-              </button>`;\r\n-    }).join('');\r\n-\r\n-    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n-      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n-\r\n-    el.innerHTML = `\r\n-      <div class=\"flex flex-wrap items-center gap-2\">\r\n-        ${chipsStatus}\r\n-        <span class=\"chip-sep\"></span>\r\n-        ${chipsProf}\r\n-        ${clearBtn}\r\n-      </div>\r\n-    `;\r\n-\r\n-    // handlers\r\n-    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n-      btn.addEventListener('click', () => {\r\n-        const type = btn.getAttribute('data-filter');\r\n-        const val  = btn.getAttribute('data-value');\r\n-        if (type === 'status') {\r\n-          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n-        } else if (type === 'prof') {\r\n-          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n-        }\r\n-        saveFiltersToStorage();\r\n-        renderFilters();\r\n-        renderKpis();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      });\r\n-    });\r\n-\r\n-    const clear = document.getElementById('chip-clear');\r\n-    if (clear) clear.addEventListener('click', () => {\r\n-      state.filters.statuses.clear();\r\n-      state.filters.profIds.clear();\r\n-      saveFiltersToStorage();\r\n-      renderFilters();\r\n-      renderKpis();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    });\r\n-  }\r\n-\r\n-  function normalizeStatus(s) {\r\n-    return String(s || 'agendado')\r\n-      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-      .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n-  }\r\n-\r\n-  function getFilteredAgendamentos() {\r\n-    const hasStatus = state.filters.statuses.size > 0;\r\n-    const hasProf   = state.filters.profIds.size   > 0;\r\n-\r\n-    if (!hasStatus && !hasProf) return state.agendamentos || [];\r\n-\r\n-    const byNameAll = new Map(\r\n-      (state.profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n-    );\r\n-\r\n-    return (state.agendamentos || []).filter(a => {\r\n-      let ok = true;\r\n-      if (hasStatus) ok = ok && state.filters.statuses.has(normalizeStatus(a.status));\r\n-      if (hasProf) {\r\n-        let pid = a.profissionalId ? String(a.profissionalId) : null;\r\n-        if (!pid) {\r\n-          let nc = '';\r\n-          if (typeof a.profissional === 'string') nc = a.profissional;\r\n-          else if (a.profissional && typeof a.profissional === 'object') {\r\n-            nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n-                a.profissional.razaoSocial || a.profissional.nome || '';\r\n-          }\r\n-          pid = byNameAll.get(String(nc).trim().toLowerCase()) || null;\r\n-        }\r\n-        ok = ok && pid && state.filters.profIds.has(String(pid));\r\n-      }\r\n-      return ok;\r\n-    });\r\n-  }\r\n-\r\n-  function getVisibleProfissionais() {\r\n-    const profs = state.profissionais || [];\r\n-    if (!state.filters.profIds.size) return profs;\r\n-    return profs.filter(p => state.filters.profIds.has(String(p._id)));\r\n-  }\r\n-\r\n-  // Helpers de data e utilitários\r\n-  function todayStr() {\r\n-    // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n-    const d = new Date();\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n-  function buildLocalDateTime(dateStr, hhmm) {\r\n-    let y, m, d;\r\n-    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) { [d, m, y] = dateStr.split('/').map(Number); }\r\n-    else { [y, m, d] = dateStr.split('-').map(Number); }\r\n-    const [hh, mm] = (hhmm || '00:00').split(':').map(Number);\r\n-    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n-  }\r\n-  function normalizeDate(v) {\r\n-    if (!v) return todayStr();\r\n-    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n-    return v;\r\n-  }\r\n-  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n-  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n-  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n-\r\n-  // Stores\r\n-  async function loadStores() {\r\n-    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    state.stores = Array.isArray(list) ? list : [];\r\n-    if (storeSelect) {\r\n-      storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-    }\r\n-    if (!state.selectedStoreId && state.stores[0]) {\r\n-      state.selectedStoreId = state.stores[0]._id;\r\n-      if (storeSelect) storeSelect.value = state.selectedStoreId;\r\n-    }\r\n-    updateStoreLabel();\r\n-  }\r\n-  function updateStoreLabel() {\r\n-    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n-    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n-    const vis = document.getElementById('agenda-store-label-visible');\r\n-    if (vis) vis.textContent = s ? s.nome : '—';\r\n-  }\r\n-\r\n-  // Profissionais\r\n-  async function populateModalProfissionais(storeId, preselectId) {\r\n-    try {\r\n-      if (!storeId || !profSelect) return;\r\n-      const resp = await api(`/func/profissionais/esteticistas?storeId=${storeId}`);\r\n-      const list = await resp.json().catch(() => []);\r\n-      const arr = Array.isArray(list) ? list : [];\r\n-      profSelect.innerHTML = arr.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-      const pid = preselectId ? String(preselectId) : '';\r\n-      if (pid && arr.some(p => String(p._id) === pid)) {\r\n-        profSelect.value = pid;\r\n-      } else if (arr[0]) {\r\n-        profSelect.value = String(arr[0]._id);\r\n-      }\r\n-    } catch (_) { /* silencioso no modal */ }\r\n-  }\r\n-\r\n-  // Agendamentos\r\n-  async function loadAgendamentos() {\r\n-    const date = normalizeDate(dateInput?.value || todayStr());\r\n-    const url = `/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`;\r\n-    try {\r\n-      const resp = await api(url);\r\n-      if (!resp.ok) {\r\n-        const txt = await resp.text();\r\n-        console.error('GET', url, '->', resp.status, txt);\r\n-        state.agendamentos = [];\r\n-        return;\r\n-      }\r\n-      const list = await resp.json();\r\n-      state.agendamentos = Array.isArray(list) ? list : [];\r\n-      console.info('[Agenda] loja=', state.selectedStoreId, 'data=', date, 'itens=', state.agendamentos.length, state.agendamentos.slice(0, 3));\r\n-    } catch (e) {\r\n-      console.error('Erro ao carregar agendamentos', e);\r\n-      state.agendamentos = [];\r\n-    }\r\n-  }\r\n-\r\n-  // Grade (sem coluna \"Outros\")\r\n-  function renderGrid() {\r\n-      if (!agendaList) return;\r\n-\r\n-      const date = normalizeDate(dateInput?.value || todayStr());\r\n-      if (dateLabelVisible) {\r\n-        dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-      }\r\n-\r\n-      // janelas de trabalho (ajuste se quiser)\r\n-      const BUSINESS_START = 8;   // 08:00\r\n-      const BUSINESS_END   = 19;  // 19:00\r\n-\r\n-      const hours = [];\r\n-      for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n-\r\n-      clearChildren(agendaList);\r\n-\r\n-      const profsAll  = state.profissionais || [];\r\n-      const profs     = getVisibleProfissionais();\r\n-      const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n-\r\n-      const colCount = 1 + (profs?.length || 0);\r\n-\r\n-      // Cabeçalho\r\n-      const header = document.createElement('div');\r\n-      header.style.display = 'grid';\r\n-      // >>> COLUNAS ELÁSTICAS: ocupam o espaço restante sem “vão” à direita\r\n-      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n-      header.className = 'bg-white border-b';\r\n-\r\n-      const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n-      headLabels.forEach((label, idx) => {\r\n-        const cell = document.createElement('div');\r\n-        cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n-        if (idx === 0) {\r\n-          cell.textContent = label;\r\n-        }\r\n-        else {\r\n-          // >>> centraliza o nome do profissional\r\n-          cell.style.textAlign = 'center';\r\n-          const span = document.createElement('span');\r\n-          span.className = 'agenda-head-label inline-block';\r\n-          span.textContent = label || '';\r\n-          cell.dataset.profId = String(profs[idx - 1]._id);\r\n-          cell.appendChild(span);\r\n-        }\r\n-        header.appendChild(cell);\r\n-      });\r\n-\r\n-      const counter = document.createElement('div');\r\n-      counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n-      const itemsAll = state.agendamentos || [];\r\n-      const items    = getFilteredAgendamentos(itemsAll);\r\n-      const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n-      counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n-      header.appendChild(counter);\r\n-\r\n-      agendaList.appendChild(header);\r\n-\r\n-      // Corpo\r\n-      const body = document.createElement('div');\r\n-      body.style.display = 'grid';\r\n-      // >>> COLUNAS ELÁSTICAS: cada profissional tem no mínimo 360px e expande até preencher\r\n-      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n-      agendaList.appendChild(body);\r\n-\r\n-      const isToday = normalizeDate(date) === todayStr();\r\n-      const now = new Date();\r\n-      const nowHH = `${pad(now.getHours())}:00`;\r\n-\r\n-      hours.forEach(hh => {\r\n-        const hourNumber = parseInt(hh.split(':')[0], 10);\r\n-        const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n-        const isNowRow   = isToday && hh === nowHH;\r\n-\r\n-        // coluna de horário\r\n-        const timeCell = document.createElement('div');\r\n-        timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n-        timeCell.textContent = hh;\r\n-\r\n-        body.appendChild(timeCell);\r\n-\r\n-        // células por profissional\r\n-        (profs || []).forEach(p => {\r\n-          const cell = document.createElement('div');\r\n-          // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n-          cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n-          cell.dataset.profissionalId = String(p._id);\r\n-          cell.dataset.hh = hh;\r\n-          body.appendChild(cell);\r\n-        });\r\n-      });\r\n-\r\n-      // posiciona cartões\r\n-      let placed = 0;\r\n-      for (const a of items) {\r\n-        const when = a.h || a.scheduledAt;\r\n-        if (!when) continue;\r\n-\r\n-        const d  = new Date(when);\r\n-        const hh = `${pad(d.getHours())}:00`;\r\n-\r\n-        let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-        if (!profId) {\r\n-          let nameCandidate = '';\r\n-          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n-          else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n-          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n-          if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n-        }\r\n-        if (!profId) continue;\r\n-\r\n-        let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n-        if (!col && profs[0]) {\r\n-          col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n-        }\r\n-        if (!col) continue;\r\n-\r\n-        const meta = statusMeta(a.status);\r\n-        const card = document.createElement('div');\r\n-        card.setAttribute('data-appointment-id', a._id || '');\r\n-        card.style.setProperty('--stripe', meta.stripe);\r\n-        card.style.setProperty('--card-max-w', '260px');\r\n-        card.className = `agenda-card border ${meta.borderClass} cursor-move select-none`;\r\n-        card.setAttribute('draggable', 'true');\r\n-\r\n-        const headerEl = document.createElement('div');\r\n-        // reserva espaço à direita para os botões flutuantes (evita o chip “ficar por baixo”)\r\n-        headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n-        headerEl.innerHTML = `\r\n-          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n-          ${renderStatusBadge(a.status)}\r\n-        `;\r\n-\r\n-        const bodyEl = document.createElement('div');\r\n-        bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n-        bodyEl.textContent = a.servico || '';\r\n-\r\n-        const footerEl = document.createElement('div');\r\n-        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n-        const price = document.createElement('div');\r\n-        price.className = 'text-[13px] text-gray-800 font-medium';\r\n-        price.textContent = money(a.valor);\r\n-\r\n-        footerEl.appendChild(price);\r\n-\r\n-        card.appendChild(headerEl);\r\n-        card.appendChild(bodyEl);\r\n-        card.appendChild(footerEl);\r\n-\r\n-        col.appendChild(card);\r\n-        placed++;\r\n-      }\r\n-\r\n-      if (placed === 0) {\r\n-        const empty = document.createElement('div');\r\n-        empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n-        empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n-        agendaList.insertBefore(empty, header.nextSibling);\r\n-      }\r\n-  }\r\n-\r\n-  // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n-  function statusMeta(s) {\r\n-    // Normalização: acentos/maiúsculas/espaços/hífens\r\n-    const keyRaw = String(s || 'agendado')\r\n-      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-      .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n-\r\n-    const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-    const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n-\r\n-    // Paleta acessível (contraste AA) + info para faixa lateral e badge compacta\r\n-    const map = {\r\n-      agendado: {\r\n-        label: 'Agendado',\r\n-        short: 'Agend.',\r\n-        stripe: '#64748B',     // slate-500\r\n-        text: '#0F172A',       // slate-900\r\n-        badgeClass: 'bg-slate-100 text-slate-700 border border-slate-200',\r\n-        borderClass: 'border-slate-300'\r\n-      },\r\n-      em_espera: {\r\n-        label: 'Em espera',\r\n-        short: 'Espera',\r\n-        stripe: '#B45309',     // amber-700\r\n-        text: '#1F2937',       // gray-800\r\n-        badgeClass: 'bg-amber-50 text-amber-800 border border-amber-200',\r\n-        borderClass: 'border-amber-400'\r\n-      },\r\n-      em_atendimento: {\r\n-        label: 'Em atendimento',\r\n-        short: 'Atend.',\r\n-        stripe: '#1D4ED8',     // blue-700\r\n-        text: '#0B1235',\r\n-        badgeClass: 'bg-blue-50 text-blue-800 border border-blue-200',\r\n-        borderClass: 'border-blue-500'\r\n-      },\r\n-      finalizado: {\r\n-        label: 'Finalizado',\r\n-        short: 'Fim.',\r\n-        stripe: '#16A34A',     // green-600\r\n-        text: '#052E16',\r\n-        badgeClass: 'bg-green-50 text-green-800 border border-green-200',\r\n-        borderClass: 'border-green-500'\r\n-      }\r\n-    };\r\n-\r\n-    return map[k];\r\n-  }\r\n-\r\n-  function renderStatusBadge(s) {\r\n-    const { label, badgeClass } = statusMeta(s);\r\n-    // `whitespace-nowrap` garante que o chip não quebre em duas linhas\r\n-    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium whitespace-nowrap ${badgeClass}\">${label}</span>`;\r\n-  }\r\n-\r\n-  // Modal — modo adicionar\r\n-  function openAddModal() {\r\n-    state.editing = null;\r\n-    if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n-\r\n-    // Reset serviços temporários\r\n-    state.tempServicos = [];\r\n-    renderServicosLista();\r\n-    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n-\r\n-    // Campos editáveis habilitados\r\n-    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n-\r\n-    // Limpa estado/inputs\r\n-    state.selectedCliente = null;\r\n-    state.selectedServico = null;\r\n-    if (cliInput) { cliInput.value = ''; }\r\n-    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n-    if (servInput) { servInput.value = ''; }\r\n-    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-    if (valorInput) { valorInput.value = ''; }\r\n-    if (petSelect) { petSelect.innerHTML = ''; }\r\n-    if (obsInput) { obsInput.value = ''; }\r\n-\r\n-    // Empresa (usa as mesmas opções do seletor da página)\r\n-    if (addStoreSelect) {\r\n-      if (storeSelect && storeSelect.options.length) {\r\n-        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n-      } else if (state.stores?.length) {\r\n-        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-      }\r\n-      const sid = state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.value = sid;\r\n-\r\n-      // Carrega os profissionais correspondentes à empresa escolhida no modal (sem travar a abertura)\r\n-      try { if (sid) { populateModalProfissionais(sid); } } catch(_) {}\r\n-    }\r\n-\r\n-    // Data (usa a data visível na página)\r\n-    if (addDateInput) {\r\n-      const date = normalizeDate(dateInput?.value || todayStr()); // YYYY-MM-DD\r\n-      addDateInput.value = date;\r\n-    }\r\n-\r\n-    // Hora default (agora)\r\n-    const now = new Date();\r\n-    const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n-    if (horaInput) horaInput.value = hh;\r\n-    \r\n-    // Observações\r\n-    if (obsInput) { obsInput.value = a.observacoes || ''; }\r\n-\r\n-    // Status default\r\n-    if (statusSelect) statusSelect.value = 'agendado';\r\n-\r\n-    // Botão Excluir só em edição\r\n-    if (modalDelete) modalDelete.classList.add('hidden');\r\n-\r\n-    modal.classList.remove('hidden'); \r\n-    modal.classList.add('flex');\r\n-    cliInput?.focus();\r\n-  }\r\n-\r\n-  // cache simples: clienteId -> nome\r\n-  const _clienteNomeCache = new Map();\r\n-\r\n-  async function resolveClienteNome(a) {\r\n-    try {\r\n-      if (!a) return '';\r\n-\r\n-      // 1) nome direto vindo da API\r\n-      const direct =\r\n-        a.clienteNome ||\r\n-        (a.cliente && typeof a.cliente === 'object' && (a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial)) ||\r\n-        null;\r\n-      if (typeof direct === 'string' && direct.trim()) return direct.trim();\r\n-\r\n-      // 2) clienteId em qualquer formato\r\n-      let maybeId =\r\n-        a.clienteId ||\r\n-        a.clientId ||\r\n-        a.customerId ||\r\n-        (typeof a.cliente === 'string' ? a.cliente : null);\r\n-\r\n-      if (typeof maybeId === 'object' && maybeId !== null && maybeId._id) {\r\n-        maybeId = String(maybeId._id);\r\n-      }\r\n-      const id = (typeof maybeId === 'string' && /^[0-9a-fA-F]{24}$/.test(maybeId)) ? maybeId : null;\r\n-\r\n-      if (id) {\r\n-        if (_clienteNomeCache.has(id)) return _clienteNomeCache.get(id);\r\n-        const r = await api(`/func/clientes/${id}`);\r\n-        if (r.ok) {\r\n-          const c = await r.json();\r\n-          const nome = c?.nome || '';\r\n-          if (nome) { _clienteNomeCache.set(id, nome); return nome; }\r\n-        }\r\n-      }\r\n-\r\n-      // 3) fallback por petId\r\n-      const petId =\r\n-        a.petId ||\r\n-        (a.pet && typeof a.pet === 'object' && a.pet._id ? a.pet._id : null) ||\r\n-        null;\r\n-\r\n-      if (petId && /^[0-9a-fA-F]{24}$/.test(String(petId))) {\r\n-        const r2 = await api(`/func/pets/${petId}`);\r\n-        if (r2.ok) {\r\n-          const p = await r2.json();\r\n-          const nome =\r\n-            (p?.cliente && (p.cliente.nome || p.cliente.nomeCompleto || p.cliente.razaoSocial)) ||\r\n-            p?.clienteNome ||\r\n-            '';\r\n-          if (nome) return String(nome);\r\n-        }\r\n-      }\r\n-    } catch (e) {\r\n-      console.info('[resolveClienteNome] não foi possível resolver', e);\r\n-    }\r\n-    return '';\r\n-  }\r\n-\r\n-  // --- DEPOIS: openEditModal (indica carregamento e garante preenchimento) ---\r\n-  function toDateInputValueFromISO(isoStr) {\r\n-    const d = new Date(isoStr);\r\n-    if (isNaN(d.getTime())) return todayStr();\r\n-    const yyyy = d.getFullYear();\r\n-    const mm = String(d.getMonth() + 1).padStart(2, '0');\r\n-    const dd = String(d.getDate()).padStart(2, '0');\r\n-    return `${yyyy}-${mm}-${dd}`;\r\n-  }\r\n-\r\n-  function openEditModal(a) {\r\n-    state.editing = a || null;\r\n-    if (!modal || !state.editing) return;\r\n-\r\n-    // Preenche lista de serviços no modo edição (somente leitura)\r\n-    state.tempServicos = Array.isArray(a.servicos)\r\n-      ? a.servicos.map(x => ({ _id: x._id, nome: x.nome, valor: Number(x.valor || 0) }))\r\n-      : (a.servico ? [{ _id: null, nome: a.servico, valor: Number(a.valor || 0) }] : []);\r\n-    renderServicosLista();\r\n-\r\n-    // habilita campo de busca/valor para adicionar novos serviços\r\n-    state.selectedServico = null;\r\n-    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n-    if (servSug)   { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-    if (valorInput){ valorInput.value = ''; valorInput.disabled = false; }\r\n-\r\n-    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n-\r\n-    // Empresa (mostra a loja do agendamento e permite trocar)\r\n-    if (addStoreSelect) {\r\n-      if (storeSelect && storeSelect.options.length) {\r\n-        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n-      } else if (state.stores?.length) {\r\n-        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-      }\r\n-      addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.disabled = false;\r\n-    }\r\n-\r\n-    // Data do agendamento\r\n-    if (addDateInput) {\r\n-      const iso = a.h || a.scheduledAt || new Date().toISOString();\r\n-      addDateInput.value = toDateInputValueFromISO(iso);\r\n-    }\r\n-\r\n-    // Hora\r\n-    const d = new Date((a.h || a.scheduledAt) || new Date());\r\n-    const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n-    if (horaInput) horaInput.value = hh;\r\n-\r\n-    // Profissional (tenta resolver o id atual)\r\n-    let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-    if (!profId && typeof a.profissional === 'string') {\r\n-      const key = a.profissional.trim().toLowerCase();\r\n-      const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n-      if (match) profId = String(match._id);\r\n-    }\r\n-    if (profSelect && profId) profSelect.value = profId;\r\n-\r\n-    // Ao abrir o modal de edição, carregamos os profissionais da EMPRESA selecionada no modal\r\n-    try {\r\n-      const sid = addStoreSelect?.value || a.storeId || '';\r\n-      if (sid) { populateModalProfissionais(sid, profId); } // não bloqueia a abertura do modal\r\n-    } catch (_) {}\r\n-\r\n-    // Status (normalizado p/ os values do <select>)\r\n-    if (statusSelect) {\r\n-      const keyRaw = String(a.status || 'agendado')\r\n-        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-        .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n-      const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-      statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n-    }\r\n-\r\n-    // Cliente e Pet (preenche e bloqueia busca no modo edição)\r\n-    if (cliInput) { cliInput.value = (a.clienteNome || ''); cliInput.disabled = true; }\r\n-    if (petSelect) {\r\n-      petSelect.innerHTML = '';\r\n-      try {\r\n-        const clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n-        if (clienteId) {\r\n-          api(`/func/clientes/${clienteId}/pets`).then(r => r.json().catch(() => []))\r\n-            .then(pets => {\r\n-              petSelect.innerHTML = (Array.isArray(pets) ? pets : []).map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-              const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n-              if (currentPetId) petSelect.value = String(currentPetId);\r\n-            });\r\n-        }\r\n-      } catch (_) {}\r\n-    }\r\n-\r\n-    // Serviço/Valor: leitura\r\n-    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n-    if (valorInput) { valorInput.value = ''; valorInput.disabled = false; }\r\n-\r\n-    // Botão excluir visível\r\n-    if (modalDelete) modalDelete.classList.remove('hidden');\r\n-\r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n-  }\r\n-\r\n-  function closeModal() {\r\n-    if (!modal) return;\r\n-    modal.classList.add('hidden');\r\n-    modal.classList.remove('flex');\r\n-    state.editing = null;\r\n-    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n-  }\r\n-\r\n-  // Busca cliente\r\n-  async function searchClientes(term) {\r\n-    if (!term || term.length < 2) {\r\n-      if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n-      return;\r\n-    }\r\n-    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    if (!cliSug) return;\r\n-    cliSug.innerHTML = list.map(u => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n-        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n-      </li>`).join('');\r\n-    cliSug.classList.remove('hidden');\r\n-    cliSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', async () => {\r\n-        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n-        if (cliInput) cliInput.value = li.dataset.nome;\r\n-        cliSug.classList.add('hidden');\r\n-        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n-        const pets = await resp.json().catch(() => []);\r\n-        if (petSelect) {\r\n-          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-        }\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  function confirmAsync(title, message, opts = {}) {\r\n-    const confirmText = opts.confirmText || 'Excluir';\r\n-    const cancelText  = opts.cancelText  || 'Cancelar';\r\n-\r\n-    if (typeof window.showModal === 'function') {\r\n-      return new Promise((resolve) => {\r\n-        // 1) Esconde temporariamente o modal de edição (sem desmontar)\r\n-        const prevVis = modal ? modal.style.visibility : '';\r\n-        const prevPe  = modal ? modal.style.pointerEvents : '';\r\n-        if (modal) {\r\n-          modal.style.visibility = 'hidden';\r\n-          modal.style.pointerEvents = 'none';\r\n-        }\r\n-\r\n-        // 2) Abre o modal padrão do projeto\r\n-        window.showModal({\r\n-          title: title || 'Confirmação',\r\n-          message: message || 'Deseja prosseguir?',\r\n-          confirmText,\r\n-          cancelText,\r\n-          onConfirm: () => { restore(); resolve(true); },\r\n-          onCancel : () => { restore(); resolve(false); }\r\n-        });\r\n-\r\n-        // 3) Após montar, garante overlay por cima de tudo\r\n-        //    (pega o último elemento \"fixed\" full-screen e sobe o z-index)\r\n-        const bump = () => {\r\n-          try {\r\n-            const all = Array.from(document.querySelectorAll('body *'));\r\n-            const overlays = all.filter(el => {\r\n-              const cs = getComputedStyle(el);\r\n-              if (cs.position !== 'fixed') return false;\r\n-              const r = el.getBoundingClientRect();\r\n-              return r.width >= window.innerWidth * 0.95 && r.height >= window.innerHeight * 0.95;\r\n-            });\r\n-            const overlay = overlays.at(-1);\r\n-            if (overlay) {\r\n-              overlay.style.zIndex = '9999';\r\n-              overlay.style.pointerEvents = 'auto';\r\n-            }\r\n-          } catch (_) { /* noop */ }\r\n-        };\r\n-        requestAnimationFrame(bump);\r\n-        setTimeout(bump, 0);\r\n-\r\n-        // 4) Restaura o modal de edição quando fechar a confirmação\r\n-        function restore() {\r\n-          if (modal) {\r\n-            modal.style.visibility = prevVis || '';\r\n-            modal.style.pointerEvents = prevPe || '';\r\n-          }\r\n-        }\r\n-      });\r\n-    }\r\n-\r\n-    // Fallback (apenas se o componente não existir)\r\n-    const ok = window.confirm(message || title || 'Confirmar?');\r\n-    return Promise.resolve(!!ok);\r\n-  }\r\n-\r\n-  async function handleDelete() {\r\n-      const id = state.editing && state.editing._id ? String(state.editing._id) : null;\r\n-      if (!id) return;\r\n-\r\n-      const ok = await confirmAsync('Excluir atendimento', 'Tem ce...a excluir este atendimento? Esta ação não pode ser desfeita.', {\r\n-        confirmText: 'Excluir',\r\n-        cancelText: 'Cancelar'\r\n-      });\r\n-      if (!ok) return;\r\n-\r\n-      const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(() => ({}));\r\n-        alert(err.message || 'Erro ao excluir agendamento');\r\n-        return;\r\n-      }\r\n-      await loadAgendamentos();\r\n-      renderKpis();\r\n-      renderFilters();\r\n-      closeModal();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-  }\r\n-\r\n-  // Busca serviços\r\n-  async function searchServicos(term) {\r\n-    if (!term || term.length < 2) {\r\n-      if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-      return;\r\n-    }\r\n-    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    if (!servSug) return;\r\n-    servSug.innerHTML = list.map(s => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor}\">\r\n-        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${money(s.valor)}</div>\r\n-      </li>`).join('');\r\n-    servSug.classList.remove('hidden');\r\n-    servSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', () => {\r\n-        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n-        if (servInput) servInput.value = state.selectedServico.nome;\r\n-        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n-        servSug.classList.add('hidden');\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  // --- Lista de serviços no modal ---\r\n-  function renderServicosLista() {\r\n-    if (!servListUL || !servTotalEl) return;\r\n-    const items = state.tempServicos || [];\r\n-    servListUL.innerHTML = items.map((it, idx) => `\r\n-      <li class=\"flex items-center justify-between px-3 py-2 text-sm\">\r\n-        <div class=\"flex items-center gap-3\">\r\n-          <span class=\"w-20 text-right tabular-nums\">${money(Number(it.valor || 0))}</span>\r\n-          <span class=\"text-gray-700\">${it.nome || ''}</span>\r\n-        </div>\r\n-        <button data-idx=\"${idx}\" class=\"remove-serv px-2 py-1 rounded-md border text-gray-600 hover:bg-gray-50\">Remover</button>\r\n-      </li>\r\n-    `).join('');\r\n-    const total = items.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-    servTotalEl.textContent = money(total);\r\n-\r\n-    servListUL.querySelectorAll('.remove-serv').forEach(btn => {\r\n-      btn.addEventListener('click', () => {\r\n-        const i = parseInt(btn.getAttribute('data-idx'), 10);\r\n-        if (!isNaN(i)) {\r\n-          state.tempServicos.splice(i, 1);\r\n-          renderServicosLista();\r\n-        }\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  // Salvar (adicionar/editar)\r\n-  async function saveAgendamento() {\r\n-      try {\r\n-        const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n-        const storeIdSelected = (addStoreSelect?.value) || state.selectedStoreId || storeSelect?.value;\r\n-        const hora = horaInput?.value;\r\n-        const profissionalId = profSelect?.value;\r\n-        const status = (statusSelect?.value) || 'agendado';\r\n-\r\n-        if (!hora || !profissionalId) { alert('Preencha hora e profissional.'); return; }\r\n-        if (!storeIdSelected) { alert('Selecione a empresa.'); return; }\r\n-\r\n-        const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n-\r\n-        // Edição\r\n-        if (state.editing && state.editing._id) {\r\n-          const id = state.editing._id;\r\n-\r\n-          // usa os itens montados na UI (edição agora permite adicionar/remover)\r\n-          const items = Array.isArray(state.tempServicos) ? state.tempServicos : [];\r\n-          if (!items.length) { alert('Adicione pelo menos 1 serviço ao agendamento.'); return; }\r\n-\r\n-          const body = {\r\n-            storeId: storeIdSelected,\r\n-            profissionalId,\r\n-            scheduledAt,\r\n-            status,\r\n-            servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n-            ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n-            ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n-            ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n-          };\r\n-\r\n-          const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\r\n-          if (!resp.ok) {\r\n-            const err = await resp.json().catch(() => ({}));\r\n-            alert(err.message || 'Erro ao atualizar agendamento.');\r\n-            return;\r\n-          }\r\n-\r\n-          await loadAgendamentos();\r\n-          renderKpis();\r\n-          renderFilters();\r\n-          closeModal();\r\n-          renderGrid();\r\n-          enhanceAgendaUI();\r\n-          return;\r\n-        }\r\n-\r\n-        // Adição\r\n-        const clienteId = state.selectedCliente?._id;\r\n-        const petId = petSelect?.value;\r\n-        const items = state.tempServicos || [];\r\n-\r\n-        if (!(clienteId && petId && items.length)) { alert('Preencha cliente, pet e adicione pelo menos 1 serviço.'); return; }\r\n-\r\n-        const body = {\r\n-          storeId: storeIdSelected,\r\n-          clienteId, petId,\r\n-          servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n-          profissionalId, scheduledAt,\r\n-          status,\r\n-          observacoes: (obsInput?.value || '').trim(),\r\n-          pago: false\r\n-        };\r\n-        const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n-        if (!resp.ok) {\r\n-          const err = await resp.json().catch(() => ({}));\r\n-          throw new Error(err.message || 'Erro ao salvar');\r\n-        }\r\n-\r\n-        await loadAgendamentos();\r\n-        renderKpis();\r\n-        renderFilters();\r\n-        closeModal();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      } catch (e) {\r\n-        console.error(e);\r\n-        alert(e.message || 'Erro ao salvar');\r\n-      }\r\n-    }\r\n-\r\n-  function enhanceAgendaUI() {\r\n-    try {\r\n-      applyZebraAndSublines();\r\n-      decorateCards();\r\n-      enableDragDrop();\r\n-      drawNowLine();\r\n-\r\n-      // Auto-scroll para o horário atual (somente na data de hoje e 1x por renderização)\r\n-      const date = normalizeDate(dateInput?.value || todayStr());\r\n-      if (!state.__didInitialScroll && date === todayStr()) {\r\n-        scrollToNow();\r\n-        state.__didInitialScroll = true;\r\n-      }\r\n-    } catch (e) {\r\n-      console.info('[enhanceAgendaUI] skip', e);\r\n-    }\r\n-  }\r\n-\r\n-  function scrollToNow() {\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body || !state.profissionais?.length) return;\r\n-\r\n-      // encontra a célula da primeira coluna de profissional no horário atual\r\n-      const now = new Date();\r\n-      const hh = String(now.getHours()).padStart(2, '0') + ':00';\r\n-      const firstProfId = String(state.profissionais[0]._id);\r\n-      const target = body.querySelector(`div[data-profissional-id=\"${firstProfId}\"][data-hh=\"${hh}\"]`);\r\n-\r\n-      if (target) {\r\n-        const top = target.getBoundingClientRect().top + window.pageYOffset;\r\n-        const offset = 80; // sobe um pouco para contexto\r\n-        window.scrollTo({ top: Math.max(0, top - offset), behavior: 'smooth' });\r\n-      }\r\n-  }\r\n-\r\n-  // compacta a lista para um hash leve (ordem estável)\r\n-  function snapshotHash(items) {\r\n-    try {\r\n-      const compact = (items || []).map(x => [\r\n-        String(x._id || ''),\r\n-        String(x.status || ''),\r\n-        String(x.h || x.scheduledAt || ''),\r\n-        Number(x.valor || 0),\r\n-        !!x.pago\r\n-      ]).sort((a, b) => a[0].localeCompare(b[0]));\r\n-      return JSON.stringify(compact);\r\n-    } catch (_) {\r\n-      return String(Date.now());\r\n-    }\r\n-  }\r\n-\r\n-  // reconsulta e só re-renderiza se houver mudança relevante\r\n-  async function refreshAgendaIfChanged() {\r\n-    const prev = state.lastSnapshotHash || '';\r\n-    await loadAgendamentos();\r\n-    const next = snapshotHash(state.agendamentos);\r\n-    if (next !== prev) {\r\n-      state.lastSnapshotHash = next;\r\n-      renderGrid();\r\n-      // ao re-render com mesma data de hoje, não repete o scroll\r\n-      enhanceAgendaUI();\r\n-    }\r\n-  }\r\n-\r\n-  // inicia/renova o timer de auto-refresh (60s)\r\n-  function startAutoRefresh() {\r\n-    if (window.__agendaRefreshTimer) clearInterval(window.__agendaRefreshTimer);\r\n-    state.lastSnapshotHash = snapshotHash(state.agendamentos);\r\n-    window.__agendaRefreshTimer = setInterval(refreshAgendaIfChanged, 60000);\r\n-  }\r\n-\r\n-  // cria o botão \"Hoje\" ao lado do input de data (uma vez)\r\n-  function ensureTodayButton() {\r\n-    if (!dateInput) return;\r\n-    if (document.getElementById('agenda-today-btn')) return;\r\n-\r\n-    const btn = document.createElement('button');\r\n-    btn.id = 'agenda-today-btn';\r\n-    btn.type = 'button';\r\n-    btn.className = 'ml-2 inline-flex items-center gap-1 text-xs px-2 py-1 rounded border border-slate-300 text-slate-700 hover:bg-slate-50';\r\n-    btn.textContent = 'Hoje';\r\n-\r\n-    dateInput.insertAdjacentElement('afterend', btn);\r\n-    btn.addEventListener('click', async () => {\r\n-      dateInput.value = todayStr();\r\n-      state.__didInitialScroll = false;   // permite novo auto-scroll\r\n-      await loadAgendamentos();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    });\r\n-  }\r\n-\r\n-  // Zebra de linhas + sublinha 30min com CSS (via classe)\r\n-  function applyZebraAndSublines() {\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body) return;\r\n-\r\n-      body.style.position = 'relative'; // para linha do \"agora\"\r\n-      const totalCols = 1 + (state.profissionais?.length || 0); // 1 (hora) + N profissionais\r\n-      if (totalCols <= 0) return;\r\n-\r\n-      const cells = Array.from(body.children);\r\n-      const totalRows = Math.floor(cells.length / totalCols);\r\n-\r\n-      for (let row = 0; row < totalRows; row++) {\r\n-        const start = row * totalCols;\r\n-        const zebraClass = (row % 2 === 0) ? 'bg-white' : 'bg-slate-50';\r\n-\r\n-        // primeira coluna (hora)\r\n-        const tCell = cells[start];\r\n-        if (tCell) {\r\n-          tCell.classList.remove('bg-white','bg-slate-50');\r\n-          tCell.classList.add(zebraClass);\r\n-        }\r\n-\r\n-        // colunas dos profissionais\r\n-        for (let col = 1; col < totalCols; col++) {\r\n-          const idx = start + col;\r\n-          const slot = cells[idx];\r\n-          if (!slot) continue;\r\n-          slot.classList.remove('bg-white','bg-slate-50');\r\n-          slot.classList.add(zebraClass, 'agenda-slot'); // garante classe\r\n-        }\r\n-      }\r\n-  }\r\n-\r\n-  // Insere ícones de ação nos cartões (editar / mudar status)\r\n-  function decorateCards() {\r\n-    const cards = agendaList?.querySelectorAll('div[data-appointment-id]');\r\n-    if (!cards || !cards.length) return;\r\n-\r\n-    cards.forEach((card) => {\r\n-      if (card.querySelector('.agenda-card__actions')) return; // já decorado\r\n-      card.classList.add('agenda-card'); // ativa hover via CSS\r\n-      card.style.position = 'relative';\r\n-\r\n-      const id = card.getAttribute('data-appointment-id') || '';\r\n-      const actions = document.createElement('div');\r\n-      actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex items-center gap-1';\r\n-\r\n-      actions.innerHTML = `\r\n-        <button class=\"agenda-action edit\" data-id=\"${id}\" title=\"Editar\">\r\n-          <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"text-gray-600 hover:text-gray-900\"><path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 000-1.42l-2.34-2.34a1.003 1.003 0 00-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.82z\"/></svg>\r\n-        </button>\r\n-        <button class=\"agenda-action status\" data-id=\"${id}\" title=\"Mudar status\">\r\n-          <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\"><path d=\"M12 7v10M7 12h10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/></svg>\r\n-        </button>\r\n-      `;\r\n-      card.appendChild(actions);\r\n-    });\r\n-  }\r\n-\r\n-  /* === Drag & Drop na agenda: mover card entre horários/profissionais === */\r\n-  function injectDndStylesOnce() {\r\n-    if (document.getElementById('agenda-dnd-style')) return;\r\n-    const st = document.createElement('style');\r\n-    st.id = 'agenda-dnd-style';\r\n-    st.textContent = `\r\n-      .agenda-card.is-dragging { opacity: .6; }\r\n-      .agenda-drop-target { outline: 2px dashed #0ea5e9; outline-offset: -2px; background: rgba(14,165,233,0.06); }\r\n-    `;\r\n-    document.head.appendChild(st);\r\n-  }\r\n-\r\n-  // PUT rápido para mover agendamento (profissional/horário)\r\n-  async function moveAppointmentQuick(id, payload) {\r\n-      try {\r\n-        const body = {\r\n-          ...payload,\r\n-          storeId: state.selectedStoreId || storeSelect?.value\r\n-        };\r\n-        const resp = await api(`/func/agendamentos/${id}`, {\r\n-          method: 'PUT',\r\n-          headers: { 'Content-Type': 'application/json' },\r\n-          body: JSON.stringify(body)\r\n-        });\r\n-        if (!resp.ok) {\r\n-          const err = await resp.json().catch(() => ({}));\r\n-          throw new Error(err.message || 'Erro ao mover agendamento');\r\n-        }\r\n-        await loadAgendamentos();\r\n-        renderKpis();\r\n-        renderFilters();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      } catch (e) {\r\n-        console.error('moveAppointmentQuick', e);\r\n-        alert(e.message || 'Não foi possível mover o agendamento.');\r\n-      }\r\n-    }\r\n-\r\n-  function enableDragDrop() {\r\n-      injectDndStylesOnce();\r\n-\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body) return;\r\n-\r\n-      // Garante que todos os cards estejam \"arrastáveis\"\r\n-      body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n-        if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n-      });\r\n-\r\n-      // Evita múltiplos binds ao re-renderizar a agenda\r\n-      if (body.__dndDelegated) return;\r\n-      body.__dndDelegated = true;\r\n-\r\n-      // DRAGSTART (captura): funciona mesmo se o usuário começar o arrasto em um filho do card\r\n-      body.addEventListener('dragstart', (ev) => {\r\n-        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-        if (!card || !ev.dataTransfer) return;\r\n-\r\n-        const id = card.getAttribute('data-appointment-id') || '';\r\n-        if (!id) return;\r\n-\r\n-        try { ev.dataTransfer.setData('text/plain', id); } catch (_) {}\r\n-        try { ev.dataTransfer.setDragImage(card, 10, 10); } catch (_) {}\r\n-        ev.dataTransfer.effectAllowed = 'move';\r\n-        card.classList.add('is-dragging');\r\n-      }, true);\r\n-\r\n-      // DRAGEND: limpa estados visuais\r\n-      body.addEventListener('dragend', (ev) => {\r\n-        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-        if (card) card.classList.remove('is-dragging');\r\n-        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n-      }, true);\r\n-\r\n-      // DRAGOVER: habilita drop quando o ponteiro está sobre QUALQUER filho dentro da célula\r\n-      body.addEventListener('dragover', (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        ev.preventDefault();                 // obrigatório para permitir drop\r\n-        if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n-        slot.classList.add('agenda-drop-target');\r\n-      });\r\n-\r\n-      // DRAGLEAVE: remove realce\r\n-      body.addEventListener('dragleave', (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        slot.classList.remove('agenda-drop-target');\r\n-      });\r\n-\r\n-      // DROP: pega a célula alvo e move (profissional + horário)\r\n-      body.addEventListener('drop', async (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        ev.preventDefault();\r\n-        slot.classList.remove('agenda-drop-target');\r\n-\r\n-        const id = ev.dataTransfer?.getData('text/plain');\r\n-        if (!id) return;\r\n-\r\n-        const newProf = slot.dataset.profissionalId;\r\n-        const hh      = slot.dataset.hh; // ex.: \"14:00\"\r\n-        if (!newProf || !hh) return;\r\n-\r\n-        const dateRaw     = normalizeDate(dateInput?.value || todayStr());\r\n-        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n-\r\n-        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n-      });\r\n-  }\r\n-\r\n-  async function loadProfissionais() {\r\n-    if (!state.selectedStoreId) {\r\n-      state.profissionais = [];\r\n-      if (profSelect) profSelect.innerHTML = '';\r\n-      return;\r\n-    }\r\n-\r\n-    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    state.profissionais = Array.isArray(list) ? list : [];\r\n-\r\n-    if (profSelect) {\r\n-      profSelect.innerHTML = state.profissionais\r\n-        .map(p => `<option value=\"${p._id}\">${p.nome}</option>`)\r\n-        .join('');\r\n-    }\r\n-  }\r\n-\r\n-  // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n-  function drawNowLine() {\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body) return;\r\n-\r\n-      body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n-\r\n-      const now = new Date();\r\n-      const minutes = now.getHours() * 60 + now.getMinutes();\r\n-      const percent = minutes / (24 * 60);\r\n-      const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n-\r\n-      const line = document.createElement('div');\r\n-      line.className = 'agenda-nowline';\r\n-      line.style.top = `${y}px`;\r\n-      body.appendChild(line);\r\n-\r\n-      if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n-      window.__agendaNowTimer = setInterval(() => {\r\n-        const now2 = new Date();\r\n-        const minutes2 = now2.getHours() * 60 + now2.getMinutes();\r\n-        const percent2 = minutes2 / (24 * 60);\r\n-        const y2 = Math.max(0, Math.min(1, percent2)) * body.scrollHeight;\r\n-        const ln = body.querySelector('.agenda-nowline');\r\n-        if (ln) ln.style.top = `${y2}px`;\r\n-      }, 60_000);\r\n-  }\r\n-\r\n-  // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n-  async function updateStatusQuick(id, status) {\r\n-      try {\r\n-        const resp = await api(`/func/agendamentos/${id}`, {\r\n-          method: 'PUT',\r\n-          headers: { 'Content-Type': 'application/json' },\r\n-          body: JSON.stringify({ status })\r\n-        });\r\n-        if (!resp.ok) {\r\n-          const err = await resp.json().catch(() => ({}));\r\n-          throw new Error(err.message || 'Erro ao mudar status');\r\n-        }\r\n-        await loadAgendamentos();\r\n-        renderKpis();\r\n-        renderFilters();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      } catch (e) {\r\n-        console.error('updateStatusQuick', e);\r\n-        alert(e.message || 'Erro ao mudar status');\r\n-      }\r\n-    }\r\n-\r\n-    // === Impressão em cupom (80mm) ===\r\n-  function buildCupomHTML(items, meta = {}) {\r\n-    const storeName = (meta.storeName || '').trim();\r\n-    const dateStr   = (meta.dateStr || '').trim();\r\n-\r\n-    const rows = (items || []).map(a => {\r\n-      const pet   = (a.pet || '').toString().trim();\r\n-      const serv  = (a.servico || '').toString().trim();\r\n-      const valor = money(Number(a.valor || 0));\r\n-      // \"Pet Serviço - Valor\" em linha única\r\n-      return `<div class=\"row\"><span class=\"txt\">${pet} ${serv}</span><span class=\"val\">${valor}</span></div>`;\r\n-    }).join('');\r\n-\r\n-    return `\r\n-  <!doctype html>\r\n-  <html>\r\n-  <head>\r\n-    <meta charset=\"utf-8\">\r\n-    <title>Impressão</title>\r\n-    <style>\r\n-      @page { size: 80mm auto; margin: 3mm; }\r\n-      * { box-sizing: border-box; }\r\n-      html, body { padding: 0; margin: 0; }\r\n-      /* Aumenta um pouco o tamanho e usa preto sólido para ganhar contraste na térmica */\r\n-      body {\r\n-        width: 74mm;\r\n-        font: 13px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\";\r\n-        color: #000;\r\n-        -webkit-font-smoothing: none; /* deixa o traço mais “cheio” na impressão */\r\n-        font-weight: 600; /* base mais pesada */\r\n-      }\r\n-      .wrap { padding: 2mm 0; }\r\n-      .h1 { text-align:center; font-weight:700; font-size: 15px; margin-bottom: 1mm; }\r\n-      .meta { text-align:center; font-size: 12px; color:#000; font-weight:700; margin-bottom: 2mm; }\r\n-      .hr { border-top: 1px dashed #000; margin: 2mm 0; }\r\n-      .row { display:flex; align-items:flex-start; justify-content:space-between; gap: 4mm; padding: 1mm 0; }\r\n-      /* Linhas do cupom bem escuras */\r\n-      .row .txt { flex: 1 1 auto; word-break: break-word; font-weight:700; }\r\n-      .row .val { flex: 0 0 auto; white-space: nowrap; font-weight:700; }\r\n-      .foot { text-align:center; margin-top: 2mm; font-size: 12px; color:#000; font-weight:700; }\r\n-      @media print { .no-print { display: none !important; } }\r\n-    </style>\r\n-  </head>\r\n-  <body>\r\n-    <div class=\"wrap\">\r\n-      <div class=\"h1\">Agenda</div>\r\n-      <div class=\"meta\">${storeName ? storeName + ' • ' : ''}${dateStr}</div>\r\n-      <div class=\"hr\"></div>\r\n-      ${rows || '<div class=\"row\"><span class=\"txt\">Sem itens</span><span class=\"val\"></span></div>'}\r\n-      <div class=\"hr\"></div>\r\n-      <div class=\"foot\">Obrigado!</div>\r\n-    </div>\r\n-    <script>\r\n-      window.onload = function(){ setTimeout(function(){ window.print(); }, 50); };\r\n-      window.onafterprint = function(){ setTimeout(function(){ window.close(); }, 50); };\r\n-    </script>\r\n-  </body>\r\n-  </html>`;\r\n-  }\r\n-\r\n-  function handlePrintCupom() {\r\n-    try {\r\n-      const items = getFilteredAgendamentos();\r\n-\r\n-      // Ordena por horário (se houver)\r\n-      items.sort((a, b) => {\r\n-        const da = new Date(a.h || a.scheduledAt || 0).getTime();\r\n-        const db = new Date(b.h || b.scheduledAt || 0).getTime();\r\n-        return da - db;\r\n-      });\r\n-\r\n-      const dateStr =\r\n-        (document.getElementById('agenda-date-label-visible')?.textContent || '').trim() ||\r\n-        new Date((normalizeDate(dateInput?.value || todayStr())) + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-\r\n-      const storeName =\r\n-        (document.getElementById('agenda-store-label-visible')?.textContent || '').trim();\r\n-\r\n-      const html = buildCupomHTML(items, { storeName, dateStr });\r\n-\r\n-      const w = window.open('', 'print_cupom', 'width=420,height=600');\r\n-      if (!w) { alert('O navegador bloqueou a janela de impressão. Habilite pop-ups para continuar.'); return; }\r\n-      w.document.open('text/html');\r\n-      w.document.write(html);\r\n-      w.document.close();\r\n-      w.focus();\r\n-    } catch (e) {\r\n-      console.error('handlePrintCupom', e);\r\n-      alert('Não foi possível preparar a impressão.');\r\n-    }\r\n-  }\r\n-\r\n-  // Events\r\n-  addBtn?.addEventListener('click', openAddModal);\r\n-  modalClose?.addEventListener('click', closeModal);\r\n-  modalCancel?.addEventListener('click', closeModal);\r\n-  modalSave?.addEventListener('click', saveAgendamento);\r\n-\r\n-  addStoreSelect?.addEventListener('change', () => {\r\n-    const sid = addStoreSelect.value;\r\n-    const current = profSelect?.value || '';\r\n-    populateModalProfissionais(sid, current);\r\n-  });\r\n-\r\n-  // Botão \"Imprimir\" — cupom 80mm com \"Pet Serviço - Valor\"\r\n-    (function () {\r\n-      const btn0 = document.getElementById('print-agenda-btn');\r\n-      // (se algum listener antigo ainda existir em outro build, garantimos o nosso fluxo)\r\n-      if (btn0) {\r\n-        // remove listeners antigos (se houver) clonando o nó\r\n-        const clone = btn0.cloneNode(true);\r\n-        btn0.parentNode.replaceChild(clone, btn0);\r\n-        clone.addEventListener('click', (ev) => {\r\n-          ev.preventDefault();\r\n-          ev.stopImmediatePropagation?.();\r\n-          handlePrintCupom();\r\n-        });\r\n-      }\r\n-    })();\r\n-\r\n-  cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n-  servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n-\r\n-  addServAddBtn?.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    const s = state.selectedServico;\r\n-    const v = Number(valorInput?.value || 0);\r\n-    if (!s || !s._id) { alert('Escolha um serviço na busca.'); return; }\r\n-    if (!(v >= 0)) { alert('Valor inválido.'); return; }\r\n-    state.tempServicos.push({ _id: s._id, nome: s.nome, valor: v });\r\n-    // limpa seleção\r\n-    state.selectedServico = null;\r\n-    if (servInput)  servInput.value = '';\r\n-    if (valorInput) valorInput.value = '';\r\n-    renderServicosLista();\r\n-  });\r\n-\r\n-  modalDelete?.addEventListener('click', handleDelete);\r\n-\r\n-  // Ações rápidas nos cartões (delegação no container da agenda)\r\n-  agendaList?.addEventListener('click', (ev) => {\r\n-    // toggle do menu mobile\r\n-    const more = ev.target.closest('.agenda-card__more');\r\n-    if (more) {\r\n-      const holder = more.parentElement?.querySelector('.agenda-card__actions');\r\n-      if (holder) holder.classList.toggle('hidden');\r\n-      return;\r\n-    }\r\n-\r\n-    const btn = ev.target.closest('.agenda-action');\r\n-    if (!btn) return;\r\n-    const id = btn.getAttribute('data-id');\r\n-    if (!id) return;\r\n-\r\n-    if (btn.classList.contains('edit')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      if (item) openEditModal(item);\r\n-    } else if (btn.classList.contains('status')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-      const cur = (item && item.status) || 'agendado';\r\n-      const next = chain[(chain.indexOf(cur) + 1) % chain.length];\r\n-      updateStatusQuick(id, next);\r\n-    } else if (btn.classList.contains('cobrar')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      if (item) openEditModal(item); // reaproveite seu modal/fluxo de cobrança\r\n-    }\r\n-  });\r\n-\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    updateStoreLabel();\r\n-    state.__didInitialScroll = false;     // nova loja -> recalcula scroll\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    state.__didInitialScroll = false;     // nova data -> permite auto-scroll\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  // Boot\r\n-  function setupShortcuts() {\r\n-    document.addEventListener('keydown', (e) => {\r\n-      if (e.target && ['INPUT','SELECT','TEXTAREA'].includes(e.target.tagName)) return; // não atrapalhar digitação\r\n-      if (e.key === 't' || e.key === 'T') {\r\n-        if (dateInput) {\r\n-          dateInput.value = todayStr();\r\n-          state.__didInitialScroll = false;\r\n-          loadAgendamentos().then(() => {\r\n-            renderKpis(); renderFilters(); renderGrid(); enhanceAgendaUI();\r\n-          });\r\n-        }\r\n-      }\r\n-      if (e.key === 'n' || e.key === 'N') {\r\n-        e.preventDefault();\r\n-        openAddModal();\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  (async function init() {\r\n-    if (!dateInput?.value) dateInput.value = todayStr();\r\n-    loadFiltersFromStorage();\r\n-    await loadStores();\r\n-    if (!state.selectedStoreId && storeSelect?.value) {\r\n-      state.selectedStoreId = storeSelect.value;\r\n-    }\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-\r\n-    ensureToolbar();\r\n-    ensureTodayButton();\r\n-    setupShortcuts();\r\n-\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  })();\r\n-\r\n-  // Atualizações após troca de loja/data/status etc.\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    updateStoreLabel();\r\n-    state.__didInitialScroll = false;\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    state.__didInitialScroll = false;\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-})();\r\n"
                },
                {
                    "date": 1757518797307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1484,15 +1484,29 @@\n       console.error('handlePrintCupom', e);\r\n       alert('Não foi possível preparar a impressão.');\r\n     }\r\n   }\r\n-\r\n+  \r\n   // Events\r\n-  addBtn?.addEventListener('click', openAddModal);\r\n+  addBtn?.addEventListener('click', (ev) => {\r\n+    ev.preventDefault();\r\n+    openAddModal();\r\n+  });\r\n   modalClose?.addEventListener('click', closeModal);\r\n   modalCancel?.addEventListener('click', closeModal);\r\n   modalSave?.addEventListener('click', saveAgendamento);\r\n \r\n+  // Fallback por delegação (caso o nó seja recriado ou listener direto não prenda)\r\n+  document.addEventListener('click', (ev) => {\r\n+    const trigger = ev.target.closest('#add-service-btn, [data-action=\"open-add-modal\"]');\r\n+    if (!trigger) return;\r\n+    ev.preventDefault();\r\n+    openAddModal();\r\n+  });\r\n+\r\n+  // Expor função para chamadas inline/externas (diagnóstico e resiliência)\r\n+  window.__openAddServico = openAddModal;\r\n+\r\n   addStoreSelect?.addEventListener('change', () => {\r\n     const sid = addStoreSelect.value;\r\n     const current = profSelect?.value || '';\r\n     populateModalProfissionais(sid, current);\r\n"
                },
                {
                    "date": 1757518841716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1484,29 +1484,15 @@\n       console.error('handlePrintCupom', e);\r\n       alert('Não foi possível preparar a impressão.');\r\n     }\r\n   }\r\n-  \r\n+\r\n   // Events\r\n-  addBtn?.addEventListener('click', (ev) => {\r\n-    ev.preventDefault();\r\n-    openAddModal();\r\n-  });\r\n+  addBtn?.addEventListener('click', openAddModal);\r\n   modalClose?.addEventListener('click', closeModal);\r\n   modalCancel?.addEventListener('click', closeModal);\r\n   modalSave?.addEventListener('click', saveAgendamento);\r\n \r\n-  // Fallback por delegação (caso o nó seja recriado ou listener direto não prenda)\r\n-  document.addEventListener('click', (ev) => {\r\n-    const trigger = ev.target.closest('#add-service-btn, [data-action=\"open-add-modal\"]');\r\n-    if (!trigger) return;\r\n-    ev.preventDefault();\r\n-    openAddModal();\r\n-  });\r\n-\r\n-  // Expor função para chamadas inline/externas (diagnóstico e resiliência)\r\n-  window.__openAddServico = openAddModal;\r\n-\r\n   addStoreSelect?.addEventListener('change', () => {\r\n     const sid = addStoreSelect.value;\r\n     const current = profSelect?.value || '';\r\n     populateModalProfissionais(sid, current);\r\n"
                },
                {
                    "date": 1757519664334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -625,9 +625,9 @@\n     const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n     if (horaInput) horaInput.value = hh;\r\n     \r\n     // Observações\r\n-    if (obsInput) { obsInput.value = a.observacoes || ''; }\r\n+    if (obsInput) { obsInput.value = ''; }\r\n \r\n     // Status default\r\n     if (statusSelect) statusSelect.value = 'agendado';\r\n \r\n"
                },
                {
                    "date": 1757521511090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -771,10 +771,14 @@\n       const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n       statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n     }\r\n \r\n+    // Observações (preenche com a descrição do card)\r\n+    if (obsInput) { obsInput.value = (a.observacoes || '').trim(); }\r\n+\r\n     // Cliente e Pet (preenche e bloqueia busca no modo edição)\r\n     if (cliInput) { cliInput.value = (a.clienteNome || ''); cliInput.disabled = true; }\r\n+   \r\n     if (petSelect) {\r\n       petSelect.innerHTML = '';\r\n       try {\r\n         const clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n"
                },
                {
                    "date": 1757523443062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1199,18 +1199,44 @@\n       card.classList.add('agenda-card'); // ativa hover via CSS\r\n       card.style.position = 'relative';\r\n \r\n       const id = card.getAttribute('data-appointment-id') || '';\r\n+      const item = (state.agendamentos || []).find(x => String(x._id) === String(id)) || {};\r\n+      const isPaid = !!item.pago;\r\n+\r\n       const actions = document.createElement('div');\r\n-      actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex items-center gap-1';\r\n+      // flex em coluna para ter a “segunda linha” abaixo do '+'\r\n+      actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex flex-col items-end gap-1';\r\n \r\n       actions.innerHTML = `\r\n-        <button class=\"agenda-action edit\" data-id=\"${id}\" title=\"Editar\">\r\n-          <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"text-gray-600 hover:text-gray-900\"><path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 000-1.42l-2.34-2.34a1.003 1.003 0 00-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.82z\"/></svg>\r\n+        <!-- primeira linha: editar + status (mantém seu layout atual lado a lado) -->\r\n+        <div class=\"flex items-center gap-1\">\r\n+          <button class=\"agenda-action edit\" data-id=\"${id}\" title=\"Editar\">\r\n+            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\">\r\n+              <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 0 0 0-1.41L18.37 3.29a1.003 1.003 0 0 0-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.83z\"/>\r\n+            </svg>\r\n+          </button>\r\n+          <button class=\"agenda-action status\" data-id=\"${id}\" title=\"Mudar status\">\r\n+            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n+              <circle cx=\"12\" cy=\"12\" r=\"9\" stroke-width=\"2\"></circle>\r\n+              <path d=\"M12 7v5l3 3\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\r\n+            </svg>\r\n+          </button>\r\n+        </div>\r\n+\r\n+        <!-- segunda linha: ícone de pagamento (abaixo do '+') -->\r\n+        <button class=\"agenda-action cobrar ${isPaid ? 'text-green-600' : 'text-slate-500'}\" data-id=\"${id}\" title=\"${isPaid ? 'Pago' : 'Registrar pagamento'}\">\r\n+          ${\r\n+            isPaid\r\n+              // Cifão normal (Real)\r\n+              ? `<i class=\"fa-solid fa-brazilian-real-sign text-[16px] leading-none\"></i>`\r\n+              // Cifrão com risco (stack do FA para “pendente”)\r\n+              : `<span class=\"fa-stack text-[12px] leading-none\" style=\"width: 1.25em;\">\r\n+                  <i class=\"fa-solid fa-brazilian-real-sign fa-stack-1x\"></i>\r\n+                  <i class=\"fa-solid fa-slash fa-stack-1x\"></i>\r\n+                </span>`\r\n+          }\r\n         </button>\r\n-        <button class=\"agenda-action status\" data-id=\"${id}\" title=\"Mudar status\">\r\n-          <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\"><path d=\"M12 7v10M7 12h10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/></svg>\r\n-        </button>\r\n       `;\r\n       card.appendChild(actions);\r\n     });\r\n   }\r\n"
                },
                {
                    "date": 1757523529073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1230,9 +1230,9 @@\n               // Cifão normal (Real)\r\n               ? `<i class=\"fa-solid fa-brazilian-real-sign text-[16px] leading-none\"></i>`\r\n               // Cifrão com risco (stack do FA para “pendente”)\r\n               : `<span class=\"fa-stack text-[12px] leading-none\" style=\"width: 1.25em;\">\r\n-                  <i class=\"fa-solid fa-brazilian-real-sign fa-stack-1x\"></i>\r\n+                  <i class=\"fa-solid fa-sign fa-stack-1x\"></i>\r\n                   <i class=\"fa-solid fa-slash fa-stack-1x\"></i>\r\n                 </span>`\r\n           }\r\n         </button>\r\n"
                },
                {
                    "date": 1757523535860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1230,9 +1230,9 @@\n               // Cifão normal (Real)\r\n               ? `<i class=\"fa-solid fa-brazilian-real-sign text-[16px] leading-none\"></i>`\r\n               // Cifrão com risco (stack do FA para “pendente”)\r\n               : `<span class=\"fa-stack text-[12px] leading-none\" style=\"width: 1.25em;\">\r\n-                  <i class=\"fa-solid fa-sign fa-stack-1x\"></i>\r\n+                  <i class=\"fa-solid fa-brazilian-real-sign fa-stack-1x\"></i>\r\n                   <i class=\"fa-solid fa-slash fa-stack-1x\"></i>\r\n                 </span>`\r\n           }\r\n         </button>\r\n"
                },
                {
                    "date": 1757523584821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1230,9 +1230,9 @@\n               // Cifão normal (Real)\r\n               ? `<i class=\"fa-solid fa-brazilian-real-sign text-[16px] leading-none\"></i>`\r\n               // Cifrão com risco (stack do FA para “pendente”)\r\n               : `<span class=\"fa-stack text-[12px] leading-none\" style=\"width: 1.25em;\">\r\n-                  <i class=\"fa-solid fa-brazilian-real-sign fa-stack-1x\"></i>\r\n+                  <i class=\"fa-solid fa-dollar-sign fa-stack-1x\"></i>\r\n                   <i class=\"fa-solid fa-slash fa-stack-1x\"></i>\r\n                 </span>`\r\n           }\r\n         </button>\r\n"
                },
                {
                    "date": 1757523601233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1227,9 +1227,9 @@\n         <button class=\"agenda-action cobrar ${isPaid ? 'text-green-600' : 'text-slate-500'}\" data-id=\"${id}\" title=\"${isPaid ? 'Pago' : 'Registrar pagamento'}\">\r\n           ${\r\n             isPaid\r\n               // Cifão normal (Real)\r\n-              ? `<i class=\"fa-solid fa-brazilian-real-sign text-[16px] leading-none\"></i>`\r\n+              ? `<i class=\"fa-solid fa-dollar-sign text-[16px] leading-none\"></i>`\r\n               // Cifrão com risco (stack do FA para “pendente”)\r\n               : `<span class=\"fa-stack text-[12px] leading-none\" style=\"width: 1.25em;\">\r\n                   <i class=\"fa-solid fa-dollar-sign fa-stack-1x\"></i>\r\n                   <i class=\"fa-solid fa-slash fa-stack-1x\"></i>\r\n"
                },
                {
                    "date": 1757594889735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n   // Elements\r\n   const agendaList = document.getElementById('agenda-list');\r\n   const dateInput = document.getElementById('agenda-date');\r\n   const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n+  const viewSelect = document.getElementById('agenda-view');\r\n   const addBtn = document.getElementById('add-service-btn');\r\n   const storeSelect = document.getElementById('agenda-store');\r\n   const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n \r\n"
                },
                {
                    "date": 1757594909346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n     tempServicos: [],\r\n     editing: null,\r\n     lastSnapshotHash: '',\r\n     __didInitialScroll: false,\r\n+    view: 'day', \r\n     filters: {                 // filtros persistentes\r\n       statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n       profIds: new Set()       // _id dos profissionais\r\n     }\r\n"
                },
                {
                    "date": 1757594996359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,8 +285,52 @@\n     if (!v) return todayStr();\r\n     if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n     return v;\r\n   }\r\n+\r\n+  // === NOVO: helpers de intervalo ===\r\n+  function startOfWeek(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    const day = (d.getDay() + 6) % 7; // 0=Seg ... 6=Dom\r\n+    d.setDate(d.getDate() - day);\r\n+    return normalizeDate(d.toISOString());\r\n+  }\r\n+  function addDays(dateStr, n) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(d.getDate() + n);\r\n+    return normalizeDate(d.toISOString());\r\n+  }\r\n+  function startOfMonth(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(1);\r\n+    return normalizeDate(d.toISOString());\r\n+  }\r\n+  function startOfNextMonth(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(1);\r\n+    d.setMonth(d.getMonth() + 1);\r\n+    return normalizeDate(d.toISOString());\r\n+  }\r\n+  // Atualiza o rótulo \"Agenda do ...\"\r\n+  function updateHeaderLabel() {\r\n+    if (!dateLabelVisible) return;\r\n+    const d = normalizeDate(dateInput?.value || todayStr());\r\n+    if (state.view === 'week') {\r\n+      const ini = startOfWeek(d);\r\n+      const fim = addDays(ini, 6);\r\n+      const li = new Date(ini + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      const lf = new Date(fim + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      dateLabelVisible.textContent = `${li} a ${lf}`;\r\n+    } else if (state.view === 'month') {\r\n+      const m0 = startOfMonth(d);\r\n+      const dt = new Date(m0 + 'T00:00:00');\r\n+      const label = dt.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });\r\n+      dateLabelVisible.textContent = label.charAt(0).toUpperCase() + label.slice(1);\r\n+    } else {\r\n+      dateLabelVisible.textContent = new Date(d + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+    }\r\n+  }\r\n+\r\n   function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n   function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n   function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n \r\n"
                },
                {
                    "date": 1757595021691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,10 +124,14 @@\n     const f = getFilteredAgendamentos();   // filtrados atuais\r\n     const kAll = computeKPIs(all);\r\n     const kF   = computeKPIs(f);\r\n \r\n+    const labelTotal =\r\n+      state.view === 'week'  ? 'Total semana' :\r\n+      state.view === 'month' ? 'Total mês'    : 'Total dia';\r\n+\r\n     wrap.innerHTML = `\r\n-      <div class=\"kpi-chip\">Total dia: <strong>${kAll.total}</strong></div>\r\n+      <div class=\"kpi-chip\">${labelTotal}: <strong>${kAll.total}</strong></div>\r\n       <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n       <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n       <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n       ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n"
                },
                {
                    "date": 1757595041324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -377,11 +377,23 @@\n   }\r\n \r\n   // Agendamentos\r\n   async function loadAgendamentos() {\r\n-    const date = normalizeDate(dateInput?.value || todayStr());\r\n-    const url = `/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`;\r\n+    const baseDate = normalizeDate(dateInput?.value || todayStr());\r\n     try {\r\n+      let url = '';\r\n+      if (state.view === 'week') {\r\n+        const ini = startOfWeek(baseDate);\r\n+        const fim = addDays(ini, 7); // exclusivo\r\n+        url = `/func/agendamentos/range?start=${ini}&end=${fim}&storeId=${state.selectedStoreId}`;\r\n+      } else if (state.view === 'month') {\r\n+        const m0  = startOfMonth(baseDate);\r\n+        const m1  = startOfNextMonth(baseDate); // exclusivo\r\n+        url = `/func/agendamentos/range?start=${m0}&end=${m1}&storeId=${state.selectedStoreId}`;\r\n+      } else {\r\n+        url = `/func/agendamentos?date=${baseDate}&storeId=${state.selectedStoreId}`;\r\n+      }\r\n+\r\n       const resp = await api(url);\r\n       if (!resp.ok) {\r\n         const txt = await resp.text();\r\n         console.error('GET', url, '->', resp.status, txt);\r\n@@ -389,9 +401,10 @@\n         return;\r\n       }\r\n       const list = await resp.json();\r\n       state.agendamentos = Array.isArray(list) ? list : [];\r\n-      console.info('[Agenda] loja=', state.selectedStoreId, 'data=', date, 'itens=', state.agendamentos.length, state.agendamentos.slice(0, 3));\r\n+      updateHeaderLabel();\r\n+      console.info('[Agenda]', 'view=', state.view, 'loja=', state.selectedStoreId, 'itens=', state.agendamentos.length);\r\n     } catch (e) {\r\n       console.error('Erro ao carregar agendamentos', e);\r\n       state.agendamentos = [];\r\n     }\r\n"
                },
                {
                    "date": 1757595115774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -583,8 +583,197 @@\n         agendaList.insertBefore(empty, header.nextSibling);\r\n       }\r\n   }\r\n \r\n+  /** ===== NOVO: visão semanal ===== */\r\n+  function renderWeekGrid() {\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    const ini  = startOfWeek(base);\r\n+    const days = Array.from({length:7}, (_,i)=> addDays(ini,i));\r\n+    updateHeaderLabel();\r\n+\r\n+    clearChildren(agendaList);\r\n+\r\n+    // Cabeçalho: horários + 7 dias\r\n+    const BUSINESS_START = 8, BUSINESS_END = 19;\r\n+    const hours = []; for (let h=0; h<24; h++) hours.push(`${pad(h)}:00`);\r\n+\r\n+    const header = document.createElement('div');\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n+    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n+    header.innerHTML = `\r\n+      <div class=\"px-2 py-2 text-xs text-slate-500\">Horário</div>\r\n+      ${days.map(d=>{\r\n+        const lab = new Date(d+'T00:00:00').toLocaleDateString('pt-BR', { weekday:'short', day:'2-digit', month:'2-digit' });\r\n+        return `<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${lab}</div>`;\r\n+      }).join('')}\r\n+    `;\r\n+    agendaList.appendChild(header);\r\n+\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n+    agendaList.appendChild(body);\r\n+\r\n+    // linhas por hora\r\n+    hours.forEach(hh => {\r\n+      const h = parseInt(hh.slice(0,2),10);\r\n+      const inBusiness = (h>=BUSINESS_START && h<=BUSINESS_END);\r\n+\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = `px-2 py-2 border-b text-[12px] ${inBusiness?'text-slate-800':'text-slate-400'}`;\r\n+      timeCell.textContent = hh;\r\n+      body.appendChild(timeCell);\r\n+\r\n+      days.forEach(d=>{\r\n+        const cell = document.createElement('div');\r\n+        cell.className = `px-2 py-2 border-b agenda-slot`;\r\n+        cell.dataset.day = d;\r\n+        cell.dataset.hh  = hh;\r\n+        body.appendChild(cell);\r\n+      });\r\n+    });\r\n+\r\n+    // posiciona cartões\r\n+    let placed = 0;\r\n+    for (const a of (state.agendamentos||[])) {\r\n+      const when = a.h || a.scheduledAt;\r\n+      if (!when) continue;\r\n+      const d  = new Date(when);\r\n+      const dayStr = normalizeDate(d.toISOString());\r\n+      if (dayStr < days[0] || dayStr > days[6]) continue;\r\n+\r\n+      const hh = `${pad(d.getHours())}:00`;\r\n+      const cell = agendaList.querySelector(`div[data-day=\"${dayStr}\"][data-hh=\"${hh}\"]`);\r\n+      if (!cell) continue;\r\n+\r\n+      const meta = statusMeta(a.status);\r\n+      const card = document.createElement('div');\r\n+      card.setAttribute('data-appointment-id', a._id || '');\r\n+      card.style.setProperty('--stripe', meta.stripe);\r\n+      card.style.setProperty('--card-max-w', '260px');\r\n+      card.className = `agenda-card border ${meta.borderClass}`;\r\n+      // conteúdo compacto\r\n+      const profName = a.profissional || '';\r\n+      const header = `\r\n+        <div class=\"flex items-center justify-between gap-2 mb-1\">\r\n+          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n+          ${renderStatusBadge(a.status)}\r\n+        </div>`;\r\n+\r\n+      const body = document.createElement('div');\r\n+      if (a.observacoes && String(a.observacoes).trim()) {\r\n+        body.innerHTML = `\r\n+          <div class=\"text-[13px] text-gray-600 clamp-2\">${a.servico || ''}</div>\r\n+          <div class=\"mt-1 text-[12px] text-gray-700 italic clamp-2\">${String(a.observacoes).trim()}</div>\r\n+          <div class=\"mt-1 text-[12px] text-gray-600\">${profName||''}</div>\r\n+          <div class=\"mt-1 text-[13px] text-gray-800 font-medium\">${money(a.valor)}</div>`;\r\n+      } else {\r\n+        body.innerHTML = `\r\n+          <div class=\"text-[13px] text-gray-600 clamp-2\">${a.servico || ''}</div>\r\n+          <div class=\"mt-1 text-[12px] text-gray-600\">${profName||''}</div>\r\n+          <div class=\"mt-1 text-[13px] text-gray-800 font-medium\">${money(a.valor)}</div>`;\r\n+      }\r\n+\r\n+      card.innerHTML = header;\r\n+      card.appendChild(body);\r\n+      cell.appendChild(card);\r\n+      placed++;\r\n+    }\r\n+\r\n+    if (placed === 0) {\r\n+      const empty = document.createElement('div');\r\n+      empty.className = 'p-6 text-sm text-slate-500';\r\n+      empty.textContent = 'Nenhum agendamento no intervalo.';\r\n+      agendaList.appendChild(empty);\r\n+    }\r\n+  }\r\n+\r\n+  /** ===== NOVO: visão mensal ===== */\r\n+  function renderMonthGrid() {\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    const m0   = startOfMonth(base);\r\n+    const m1   = startOfNextMonth(base); // exclusivo\r\n+    updateHeaderLabel();\r\n+\r\n+    clearChildren(agendaList);\r\n+\r\n+    // cabeçalho: seg a dom\r\n+    const weekDays = ['Seg','Ter','Qua','Qui','Sex','Sáb','Dom'];\r\n+    const header = document.createElement('div');\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n+    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n+    header.innerHTML = weekDays.map(d=>`<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${d}</div>`).join('');\r\n+    agendaList.appendChild(header);\r\n+\r\n+    // calcular início da grade (segunda da semana que contém o dia 1)\r\n+    const startGrid = startOfWeek(m0);\r\n+    const days = Array.from({length:42},(_,i)=> addDays(startGrid,i)); // 6 semanas\r\n+\r\n+    const grid = document.createElement('div');\r\n+    grid.style.display = 'grid';\r\n+    grid.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n+    agendaList.appendChild(grid);\r\n+\r\n+    const appts = (state.agendamentos||[]).slice().sort((a,b)=>(new Date(a.h||a.scheduledAt))-(new Date(b.h||b.scheduledAt)));\r\n+    const byDay = new Map();\r\n+    for (const a of appts) {\r\n+      const d = normalizeDate(new Date(a.h||a.scheduledAt).toISOString());\r\n+      if (d >= m0 && d < m1) {\r\n+        if (!byDay.has(d)) byDay.set(d, []);\r\n+        byDay.get(d).push(a);\r\n+      }\r\n+    }\r\n+\r\n+    days.forEach(d=>{\r\n+      const inMonth = (d>=m0 && d<m1);\r\n+      const cell = document.createElement('div');\r\n+      cell.className = `min-h-[140px] border p-2 ${inMonth? 'bg-white':'bg-slate-50'}`;\r\n+\r\n+      const title = document.createElement('div');\r\n+      title.className = `flex items-center justify-between text-xs ${inMonth?'text-slate-700':'text-slate-400'}`;\r\n+      const dayNum = new Date(d+'T00:00:00').getDate();\r\n+      title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n+\r\n+      const list = document.createElement('div');\r\n+      list.className = 'mt-1 space-y-1';\r\n+\r\n+      const items = byDay.get(d) || [];\r\n+      items.forEach((a, idx)=>{\r\n+        const time = new Date(a.h||a.scheduledAt);\r\n+        const hhmm = `${pad(time.getHours())}:${String(time.getMinutes()).padStart(2,'0')}`;\r\n+        const meta = statusMeta(a.status);\r\n+        const row = document.createElement('div');\r\n+        row.className = `rounded border ${meta.borderClass} px-2 py-1 text-[12px]`;\r\n+        row.innerHTML = `\r\n+          <div class=\"flex justify-between gap-2\">\r\n+            <span class=\"font-medium\">${hhmm}</span>\r\n+            ${renderStatusBadge(a.status)}\r\n+          </div>\r\n+          <div class=\"truncate\">${a.pet || ''} • ${a.servico || ''}</div>\r\n+          <div class=\"flex justify-between text-[11px] text-slate-600\">\r\n+            <span>${a.profissional || ''}</span>\r\n+            <span class=\"font-medium\">${money(a.valor)}</span>\r\n+          </div>`;\r\n+        row.setAttribute('data-appointment-id', a._id || '');\r\n+        list.appendChild(row);\r\n+        if (idx>=4 && items.length>6) {\r\n+          const more = document.createElement('div');\r\n+          more.className = 'text-[11px] text-slate-500';\r\n+          more.textContent = `+${items.length-5} itens`;\r\n+          list.appendChild(more);\r\n+          return;\r\n+        }\r\n+      });\r\n+\r\n+      cell.appendChild(title);\r\n+      cell.appendChild(list);\r\n+      grid.appendChild(cell);\r\n+    });\r\n+  }\r\n+\r\n   // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n   function statusMeta(s) {\r\n     // Normalização: acentos/maiúsculas/espaços/hífens\r\n     const keyRaw = String(s || 'agendado')\r\n"
                },
                {
                    "date": 1757595377493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1316,16 +1316,18 @@\n   function enhanceAgendaUI() {\r\n     try {\r\n       applyZebraAndSublines();\r\n       decorateCards();\r\n-      enableDragDrop();\r\n-      drawNowLine();\r\n \r\n-      // Auto-scroll para o horário atual (somente na data de hoje e 1x por renderização)\r\n-      const date = normalizeDate(dateInput?.value || todayStr());\r\n-      if (!state.__didInitialScroll && date === todayStr()) {\r\n-        scrollToNow();\r\n-        state.__didInitialScroll = true;\r\n+      if (state.view === 'day') {\r\n+        enableDragDrop();\r\n+        drawNowLine();\r\n+\r\n+        const date = normalizeDate(dateInput?.value || todayStr());\r\n+        if (!state.__didInitialScroll && date === todayStr()) {\r\n+          scrollToNow();\r\n+          state.__didInitialScroll = true;\r\n+        }\r\n       }\r\n     } catch (e) {\r\n       console.info('[enhanceAgendaUI] skip', e);\r\n     }\r\n@@ -1860,8 +1862,17 @@\n     await loadAgendamentos();\r\n     renderGrid();\r\n     enhanceAgendaUI();\r\n   });\r\n+  viewSelect?.addEventListener('change', async () => {\r\n+    state.view = viewSelect.value || 'day';\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n \r\n   // Boot\r\n   function setupShortcuts() {\r\n     document.addEventListener('keydown', (e) => {\r\n"
                },
                {
                    "date": 1757595417702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1894,8 +1894,10 @@\n   }\r\n \r\n   (async function init() {\r\n     if (!dateInput?.value) dateInput.value = todayStr();\r\n+    if (viewSelect && !viewSelect.value) viewSelect.value = 'day';\r\n+    state.view = (viewSelect?.value) || 'day';\r\n     loadFiltersFromStorage();\r\n     await loadStores();\r\n     if (!state.selectedStoreId && storeSelect?.value) {\r\n       state.selectedStoreId = storeSelect.value;\r\n"
                },
                {
                    "date": 1757595819449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n   // Elements\r\n   const agendaList = document.getElementById('agenda-list');\r\n   const dateInput = document.getElementById('agenda-date');\r\n   const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n-  const viewSelect = document.getElementById('agenda-view');\r\n   const addBtn = document.getElementById('add-service-btn');\r\n   const storeSelect = document.getElementById('agenda-store');\r\n   const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n \r\n@@ -58,9 +57,8 @@\n     tempServicos: [],\r\n     editing: null,\r\n     lastSnapshotHash: '',\r\n     __didInitialScroll: false,\r\n-    view: 'day', \r\n     filters: {                 // filtros persistentes\r\n       statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n       profIds: new Set()       // _id dos profissionais\r\n     }\r\n@@ -124,14 +122,10 @@\n     const f = getFilteredAgendamentos();   // filtrados atuais\r\n     const kAll = computeKPIs(all);\r\n     const kF   = computeKPIs(f);\r\n \r\n-    const labelTotal =\r\n-      state.view === 'week'  ? 'Total semana' :\r\n-      state.view === 'month' ? 'Total mês'    : 'Total dia';\r\n-\r\n     wrap.innerHTML = `\r\n-      <div class=\"kpi-chip\">${labelTotal}: <strong>${kAll.total}</strong></div>\r\n+      <div class=\"kpi-chip\">Total dia: <strong>${kAll.total}</strong></div>\r\n       <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n       <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n       <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n       ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n@@ -289,52 +283,8 @@\n     if (!v) return todayStr();\r\n     if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n     return v;\r\n   }\r\n-\r\n-  // === NOVO: helpers de intervalo ===\r\n-  function startOfWeek(dateStr) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    const day = (d.getDay() + 6) % 7; // 0=Seg ... 6=Dom\r\n-    d.setDate(d.getDate() - day);\r\n-    return normalizeDate(d.toISOString());\r\n-  }\r\n-  function addDays(dateStr, n) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    d.setDate(d.getDate() + n);\r\n-    return normalizeDate(d.toISOString());\r\n-  }\r\n-  function startOfMonth(dateStr) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    d.setDate(1);\r\n-    return normalizeDate(d.toISOString());\r\n-  }\r\n-  function startOfNextMonth(dateStr) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    d.setDate(1);\r\n-    d.setMonth(d.getMonth() + 1);\r\n-    return normalizeDate(d.toISOString());\r\n-  }\r\n-  // Atualiza o rótulo \"Agenda do ...\"\r\n-  function updateHeaderLabel() {\r\n-    if (!dateLabelVisible) return;\r\n-    const d = normalizeDate(dateInput?.value || todayStr());\r\n-    if (state.view === 'week') {\r\n-      const ini = startOfWeek(d);\r\n-      const fim = addDays(ini, 6);\r\n-      const li = new Date(ini + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-      const lf = new Date(fim + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-      dateLabelVisible.textContent = `${li} a ${lf}`;\r\n-    } else if (state.view === 'month') {\r\n-      const m0 = startOfMonth(d);\r\n-      const dt = new Date(m0 + 'T00:00:00');\r\n-      const label = dt.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });\r\n-      dateLabelVisible.textContent = label.charAt(0).toUpperCase() + label.slice(1);\r\n-    } else {\r\n-      dateLabelVisible.textContent = new Date(d + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-    }\r\n-  }\r\n-\r\n   function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n   function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n   function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n \r\n@@ -377,23 +327,11 @@\n   }\r\n \r\n   // Agendamentos\r\n   async function loadAgendamentos() {\r\n-    const baseDate = normalizeDate(dateInput?.value || todayStr());\r\n+    const date = normalizeDate(dateInput?.value || todayStr());\r\n+    const url = `/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`;\r\n     try {\r\n-      let url = '';\r\n-      if (state.view === 'week') {\r\n-        const ini = startOfWeek(baseDate);\r\n-        const fim = addDays(ini, 7); // exclusivo\r\n-        url = `/func/agendamentos/range?start=${ini}&end=${fim}&storeId=${state.selectedStoreId}`;\r\n-      } else if (state.view === 'month') {\r\n-        const m0  = startOfMonth(baseDate);\r\n-        const m1  = startOfNextMonth(baseDate); // exclusivo\r\n-        url = `/func/agendamentos/range?start=${m0}&end=${m1}&storeId=${state.selectedStoreId}`;\r\n-      } else {\r\n-        url = `/func/agendamentos?date=${baseDate}&storeId=${state.selectedStoreId}`;\r\n-      }\r\n-\r\n       const resp = await api(url);\r\n       if (!resp.ok) {\r\n         const txt = await resp.text();\r\n         console.error('GET', url, '->', resp.status, txt);\r\n@@ -401,10 +339,9 @@\n         return;\r\n       }\r\n       const list = await resp.json();\r\n       state.agendamentos = Array.isArray(list) ? list : [];\r\n-      updateHeaderLabel();\r\n-      console.info('[Agenda]', 'view=', state.view, 'loja=', state.selectedStoreId, 'itens=', state.agendamentos.length);\r\n+      console.info('[Agenda] loja=', state.selectedStoreId, 'data=', date, 'itens=', state.agendamentos.length, state.agendamentos.slice(0, 3));\r\n     } catch (e) {\r\n       console.error('Erro ao carregar agendamentos', e);\r\n       state.agendamentos = [];\r\n     }\r\n@@ -583,197 +520,8 @@\n         agendaList.insertBefore(empty, header.nextSibling);\r\n       }\r\n   }\r\n \r\n-  /** ===== NOVO: visão semanal ===== */\r\n-  function renderWeekGrid() {\r\n-    const base = normalizeDate(dateInput?.value || todayStr());\r\n-    const ini  = startOfWeek(base);\r\n-    const days = Array.from({length:7}, (_,i)=> addDays(ini,i));\r\n-    updateHeaderLabel();\r\n-\r\n-    clearChildren(agendaList);\r\n-\r\n-    // Cabeçalho: horários + 7 dias\r\n-    const BUSINESS_START = 8, BUSINESS_END = 19;\r\n-    const hours = []; for (let h=0; h<24; h++) hours.push(`${pad(h)}:00`);\r\n-\r\n-    const header = document.createElement('div');\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n-    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n-    header.innerHTML = `\r\n-      <div class=\"px-2 py-2 text-xs text-slate-500\">Horário</div>\r\n-      ${days.map(d=>{\r\n-        const lab = new Date(d+'T00:00:00').toLocaleDateString('pt-BR', { weekday:'short', day:'2-digit', month:'2-digit' });\r\n-        return `<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${lab}</div>`;\r\n-      }).join('')}\r\n-    `;\r\n-    agendaList.appendChild(header);\r\n-\r\n-    const body = document.createElement('div');\r\n-    body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n-    agendaList.appendChild(body);\r\n-\r\n-    // linhas por hora\r\n-    hours.forEach(hh => {\r\n-      const h = parseInt(hh.slice(0,2),10);\r\n-      const inBusiness = (h>=BUSINESS_START && h<=BUSINESS_END);\r\n-\r\n-      const timeCell = document.createElement('div');\r\n-      timeCell.className = `px-2 py-2 border-b text-[12px] ${inBusiness?'text-slate-800':'text-slate-400'}`;\r\n-      timeCell.textContent = hh;\r\n-      body.appendChild(timeCell);\r\n-\r\n-      days.forEach(d=>{\r\n-        const cell = document.createElement('div');\r\n-        cell.className = `px-2 py-2 border-b agenda-slot`;\r\n-        cell.dataset.day = d;\r\n-        cell.dataset.hh  = hh;\r\n-        body.appendChild(cell);\r\n-      });\r\n-    });\r\n-\r\n-    // posiciona cartões\r\n-    let placed = 0;\r\n-    for (const a of (state.agendamentos||[])) {\r\n-      const when = a.h || a.scheduledAt;\r\n-      if (!when) continue;\r\n-      const d  = new Date(when);\r\n-      const dayStr = normalizeDate(d.toISOString());\r\n-      if (dayStr < days[0] || dayStr > days[6]) continue;\r\n-\r\n-      const hh = `${pad(d.getHours())}:00`;\r\n-      const cell = agendaList.querySelector(`div[data-day=\"${dayStr}\"][data-hh=\"${hh}\"]`);\r\n-      if (!cell) continue;\r\n-\r\n-      const meta = statusMeta(a.status);\r\n-      const card = document.createElement('div');\r\n-      card.setAttribute('data-appointment-id', a._id || '');\r\n-      card.style.setProperty('--stripe', meta.stripe);\r\n-      card.style.setProperty('--card-max-w', '260px');\r\n-      card.className = `agenda-card border ${meta.borderClass}`;\r\n-      // conteúdo compacto\r\n-      const profName = a.profissional || '';\r\n-      const header = `\r\n-        <div class=\"flex items-center justify-between gap-2 mb-1\">\r\n-          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n-          ${renderStatusBadge(a.status)}\r\n-        </div>`;\r\n-\r\n-      const body = document.createElement('div');\r\n-      if (a.observacoes && String(a.observacoes).trim()) {\r\n-        body.innerHTML = `\r\n-          <div class=\"text-[13px] text-gray-600 clamp-2\">${a.servico || ''}</div>\r\n-          <div class=\"mt-1 text-[12px] text-gray-700 italic clamp-2\">${String(a.observacoes).trim()}</div>\r\n-          <div class=\"mt-1 text-[12px] text-gray-600\">${profName||''}</div>\r\n-          <div class=\"mt-1 text-[13px] text-gray-800 font-medium\">${money(a.valor)}</div>`;\r\n-      } else {\r\n-        body.innerHTML = `\r\n-          <div class=\"text-[13px] text-gray-600 clamp-2\">${a.servico || ''}</div>\r\n-          <div class=\"mt-1 text-[12px] text-gray-600\">${profName||''}</div>\r\n-          <div class=\"mt-1 text-[13px] text-gray-800 font-medium\">${money(a.valor)}</div>`;\r\n-      }\r\n-\r\n-      card.innerHTML = header;\r\n-      card.appendChild(body);\r\n-      cell.appendChild(card);\r\n-      placed++;\r\n-    }\r\n-\r\n-    if (placed === 0) {\r\n-      const empty = document.createElement('div');\r\n-      empty.className = 'p-6 text-sm text-slate-500';\r\n-      empty.textContent = 'Nenhum agendamento no intervalo.';\r\n-      agendaList.appendChild(empty);\r\n-    }\r\n-  }\r\n-\r\n-  /** ===== NOVO: visão mensal ===== */\r\n-  function renderMonthGrid() {\r\n-    const base = normalizeDate(dateInput?.value || todayStr());\r\n-    const m0   = startOfMonth(base);\r\n-    const m1   = startOfNextMonth(base); // exclusivo\r\n-    updateHeaderLabel();\r\n-\r\n-    clearChildren(agendaList);\r\n-\r\n-    // cabeçalho: seg a dom\r\n-    const weekDays = ['Seg','Ter','Qua','Qui','Sex','Sáb','Dom'];\r\n-    const header = document.createElement('div');\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n-    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n-    header.innerHTML = weekDays.map(d=>`<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${d}</div>`).join('');\r\n-    agendaList.appendChild(header);\r\n-\r\n-    // calcular início da grade (segunda da semana que contém o dia 1)\r\n-    const startGrid = startOfWeek(m0);\r\n-    const days = Array.from({length:42},(_,i)=> addDays(startGrid,i)); // 6 semanas\r\n-\r\n-    const grid = document.createElement('div');\r\n-    grid.style.display = 'grid';\r\n-    grid.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n-    agendaList.appendChild(grid);\r\n-\r\n-    const appts = (state.agendamentos||[]).slice().sort((a,b)=>(new Date(a.h||a.scheduledAt))-(new Date(b.h||b.scheduledAt)));\r\n-    const byDay = new Map();\r\n-    for (const a of appts) {\r\n-      const d = normalizeDate(new Date(a.h||a.scheduledAt).toISOString());\r\n-      if (d >= m0 && d < m1) {\r\n-        if (!byDay.has(d)) byDay.set(d, []);\r\n-        byDay.get(d).push(a);\r\n-      }\r\n-    }\r\n-\r\n-    days.forEach(d=>{\r\n-      const inMonth = (d>=m0 && d<m1);\r\n-      const cell = document.createElement('div');\r\n-      cell.className = `min-h-[140px] border p-2 ${inMonth? 'bg-white':'bg-slate-50'}`;\r\n-\r\n-      const title = document.createElement('div');\r\n-      title.className = `flex items-center justify-between text-xs ${inMonth?'text-slate-700':'text-slate-400'}`;\r\n-      const dayNum = new Date(d+'T00:00:00').getDate();\r\n-      title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n-\r\n-      const list = document.createElement('div');\r\n-      list.className = 'mt-1 space-y-1';\r\n-\r\n-      const items = byDay.get(d) || [];\r\n-      items.forEach((a, idx)=>{\r\n-        const time = new Date(a.h||a.scheduledAt);\r\n-        const hhmm = `${pad(time.getHours())}:${String(time.getMinutes()).padStart(2,'0')}`;\r\n-        const meta = statusMeta(a.status);\r\n-        const row = document.createElement('div');\r\n-        row.className = `rounded border ${meta.borderClass} px-2 py-1 text-[12px]`;\r\n-        row.innerHTML = `\r\n-          <div class=\"flex justify-between gap-2\">\r\n-            <span class=\"font-medium\">${hhmm}</span>\r\n-            ${renderStatusBadge(a.status)}\r\n-          </div>\r\n-          <div class=\"truncate\">${a.pet || ''} • ${a.servico || ''}</div>\r\n-          <div class=\"flex justify-between text-[11px] text-slate-600\">\r\n-            <span>${a.profissional || ''}</span>\r\n-            <span class=\"font-medium\">${money(a.valor)}</span>\r\n-          </div>`;\r\n-        row.setAttribute('data-appointment-id', a._id || '');\r\n-        list.appendChild(row);\r\n-        if (idx>=4 && items.length>6) {\r\n-          const more = document.createElement('div');\r\n-          more.className = 'text-[11px] text-slate-500';\r\n-          more.textContent = `+${items.length-5} itens`;\r\n-          list.appendChild(more);\r\n-          return;\r\n-        }\r\n-      });\r\n-\r\n-      cell.appendChild(title);\r\n-      cell.appendChild(list);\r\n-      grid.appendChild(cell);\r\n-    });\r\n-  }\r\n-\r\n   // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n   function statusMeta(s) {\r\n     // Normalização: acentos/maiúsculas/espaços/hífens\r\n     const keyRaw = String(s || 'agendado')\r\n@@ -1316,18 +1064,16 @@\n   function enhanceAgendaUI() {\r\n     try {\r\n       applyZebraAndSublines();\r\n       decorateCards();\r\n+      enableDragDrop();\r\n+      drawNowLine();\r\n \r\n-      if (state.view === 'day') {\r\n-        enableDragDrop();\r\n-        drawNowLine();\r\n-\r\n-        const date = normalizeDate(dateInput?.value || todayStr());\r\n-        if (!state.__didInitialScroll && date === todayStr()) {\r\n-          scrollToNow();\r\n-          state.__didInitialScroll = true;\r\n-        }\r\n+      // Auto-scroll para o horário atual (somente na data de hoje e 1x por renderização)\r\n+      const date = normalizeDate(dateInput?.value || todayStr());\r\n+      if (!state.__didInitialScroll && date === todayStr()) {\r\n+        scrollToNow();\r\n+        state.__didInitialScroll = true;\r\n       }\r\n     } catch (e) {\r\n       console.info('[enhanceAgendaUI] skip', e);\r\n     }\r\n@@ -1862,17 +1608,8 @@\n     await loadAgendamentos();\r\n     renderGrid();\r\n     enhanceAgendaUI();\r\n   });\r\n-  viewSelect?.addEventListener('change', async () => {\r\n-    state.view = viewSelect.value || 'day';\r\n-    state.__didInitialScroll = false;\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n \r\n   // Boot\r\n   function setupShortcuts() {\r\n     document.addEventListener('keydown', (e) => {\r\n@@ -1894,10 +1631,8 @@\n   }\r\n \r\n   (async function init() {\r\n     if (!dateInput?.value) dateInput.value = todayStr();\r\n-    if (viewSelect && !viewSelect.value) viewSelect.value = 'day';\r\n-    state.view = (viewSelect?.value) || 'day';\r\n     loadFiltersFromStorage();\r\n     await loadStores();\r\n     if (!state.selectedStoreId && storeSelect?.value) {\r\n       state.selectedStoreId = storeSelect.value;\r\n"
                },
                {
                    "date": 1757596376508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n   // Elements\r\n   const agendaList = document.getElementById('agenda-list');\r\n   const dateInput = document.getElementById('agenda-date');\r\n   const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n+  const viewSelect = document.getElementById('agenda-view');\r\n   const addBtn = document.getElementById('add-service-btn');\r\n   const storeSelect = document.getElementById('agenda-store');\r\n   const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n \r\n"
                },
                {
                    "date": 1757596388353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n     tempServicos: [],\r\n     editing: null,\r\n     lastSnapshotHash: '',\r\n     __didInitialScroll: false,\r\n+    view: 'day',\r\n     filters: {                 // filtros persistentes\r\n       statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n       profIds: new Set()       // _id dos profissionais\r\n     }\r\n"
                },
                {
                    "date": 1757596419985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,8 +285,55 @@\n     if (!v) return todayStr();\r\n     if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n     return v;\r\n   }\r\n+\r\n+  // ==== NOVO: utilitários de intervalo e label ====\r\n+  function startOfWeek(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    const dow = (d.getDay() + 6) % 7; // 0 = seg\r\n+    d.setDate(d.getDate() - dow);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function addDays(dateStr, n) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(d.getDate() + n);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function startOfMonth(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(1);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function startOfNextMonth(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(1);\r\n+    d.setMonth(d.getMonth() + 1);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function updateHeaderLabel() {\r\n+    if (!dateLabelVisible) return;\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    if (state.view === 'week') {\r\n+      const ini = startOfWeek(base);\r\n+      const fim = addDays(ini, 6);\r\n+      const li = new Date(ini + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      const lf = new Date(fim + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      dateLabelVisible.textContent = `${li} a ${lf}`;\r\n+    } else if (state.view === 'month') {\r\n+      const m0 = startOfMonth(base);\r\n+      const dt = new Date(m0 + 'T00:00:00');\r\n+      const label = dt.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });\r\n+      dateLabelVisible.textContent = label.charAt(0).toUpperCase() + label.slice(1);\r\n+    } else {\r\n+      dateLabelVisible.textContent = new Date(base + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+    }\r\n+  }\r\n+\r\n   function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n   function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n   function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n \r\n"
                },
                {
                    "date": 1757596443881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,10 +124,11 @@\n     const f = getFilteredAgendamentos();   // filtrados atuais\r\n     const kAll = computeKPIs(all);\r\n     const kF   = computeKPIs(f);\r\n \r\n+    const totalLabel = state.view === 'week' ? 'Total semana' : (state.view === 'month' ? 'Total mês' : 'Total dia');\r\n     wrap.innerHTML = `\r\n-      <div class=\"kpi-chip\">Total dia: <strong>${kAll.total}</strong></div>\r\n+      <div class=\"kpi-chip\">${totalLabel}: <strong>${kAll.total}</strong></div>\r\n       <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n       <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n       <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n       ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n"
                },
                {
                    "date": 1757596905953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -377,10 +377,21 @@\n   }\r\n \r\n   // Agendamentos\r\n   async function loadAgendamentos() {\r\n-    const date = normalizeDate(dateInput?.value || todayStr());\r\n-    const url = `/func/agendamentos?date=${date}&storeId=${state.selectedStoreId}`;\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    let url = '';\r\n+    if (state.view === 'week') {\r\n+      const ini = startOfWeek(base);\r\n+      const fim = addDays(ini, 7); // exclusivo\r\n+      url = `/func/agendamentos/range?start=${ini}&end=${fim}&storeId=${state.selectedStoreId}`;\r\n+    } else if (state.view === 'month') {\r\n+      const m0 = startOfMonth(base);\r\n+      const m1 = startOfNextMonth(base); // exclusivo\r\n+      url = `/func/agendamentos/range?start=${m0}&end=${m1}&storeId=${state.selectedStoreId}`;\r\n+    } else {\r\n+      url = `/func/agendamentos?date=${base}&storeId=${state.selectedStoreId}`;\r\n+    }\r\n     try {\r\n       const resp = await api(url);\r\n       if (!resp.ok) {\r\n         const txt = await resp.text();\r\n@@ -399,13 +410,14 @@\n \r\n   // Grade (sem coluna \"Outros\")\r\n   function renderGrid() {\r\n       if (!agendaList) return;\r\n+      if (state.view === 'week')  { renderWeekGrid();  return; }\r\n+      if (state.view === 'month') { renderMonthGrid(); return; }\r\n \r\n+      // ===== Visão DIÁRIA (original) =====\r\n       const date = normalizeDate(dateInput?.value || todayStr());\r\n-      if (dateLabelVisible) {\r\n-        dateLabelVisible.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-      }\r\n+      updateHeaderLabel();\r\n \r\n       // janelas de trabalho (ajuste se quiser)\r\n       const BUSINESS_START = 8;   // 08:00\r\n       const BUSINESS_END   = 19;  // 19:00\r\n@@ -570,8 +582,182 @@\n         agendaList.insertBefore(empty, header.nextSibling);\r\n       }\r\n   }\r\n \r\n+  /** ===== NOVO: visão semanal ===== */\r\n+  function renderWeekGrid() {\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    const ini  = startOfWeek(base);\r\n+    const days = Array.from({ length: 7 }, (_, i) => addDays(ini, i));\r\n+    updateHeaderLabel();\r\n+\r\n+    clearChildren(agendaList);\r\n+\r\n+    const BUSINESS_START = 8, BUSINESS_END = 19;\r\n+    const hours = []; for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+\r\n+    const header = document.createElement('div');\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n+    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n+    header.innerHTML = `\r\n+      <div class=\"px-2 py-2 text-xs text-slate-500\">Horário</div>\r\n+      ${days.map(d => {\r\n+        const lab = new Date(d + 'T00:00:00').toLocaleDateString('pt-BR', { weekday:'short', day:'2-digit', month:'2-digit' });\r\n+        return `<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${lab}</div>`;\r\n+      }).join('')}\r\n+    `;\r\n+    agendaList.appendChild(header);\r\n+\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n+    agendaList.appendChild(body);\r\n+\r\n+    hours.forEach(hh => {\r\n+      const hourNumber = parseInt(hh.slice(0,2), 10);\r\n+      const inBusiness = (hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END);\r\n+\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = `px-2 py-2 border-b text-[12px] ${inBusiness ? 'text-slate-800' : 'text-slate-400'}`;\r\n+      timeCell.textContent = hh;\r\n+      body.appendChild(timeCell);\r\n+\r\n+      days.forEach(d => {\r\n+        const cell = document.createElement('div');\r\n+        cell.className = 'px-2 py-2 border-b agenda-slot';\r\n+        cell.dataset.day = d;\r\n+        cell.dataset.hh  = hh;\r\n+        body.appendChild(cell);\r\n+      });\r\n+    });\r\n+\r\n+    let placed = 0;\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const when = a.h || a.scheduledAt;\r\n+      if (!when) continue;\r\n+      const dt = new Date(when);\r\n+      const dayStr = normalizeDate(dt.toISOString());\r\n+      if (dayStr < days[0] || dayStr > days[6]) continue;\r\n+\r\n+      const hh = `${pad(dt.getHours())}:00`;\r\n+      const cell = agendaList.querySelector(`div[data-day=\"${dayStr}\"][data-hh=\"${hh}\"]`);\r\n+      if (!cell) continue;\r\n+\r\n+      const meta = statusMeta(a.status);\r\n+      const card = document.createElement('div');\r\n+      card.setAttribute('data-appointment-id', a._id || '');\r\n+      card.className = `agenda-card border ${meta.borderClass}`;\r\n+      card.style.setProperty('max-width', '260px');\r\n+\r\n+      const headHtml = `\r\n+        <div class=\"flex items-center justify-between gap-2 mb-1\">\r\n+          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n+          ${renderStatusBadge(a.status)}\r\n+        </div>`;\r\n+      const body = document.createElement('div');\r\n+      body.innerHTML = `\r\n+        <div class=\"text-[13px] text-gray-600 clamp-2\">${a.servico || ''}</div>\r\n+        ${a.observacoes ? `<div class=\"mt-1 text-[12px] text-gray-700 italic clamp-2\">${String(a.observacoes).trim()}</div>` : ''}\r\n+        <div class=\"mt-1 text-[12px] text-gray-600\">${a.profissional || ''}</div>\r\n+        <div class=\"mt-1 text-[13px] text-gray-800 font-medium\">${money(a.valor)}</div>`;\r\n+      card.innerHTML = headHtml;\r\n+      card.appendChild(body);\r\n+\r\n+      cell.appendChild(card);\r\n+      placed++;\r\n+    }\r\n+\r\n+    if (placed === 0) {\r\n+      const empty = document.createElement('div');\r\n+      empty.className = 'p-6 text-sm text-slate-500';\r\n+      empty.textContent = 'Nenhum agendamento no intervalo.';\r\n+      agendaList.appendChild(empty);\r\n+    }\r\n+  }\r\n+\r\n+  /** ===== NOVO: visão mensal ===== */\r\n+  function renderMonthGrid() {\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    const m0   = startOfMonth(base);\r\n+    const m1   = startOfNextMonth(base); // exclusivo\r\n+    updateHeaderLabel();\r\n+\r\n+    clearChildren(agendaList);\r\n+\r\n+    const weekDays = ['Seg','Ter','Qua','Qui','Sex','Sáb','Dom'];\r\n+    const header = document.createElement('div');\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n+    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n+    header.innerHTML = weekDays.map(d => `<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${d}</div>`).join('');\r\n+    agendaList.appendChild(header);\r\n+\r\n+    const startGrid = startOfWeek(m0);\r\n+    const days = Array.from({ length: 42 }, (_, i) => addDays(startGrid, i)); // 6 semanas\r\n+\r\n+    const grid = document.createElement('div');\r\n+    grid.style.display = 'grid';\r\n+    grid.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n+    agendaList.appendChild(grid);\r\n+\r\n+    const appts = (state.agendamentos || []).slice().sort((a,b) => (new Date(a.h || a.scheduledAt)) - (new Date(b.h || b.scheduledAt)));\r\n+    const byDay = new Map();\r\n+    for (const a of appts) {\r\n+      const d = normalizeDate(new Date(a.h || a.scheduledAt).toISOString());\r\n+      if (!byDay.has(d)) byDay.set(d, []);\r\n+      byDay.get(d).push(a);\r\n+    }\r\n+\r\n+    days.forEach(d => {\r\n+      const inMonth = (d >= m0 && d < m1);\r\n+      const cell = document.createElement('div');\r\n+      cell.className = `min-h-[140px] border p-2 ${inMonth ? 'bg-white' : 'bg-slate-50'}`;\r\n+\r\n+      const title = document.createElement('div');\r\n+      title.className = `flex items-center justify-between text-xs ${inMonth ? 'text-slate-700' : 'text-slate-400'}`;\r\n+      const dayNum = new Date(d + 'T00:00:00').getDate();\r\n+      title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n+\r\n+      const list = document.createElement('div');\r\n+      list.className = 'mt-1 space-y-1';\r\n+\r\n+      const items = (byDay.get(d) || []).filter(a => d >= m0 && d < m1);\r\n+      items.forEach((a, idx) => {\r\n+        const time = new Date(a.h || a.scheduledAt);\r\n+        const hhmm = `${pad(time.getHours())}:${String(time.getMinutes()).padStart(2,'0')}`;\r\n+        const meta = statusMeta(a.status);\r\n+\r\n+        const row = document.createElement('div');\r\n+        row.className = `rounded border ${meta.borderClass} px-2 py-1 text-[12px] agenda-card`;\r\n+        row.setAttribute('data-appointment-id', a._id || '');\r\n+        row.innerHTML = `\r\n+          <div class=\"flex justify-between gap-2\">\r\n+            <span class=\"font-medium\">${hhmm}</span>\r\n+            ${renderStatusBadge(a.status)}\r\n+          </div>\r\n+          <div class=\"truncate\">${a.pet || ''} • ${a.servico || ''}</div>\r\n+          <div class=\"flex justify-between text-[11px] text-slate-600\">\r\n+            <span>${a.profissional || ''}</span>\r\n+            <span class=\"font-medium\">${money(a.valor)}</span>\r\n+          </div>`;\r\n+        list.appendChild(row);\r\n+\r\n+        if (idx >= 4 && items.length > 6) {\r\n+          const more = document.createElement('div');\r\n+          more.className = 'text-[11px] text-slate-500';\r\n+          more.textContent = `+${items.length - 5} itens`;\r\n+          list.appendChild(more);\r\n+          return;\r\n+        }\r\n+      });\r\n+\r\n+      cell.appendChild(title);\r\n+      cell.appendChild(list);\r\n+      grid.appendChild(cell);\r\n+    });\r\n+  }\r\n+\r\n   // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n   function statusMeta(s) {\r\n     // Normalização: acentos/maiúsculas/espaços/hífens\r\n     const keyRaw = String(s || 'agendado')\r\n@@ -1114,16 +1300,18 @@\n   function enhanceAgendaUI() {\r\n     try {\r\n       applyZebraAndSublines();\r\n       decorateCards();\r\n-      enableDragDrop();\r\n-      drawNowLine();\r\n \r\n-      // Auto-scroll para o horário atual (somente na data de hoje e 1x por renderização)\r\n-      const date = normalizeDate(dateInput?.value || todayStr());\r\n-      if (!state.__didInitialScroll && date === todayStr()) {\r\n-        scrollToNow();\r\n-        state.__didInitialScroll = true;\r\n+      if (state.view === 'day') {\r\n+        enableDragDrop();\r\n+        drawNowLine();\r\n+\r\n+        const date = normalizeDate(dateInput?.value || todayStr());\r\n+        if (!state.__didInitialScroll && date === todayStr()) {\r\n+          scrollToNow();\r\n+          state.__didInitialScroll = true;\r\n+        }\r\n       }\r\n     } catch (e) {\r\n       console.info('[enhanceAgendaUI] skip', e);\r\n     }\r\n@@ -1681,8 +1869,11 @@\n   }\r\n \r\n   (async function init() {\r\n     if (!dateInput?.value) dateInput.value = todayStr();\r\n+    if (viewSelect && !viewSelect.value) viewSelect.value = 'day';\r\n+    state.view = (viewSelect?.value) || 'day';\r\n+\r\n     loadFiltersFromStorage();\r\n     await loadStores();\r\n     if (!state.selectedStoreId && storeSelect?.value) {\r\n       state.selectedStoreId = storeSelect.value;\r\n@@ -1699,8 +1890,27 @@\n     renderGrid();\r\n     enhanceAgendaUI();\r\n   })();\r\n \r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  viewSelect?.addEventListener('change', async () => {\r\n+    state.view = viewSelect.value || 'day';\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n   // Atualizações após troca de loja/data/status etc.\r\n   storeSelect?.addEventListener('change', async () => {\r\n     state.selectedStoreId = storeSelect.value;\r\n     updateStoreLabel();\r\n"
                },
                {
                    "date": 1757597166901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,9 +378,11 @@\n \r\n   // Agendamentos\r\n   async function loadAgendamentos() {\r\n     const base = normalizeDate(dateInput?.value || todayStr());\r\n+    const date = base; // compat: alguns trechos antigos ainda usam \"date\"\r\n     let url = '';\r\n+\r\n     if (state.view === 'week') {\r\n       const ini = startOfWeek(base);\r\n       const fim = addDays(ini, 7); // exclusivo\r\n       url = `/func/agendamentos/range?start=${ini}&end=${fim}&storeId=${state.selectedStoreId}`;\r\n@@ -390,19 +392,26 @@\n       url = `/func/agendamentos/range?start=${m0}&end=${m1}&storeId=${state.selectedStoreId}`;\r\n     } else {\r\n       url = `/func/agendamentos?date=${base}&storeId=${state.selectedStoreId}`;\r\n     }\r\n+\r\n     try {\r\n       const resp = await api(url);\r\n       if (!resp.ok) {\r\n         const txt = await resp.text();\r\n         console.error('GET', url, '->', resp.status, txt);\r\n         state.agendamentos = [];\r\n         return;\r\n       }\r\n+\r\n       const list = await resp.json();\r\n       state.agendamentos = Array.isArray(list) ? list : [];\r\n-      console.info('[Agenda] loja=', state.selectedStoreId, 'data=', date, 'itens=', state.agendamentos.length, state.agendamentos.slice(0, 3));\r\n+\r\n+      // snapshot/label\r\n+      updateHeaderLabel();\r\n+      state.lastSnapshotHash = `${state.view}:${date}:${state.selectedStoreId || ''}:${state.agendamentos.length}`;\r\n+\r\n+      console.info('[Agenda]', 'view=', state.view, 'dataBase=', date, 'loja=', state.selectedStoreId, 'itens=', state.agendamentos.length);\r\n     } catch (e) {\r\n       console.error('Erro ao carregar agendamentos', e);\r\n       state.agendamentos = [];\r\n     }\r\n"
                },
                {
                    "date": 1757597965438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -332,8 +332,14 @@\n     } else {\r\n       dateLabelVisible.textContent = new Date(base + 'T00:00:00').toLocaleDateString('pt-BR');\r\n     }\r\n   }\r\n+  function localDateStr(d) {\r\n+    const y = d.getFullYear();\r\n+    const m = String(d.getMonth() + 1).padStart(2, '0');\r\n+    const dd = String(d.getDate()).padStart(2, '0');\r\n+    return `${y}-${m}-${dd}`;\r\n+  }\r\n \r\n   function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n   function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n   function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n"
                },
                {
                    "date": 1757598002165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -606,8 +606,9 @@\n     updateHeaderLabel();\r\n \r\n     clearChildren(agendaList);\r\n \r\n+    // Cabeçalho: horários + 7 dias\r\n     const BUSINESS_START = 8, BUSINESS_END = 19;\r\n     const hours = []; for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n \r\n     const header = document.createElement('div');\r\n@@ -615,10 +616,10 @@\n     header.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n     header.className = 'sticky top-0 z-20 bg-white border-b';\r\n     header.innerHTML = `\r\n       <div class=\"px-2 py-2 text-xs text-slate-500\">Horário</div>\r\n-      ${days.map(d => {\r\n-        const lab = new Date(d + 'T00:00:00').toLocaleDateString('pt-BR', { weekday:'short', day:'2-digit', month:'2-digit' });\r\n+      ${days.map(d=>{\r\n+        const lab = new Date(d+'T00:00:00').toLocaleDateString('pt-BR', { weekday:'short', day:'2-digit', month:'2-digit' });\r\n         return `<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${lab}</div>`;\r\n       }).join('')}\r\n     `;\r\n     agendaList.appendChild(header);\r\n@@ -627,32 +628,37 @@\n     body.style.display = 'grid';\r\n     body.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n     agendaList.appendChild(body);\r\n \r\n+    // linhas por hora\r\n     hours.forEach(hh => {\r\n-      const hourNumber = parseInt(hh.slice(0,2), 10);\r\n-      const inBusiness = (hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END);\r\n+      const hourNumber = parseInt(hh.slice(0,2),10);\r\n+      const inBusiness = (hourNumber>=BUSINESS_START && hourNumber< BUSINESS_END);\r\n \r\n       const timeCell = document.createElement('div');\r\n-      timeCell.className = `px-2 py-2 border-b text-[12px] ${inBusiness ? 'text-slate-800' : 'text-slate-400'}`;\r\n+      timeCell.className = `px-2 py-2 border-b text-[12px] ${inBusiness?'text-slate-800':'text-slate-400'}`;\r\n       timeCell.textContent = hh;\r\n       body.appendChild(timeCell);\r\n \r\n-      days.forEach(d => {\r\n+      days.forEach(d=>{\r\n         const cell = document.createElement('div');\r\n-        cell.className = 'px-2 py-2 border-b agenda-slot';\r\n+        cell.className = `px-2 py-2 border-b agenda-slot`;\r\n         cell.dataset.day = d;\r\n         cell.dataset.hh  = hh;\r\n         body.appendChild(cell);\r\n       });\r\n     });\r\n \r\n+    // posiciona cartões (AGORA com filtro aplicado + data local)\r\n+    const items = getFilteredAgendamentos(state.agendamentos || []);\r\n     let placed = 0;\r\n-    for (const a of (state.agendamentos || [])) {\r\n+\r\n+    for (const a of items) {\r\n       const when = a.h || a.scheduledAt;\r\n       if (!when) continue;\r\n-      const dt = new Date(when);\r\n-      const dayStr = normalizeDate(dt.toISOString());\r\n+\r\n+      const dt     = new Date(when);\r\n+      const dayStr = localDateStr(dt);               // <— usa DATA LOCAL\r\n       if (dayStr < days[0] || dayStr > days[6]) continue;\r\n \r\n       const hh = `${pad(dt.getHours())}:00`;\r\n       const cell = agendaList.querySelector(`div[data-day=\"${dayStr}\"][data-hh=\"${hh}\"]`);\r\n@@ -660,25 +666,47 @@\n \r\n       const meta = statusMeta(a.status);\r\n       const card = document.createElement('div');\r\n       card.setAttribute('data-appointment-id', a._id || '');\r\n-      card.className = `agenda-card border ${meta.borderClass}`;\r\n-      card.style.setProperty('max-width', '260px');\r\n+      card.style.setProperty('--stripe', meta.stripe);\r\n+      card.style.setProperty('--card-max-w', '100%');               // <— ajusta tamanho p/ coluna semanal\r\n+      card.className = `agenda-card border ${meta.borderClass} cursor-move select-none`;\r\n+      card.setAttribute('draggable', 'true');\r\n \r\n-      const headHtml = `\r\n-        <div class=\"flex items-center justify-between gap-2 mb-1\">\r\n-          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n-          ${renderStatusBadge(a.status)}\r\n-        </div>`;\r\n-      const body = document.createElement('div');\r\n-      body.innerHTML = `\r\n-        <div class=\"text-[13px] text-gray-600 clamp-2\">${a.servico || ''}</div>\r\n-        ${a.observacoes ? `<div class=\"mt-1 text-[12px] text-gray-700 italic clamp-2\">${String(a.observacoes).trim()}</div>` : ''}\r\n-        <div class=\"mt-1 text-[12px] text-gray-600\">${a.profissional || ''}</div>\r\n-        <div class=\"mt-1 text-[13px] text-gray-800 font-medium\">${money(a.valor)}</div>`;\r\n-      card.innerHTML = headHtml;\r\n-      card.appendChild(body);\r\n+      // === mesmo template do DIÁRIO ===\r\n+      const headerEl = document.createElement('div');\r\n+      headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n+      headerEl.innerHTML = `\r\n+        <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n+        ${renderStatusBadge(a.status)}\r\n+      `;\r\n \r\n+      const bodyEl = document.createElement('div');\r\n+      if (a.observacoes && String(a.observacoes).trim()) {\r\n+        const svc = document.createElement('div');\r\n+        svc.className = 'text-[13px] text-gray-600 clamp-2';\r\n+        svc.textContent = a.servico || '';\r\n+        const obs = document.createElement('div');\r\n+        obs.className = 'mt-1 text-[12px] text-gray-700 italic clamp-2';\r\n+        obs.textContent = String(a.observacoes).trim();\r\n+        bodyEl.appendChild(svc);\r\n+        bodyEl.appendChild(obs);\r\n+      } else {\r\n+        bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+        bodyEl.textContent = a.servico || '';\r\n+      }\r\n+\r\n+      const footerEl = document.createElement('div');\r\n+      footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+      const price = document.createElement('div');\r\n+      price.className = 'text-[13px] text-gray-800 font-medium';\r\n+      price.textContent = money(a.valor);\r\n+      footerEl.appendChild(price);\r\n+\r\n+      card.appendChild(headerEl);\r\n+      card.appendChild(bodyEl);\r\n+      card.appendChild(footerEl);\r\n+\r\n       cell.appendChild(card);\r\n       placed++;\r\n     }\r\n \r\n"
                },
                {
                    "date": 1757598029307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -726,70 +726,100 @@\n     updateHeaderLabel();\r\n \r\n     clearChildren(agendaList);\r\n \r\n+    // cabeçalho: seg a dom\r\n     const weekDays = ['Seg','Ter','Qua','Qui','Sex','Sáb','Dom'];\r\n     const header = document.createElement('div');\r\n     header.style.display = 'grid';\r\n     header.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n     header.className = 'sticky top-0 z-20 bg-white border-b';\r\n-    header.innerHTML = weekDays.map(d => `<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${d}</div>`).join('');\r\n+    header.innerHTML = weekDays.map(d=>`<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${d}</div>`).join('');\r\n     agendaList.appendChild(header);\r\n \r\n+    // calcular início da grade (segunda da semana que contém o dia 1)\r\n     const startGrid = startOfWeek(m0);\r\n-    const days = Array.from({ length: 42 }, (_, i) => addDays(startGrid, i)); // 6 semanas\r\n+    const days = Array.from({length:42},(_,i)=> addDays(startGrid,i)); // 6 semanas\r\n \r\n     const grid = document.createElement('div');\r\n     grid.style.display = 'grid';\r\n     grid.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n     agendaList.appendChild(grid);\r\n \r\n-    const appts = (state.agendamentos || []).slice().sort((a,b) => (new Date(a.h || a.scheduledAt)) - (new Date(b.h || b.scheduledAt)));\r\n+    // usar FILTRO + AGRUPAR por data local\r\n+    const items = getFilteredAgendamentos((state.agendamentos||[]).slice().sort((a,b)=>(new Date(a.h||a.scheduledAt))-(new Date(b.h||b.scheduledAt))));\r\n     const byDay = new Map();\r\n-    for (const a of appts) {\r\n-      const d = normalizeDate(new Date(a.h || a.scheduledAt).toISOString());\r\n-      if (!byDay.has(d)) byDay.set(d, []);\r\n-      byDay.get(d).push(a);\r\n+    for (const a of items) {\r\n+      const d = localDateStr(new Date(a.h || a.scheduledAt));  // <— data local\r\n+      if (d >= m0 && d < m1) {\r\n+        if (!byDay.has(d)) byDay.set(d, []);\r\n+        byDay.get(d).push(a);\r\n+      }\r\n     }\r\n \r\n-    days.forEach(d => {\r\n-      const inMonth = (d >= m0 && d < m1);\r\n+    days.forEach(d=>{\r\n+      const inMonth = (d>=m0 && d<m1);\r\n       const cell = document.createElement('div');\r\n-      cell.className = `min-h-[140px] border p-2 ${inMonth ? 'bg-white' : 'bg-slate-50'}`;\r\n+      cell.className = `min-h-[160px] border p-2 ${inMonth? 'bg-white':'bg-slate-50'}`;\r\n \r\n       const title = document.createElement('div');\r\n-      title.className = `flex items-center justify-between text-xs ${inMonth ? 'text-slate-700' : 'text-slate-400'}`;\r\n-      const dayNum = new Date(d + 'T00:00:00').getDate();\r\n+      title.className = `flex items-center justify-between text-xs ${inMonth?'text-slate-700':'text-slate-400'}`;\r\n+      const dayNum = new Date(d+'T00:00:00').getDate();\r\n       title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n \r\n       const list = document.createElement('div');\r\n       list.className = 'mt-1 space-y-1';\r\n \r\n-      const items = (byDay.get(d) || []).filter(a => d >= m0 && d < m1);\r\n-      items.forEach((a, idx) => {\r\n-        const time = new Date(a.h || a.scheduledAt);\r\n-        const hhmm = `${pad(time.getHours())}:${String(time.getMinutes()).padStart(2,'0')}`;\r\n+      const itemsDay = byDay.get(d) || [];\r\n+      itemsDay.forEach((a, idx)=>{\r\n         const meta = statusMeta(a.status);\r\n+        const card = document.createElement('div');\r\n+        card.setAttribute('data-appointment-id', a._id || '');\r\n+        card.style.setProperty('--stripe', meta.stripe);\r\n+        card.style.setProperty('--card-max-w', '100%');            // <— ajusta tamanho p/ coluna mensal\r\n+        card.className = `agenda-card border ${meta.borderClass} cursor-move select-none`;\r\n+        card.setAttribute('draggable', 'true');\r\n \r\n-        const row = document.createElement('div');\r\n-        row.className = `rounded border ${meta.borderClass} px-2 py-1 text-[12px] agenda-card`;\r\n-        row.setAttribute('data-appointment-id', a._id || '');\r\n-        row.innerHTML = `\r\n-          <div class=\"flex justify-between gap-2\">\r\n-            <span class=\"font-medium\">${hhmm}</span>\r\n-            ${renderStatusBadge(a.status)}\r\n-          </div>\r\n-          <div class=\"truncate\">${a.pet || ''} • ${a.servico || ''}</div>\r\n-          <div class=\"flex justify-between text-[11px] text-slate-600\">\r\n-            <span>${a.profissional || ''}</span>\r\n-            <span class=\"font-medium\">${money(a.valor)}</span>\r\n-          </div>`;\r\n-        list.appendChild(row);\r\n+        // === mesmo template do DIÁRIO ===\r\n+        const headerEl = document.createElement('div');\r\n+        headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n+        headerEl.innerHTML = `\r\n+          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n+          ${renderStatusBadge(a.status)}\r\n+        `;\r\n \r\n-        if (idx >= 4 && items.length > 6) {\r\n+        const bodyEl = document.createElement('div');\r\n+        if (a.observacoes && String(a.observacoes).trim()) {\r\n+          const svc = document.createElement('div');\r\n+          svc.className = 'text-[13px] text-gray-600 clamp-2';\r\n+          svc.textContent = a.servico || '';\r\n+          const obs = document.createElement('div');\r\n+          obs.className = 'mt-1 text-[12px] text-gray-700 italic clamp-2';\r\n+          obs.textContent = String(a.observacoes).trim();\r\n+          bodyEl.appendChild(svc);\r\n+          bodyEl.appendChild(obs);\r\n+        } else {\r\n+          bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+          bodyEl.textContent = a.servico || '';\r\n+        }\r\n+\r\n+        const footerEl = document.createElement('div');\r\n+        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+        const price = document.createElement('div');\r\n+        price.className = 'text-[13px] text-gray-800 font-medium';\r\n+        price.textContent = money(a.valor);\r\n+        footerEl.appendChild(price);\r\n+\r\n+        card.appendChild(headerEl);\r\n+        card.appendChild(bodyEl);\r\n+        card.appendChild(footerEl);\r\n+\r\n+        list.appendChild(card);\r\n+\r\n+        if (idx>=5 && itemsDay.length>6) {\r\n           const more = document.createElement('div');\r\n           more.className = 'text-[11px] text-slate-500';\r\n-          more.textContent = `+${items.length - 5} itens`;\r\n+          more.textContent = `+${itemsDay.length-6} itens`;\r\n           list.appendChild(more);\r\n           return;\r\n         }\r\n       });\r\n"
                },
                {
                    "date": 1757599273774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -748,9 +748,9 @@\n     // usar FILTRO + AGRUPAR por data local\r\n     const items = getFilteredAgendamentos((state.agendamentos||[]).slice().sort((a,b)=>(new Date(a.h||a.scheduledAt))-(new Date(b.h||b.scheduledAt))));\r\n     const byDay = new Map();\r\n     for (const a of items) {\r\n-      const d = localDateStr(new Date(a.h || a.scheduledAt));  // <— data local\r\n+      const d = localDateStr(new Date(a.h || a.scheduledAt));\r\n       if (d >= m0 && d < m1) {\r\n         if (!byDay.has(d)) byDay.set(d, []);\r\n         byDay.get(d).push(a);\r\n       }\r\n@@ -758,12 +758,12 @@\n \r\n     days.forEach(d=>{\r\n       const inMonth = (d>=m0 && d<m1);\r\n       const cell = document.createElement('div');\r\n-      cell.className = `min-h-[160px] border p-2 ${inMonth? 'bg-white':'bg-slate-50'}`;\r\n+      cell.className = `min-h-[140px] border p-2 ${inMonth? 'bg-white':'bg-slate-50'}`; // min-h menor\r\n \r\n       const title = document.createElement('div');\r\n-      title.className = `flex items-center justify-between text-xs ${inMonth?'text-slate-700':'text-slate-400'}`;\r\n+      title.className = `flex items-center justify-between text-[11px] ${inMonth?'text-slate-700':'text-slate-400'}`;\r\n       const dayNum = new Date(d+'T00:00:00').getDate();\r\n       title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n \r\n       const list = document.createElement('div');\r\n@@ -771,42 +771,53 @@\n \r\n       const itemsDay = byDay.get(d) || [];\r\n       itemsDay.forEach((a, idx)=>{\r\n         const meta = statusMeta(a.status);\r\n+        const when = new Date(a.h || a.scheduledAt);\r\n+        const hhmm = `${pad(when.getHours())}:${String(when.getMinutes()).padStart(2,'0')}`;\r\n+\r\n         const card = document.createElement('div');\r\n         card.setAttribute('data-appointment-id', a._id || '');\r\n         card.style.setProperty('--stripe', meta.stripe);\r\n-        card.style.setProperty('--card-max-w', '100%');            // <— ajusta tamanho p/ coluna mensal\r\n-        card.className = `agenda-card border ${meta.borderClass} cursor-move select-none`;\r\n+        card.style.setProperty('--card-max-w', '100%');\r\n+        card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n         card.setAttribute('draggable', 'true');\r\n+        card.title = [\r\n+          a.pet || '',\r\n+          a.servico || '',\r\n+          (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n+        ].filter(Boolean).join(' • '); // tooltip exibe tudo sem poluir o card\r\n \r\n-        // === mesmo template do DIÁRIO ===\r\n+        // Header denso: horário à esquerda + status à direita\r\n         const headerEl = document.createElement('div');\r\n-        headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n+        headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n         headerEl.innerHTML = `\r\n-          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n-          ${renderStatusBadge(a.status)}\r\n+          <div class=\"flex items-center gap-2\">\r\n+            <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n+            <span class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</span>\r\n+          </div>\r\n+          ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n         `;\r\n \r\n+        // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n         const bodyEl = document.createElement('div');\r\n+        const svc = document.createElement('div');\r\n+        svc.className = 'text-[12px] text-gray-600 truncate';     // 1 linha\r\n+        svc.textContent = a.servico || '';\r\n+        bodyEl.appendChild(svc);\r\n+\r\n         if (a.observacoes && String(a.observacoes).trim()) {\r\n-          const svc = document.createElement('div');\r\n-          svc.className = 'text-[13px] text-gray-600 clamp-2';\r\n-          svc.textContent = a.servico || '';\r\n           const obs = document.createElement('div');\r\n-          obs.className = 'mt-1 text-[12px] text-gray-700 italic clamp-2';\r\n+          obs.className = 'text-[11px] text-gray-700 italic truncate'; // 1 linha\r\n           obs.textContent = String(a.observacoes).trim();\r\n-          bodyEl.appendChild(svc);\r\n           bodyEl.appendChild(obs);\r\n-        } else {\r\n-          bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n-          bodyEl.textContent = a.servico || '';\r\n         }\r\n \r\n+        // Rodapé enxuto: valor à direita\r\n         const footerEl = document.createElement('div');\r\n-        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+        footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n         const price = document.createElement('div');\r\n-        price.className = 'text-[13px] text-gray-800 font-medium';\r\n+        price.className = 'text-[12px] text-gray-800 font-semibold';\r\n         price.textContent = money(a.valor);\r\n         footerEl.appendChild(price);\r\n \r\n         card.appendChild(headerEl);\r\n@@ -814,9 +825,10 @@\n         card.appendChild(footerEl);\r\n \r\n         list.appendChild(card);\r\n \r\n-        if (idx>=5 && itemsDay.length>6) {\r\n+        // Limitar o excesso visual\r\n+        if (idx>=6 && itemsDay.length>7) {\r\n           const more = document.createElement('div');\r\n           more.className = 'text-[11px] text-slate-500';\r\n           more.textContent = `+${itemsDay.length-6} itens`;\r\n           list.appendChild(more);\r\n"
                },
                {
                    "date": 1757599603733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -628,78 +628,88 @@\n     body.style.display = 'grid';\r\n     body.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n     agendaList.appendChild(body);\r\n \r\n-    // linhas por hora\r\n+    // Linhas por hora\r\n     hours.forEach(hh => {\r\n-      const hourNumber = parseInt(hh.slice(0,2),10);\r\n-      const inBusiness = (hourNumber>=BUSINESS_START && hourNumber< BUSINESS_END);\r\n+      const hNum = parseInt(hh.slice(0,2),10);\r\n+      const inBusiness = (hNum>=BUSINESS_START && hNum< BUSINESS_END);\r\n \r\n       const timeCell = document.createElement('div');\r\n       timeCell.className = `px-2 py-2 border-b text-[12px] ${inBusiness?'text-slate-800':'text-slate-400'}`;\r\n       timeCell.textContent = hh;\r\n       body.appendChild(timeCell);\r\n \r\n       days.forEach(d=>{\r\n         const cell = document.createElement('div');\r\n-        cell.className = `px-2 py-2 border-b agenda-slot`;\r\n+        cell.className = 'px-2 py-2 border-b agenda-slot';\r\n         cell.dataset.day = d;\r\n         cell.dataset.hh  = hh;\r\n         body.appendChild(cell);\r\n       });\r\n     });\r\n \r\n-    // posiciona cartões (AGORA com filtro aplicado + data local)\r\n+    // Posiciona cartões (compactos)\r\n     const items = getFilteredAgendamentos(state.agendamentos || []);\r\n     let placed = 0;\r\n \r\n     for (const a of items) {\r\n       const when = a.h || a.scheduledAt;\r\n       if (!when) continue;\r\n \r\n       const dt     = new Date(when);\r\n-      const dayStr = localDateStr(dt);               // <— usa DATA LOCAL\r\n+      const dayStr = localDateStr(dt); // data local evita deslocamento de fuso\r\n       if (dayStr < days[0] || dayStr > days[6]) continue;\r\n \r\n       const hh = `${pad(dt.getHours())}:00`;\r\n       const cell = agendaList.querySelector(`div[data-day=\"${dayStr}\"][data-hh=\"${hh}\"]`);\r\n       if (!cell) continue;\r\n \r\n       const meta = statusMeta(a.status);\r\n+      const hhmm = `${pad(dt.getHours())}:${String(dt.getMinutes()).padStart(2,'0')}`;\r\n+\r\n       const card = document.createElement('div');\r\n       card.setAttribute('data-appointment-id', a._id || '');\r\n       card.style.setProperty('--stripe', meta.stripe);\r\n-      card.style.setProperty('--card-max-w', '100%');               // <— ajusta tamanho p/ coluna semanal\r\n-      card.className = `agenda-card border ${meta.borderClass} cursor-move select-none`;\r\n+      card.style.setProperty('--card-max-w', '100%');                       // ocupa a coluna\r\n+      card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n       card.setAttribute('draggable', 'true');\r\n+      card.title = [\r\n+        a.pet || '',\r\n+        a.servico || '',\r\n+        (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n+      ].filter(Boolean).join(' • ');\r\n \r\n-      // === mesmo template do DIÁRIO ===\r\n+      // Header denso: horário + pet + status (badge menor)\r\n       const headerEl = document.createElement('div');\r\n-      headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n+      headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n       headerEl.innerHTML = `\r\n-        <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n-        ${renderStatusBadge(a.status)}\r\n+        <div class=\"flex items-center gap-2\">\r\n+          <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n+          <span class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</span>\r\n+        </div>\r\n+        ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n       `;\r\n \r\n+      // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n       const bodyEl = document.createElement('div');\r\n+      const svc = document.createElement('div');\r\n+      svc.className = 'text-[12px] text-gray-600 truncate';\r\n+      svc.textContent = a.servico || '';\r\n+      bodyEl.appendChild(svc);\r\n+\r\n       if (a.observacoes && String(a.observacoes).trim()) {\r\n-        const svc = document.createElement('div');\r\n-        svc.className = 'text-[13px] text-gray-600 clamp-2';\r\n-        svc.textContent = a.servico || '';\r\n         const obs = document.createElement('div');\r\n-        obs.className = 'mt-1 text-[12px] text-gray-700 italic clamp-2';\r\n+        obs.className = 'text-[11px] text-gray-700 italic truncate';\r\n         obs.textContent = String(a.observacoes).trim();\r\n-        bodyEl.appendChild(svc);\r\n         bodyEl.appendChild(obs);\r\n-      } else {\r\n-        bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n-        bodyEl.textContent = a.servico || '';\r\n       }\r\n \r\n+      // Rodapé: valor à direita\r\n       const footerEl = document.createElement('div');\r\n-      footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+      footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n       const price = document.createElement('div');\r\n-      price.className = 'text-[13px] text-gray-800 font-medium';\r\n+      price.className = 'text-[12px] text-gray-800 font-semibold';\r\n       price.textContent = money(a.valor);\r\n       footerEl.appendChild(price);\r\n \r\n       card.appendChild(headerEl);\r\n"
                },
                {
                    "date": 1757600108723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,8 +339,18 @@\n     const dd = String(d.getDate()).padStart(2, '0');\r\n     return `${y}-${m}-${dd}`;\r\n   }\r\n \r\n+  // === NOVO: abrevia tutor para \"Primeiro Sob..\" ===\r\n+  function shortTutorName(name) {\r\n+    if (!name) return '';\r\n+    const parts = String(name).trim().split(/\\s+/);\r\n+    const cap = s => s ? (s[0].toUpperCase() + s.slice(1).toLowerCase()) : '';\r\n+    const first = cap(parts[0] || '');\r\n+    const second = parts[1] ? cap(parts[1]).slice(0, 3) : '';\r\n+    return second ? `${first} ${second}..` : first;\r\n+  }\r\n+\r\n   function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n   function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n   function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n \r\n"
                },
                {
                    "date": 1757600157436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -561,12 +561,15 @@\n         card.className = `agenda-card border ${meta.borderClass} cursor-move select-none`;\r\n         card.setAttribute('draggable', 'true');\r\n \r\n         const headerEl = document.createElement('div');\r\n-        // reserva espaço à direita para os botões flutuantes (evita o chip “ficar por baixo”)\r\n         headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n+\r\n+        const tutorShort = shortTutorName(a.tutor || '');\r\n+        const headLabel = tutorShort ? `${tutorShort} | ${a.pet || ''}` : (a.pet || '');\r\n+\r\n         headerEl.innerHTML = `\r\n-          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</div>\r\n+          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${headLabel}\">${headLabel}</div>\r\n           ${renderStatusBadge(a.status)}\r\n         `;\r\n \r\n         const bodyEl = document.createElement('div');\r\n"
                },
                {
                    "date": 1757600728507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2050 @@\n+(function () {\r\n+  // Helper para requisições com token\r\n+  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n+  function api(url, opts = {}) {\r\n+    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n+      ...opts,\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        ...(opts.headers || {}),\r\n+        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Elements\r\n+  const agendaList = document.getElementById('agenda-list');\r\n+  const dateInput = document.getElementById('agenda-date');\r\n+  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n+  const viewSelect = document.getElementById('agenda-view');\r\n+  const addBtn = document.getElementById('add-service-btn');\r\n+  const storeSelect = document.getElementById('agenda-store');\r\n+  const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n+\r\n+  // Modal (reutilizado p/ adicionar e editar)\r\n+  const modal = document.getElementById('modal-add-servico');\r\n+  const modalClose = document.getElementById('modal-add-close');\r\n+  const modalCancel = document.getElementById('modal-add-cancel');\r\n+  const modalSave = document.getElementById('modal-add-save');\r\n+  const modalDelete = document.getElementById('modal-add-delete');\r\n+\r\n+  const addStoreSelect = document.getElementById('add-store-select');\r\n+  const addDateInput   = document.getElementById('add-date');\r\n+  const statusSelect   = document.getElementById('add-status');\r\n+\r\n+  const cliInput = document.getElementById('add-cli-input');\r\n+  const cliSug = document.getElementById('add-cli-sug');\r\n+  const petSelect = document.getElementById('add-pet-select');\r\n+  const servInput   = document.getElementById('add-serv-input');\r\n+  const servSug     = document.getElementById('add-serv-sug');\r\n+  const valorInput  = document.getElementById('add-valor');\r\n+  const addServAddBtn = document.getElementById('add-serv-add-btn');\r\n+  const servListUL  = document.getElementById('add-serv-list');\r\n+  const servTotalEl = document.getElementById('add-serv-total');\r\n+  const obsInput   = document.getElementById('add-observacoes');\r\n+  const horaInput   = document.getElementById('add-hora');\r\n+  const profSelect  = document.getElementById('add-prof-select');\r\n+\r\n+  // State\r\n+  const FILTER_STORAGE_KEY = 'agenda_filters_v1';\r\n+\r\n+  const state = {\r\n+    stores: [],\r\n+    profissionais: [],\r\n+    agendamentos: [],\r\n+    selectedStoreId: null,\r\n+    selectedCliente: null,\r\n+    selectedServico: null,\r\n+    tempServicos: [],\r\n+    editing: null,\r\n+    lastSnapshotHash: '',\r\n+    __didInitialScroll: false,\r\n+    view: 'day',\r\n+    filters: {                 // filtros persistentes\r\n+      statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n+      profIds: new Set()       // _id dos profissionais\r\n+    }\r\n+  };\r\n+\r\n+  function loadFiltersFromStorage() {\r\n+    try {\r\n+      const raw = JSON.parse(localStorage.getItem(FILTER_STORAGE_KEY) || 'null');\r\n+      if (raw && typeof raw === 'object') {\r\n+        state.filters.statuses = new Set(Array.isArray(raw.statuses) ? raw.statuses : []);\r\n+        state.filters.profIds  = new Set(Array.isArray(raw.profIds)  ? raw.profIds  : []);\r\n+      }\r\n+    } catch(_) {}\r\n+  }\r\n+  function saveFiltersToStorage() {\r\n+    try {\r\n+      localStorage.setItem(FILTER_STORAGE_KEY, JSON.stringify({\r\n+        statuses: Array.from(state.filters.statuses),\r\n+        profIds : Array.from(state.filters.profIds)\r\n+      }));\r\n+    } catch(_) {}\r\n+  }\r\n+\r\n+  function ensureToolbar() {\r\n+    if (!agendaList) return;\r\n+    if (document.getElementById('agenda-toolbar')) return;\r\n+\r\n+    const bar = document.createElement('div');\r\n+    bar.id = 'agenda-toolbar';\r\n+    // sticky sob o cabeçalho; leve blur para legibilidade; borda inferior discreta\r\n+    bar.className = 'sticky top-0 z-30 bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/60 border-b border-slate-200 mb-2 flex flex-col gap-2 px-3 py-2 rounded-lg';\r\n+\r\n+    // KPIs\r\n+    const kpis = document.createElement('div');\r\n+    kpis.id = 'agenda-kpis';\r\n+    kpis.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(kpis);\r\n+\r\n+    // Filtros\r\n+    const filters = document.createElement('div');\r\n+    filters.id = 'agenda-filters';\r\n+    filters.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(filters);\r\n+\r\n+    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n+  }\r\n+\r\n+  function computeKPIs(items) {\r\n+    const total = items.length;\r\n+    const previsto = items.reduce((s, i) => s + Number(i.valor || 0), 0);\r\n+    const recebido = items.reduce((s, i) => s + (i.pago ? Number(i.valor || 0) : 0), 0);\r\n+    const pendente = previsto - recebido;\r\n+    return { total, previsto, recebido, pendente };\r\n+  }\r\n+\r\n+  function renderKpis() {\r\n+    const wrap = document.getElementById('agenda-kpis');\r\n+    if (!wrap) return;\r\n+\r\n+    const all = state.agendamentos || [];\r\n+    const f = getFilteredAgendamentos();   // filtrados atuais\r\n+    const kAll = computeKPIs(all);\r\n+    const kF   = computeKPIs(f);\r\n+\r\n+    const totalLabel = state.view === 'week' ? 'Total semana' : (state.view === 'month' ? 'Total mês' : 'Total dia');\r\n+    wrap.innerHTML = `\r\n+      <div class=\"kpi-chip\">${totalLabel}: <strong>${kAll.total}</strong></div>\r\n+      <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n+      <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n+      <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n+      ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n+          ? `<div class=\"kpi-chip kpi-muted\">Filtrados: <strong>${kF.total}</strong></div>` : '' }\r\n+    `;\r\n+  }\r\n+\r\n+  function renderFilters() {\r\n+    const el = document.getElementById('agenda-filters');\r\n+    if (!el) return;\r\n+\r\n+    // contadores por status\r\n+    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const key = String(a.status || 'agendado')\r\n+        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n+      if (counts[key] !== undefined) counts[key] += 1;\r\n+    }\r\n+\r\n+    // contadores por profissional\r\n+    const byProf = new Map();\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n+      if (!id) continue;\r\n+      const key = String(id);\r\n+      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n+    }\r\n+\r\n+    const statuses = [\r\n+      {key:'agendado', label:'Agend.'},\r\n+      {key:'em_espera', label:'Espera'},\r\n+      {key:'em_atendimento', label:'Atend.'},\r\n+      {key:'finalizado', label:'Fim.'}\r\n+    ];\r\n+\r\n+    // chips de status\r\n+    const chipsStatus = statuses.map(s => {\r\n+      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n+      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n+                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    // chips de profissional (apenas os que existem)\r\n+    const chipsProf = (state.profissionais || []).map(p => {\r\n+      const id = String(p._id);\r\n+      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n+      const n = byProf.get(id) || 0;\r\n+      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n+                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n+      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n+\r\n+    el.innerHTML = `\r\n+      <div class=\"flex flex-wrap items-center gap-2\">\r\n+        ${chipsStatus}\r\n+        <span class=\"chip-sep\"></span>\r\n+        ${chipsProf}\r\n+        ${clearBtn}\r\n+      </div>\r\n+    `;\r\n+\r\n+    // handlers\r\n+    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n+      btn.addEventListener('click', () => {\r\n+        const type = btn.getAttribute('data-filter');\r\n+        const val  = btn.getAttribute('data-value');\r\n+        if (type === 'status') {\r\n+          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n+        } else if (type === 'prof') {\r\n+          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n+        }\r\n+        saveFiltersToStorage();\r\n+        renderFilters();\r\n+        renderKpis();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      });\r\n+    });\r\n+\r\n+    const clear = document.getElementById('chip-clear');\r\n+    if (clear) clear.addEventListener('click', () => {\r\n+      state.filters.statuses.clear();\r\n+      state.filters.profIds.clear();\r\n+      saveFiltersToStorage();\r\n+      renderFilters();\r\n+      renderKpis();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    });\r\n+  }\r\n+\r\n+  function normalizeStatus(s) {\r\n+    return String(s || 'agendado')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n+  }\r\n+\r\n+  function getFilteredAgendamentos() {\r\n+    const hasStatus = state.filters.statuses.size > 0;\r\n+    const hasProf   = state.filters.profIds.size   > 0;\r\n+\r\n+    if (!hasStatus && !hasProf) return state.agendamentos || [];\r\n+\r\n+    const byNameAll = new Map(\r\n+      (state.profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n+    );\r\n+\r\n+    return (state.agendamentos || []).filter(a => {\r\n+      let ok = true;\r\n+      if (hasStatus) ok = ok && state.filters.statuses.has(normalizeStatus(a.status));\r\n+      if (hasProf) {\r\n+        let pid = a.profissionalId ? String(a.profissionalId) : null;\r\n+        if (!pid) {\r\n+          let nc = '';\r\n+          if (typeof a.profissional === 'string') nc = a.profissional;\r\n+          else if (a.profissional && typeof a.profissional === 'object') {\r\n+            nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n+                a.profissional.razaoSocial || a.profissional.nome || '';\r\n+          }\r\n+          pid = byNameAll.get(String(nc).trim().toLowerCase()) || null;\r\n+        }\r\n+        ok = ok && pid && state.filters.profIds.has(String(pid));\r\n+      }\r\n+      return ok;\r\n+    });\r\n+  }\r\n+\r\n+  function getVisibleProfissionais() {\r\n+    const profs = state.profissionais || [];\r\n+    if (!state.filters.profIds.size) return profs;\r\n+    return profs.filter(p => state.filters.profIds.has(String(p._id)));\r\n+  }\r\n+\r\n+  // Helpers de data e utilitários\r\n+  function todayStr() {\r\n+    // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n+    const d = new Date();\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n+  function buildLocalDateTime(dateStr, hhmm) {\r\n+    let y, m, d;\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) { [d, m, y] = dateStr.split('/').map(Number); }\r\n+    else { [y, m, d] = dateStr.split('-').map(Number); }\r\n+    const [hh, mm] = (hhmm || '00:00').split(':').map(Number);\r\n+    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n+  }\r\n+  function normalizeDate(v) {\r\n+    if (!v) return todayStr();\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n+    return v;\r\n+  }\r\n+\r\n+  // ==== NOVO: utilitários de intervalo e label ====\r\n+  function startOfWeek(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    const dow = (d.getDay() + 6) % 7; // 0 = seg\r\n+    d.setDate(d.getDate() - dow);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function addDays(dateStr, n) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(d.getDate() + n);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function startOfMonth(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(1);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function startOfNextMonth(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(1);\r\n+    d.setMonth(d.getMonth() + 1);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function updateHeaderLabel() {\r\n+    if (!dateLabelVisible) return;\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    if (state.view === 'week') {\r\n+      const ini = startOfWeek(base);\r\n+      const fim = addDays(ini, 6);\r\n+      const li = new Date(ini + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      const lf = new Date(fim + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      dateLabelVisible.textContent = `${li} a ${lf}`;\r\n+    } else if (state.view === 'month') {\r\n+      const m0 = startOfMonth(base);\r\n+      const dt = new Date(m0 + 'T00:00:00');\r\n+      const label = dt.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });\r\n+      dateLabelVisible.textContent = label.charAt(0).toUpperCase() + label.slice(1);\r\n+    } else {\r\n+      dateLabelVisible.textContent = new Date(base + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+    }\r\n+  }\r\n+  function localDateStr(d) {\r\n+    const y = d.getFullYear();\r\n+    const m = String(d.getMonth() + 1).padStart(2, '0');\r\n+    const dd = String(d.getDate()).padStart(2, '0');\r\n+    return `${y}-${m}-${dd}`;\r\n+  }\r\n+\r\n+  // === NOVO: abrevia tutor para \"Primeiro Sob..\" ===\r\n+  function shortTutorName(name) {\r\n+    if (!name) return '';\r\n+    const parts = String(name).trim().split(/\\s+/);\r\n+    const cap = s => s ? (s[0].toUpperCase() + s.slice(1).toLowerCase()) : '';\r\n+    const preps = new Set(['da','de','do','das','dos','e']);\r\n+    const first = cap(parts[0] || '');\r\n+    let second = '';\r\n+    for (let i = 1; i < parts.length; i++) {\r\n+      const w = parts[i];\r\n+      if (!preps.has(w.toLowerCase())) { second = w; break; }\r\n+    }\r\n+    const secondAbbr = second ? cap(second).slice(0, 3) : '';\r\n+    return secondAbbr ? `${first} ${secondAbbr}..` : first;\r\n+  }\r\n+\r\n+  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n+  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n+  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n+\r\n+  // Stores\r\n+  async function loadStores() {\r\n+    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.stores = Array.isArray(list) ? list : [];\r\n+    if (storeSelect) {\r\n+      storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+    }\r\n+    if (!state.selectedStoreId && state.stores[0]) {\r\n+      state.selectedStoreId = state.stores[0]._id;\r\n+      if (storeSelect) storeSelect.value = state.selectedStoreId;\r\n+    }\r\n+    updateStoreLabel();\r\n+  }\r\n+  function updateStoreLabel() {\r\n+    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n+    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n+    const vis = document.getElementById('agenda-store-label-visible');\r\n+    if (vis) vis.textContent = s ? s.nome : '—';\r\n+  }\r\n+\r\n+  // Profissionais\r\n+  async function populateModalProfissionais(storeId, preselectId) {\r\n+    try {\r\n+      if (!storeId || !profSelect) return;\r\n+      const resp = await api(`/func/profissionais/esteticistas?storeId=${storeId}`);\r\n+      const list = await resp.json().catch(() => []);\r\n+      const arr = Array.isArray(list) ? list : [];\r\n+      profSelect.innerHTML = arr.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+      const pid = preselectId ? String(preselectId) : '';\r\n+      if (pid && arr.some(p => String(p._id) === pid)) {\r\n+        profSelect.value = pid;\r\n+      } else if (arr[0]) {\r\n+        profSelect.value = String(arr[0]._id);\r\n+      }\r\n+    } catch (_) { /* silencioso no modal */ }\r\n+  }\r\n+\r\n+  // Agendamentos\r\n+  async function loadAgendamentos() {\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    const date = base; // compat: alguns trechos antigos ainda usam \"date\"\r\n+    let url = '';\r\n+\r\n+    if (state.view === 'week') {\r\n+      const ini = startOfWeek(base);\r\n+      const fim = addDays(ini, 7); // exclusivo\r\n+      url = `/func/agendamentos/range?start=${ini}&end=${fim}&storeId=${state.selectedStoreId}`;\r\n+    } else if (state.view === 'month') {\r\n+      const m0 = startOfMonth(base);\r\n+      const m1 = startOfNextMonth(base); // exclusivo\r\n+      url = `/func/agendamentos/range?start=${m0}&end=${m1}&storeId=${state.selectedStoreId}`;\r\n+    } else {\r\n+      url = `/func/agendamentos?date=${base}&storeId=${state.selectedStoreId}`;\r\n+    }\r\n+\r\n+    try {\r\n+      const resp = await api(url);\r\n+      if (!resp.ok) {\r\n+        const txt = await resp.text();\r\n+        console.error('GET', url, '->', resp.status, txt);\r\n+        state.agendamentos = [];\r\n+        return;\r\n+      }\r\n+\r\n+      const list = await resp.json();\r\n+      state.agendamentos = Array.isArray(list) ? list : [];\r\n+\r\n+      // snapshot/label\r\n+      updateHeaderLabel();\r\n+      state.lastSnapshotHash = `${state.view}:${date}:${state.selectedStoreId || ''}:${state.agendamentos.length}`;\r\n+\r\n+      console.info('[Agenda]', 'view=', state.view, 'dataBase=', date, 'loja=', state.selectedStoreId, 'itens=', state.agendamentos.length);\r\n+    } catch (e) {\r\n+      console.error('Erro ao carregar agendamentos', e);\r\n+      state.agendamentos = [];\r\n+    }\r\n+  }\r\n+\r\n+  // Grade (sem coluna \"Outros\")\r\n+  function renderGrid() {\r\n+      if (!agendaList) return;\r\n+      if (state.view === 'week')  { renderWeekGrid();  return; }\r\n+      if (state.view === 'month') { renderMonthGrid(); return; }\r\n+\r\n+      // ===== Visão DIÁRIA (original) =====\r\n+      const date = normalizeDate(dateInput?.value || todayStr());\r\n+      updateHeaderLabel();\r\n+\r\n+      // janelas de trabalho (ajuste se quiser)\r\n+      const BUSINESS_START = 8;   // 08:00\r\n+      const BUSINESS_END   = 19;  // 19:00\r\n+\r\n+      const hours = [];\r\n+      for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+\r\n+      clearChildren(agendaList);\r\n+\r\n+      const profsAll  = state.profissionais || [];\r\n+      const profs     = getVisibleProfissionais();\r\n+      const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n+\r\n+      const colCount = 1 + (profs?.length || 0);\r\n+\r\n+      // Cabeçalho\r\n+      const header = document.createElement('div');\r\n+      header.style.display = 'grid';\r\n+      // >>> COLUNAS ELÁSTICAS: ocupam o espaço restante sem “vão” à direita\r\n+      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n+      header.className = 'bg-white border-b';\r\n+\r\n+      const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n+      headLabels.forEach((label, idx) => {\r\n+        const cell = document.createElement('div');\r\n+        cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n+        if (idx === 0) {\r\n+          cell.textContent = label;\r\n+        }\r\n+        else {\r\n+          // >>> centraliza o nome do profissional\r\n+          cell.style.textAlign = 'center';\r\n+          const span = document.createElement('span');\r\n+          span.className = 'agenda-head-label inline-block';\r\n+          span.textContent = label || '';\r\n+          cell.dataset.profId = String(profs[idx - 1]._id);\r\n+          cell.appendChild(span);\r\n+        }\r\n+        header.appendChild(cell);\r\n+      });\r\n+\r\n+      const counter = document.createElement('div');\r\n+      counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n+      const itemsAll = state.agendamentos || [];\r\n+      const items    = getFilteredAgendamentos(itemsAll);\r\n+      const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n+      counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n+      header.appendChild(counter);\r\n+\r\n+      agendaList.appendChild(header);\r\n+\r\n+      // Corpo\r\n+      const body = document.createElement('div');\r\n+      body.style.display = 'grid';\r\n+      // >>> COLUNAS ELÁSTICAS: cada profissional tem no mínimo 360px e expande até preencher\r\n+      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n+      agendaList.appendChild(body);\r\n+\r\n+      const isToday = normalizeDate(date) === todayStr();\r\n+      const now = new Date();\r\n+      const nowHH = `${pad(now.getHours())}:00`;\r\n+\r\n+      hours.forEach(hh => {\r\n+        const hourNumber = parseInt(hh.split(':')[0], 10);\r\n+        const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n+        const isNowRow   = isToday && hh === nowHH;\r\n+\r\n+        // coluna de horário\r\n+        const timeCell = document.createElement('div');\r\n+        timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n+        timeCell.textContent = hh;\r\n+\r\n+        body.appendChild(timeCell);\r\n+\r\n+        // células por profissional\r\n+        (profs || []).forEach(p => {\r\n+          const cell = document.createElement('div');\r\n+          // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n+          cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n+          cell.dataset.profissionalId = String(p._id);\r\n+          cell.dataset.hh = hh;\r\n+          body.appendChild(cell);\r\n+        });\r\n+      });\r\n+\r\n+      // posiciona cartões\r\n+      let placed = 0;\r\n+      for (const a of items) {\r\n+        const when = a.h || a.scheduledAt;\r\n+        if (!when) continue;\r\n+\r\n+        const d  = new Date(when);\r\n+        const hh = `${pad(d.getHours())}:00`;\r\n+\r\n+        let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+        if (!profId) {\r\n+          let nameCandidate = '';\r\n+          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n+          else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n+          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n+          if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n+        }\r\n+        if (!profId) continue;\r\n+\r\n+        let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+        if (!col && profs[0]) {\r\n+          col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n+        }\r\n+        if (!col) continue;\r\n+\r\n+        const meta = statusMeta(a.status);\r\n+        const card = document.createElement('div');\r\n+        card.setAttribute('data-appointment-id', a._id || '');\r\n+        card.style.setProperty('--stripe', meta.stripe);\r\n+        card.style.setProperty('--card-max-w', '260px');\r\n+        card.className = `agenda-card border ${meta.borderClass} cursor-move select-none`;\r\n+        card.setAttribute('draggable', 'true');\r\n+\r\n+        const headerEl = document.createElement('div');\r\n+        // reserva espaço à direita para os botões flutuantes (evita o chip “ficar por baixo”)\r\n+        headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n+\r\n+        // usa o nome do cliente que já vem da API (clienteNome); fallback mantém o comportamento antigo\r\n+        const tutorShort = shortTutorName(a.clienteNome || '');\r\n+        const headLabel  = tutorShort ? `${tutorShort} | ${a.pet || ''}` : (a.pet || '');\r\n+\r\n+        headerEl.innerHTML = `\r\n+          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${headLabel}\">${headLabel}</div>\r\n+          ${renderStatusBadge(a.status)}\r\n+        `;\r\n+\r\n+        const bodyEl = document.createElement('div');\r\n+        if (a.observacoes && String(a.observacoes).trim()) {\r\n+          const svc = document.createElement('div');\r\n+          svc.className = 'text-[13px] text-gray-600 clamp-2';\r\n+          svc.textContent = a.servico || '';\r\n+          const obs = document.createElement('div');\r\n+          obs.className = 'mt-1 text-[12px] text-gray-700 italic clamp-2';\r\n+          obs.textContent = String(a.observacoes).trim();\r\n+          bodyEl.appendChild(svc);\r\n+          bodyEl.appendChild(obs);\r\n+        } else {\r\n+          bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+          bodyEl.textContent = a.servico || '';\r\n+        }\r\n+\r\n+        const footerEl = document.createElement('div');\r\n+        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+        const price = document.createElement('div');\r\n+        price.className = 'text-[13px] text-gray-800 font-medium';\r\n+        price.textContent = money(a.valor);\r\n+\r\n+        footerEl.appendChild(price);\r\n+\r\n+        card.appendChild(headerEl);\r\n+        card.appendChild(bodyEl);\r\n+        card.appendChild(footerEl);\r\n+\r\n+        col.appendChild(card);\r\n+        placed++;\r\n+      }\r\n+\r\n+      if (placed === 0) {\r\n+        const empty = document.createElement('div');\r\n+        empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n+        empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n+        agendaList.insertBefore(empty, header.nextSibling);\r\n+      }\r\n+  }\r\n+\r\n+  /** ===== NOVO: visão semanal ===== */\r\n+  function renderWeekGrid() {\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    const ini  = startOfWeek(base);\r\n+    const days = Array.from({ length: 7 }, (_, i) => addDays(ini, i));\r\n+    updateHeaderLabel();\r\n+\r\n+    clearChildren(agendaList);\r\n+\r\n+    // Cabeçalho: horários + 7 dias\r\n+    const BUSINESS_START = 8, BUSINESS_END = 19;\r\n+    const hours = []; for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+\r\n+    const header = document.createElement('div');\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n+    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n+    header.innerHTML = `\r\n+      <div class=\"px-2 py-2 text-xs text-slate-500\">Horário</div>\r\n+      ${days.map(d=>{\r\n+        const lab = new Date(d+'T00:00:00').toLocaleDateString('pt-BR', { weekday:'short', day:'2-digit', month:'2-digit' });\r\n+        return `<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${lab}</div>`;\r\n+      }).join('')}\r\n+    `;\r\n+    agendaList.appendChild(header);\r\n+\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n+    agendaList.appendChild(body);\r\n+\r\n+    // Linhas por hora\r\n+    hours.forEach(hh => {\r\n+      const hNum = parseInt(hh.slice(0,2),10);\r\n+      const inBusiness = (hNum>=BUSINESS_START && hNum< BUSINESS_END);\r\n+\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = `px-2 py-2 border-b text-[12px] ${inBusiness?'text-slate-800':'text-slate-400'}`;\r\n+      timeCell.textContent = hh;\r\n+      body.appendChild(timeCell);\r\n+\r\n+      days.forEach(d=>{\r\n+        const cell = document.createElement('div');\r\n+        cell.className = 'px-2 py-2 border-b agenda-slot';\r\n+        cell.dataset.day = d;\r\n+        cell.dataset.hh  = hh;\r\n+        body.appendChild(cell);\r\n+      });\r\n+    });\r\n+\r\n+    // Posiciona cartões (compactos)\r\n+    const items = getFilteredAgendamentos(state.agendamentos || []);\r\n+    let placed = 0;\r\n+\r\n+    for (const a of items) {\r\n+      const when = a.h || a.scheduledAt;\r\n+      if (!when) continue;\r\n+\r\n+      const dt     = new Date(when);\r\n+      const dayStr = localDateStr(dt); // data local evita deslocamento de fuso\r\n+      if (dayStr < days[0] || dayStr > days[6]) continue;\r\n+\r\n+      const hh = `${pad(dt.getHours())}:00`;\r\n+      const cell = agendaList.querySelector(`div[data-day=\"${dayStr}\"][data-hh=\"${hh}\"]`);\r\n+      if (!cell) continue;\r\n+\r\n+      const meta = statusMeta(a.status);\r\n+      const hhmm = `${pad(dt.getHours())}:${String(dt.getMinutes()).padStart(2,'0')}`;\r\n+\r\n+      const card = document.createElement('div');\r\n+      card.setAttribute('data-appointment-id', a._id || '');\r\n+      card.style.setProperty('--stripe', meta.stripe);\r\n+      card.style.setProperty('--card-max-w', '100%');                       // ocupa a coluna\r\n+      card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n+      card.setAttribute('draggable', 'true');\r\n+      card.title = [\r\n+        a.pet || '',\r\n+        a.servico || '',\r\n+        (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n+      ].filter(Boolean).join(' • ');\r\n+\r\n+      // Header denso: horário + pet + status (badge menor)\r\n+      const headerEl = document.createElement('div');\r\n+      headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+      headerEl.innerHTML = `\r\n+        <div class=\"flex items-center gap-2\">\r\n+          <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n+          <span class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</span>\r\n+        </div>\r\n+        ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n+      `;\r\n+\r\n+      // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n+      const bodyEl = document.createElement('div');\r\n+      const svc = document.createElement('div');\r\n+      svc.className = 'text-[12px] text-gray-600 truncate';\r\n+      svc.textContent = a.servico || '';\r\n+      bodyEl.appendChild(svc);\r\n+\r\n+      if (a.observacoes && String(a.observacoes).trim()) {\r\n+        const obs = document.createElement('div');\r\n+        obs.className = 'text-[11px] text-gray-700 italic truncate';\r\n+        obs.textContent = String(a.observacoes).trim();\r\n+        bodyEl.appendChild(obs);\r\n+      }\r\n+\r\n+      // Rodapé: valor à direita\r\n+      const footerEl = document.createElement('div');\r\n+      footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n+      const price = document.createElement('div');\r\n+      price.className = 'text-[12px] text-gray-800 font-semibold';\r\n+      price.textContent = money(a.valor);\r\n+      footerEl.appendChild(price);\r\n+\r\n+      card.appendChild(headerEl);\r\n+      card.appendChild(bodyEl);\r\n+      card.appendChild(footerEl);\r\n+\r\n+      cell.appendChild(card);\r\n+      placed++;\r\n+    }\r\n+\r\n+    if (placed === 0) {\r\n+      const empty = document.createElement('div');\r\n+      empty.className = 'p-6 text-sm text-slate-500';\r\n+      empty.textContent = 'Nenhum agendamento no intervalo.';\r\n+      agendaList.appendChild(empty);\r\n+    }\r\n+  }\r\n+\r\n+  /** ===== NOVO: visão mensal ===== */\r\n+  function renderMonthGrid() {\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    const m0   = startOfMonth(base);\r\n+    const m1   = startOfNextMonth(base); // exclusivo\r\n+    updateHeaderLabel();\r\n+\r\n+    clearChildren(agendaList);\r\n+\r\n+    // cabeçalho: seg a dom\r\n+    const weekDays = ['Seg','Ter','Qua','Qui','Sex','Sáb','Dom'];\r\n+    const header = document.createElement('div');\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n+    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n+    header.innerHTML = weekDays.map(d=>`<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${d}</div>`).join('');\r\n+    agendaList.appendChild(header);\r\n+\r\n+    // calcular início da grade (segunda da semana que contém o dia 1)\r\n+    const startGrid = startOfWeek(m0);\r\n+    const days = Array.from({length:42},(_,i)=> addDays(startGrid,i)); // 6 semanas\r\n+\r\n+    const grid = document.createElement('div');\r\n+    grid.style.display = 'grid';\r\n+    grid.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n+    agendaList.appendChild(grid);\r\n+\r\n+    // usar FILTRO + AGRUPAR por data local\r\n+    const items = getFilteredAgendamentos((state.agendamentos||[]).slice().sort((a,b)=>(new Date(a.h||a.scheduledAt))-(new Date(b.h||b.scheduledAt))));\r\n+    const byDay = new Map();\r\n+    for (const a of items) {\r\n+      const d = localDateStr(new Date(a.h || a.scheduledAt));\r\n+      if (d >= m0 && d < m1) {\r\n+        if (!byDay.has(d)) byDay.set(d, []);\r\n+        byDay.get(d).push(a);\r\n+      }\r\n+    }\r\n+\r\n+    days.forEach(d=>{\r\n+      const inMonth = (d>=m0 && d<m1);\r\n+      const cell = document.createElement('div');\r\n+      cell.className = `min-h-[140px] border p-2 ${inMonth? 'bg-white':'bg-slate-50'}`; // min-h menor\r\n+\r\n+      const title = document.createElement('div');\r\n+      title.className = `flex items-center justify-between text-[11px] ${inMonth?'text-slate-700':'text-slate-400'}`;\r\n+      const dayNum = new Date(d+'T00:00:00').getDate();\r\n+      title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n+\r\n+      const list = document.createElement('div');\r\n+      list.className = 'mt-1 space-y-1';\r\n+\r\n+      const itemsDay = byDay.get(d) || [];\r\n+      itemsDay.forEach((a, idx)=>{\r\n+        const meta = statusMeta(a.status);\r\n+        const when = new Date(a.h || a.scheduledAt);\r\n+        const hhmm = `${pad(when.getHours())}:${String(when.getMinutes()).padStart(2,'0')}`;\r\n+\r\n+        const card = document.createElement('div');\r\n+        card.setAttribute('data-appointment-id', a._id || '');\r\n+        card.style.setProperty('--stripe', meta.stripe);\r\n+        card.style.setProperty('--card-max-w', '100%');\r\n+        card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n+        card.setAttribute('draggable', 'true');\r\n+        card.title = [\r\n+          a.pet || '',\r\n+          a.servico || '',\r\n+          (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n+        ].filter(Boolean).join(' • '); // tooltip exibe tudo sem poluir o card\r\n+\r\n+        // Header denso: horário à esquerda + status à direita\r\n+        const headerEl = document.createElement('div');\r\n+        headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+        headerEl.innerHTML = `\r\n+          <div class=\"flex items-center gap-2\">\r\n+            <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n+            <span class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</span>\r\n+          </div>\r\n+          ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n+        `;\r\n+\r\n+        // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n+        const bodyEl = document.createElement('div');\r\n+        const svc = document.createElement('div');\r\n+        svc.className = 'text-[12px] text-gray-600 truncate';     // 1 linha\r\n+        svc.textContent = a.servico || '';\r\n+        bodyEl.appendChild(svc);\r\n+\r\n+        if (a.observacoes && String(a.observacoes).trim()) {\r\n+          const obs = document.createElement('div');\r\n+          obs.className = 'text-[11px] text-gray-700 italic truncate'; // 1 linha\r\n+          obs.textContent = String(a.observacoes).trim();\r\n+          bodyEl.appendChild(obs);\r\n+        }\r\n+\r\n+        // Rodapé enxuto: valor à direita\r\n+        const footerEl = document.createElement('div');\r\n+        footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n+        const price = document.createElement('div');\r\n+        price.className = 'text-[12px] text-gray-800 font-semibold';\r\n+        price.textContent = money(a.valor);\r\n+        footerEl.appendChild(price);\r\n+\r\n+        card.appendChild(headerEl);\r\n+        card.appendChild(bodyEl);\r\n+        card.appendChild(footerEl);\r\n+\r\n+        list.appendChild(card);\r\n+\r\n+        // Limitar o excesso visual\r\n+        if (idx>=6 && itemsDay.length>7) {\r\n+          const more = document.createElement('div');\r\n+          more.className = 'text-[11px] text-slate-500';\r\n+          more.textContent = `+${itemsDay.length-6} itens`;\r\n+          list.appendChild(more);\r\n+          return;\r\n+        }\r\n+      });\r\n+\r\n+      cell.appendChild(title);\r\n+      cell.appendChild(list);\r\n+      grid.appendChild(cell);\r\n+    });\r\n+  }\r\n+\r\n+  // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n+  function statusMeta(s) {\r\n+    // Normalização: acentos/maiúsculas/espaços/hífens\r\n+    const keyRaw = String(s || 'agendado')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n+\r\n+    const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+    const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n+\r\n+    // Paleta acessível (contraste AA) + info para faixa lateral e badge compacta\r\n+    const map = {\r\n+      agendado: {\r\n+        label: 'Agendado',\r\n+        short: 'Agend.',\r\n+        stripe: '#64748B',     // slate-500\r\n+        text: '#0F172A',       // slate-900\r\n+        badgeClass: 'bg-slate-100 text-slate-700 border border-slate-200',\r\n+        borderClass: 'border-slate-300'\r\n+      },\r\n+      em_espera: {\r\n+        label: 'Em espera',\r\n+        short: 'Espera',\r\n+        stripe: '#B45309',     // amber-700\r\n+        text: '#1F2937',       // gray-800\r\n+        badgeClass: 'bg-amber-50 text-amber-800 border border-amber-200',\r\n+        borderClass: 'border-amber-400'\r\n+      },\r\n+      em_atendimento: {\r\n+        label: 'Em atendimento',\r\n+        short: 'Atend.',\r\n+        stripe: '#1D4ED8',     // blue-700\r\n+        text: '#0B1235',\r\n+        badgeClass: 'bg-blue-50 text-blue-800 border border-blue-200',\r\n+        borderClass: 'border-blue-500'\r\n+      },\r\n+      finalizado: {\r\n+        label: 'Finalizado',\r\n+        short: 'Fim.',\r\n+        stripe: '#16A34A',     // green-600\r\n+        text: '#052E16',\r\n+        badgeClass: 'bg-green-50 text-green-800 border border-green-200',\r\n+        borderClass: 'border-green-500'\r\n+      }\r\n+    };\r\n+\r\n+    return map[k];\r\n+  }\r\n+\r\n+  function renderStatusBadge(s) {\r\n+    const { label, badgeClass } = statusMeta(s);\r\n+    // `whitespace-nowrap` garante que o chip não quebre em duas linhas\r\n+    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium whitespace-nowrap ${badgeClass}\">${label}</span>`;\r\n+  }\r\n+\r\n+  // Modal — modo adicionar\r\n+  function openAddModal() {\r\n+    state.editing = null;\r\n+    if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n+\r\n+    // Reset serviços temporários\r\n+    state.tempServicos = [];\r\n+    renderServicosLista();\r\n+    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n+\r\n+    // Campos editáveis habilitados\r\n+    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n+\r\n+    // Limpa estado/inputs\r\n+    state.selectedCliente = null;\r\n+    state.selectedServico = null;\r\n+    if (cliInput) { cliInput.value = ''; }\r\n+    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+    if (servInput) { servInput.value = ''; }\r\n+    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    if (valorInput) { valorInput.value = ''; }\r\n+    if (petSelect) { petSelect.innerHTML = ''; }\r\n+    if (obsInput) { obsInput.value = ''; }\r\n+\r\n+    // Empresa (usa as mesmas opções do seletor da página)\r\n+    if (addStoreSelect) {\r\n+      if (storeSelect && storeSelect.options.length) {\r\n+        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n+      } else if (state.stores?.length) {\r\n+        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+      }\r\n+      const sid = state.selectedStoreId || storeSelect?.value || '';\r\n+      addStoreSelect.value = sid;\r\n+\r\n+      // Carrega os profissionais correspondentes à empresa escolhida no modal (sem travar a abertura)\r\n+      try { if (sid) { populateModalProfissionais(sid); } } catch(_) {}\r\n+    }\r\n+\r\n+    // Data (usa a data visível na página)\r\n+    if (addDateInput) {\r\n+      const date = normalizeDate(dateInput?.value || todayStr()); // YYYY-MM-DD\r\n+      addDateInput.value = date;\r\n+    }\r\n+\r\n+    // Hora default (agora)\r\n+    const now = new Date();\r\n+    const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n+    if (horaInput) horaInput.value = hh;\r\n+    \r\n+    // Observações\r\n+    if (obsInput) { obsInput.value = ''; }\r\n+\r\n+    // Status default\r\n+    if (statusSelect) statusSelect.value = 'agendado';\r\n+\r\n+    // Botão Excluir só em edição\r\n+    if (modalDelete) modalDelete.classList.add('hidden');\r\n+\r\n+    modal.classList.remove('hidden'); \r\n+    modal.classList.add('flex');\r\n+    cliInput?.focus();\r\n+  }\r\n+\r\n+  // cache simples: clienteId -> nome\r\n+  const _clienteNomeCache = new Map();\r\n+\r\n+  async function resolveClienteNome(a) {\r\n+    try {\r\n+      if (!a) return '';\r\n+\r\n+      // 1) nome direto vindo da API\r\n+      const direct =\r\n+        a.clienteNome ||\r\n+        (a.cliente && typeof a.cliente === 'object' && (a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial)) ||\r\n+        null;\r\n+      if (typeof direct === 'string' && direct.trim()) return direct.trim();\r\n+\r\n+      // 2) clienteId em qualquer formato\r\n+      let maybeId =\r\n+        a.clienteId ||\r\n+        a.clientId ||\r\n+        a.customerId ||\r\n+        (typeof a.cliente === 'string' ? a.cliente : null);\r\n+\r\n+      if (typeof maybeId === 'object' && maybeId !== null && maybeId._id) {\r\n+        maybeId = String(maybeId._id);\r\n+      }\r\n+      const id = (typeof maybeId === 'string' && /^[0-9a-fA-F]{24}$/.test(maybeId)) ? maybeId : null;\r\n+\r\n+      if (id) {\r\n+        if (_clienteNomeCache.has(id)) return _clienteNomeCache.get(id);\r\n+        const r = await api(`/func/clientes/${id}`);\r\n+        if (r.ok) {\r\n+          const c = await r.json();\r\n+          const nome = c?.nome || '';\r\n+          if (nome) { _clienteNomeCache.set(id, nome); return nome; }\r\n+        }\r\n+      }\r\n+\r\n+      // 3) fallback por petId\r\n+      const petId =\r\n+        a.petId ||\r\n+        (a.pet && typeof a.pet === 'object' && a.pet._id ? a.pet._id : null) ||\r\n+        null;\r\n+\r\n+      if (petId && /^[0-9a-fA-F]{24}$/.test(String(petId))) {\r\n+        const r2 = await api(`/func/pets/${petId}`);\r\n+        if (r2.ok) {\r\n+          const p = await r2.json();\r\n+          const nome =\r\n+            (p?.cliente && (p.cliente.nome || p.cliente.nomeCompleto || p.cliente.razaoSocial)) ||\r\n+            p?.clienteNome ||\r\n+            '';\r\n+          if (nome) return String(nome);\r\n+        }\r\n+      }\r\n+    } catch (e) {\r\n+      console.info('[resolveClienteNome] não foi possível resolver', e);\r\n+    }\r\n+    return '';\r\n+  }\r\n+\r\n+  // --- DEPOIS: openEditModal (indica carregamento e garante preenchimento) ---\r\n+  function toDateInputValueFromISO(isoStr) {\r\n+    const d = new Date(isoStr);\r\n+    if (isNaN(d.getTime())) return todayStr();\r\n+    const yyyy = d.getFullYear();\r\n+    const mm = String(d.getMonth() + 1).padStart(2, '0');\r\n+    const dd = String(d.getDate()).padStart(2, '0');\r\n+    return `${yyyy}-${mm}-${dd}`;\r\n+  }\r\n+\r\n+  function openEditModal(a) {\r\n+    state.editing = a || null;\r\n+    if (!modal || !state.editing) return;\r\n+\r\n+    // Preenche lista de serviços no modo edição (somente leitura)\r\n+    state.tempServicos = Array.isArray(a.servicos)\r\n+      ? a.servicos.map(x => ({ _id: x._id, nome: x.nome, valor: Number(x.valor || 0) }))\r\n+      : (a.servico ? [{ _id: null, nome: a.servico, valor: Number(a.valor || 0) }] : []);\r\n+    renderServicosLista();\r\n+\r\n+    // habilita campo de busca/valor para adicionar novos serviços\r\n+    state.selectedServico = null;\r\n+    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n+    if (servSug)   { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    if (valorInput){ valorInput.value = ''; valorInput.disabled = false; }\r\n+\r\n+    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n+\r\n+    // Empresa (mostra a loja do agendamento e permite trocar)\r\n+    if (addStoreSelect) {\r\n+      if (storeSelect && storeSelect.options.length) {\r\n+        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n+      } else if (state.stores?.length) {\r\n+        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+      }\r\n+      addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n+      addStoreSelect.disabled = false;\r\n+    }\r\n+\r\n+    // Data do agendamento\r\n+    if (addDateInput) {\r\n+      const iso = a.h || a.scheduledAt || new Date().toISOString();\r\n+      addDateInput.value = toDateInputValueFromISO(iso);\r\n+    }\r\n+\r\n+    // Hora\r\n+    const d = new Date((a.h || a.scheduledAt) || new Date());\r\n+    const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n+    if (horaInput) horaInput.value = hh;\r\n+\r\n+    // Profissional (tenta resolver o id atual)\r\n+    let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+    if (!profId && typeof a.profissional === 'string') {\r\n+      const key = a.profissional.trim().toLowerCase();\r\n+      const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n+      if (match) profId = String(match._id);\r\n+    }\r\n+    if (profSelect && profId) profSelect.value = profId;\r\n+\r\n+    // Ao abrir o modal de edição, carregamos os profissionais da EMPRESA selecionada no modal\r\n+    try {\r\n+      const sid = addStoreSelect?.value || a.storeId || '';\r\n+      if (sid) { populateModalProfissionais(sid, profId); } // não bloqueia a abertura do modal\r\n+    } catch (_) {}\r\n+\r\n+    // Status (normalizado p/ os values do <select>)\r\n+    if (statusSelect) {\r\n+      const keyRaw = String(a.status || 'agendado')\r\n+        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+        .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n+      const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+      statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n+    }\r\n+\r\n+    // Observações (preenche com a descrição do card)\r\n+    if (obsInput) { obsInput.value = (a.observacoes || '').trim(); }\r\n+\r\n+    // Cliente e Pet (preenche e bloqueia busca no modo edição)\r\n+    if (cliInput) { cliInput.value = (a.clienteNome || ''); cliInput.disabled = true; }\r\n+   \r\n+    if (petSelect) {\r\n+      petSelect.innerHTML = '';\r\n+      try {\r\n+        const clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n+        if (clienteId) {\r\n+          api(`/func/clientes/${clienteId}/pets`).then(r => r.json().catch(() => []))\r\n+            .then(pets => {\r\n+              petSelect.innerHTML = (Array.isArray(pets) ? pets : []).map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+              const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n+              if (currentPetId) petSelect.value = String(currentPetId);\r\n+            });\r\n+        }\r\n+      } catch (_) {}\r\n+    }\r\n+\r\n+    // Serviço/Valor: leitura\r\n+    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n+    if (valorInput) { valorInput.value = ''; valorInput.disabled = false; }\r\n+\r\n+    // Botão excluir visível\r\n+    if (modalDelete) modalDelete.classList.remove('hidden');\r\n+\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n+  }\r\n+\r\n+  function closeModal() {\r\n+    if (!modal) return;\r\n+    modal.classList.add('hidden');\r\n+    modal.classList.remove('flex');\r\n+    state.editing = null;\r\n+    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n+  }\r\n+\r\n+  // Busca cliente\r\n+  async function searchClientes(term) {\r\n+    if (!term || term.length < 2) {\r\n+      if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+      return;\r\n+    }\r\n+    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    if (!cliSug) return;\r\n+    cliSug.innerHTML = list.map(u => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n+        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n+      </li>`).join('');\r\n+    cliSug.classList.remove('hidden');\r\n+    cliSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', async () => {\r\n+        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n+        if (cliInput) cliInput.value = li.dataset.nome;\r\n+        cliSug.classList.add('hidden');\r\n+        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n+        const pets = await resp.json().catch(() => []);\r\n+        if (petSelect) {\r\n+          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+        }\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  function confirmAsync(title, message, opts = {}) {\r\n+    const confirmText = opts.confirmText || 'Excluir';\r\n+    const cancelText  = opts.cancelText  || 'Cancelar';\r\n+\r\n+    if (typeof window.showModal === 'function') {\r\n+      return new Promise((resolve) => {\r\n+        // 1) Esconde temporariamente o modal de edição (sem desmontar)\r\n+        const prevVis = modal ? modal.style.visibility : '';\r\n+        const prevPe  = modal ? modal.style.pointerEvents : '';\r\n+        if (modal) {\r\n+          modal.style.visibility = 'hidden';\r\n+          modal.style.pointerEvents = 'none';\r\n+        }\r\n+\r\n+        // 2) Abre o modal padrão do projeto\r\n+        window.showModal({\r\n+          title: title || 'Confirmação',\r\n+          message: message || 'Deseja prosseguir?',\r\n+          confirmText,\r\n+          cancelText,\r\n+          onConfirm: () => { restore(); resolve(true); },\r\n+          onCancel : () => { restore(); resolve(false); }\r\n+        });\r\n+\r\n+        // 3) Após montar, garante overlay por cima de tudo\r\n+        //    (pega o último elemento \"fixed\" full-screen e sobe o z-index)\r\n+        const bump = () => {\r\n+          try {\r\n+            const all = Array.from(document.querySelectorAll('body *'));\r\n+            const overlays = all.filter(el => {\r\n+              const cs = getComputedStyle(el);\r\n+              if (cs.position !== 'fixed') return false;\r\n+              const r = el.getBoundingClientRect();\r\n+              return r.width >= window.innerWidth * 0.95 && r.height >= window.innerHeight * 0.95;\r\n+            });\r\n+            const overlay = overlays.at(-1);\r\n+            if (overlay) {\r\n+              overlay.style.zIndex = '9999';\r\n+              overlay.style.pointerEvents = 'auto';\r\n+            }\r\n+          } catch (_) { /* noop */ }\r\n+        };\r\n+        requestAnimationFrame(bump);\r\n+        setTimeout(bump, 0);\r\n+\r\n+        // 4) Restaura o modal de edição quando fechar a confirmação\r\n+        function restore() {\r\n+          if (modal) {\r\n+            modal.style.visibility = prevVis || '';\r\n+            modal.style.pointerEvents = prevPe || '';\r\n+          }\r\n+        }\r\n+      });\r\n+    }\r\n+\r\n+    // Fallback (apenas se o componente não existir)\r\n+    const ok = window.confirm(message || title || 'Confirmar?');\r\n+    return Promise.resolve(!!ok);\r\n+  }\r\n+\r\n+  async function handleDelete() {\r\n+      const id = state.editing && state.editing._id ? String(state.editing._id) : null;\r\n+      if (!id) return;\r\n+\r\n+      const ok = await confirmAsync('Excluir atendimento', 'Tem ce...a excluir este atendimento? Esta ação não pode ser desfeita.', {\r\n+        confirmText: 'Excluir',\r\n+        cancelText: 'Cancelar'\r\n+      });\r\n+      if (!ok) return;\r\n+\r\n+      const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(() => ({}));\r\n+        alert(err.message || 'Erro ao excluir agendamento');\r\n+        return;\r\n+      }\r\n+      await loadAgendamentos();\r\n+      renderKpis();\r\n+      renderFilters();\r\n+      closeModal();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+  }\r\n+\r\n+  // Busca serviços\r\n+  async function searchServicos(term) {\r\n+    if (!term || term.length < 2) {\r\n+      if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+      return;\r\n+    }\r\n+    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    if (!servSug) return;\r\n+    servSug.innerHTML = list.map(s => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor}\">\r\n+        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${money(s.valor)}</div>\r\n+      </li>`).join('');\r\n+    servSug.classList.remove('hidden');\r\n+    servSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', () => {\r\n+        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n+        if (servInput) servInput.value = state.selectedServico.nome;\r\n+        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n+        servSug.classList.add('hidden');\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  // --- Lista de serviços no modal ---\r\n+  function renderServicosLista() {\r\n+    if (!servListUL || !servTotalEl) return;\r\n+    const items = state.tempServicos || [];\r\n+    servListUL.innerHTML = items.map((it, idx) => `\r\n+      <li class=\"flex items-center justify-between px-3 py-2 text-sm\">\r\n+        <div class=\"flex items-center gap-3\">\r\n+          <span class=\"w-20 text-right tabular-nums\">${money(Number(it.valor || 0))}</span>\r\n+          <span class=\"text-gray-700\">${it.nome || ''}</span>\r\n+        </div>\r\n+        <button data-idx=\"${idx}\" class=\"remove-serv px-2 py-1 rounded-md border text-gray-600 hover:bg-gray-50\">Remover</button>\r\n+      </li>\r\n+    `).join('');\r\n+    const total = items.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+    servTotalEl.textContent = money(total);\r\n+\r\n+    servListUL.querySelectorAll('.remove-serv').forEach(btn => {\r\n+      btn.addEventListener('click', () => {\r\n+        const i = parseInt(btn.getAttribute('data-idx'), 10);\r\n+        if (!isNaN(i)) {\r\n+          state.tempServicos.splice(i, 1);\r\n+          renderServicosLista();\r\n+        }\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  // Salvar (adicionar/editar)\r\n+  async function saveAgendamento() {\r\n+      try {\r\n+        const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n+        const storeIdSelected = (addStoreSelect?.value) || state.selectedStoreId || storeSelect?.value;\r\n+        const hora = horaInput?.value;\r\n+        const profissionalId = profSelect?.value;\r\n+        const status = (statusSelect?.value) || 'agendado';\r\n+\r\n+        if (!hora || !profissionalId) { alert('Preencha hora e profissional.'); return; }\r\n+        if (!storeIdSelected) { alert('Selecione a empresa.'); return; }\r\n+\r\n+        const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n+\r\n+        // Edição\r\n+        if (state.editing && state.editing._id) {\r\n+          const id = state.editing._id;\r\n+\r\n+          // usa os itens montados na UI (edição agora permite adicionar/remover)\r\n+          const items = Array.isArray(state.tempServicos) ? state.tempServicos : [];\r\n+          if (!items.length) { alert('Adicione pelo menos 1 serviço ao agendamento.'); return; }\r\n+\r\n+          const body = {\r\n+            storeId: storeIdSelected,\r\n+            profissionalId,\r\n+            scheduledAt,\r\n+            status,\r\n+            observacoes: (obsInput?.value || '').trim(),\r\n+            servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n+            ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n+            ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n+            ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n+          };\r\n+\r\n+          const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\r\n+          if (!resp.ok) {\r\n+            const err = await resp.json().catch(() => ({}));\r\n+            alert(err.message || 'Erro ao atualizar agendamento.');\r\n+            return;\r\n+          }\r\n+\r\n+          await loadAgendamentos();\r\n+          renderKpis();\r\n+          renderFilters();\r\n+          closeModal();\r\n+          renderGrid();\r\n+          enhanceAgendaUI();\r\n+          return;\r\n+        }\r\n+\r\n+        // Adição\r\n+        const clienteId = state.selectedCliente?._id;\r\n+        const petId = petSelect?.value;\r\n+        const items = state.tempServicos || [];\r\n+\r\n+        if (!(clienteId && petId && items.length)) { alert('Preencha cliente, pet e adicione pelo menos 1 serviço.'); return; }\r\n+\r\n+        const body = {\r\n+          storeId: storeIdSelected,\r\n+          clienteId, petId,\r\n+          servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n+          profissionalId, scheduledAt,\r\n+          status,\r\n+          observacoes: (obsInput?.value || '').trim(),\r\n+          pago: false\r\n+        };\r\n+        const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao salvar');\r\n+        }\r\n+\r\n+        await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n+        closeModal();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error(e);\r\n+        alert(e.message || 'Erro ao salvar');\r\n+      }\r\n+    }\r\n+\r\n+  function enhanceAgendaUI() {\r\n+    try {\r\n+      applyZebraAndSublines();\r\n+      decorateCards();\r\n+\r\n+      if (state.view === 'day') {\r\n+        enableDragDrop();\r\n+        drawNowLine();\r\n+\r\n+        const date = normalizeDate(dateInput?.value || todayStr());\r\n+        if (!state.__didInitialScroll && date === todayStr()) {\r\n+          scrollToNow();\r\n+          state.__didInitialScroll = true;\r\n+        }\r\n+      }\r\n+    } catch (e) {\r\n+      console.info('[enhanceAgendaUI] skip', e);\r\n+    }\r\n+  }\r\n+\r\n+  function scrollToNow() {\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body || !state.profissionais?.length) return;\r\n+\r\n+      // encontra a célula da primeira coluna de profissional no horário atual\r\n+      const now = new Date();\r\n+      const hh = String(now.getHours()).padStart(2, '0') + ':00';\r\n+      const firstProfId = String(state.profissionais[0]._id);\r\n+      const target = body.querySelector(`div[data-profissional-id=\"${firstProfId}\"][data-hh=\"${hh}\"]`);\r\n+\r\n+      if (target) {\r\n+        const top = target.getBoundingClientRect().top + window.pageYOffset;\r\n+        const offset = 80; // sobe um pouco para contexto\r\n+        window.scrollTo({ top: Math.max(0, top - offset), behavior: 'smooth' });\r\n+      }\r\n+  }\r\n+\r\n+  // compacta a lista para um hash leve (ordem estável)\r\n+  function snapshotHash(items) {\r\n+    try {\r\n+      const compact = (items || []).map(x => [\r\n+        String(x._id || ''),\r\n+        String(x.status || ''),\r\n+        String(x.h || x.scheduledAt || ''),\r\n+        Number(x.valor || 0),\r\n+        !!x.pago\r\n+      ]).sort((a, b) => a[0].localeCompare(b[0]));\r\n+      return JSON.stringify(compact);\r\n+    } catch (_) {\r\n+      return String(Date.now());\r\n+    }\r\n+  }\r\n+\r\n+  // reconsulta e só re-renderiza se houver mudança relevante\r\n+  async function refreshAgendaIfChanged() {\r\n+    const prev = state.lastSnapshotHash || '';\r\n+    await loadAgendamentos();\r\n+    const next = snapshotHash(state.agendamentos);\r\n+    if (next !== prev) {\r\n+      state.lastSnapshotHash = next;\r\n+      renderGrid();\r\n+      // ao re-render com mesma data de hoje, não repete o scroll\r\n+      enhanceAgendaUI();\r\n+    }\r\n+  }\r\n+\r\n+  // inicia/renova o timer de auto-refresh (60s)\r\n+  function startAutoRefresh() {\r\n+    if (window.__agendaRefreshTimer) clearInterval(window.__agendaRefreshTimer);\r\n+    state.lastSnapshotHash = snapshotHash(state.agendamentos);\r\n+    window.__agendaRefreshTimer = setInterval(refreshAgendaIfChanged, 60000);\r\n+  }\r\n+\r\n+  // cria o botão \"Hoje\" ao lado do input de data (uma vez)\r\n+  function ensureTodayButton() {\r\n+    if (!dateInput) return;\r\n+    if (document.getElementById('agenda-today-btn')) return;\r\n+\r\n+    const btn = document.createElement('button');\r\n+    btn.id = 'agenda-today-btn';\r\n+    btn.type = 'button';\r\n+    btn.className = 'ml-2 inline-flex items-center gap-1 text-xs px-2 py-1 rounded border border-slate-300 text-slate-700 hover:bg-slate-50';\r\n+    btn.textContent = 'Hoje';\r\n+\r\n+    dateInput.insertAdjacentElement('afterend', btn);\r\n+    btn.addEventListener('click', async () => {\r\n+      dateInput.value = todayStr();\r\n+      state.__didInitialScroll = false;   // permite novo auto-scroll\r\n+      await loadAgendamentos();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    });\r\n+  }\r\n+\r\n+  // Zebra de linhas + sublinha 30min com CSS (via classe)\r\n+  function applyZebraAndSublines() {\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n+\r\n+      body.style.position = 'relative'; // para linha do \"agora\"\r\n+      const totalCols = 1 + (state.profissionais?.length || 0); // 1 (hora) + N profissionais\r\n+      if (totalCols <= 0) return;\r\n+\r\n+      const cells = Array.from(body.children);\r\n+      const totalRows = Math.floor(cells.length / totalCols);\r\n+\r\n+      for (let row = 0; row < totalRows; row++) {\r\n+        const start = row * totalCols;\r\n+        const zebraClass = (row % 2 === 0) ? 'bg-white' : 'bg-slate-50';\r\n+\r\n+        // primeira coluna (hora)\r\n+        const tCell = cells[start];\r\n+        if (tCell) {\r\n+          tCell.classList.remove('bg-white','bg-slate-50');\r\n+          tCell.classList.add(zebraClass);\r\n+        }\r\n+\r\n+        // colunas dos profissionais\r\n+        for (let col = 1; col < totalCols; col++) {\r\n+          const idx = start + col;\r\n+          const slot = cells[idx];\r\n+          if (!slot) continue;\r\n+          slot.classList.remove('bg-white','bg-slate-50');\r\n+          slot.classList.add(zebraClass, 'agenda-slot'); // garante classe\r\n+        }\r\n+      }\r\n+  }\r\n+\r\n+  // Insere ícones de ação nos cartões (editar / mudar status)\r\n+  function decorateCards() {\r\n+    const cards = agendaList?.querySelectorAll('div[data-appointment-id]');\r\n+    if (!cards || !cards.length) return;\r\n+\r\n+    cards.forEach((card) => {\r\n+      if (card.querySelector('.agenda-card__actions')) return; // já decorado\r\n+      card.classList.add('agenda-card'); // ativa hover via CSS\r\n+      card.style.position = 'relative';\r\n+\r\n+      const id = card.getAttribute('data-appointment-id') || '';\r\n+      const item = (state.agendamentos || []).find(x => String(x._id) === String(id)) || {};\r\n+      const isPaid = !!item.pago;\r\n+\r\n+      const actions = document.createElement('div');\r\n+      // flex em coluna para ter a “segunda linha” abaixo do '+'\r\n+      actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex flex-col items-end gap-1';\r\n+\r\n+      actions.innerHTML = `\r\n+        <!-- primeira linha: editar + status (mantém seu layout atual lado a lado) -->\r\n+        <div class=\"flex items-center gap-1\">\r\n+          <button class=\"agenda-action edit\" data-id=\"${id}\" title=\"Editar\">\r\n+            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\">\r\n+              <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 0 0 0-1.41L18.37 3.29a1.003 1.003 0 0 0-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.83z\"/>\r\n+            </svg>\r\n+          </button>\r\n+          <button class=\"agenda-action status\" data-id=\"${id}\" title=\"Mudar status\">\r\n+            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n+              <circle cx=\"12\" cy=\"12\" r=\"9\" stroke-width=\"2\"></circle>\r\n+              <path d=\"M12 7v5l3 3\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\r\n+            </svg>\r\n+          </button>\r\n+        </div>\r\n+\r\n+        <!-- segunda linha: ícone de pagamento (abaixo do '+') -->\r\n+        <button class=\"agenda-action cobrar ${isPaid ? 'text-green-600' : 'text-slate-500'}\" data-id=\"${id}\" title=\"${isPaid ? 'Pago' : 'Registrar pagamento'}\">\r\n+          ${\r\n+            isPaid\r\n+              // Cifão normal (Real)\r\n+              ? `<i class=\"fa-solid fa-dollar-sign text-[16px] leading-none\"></i>`\r\n+              // Cifrão com risco (stack do FA para “pendente”)\r\n+              : `<span class=\"fa-stack text-[12px] leading-none\" style=\"width: 1.25em;\">\r\n+                  <i class=\"fa-solid fa-dollar-sign fa-stack-1x\"></i>\r\n+                  <i class=\"fa-solid fa-slash fa-stack-1x\"></i>\r\n+                </span>`\r\n+          }\r\n+        </button>\r\n+      `;\r\n+      card.appendChild(actions);\r\n+    });\r\n+  }\r\n+\r\n+  /* === Drag & Drop na agenda: mover card entre horários/profissionais === */\r\n+  function injectDndStylesOnce() {\r\n+    if (document.getElementById('agenda-dnd-style')) return;\r\n+    const st = document.createElement('style');\r\n+    st.id = 'agenda-dnd-style';\r\n+    st.textContent = `\r\n+      .agenda-card.is-dragging { opacity: .6; }\r\n+      .agenda-drop-target { outline: 2px dashed #0ea5e9; outline-offset: -2px; background: rgba(14,165,233,0.06); }\r\n+    `;\r\n+    document.head.appendChild(st);\r\n+  }\r\n+\r\n+  // PUT rápido para mover agendamento (profissional/horário)\r\n+  async function moveAppointmentQuick(id, payload) {\r\n+      try {\r\n+        const body = {\r\n+          ...payload,\r\n+          storeId: state.selectedStoreId || storeSelect?.value\r\n+        };\r\n+        const resp = await api(`/func/agendamentos/${id}`, {\r\n+          method: 'PUT',\r\n+          headers: { 'Content-Type': 'application/json' },\r\n+          body: JSON.stringify(body)\r\n+        });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao mover agendamento');\r\n+        }\r\n+        await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error('moveAppointmentQuick', e);\r\n+        alert(e.message || 'Não foi possível mover o agendamento.');\r\n+      }\r\n+    }\r\n+\r\n+  function enableDragDrop() {\r\n+      injectDndStylesOnce();\r\n+\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n+\r\n+      // Garante que todos os cards estejam \"arrastáveis\"\r\n+      body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n+        if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n+      });\r\n+\r\n+      // Evita múltiplos binds ao re-renderizar a agenda\r\n+      if (body.__dndDelegated) return;\r\n+      body.__dndDelegated = true;\r\n+\r\n+      // DRAGSTART (captura): funciona mesmo se o usuário começar o arrasto em um filho do card\r\n+      body.addEventListener('dragstart', (ev) => {\r\n+        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+        if (!card || !ev.dataTransfer) return;\r\n+\r\n+        const id = card.getAttribute('data-appointment-id') || '';\r\n+        if (!id) return;\r\n+\r\n+        try { ev.dataTransfer.setData('text/plain', id); } catch (_) {}\r\n+        try { ev.dataTransfer.setDragImage(card, 10, 10); } catch (_) {}\r\n+        ev.dataTransfer.effectAllowed = 'move';\r\n+        card.classList.add('is-dragging');\r\n+      }, true);\r\n+\r\n+      // DRAGEND: limpa estados visuais\r\n+      body.addEventListener('dragend', (ev) => {\r\n+        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+        if (card) card.classList.remove('is-dragging');\r\n+        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n+      }, true);\r\n+\r\n+      // DRAGOVER: habilita drop quando o ponteiro está sobre QUALQUER filho dentro da célula\r\n+      body.addEventListener('dragover', (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        ev.preventDefault();                 // obrigatório para permitir drop\r\n+        if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n+        slot.classList.add('agenda-drop-target');\r\n+      });\r\n+\r\n+      // DRAGLEAVE: remove realce\r\n+      body.addEventListener('dragleave', (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        slot.classList.remove('agenda-drop-target');\r\n+      });\r\n+\r\n+      // DROP: pega a célula alvo e move (profissional + horário)\r\n+      body.addEventListener('drop', async (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        ev.preventDefault();\r\n+        slot.classList.remove('agenda-drop-target');\r\n+\r\n+        const id = ev.dataTransfer?.getData('text/plain');\r\n+        if (!id) return;\r\n+\r\n+        const newProf = slot.dataset.profissionalId;\r\n+        const hh      = slot.dataset.hh; // ex.: \"14:00\"\r\n+        if (!newProf || !hh) return;\r\n+\r\n+        const dateRaw     = normalizeDate(dateInput?.value || todayStr());\r\n+        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n+\r\n+        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n+      });\r\n+  }\r\n+\r\n+  async function loadProfissionais() {\r\n+    if (!state.selectedStoreId) {\r\n+      state.profissionais = [];\r\n+      if (profSelect) profSelect.innerHTML = '';\r\n+      return;\r\n+    }\r\n+\r\n+    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.profissionais = Array.isArray(list) ? list : [];\r\n+\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais\r\n+        .map(p => `<option value=\"${p._id}\">${p.nome}</option>`)\r\n+        .join('');\r\n+    }\r\n+  }\r\n+\r\n+  // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n+  function drawNowLine() {\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n+\r\n+      body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n+\r\n+      const now = new Date();\r\n+      const minutes = now.getHours() * 60 + now.getMinutes();\r\n+      const percent = minutes / (24 * 60);\r\n+      const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n+\r\n+      const line = document.createElement('div');\r\n+      line.className = 'agenda-nowline';\r\n+      line.style.top = `${y}px`;\r\n+      body.appendChild(line);\r\n+\r\n+      if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n+      window.__agendaNowTimer = setInterval(() => {\r\n+        const now2 = new Date();\r\n+        const minutes2 = now2.getHours() * 60 + now2.getMinutes();\r\n+        const percent2 = minutes2 / (24 * 60);\r\n+        const y2 = Math.max(0, Math.min(1, percent2)) * body.scrollHeight;\r\n+        const ln = body.querySelector('.agenda-nowline');\r\n+        if (ln) ln.style.top = `${y2}px`;\r\n+      }, 60_000);\r\n+  }\r\n+\r\n+  // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n+  async function updateStatusQuick(id, status) {\r\n+      try {\r\n+        const resp = await api(`/func/agendamentos/${id}`, {\r\n+          method: 'PUT',\r\n+          headers: { 'Content-Type': 'application/json' },\r\n+          body: JSON.stringify({ status })\r\n+        });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao mudar status');\r\n+        }\r\n+        await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error('updateStatusQuick', e);\r\n+        alert(e.message || 'Erro ao mudar status');\r\n+      }\r\n+    }\r\n+\r\n+    // === Impressão em cupom (80mm) ===\r\n+  function buildCupomHTML(items, meta = {}) {\r\n+    const storeName = (meta.storeName || '').trim();\r\n+    const dateStr   = (meta.dateStr || '').trim();\r\n+\r\n+    const rows = (items || []).map(a => {\r\n+      const pet   = (a.pet || '').toString().trim();\r\n+      const serv  = (a.servico || '').toString().trim();\r\n+      const valor = money(Number(a.valor || 0));\r\n+      // \"Pet Serviço - Valor\" em linha única\r\n+      return `<div class=\"row\"><span class=\"txt\">${pet} ${serv}</span><span class=\"val\">${valor}</span></div>`;\r\n+    }).join('');\r\n+\r\n+    return `\r\n+  <!doctype html>\r\n+  <html>\r\n+  <head>\r\n+    <meta charset=\"utf-8\">\r\n+    <title>Impressão</title>\r\n+    <style>\r\n+      @page { size: 80mm auto; margin: 3mm; }\r\n+      * { box-sizing: border-box; }\r\n+      html, body { padding: 0; margin: 0; }\r\n+      /* Aumenta um pouco o tamanho e usa preto sólido para ganhar contraste na térmica */\r\n+      body {\r\n+        width: 74mm;\r\n+        font: 13px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\";\r\n+        color: #000;\r\n+        -webkit-font-smoothing: none; /* deixa o traço mais “cheio” na impressão */\r\n+        font-weight: 600; /* base mais pesada */\r\n+      }\r\n+      .wrap { padding: 2mm 0; }\r\n+      .h1 { text-align:center; font-weight:700; font-size: 15px; margin-bottom: 1mm; }\r\n+      .meta { text-align:center; font-size: 12px; color:#000; font-weight:700; margin-bottom: 2mm; }\r\n+      .hr { border-top: 1px dashed #000; margin: 2mm 0; }\r\n+      .row { display:flex; align-items:flex-start; justify-content:space-between; gap: 4mm; padding: 1mm 0; }\r\n+      /* Linhas do cupom bem escuras */\r\n+      .row .txt { flex: 1 1 auto; word-break: break-word; font-weight:700; }\r\n+      .row .val { flex: 0 0 auto; white-space: nowrap; font-weight:700; }\r\n+      .foot { text-align:center; margin-top: 2mm; font-size: 12px; color:#000; font-weight:700; }\r\n+      @media print { .no-print { display: none !important; } }\r\n+    </style>\r\n+  </head>\r\n+  <body>\r\n+    <div class=\"wrap\">\r\n+      <div class=\"h1\">Agenda</div>\r\n+      <div class=\"meta\">${storeName ? storeName + ' • ' : ''}${dateStr}</div>\r\n+      <div class=\"hr\"></div>\r\n+      ${rows || '<div class=\"row\"><span class=\"txt\">Sem itens</span><span class=\"val\"></span></div>'}\r\n+      <div class=\"hr\"></div>\r\n+      <div class=\"foot\">Obrigado!</div>\r\n+    </div>\r\n+    <script>\r\n+      window.onload = function(){ setTimeout(function(){ window.print(); }, 50); };\r\n+      window.onafterprint = function(){ setTimeout(function(){ window.close(); }, 50); };\r\n+    </script>\r\n+  </body>\r\n+  </html>`;\r\n+  }\r\n+\r\n+  function handlePrintCupom() {\r\n+    try {\r\n+      const items = getFilteredAgendamentos();\r\n+\r\n+      // Ordena por horário (se houver)\r\n+      items.sort((a, b) => {\r\n+        const da = new Date(a.h || a.scheduledAt || 0).getTime();\r\n+        const db = new Date(b.h || b.scheduledAt || 0).getTime();\r\n+        return da - db;\r\n+      });\r\n+\r\n+      const dateStr =\r\n+        (document.getElementById('agenda-date-label-visible')?.textContent || '').trim() ||\r\n+        new Date((normalizeDate(dateInput?.value || todayStr())) + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+\r\n+      const storeName =\r\n+        (document.getElementById('agenda-store-label-visible')?.textContent || '').trim();\r\n+\r\n+      const html = buildCupomHTML(items, { storeName, dateStr });\r\n+\r\n+      const w = window.open('', 'print_cupom', 'width=420,height=600');\r\n+      if (!w) { alert('O navegador bloqueou a janela de impressão. Habilite pop-ups para continuar.'); return; }\r\n+      w.document.open('text/html');\r\n+      w.document.write(html);\r\n+      w.document.close();\r\n+      w.focus();\r\n+    } catch (e) {\r\n+      console.error('handlePrintCupom', e);\r\n+      alert('Não foi possível preparar a impressão.');\r\n+    }\r\n+  }\r\n+\r\n+  // Events\r\n+  addBtn?.addEventListener('click', openAddModal);\r\n+  modalClose?.addEventListener('click', closeModal);\r\n+  modalCancel?.addEventListener('click', closeModal);\r\n+  modalSave?.addEventListener('click', saveAgendamento);\r\n+\r\n+  addStoreSelect?.addEventListener('change', () => {\r\n+    const sid = addStoreSelect.value;\r\n+    const current = profSelect?.value || '';\r\n+    populateModalProfissionais(sid, current);\r\n+  });\r\n+\r\n+  // Botão \"Imprimir\" — cupom 80mm com \"Pet Serviço - Valor\"\r\n+    (function () {\r\n+      const btn0 = document.getElementById('print-agenda-btn');\r\n+      // (se algum listener antigo ainda existir em outro build, garantimos o nosso fluxo)\r\n+      if (btn0) {\r\n+        // remove listeners antigos (se houver) clonando o nó\r\n+        const clone = btn0.cloneNode(true);\r\n+        btn0.parentNode.replaceChild(clone, btn0);\r\n+        clone.addEventListener('click', (ev) => {\r\n+          ev.preventDefault();\r\n+          ev.stopImmediatePropagation?.();\r\n+          handlePrintCupom();\r\n+        });\r\n+      }\r\n+    })();\r\n+\r\n+  cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n+  servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n+\r\n+  addServAddBtn?.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    const s = state.selectedServico;\r\n+    const v = Number(valorInput?.value || 0);\r\n+    if (!s || !s._id) { alert('Escolha um serviço na busca.'); return; }\r\n+    if (!(v >= 0)) { alert('Valor inválido.'); return; }\r\n+    state.tempServicos.push({ _id: s._id, nome: s.nome, valor: v });\r\n+    // limpa seleção\r\n+    state.selectedServico = null;\r\n+    if (servInput)  servInput.value = '';\r\n+    if (valorInput) valorInput.value = '';\r\n+    renderServicosLista();\r\n+  });\r\n+\r\n+  modalDelete?.addEventListener('click', handleDelete);\r\n+\r\n+  // Ações rápidas nos cartões (delegação no container da agenda)\r\n+  agendaList?.addEventListener('click', (ev) => {\r\n+    // toggle do menu mobile\r\n+    const more = ev.target.closest('.agenda-card__more');\r\n+    if (more) {\r\n+      const holder = more.parentElement?.querySelector('.agenda-card__actions');\r\n+      if (holder) holder.classList.toggle('hidden');\r\n+      return;\r\n+    }\r\n+\r\n+    const btn = ev.target.closest('.agenda-action');\r\n+    if (!btn) return;\r\n+    const id = btn.getAttribute('data-id');\r\n+    if (!id) return;\r\n+\r\n+    if (btn.classList.contains('edit')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      if (item) openEditModal(item);\r\n+    } else if (btn.classList.contains('status')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+      const cur = (item && item.status) || 'agendado';\r\n+      const next = chain[(chain.indexOf(cur) + 1) % chain.length];\r\n+      updateStatusQuick(id, next);\r\n+    } else if (btn.classList.contains('cobrar')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      if (item) openEditModal(item); // reaproveite seu modal/fluxo de cobrança\r\n+    }\r\n+  });\r\n+\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    updateStoreLabel();\r\n+    state.__didInitialScroll = false;     // nova loja -> recalcula scroll\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;     // nova data -> permite auto-scroll\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  // Boot\r\n+  function setupShortcuts() {\r\n+    document.addEventListener('keydown', (e) => {\r\n+      if (e.target && ['INPUT','SELECT','TEXTAREA'].includes(e.target.tagName)) return; // não atrapalhar digitação\r\n+      if (e.key === 't' || e.key === 'T') {\r\n+        if (dateInput) {\r\n+          dateInput.value = todayStr();\r\n+          state.__didInitialScroll = false;\r\n+          loadAgendamentos().then(() => {\r\n+            renderKpis(); renderFilters(); renderGrid(); enhanceAgendaUI();\r\n+          });\r\n+        }\r\n+      }\r\n+      if (e.key === 'n' || e.key === 'N') {\r\n+        e.preventDefault();\r\n+        openAddModal();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  (async function init() {\r\n+    if (!dateInput?.value) dateInput.value = todayStr();\r\n+    if (viewSelect && !viewSelect.value) viewSelect.value = 'day';\r\n+    state.view = (viewSelect?.value) || 'day';\r\n+\r\n+    loadFiltersFromStorage();\r\n+    await loadStores();\r\n+    if (!state.selectedStoreId && storeSelect?.value) {\r\n+      state.selectedStoreId = storeSelect.value;\r\n+    }\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+\r\n+    ensureToolbar();\r\n+    ensureTodayButton();\r\n+    setupShortcuts();\r\n+\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  })();\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  viewSelect?.addEventListener('change', async () => {\r\n+    state.view = viewSelect.value || 'day';\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  // Atualizações após troca de loja/data/status etc.\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    updateStoreLabel();\r\n+    state.__didInitialScroll = false;\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+})();\r\n"
                },
                {
                    "date": 1757600728852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2050 @@\n+(function () {\r\n+  // Helper para requisições com token\r\n+  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n+  function api(url, opts = {}) {\r\n+    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n+      ...opts,\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        ...(opts.headers || {}),\r\n+        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Elements\r\n+  const agendaList = document.getElementById('agenda-list');\r\n+  const dateInput = document.getElementById('agenda-date');\r\n+  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n+  const viewSelect = document.getElementById('agenda-view');\r\n+  const addBtn = document.getElementById('add-service-btn');\r\n+  const storeSelect = document.getElementById('agenda-store');\r\n+  const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n+\r\n+  // Modal (reutilizado p/ adicionar e editar)\r\n+  const modal = document.getElementById('modal-add-servico');\r\n+  const modalClose = document.getElementById('modal-add-close');\r\n+  const modalCancel = document.getElementById('modal-add-cancel');\r\n+  const modalSave = document.getElementById('modal-add-save');\r\n+  const modalDelete = document.getElementById('modal-add-delete');\r\n+\r\n+  const addStoreSelect = document.getElementById('add-store-select');\r\n+  const addDateInput   = document.getElementById('add-date');\r\n+  const statusSelect   = document.getElementById('add-status');\r\n+\r\n+  const cliInput = document.getElementById('add-cli-input');\r\n+  const cliSug = document.getElementById('add-cli-sug');\r\n+  const petSelect = document.getElementById('add-pet-select');\r\n+  const servInput   = document.getElementById('add-serv-input');\r\n+  const servSug     = document.getElementById('add-serv-sug');\r\n+  const valorInput  = document.getElementById('add-valor');\r\n+  const addServAddBtn = document.getElementById('add-serv-add-btn');\r\n+  const servListUL  = document.getElementById('add-serv-list');\r\n+  const servTotalEl = document.getElementById('add-serv-total');\r\n+  const obsInput   = document.getElementById('add-observacoes');\r\n+  const horaInput   = document.getElementById('add-hora');\r\n+  const profSelect  = document.getElementById('add-prof-select');\r\n+\r\n+  // State\r\n+  const FILTER_STORAGE_KEY = 'agenda_filters_v1';\r\n+\r\n+  const state = {\r\n+    stores: [],\r\n+    profissionais: [],\r\n+    agendamentos: [],\r\n+    selectedStoreId: null,\r\n+    selectedCliente: null,\r\n+    selectedServico: null,\r\n+    tempServicos: [],\r\n+    editing: null,\r\n+    lastSnapshotHash: '',\r\n+    __didInitialScroll: false,\r\n+    view: 'day',\r\n+    filters: {                 // filtros persistentes\r\n+      statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n+      profIds: new Set()       // _id dos profissionais\r\n+    }\r\n+  };\r\n+\r\n+  function loadFiltersFromStorage() {\r\n+    try {\r\n+      const raw = JSON.parse(localStorage.getItem(FILTER_STORAGE_KEY) || 'null');\r\n+      if (raw && typeof raw === 'object') {\r\n+        state.filters.statuses = new Set(Array.isArray(raw.statuses) ? raw.statuses : []);\r\n+        state.filters.profIds  = new Set(Array.isArray(raw.profIds)  ? raw.profIds  : []);\r\n+      }\r\n+    } catch(_) {}\r\n+  }\r\n+  function saveFiltersToStorage() {\r\n+    try {\r\n+      localStorage.setItem(FILTER_STORAGE_KEY, JSON.stringify({\r\n+        statuses: Array.from(state.filters.statuses),\r\n+        profIds : Array.from(state.filters.profIds)\r\n+      }));\r\n+    } catch(_) {}\r\n+  }\r\n+\r\n+  function ensureToolbar() {\r\n+    if (!agendaList) return;\r\n+    if (document.getElementById('agenda-toolbar')) return;\r\n+\r\n+    const bar = document.createElement('div');\r\n+    bar.id = 'agenda-toolbar';\r\n+    // sticky sob o cabeçalho; leve blur para legibilidade; borda inferior discreta\r\n+    bar.className = 'sticky top-0 z-30 bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/60 border-b border-slate-200 mb-2 flex flex-col gap-2 px-3 py-2 rounded-lg';\r\n+\r\n+    // KPIs\r\n+    const kpis = document.createElement('div');\r\n+    kpis.id = 'agenda-kpis';\r\n+    kpis.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(kpis);\r\n+\r\n+    // Filtros\r\n+    const filters = document.createElement('div');\r\n+    filters.id = 'agenda-filters';\r\n+    filters.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(filters);\r\n+\r\n+    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n+  }\r\n+\r\n+  function computeKPIs(items) {\r\n+    const total = items.length;\r\n+    const previsto = items.reduce((s, i) => s + Number(i.valor || 0), 0);\r\n+    const recebido = items.reduce((s, i) => s + (i.pago ? Number(i.valor || 0) : 0), 0);\r\n+    const pendente = previsto - recebido;\r\n+    return { total, previsto, recebido, pendente };\r\n+  }\r\n+\r\n+  function renderKpis() {\r\n+    const wrap = document.getElementById('agenda-kpis');\r\n+    if (!wrap) return;\r\n+\r\n+    const all = state.agendamentos || [];\r\n+    const f = getFilteredAgendamentos();   // filtrados atuais\r\n+    const kAll = computeKPIs(all);\r\n+    const kF   = computeKPIs(f);\r\n+\r\n+    const totalLabel = state.view === 'week' ? 'Total semana' : (state.view === 'month' ? 'Total mês' : 'Total dia');\r\n+    wrap.innerHTML = `\r\n+      <div class=\"kpi-chip\">${totalLabel}: <strong>${kAll.total}</strong></div>\r\n+      <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n+      <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n+      <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n+      ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n+          ? `<div class=\"kpi-chip kpi-muted\">Filtrados: <strong>${kF.total}</strong></div>` : '' }\r\n+    `;\r\n+  }\r\n+\r\n+  function renderFilters() {\r\n+    const el = document.getElementById('agenda-filters');\r\n+    if (!el) return;\r\n+\r\n+    // contadores por status\r\n+    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const key = String(a.status || 'agendado')\r\n+        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n+      if (counts[key] !== undefined) counts[key] += 1;\r\n+    }\r\n+\r\n+    // contadores por profissional\r\n+    const byProf = new Map();\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n+      if (!id) continue;\r\n+      const key = String(id);\r\n+      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n+    }\r\n+\r\n+    const statuses = [\r\n+      {key:'agendado', label:'Agend.'},\r\n+      {key:'em_espera', label:'Espera'},\r\n+      {key:'em_atendimento', label:'Atend.'},\r\n+      {key:'finalizado', label:'Fim.'}\r\n+    ];\r\n+\r\n+    // chips de status\r\n+    const chipsStatus = statuses.map(s => {\r\n+      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n+      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n+                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    // chips de profissional (apenas os que existem)\r\n+    const chipsProf = (state.profissionais || []).map(p => {\r\n+      const id = String(p._id);\r\n+      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n+      const n = byProf.get(id) || 0;\r\n+      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n+                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n+      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n+\r\n+    el.innerHTML = `\r\n+      <div class=\"flex flex-wrap items-center gap-2\">\r\n+        ${chipsStatus}\r\n+        <span class=\"chip-sep\"></span>\r\n+        ${chipsProf}\r\n+        ${clearBtn}\r\n+      </div>\r\n+    `;\r\n+\r\n+    // handlers\r\n+    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n+      btn.addEventListener('click', () => {\r\n+        const type = btn.getAttribute('data-filter');\r\n+        const val  = btn.getAttribute('data-value');\r\n+        if (type === 'status') {\r\n+          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n+        } else if (type === 'prof') {\r\n+          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n+        }\r\n+        saveFiltersToStorage();\r\n+        renderFilters();\r\n+        renderKpis();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      });\r\n+    });\r\n+\r\n+    const clear = document.getElementById('chip-clear');\r\n+    if (clear) clear.addEventListener('click', () => {\r\n+      state.filters.statuses.clear();\r\n+      state.filters.profIds.clear();\r\n+      saveFiltersToStorage();\r\n+      renderFilters();\r\n+      renderKpis();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    });\r\n+  }\r\n+\r\n+  function normalizeStatus(s) {\r\n+    return String(s || 'agendado')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n+  }\r\n+\r\n+  function getFilteredAgendamentos() {\r\n+    const hasStatus = state.filters.statuses.size > 0;\r\n+    const hasProf   = state.filters.profIds.size   > 0;\r\n+\r\n+    if (!hasStatus && !hasProf) return state.agendamentos || [];\r\n+\r\n+    const byNameAll = new Map(\r\n+      (state.profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n+    );\r\n+\r\n+    return (state.agendamentos || []).filter(a => {\r\n+      let ok = true;\r\n+      if (hasStatus) ok = ok && state.filters.statuses.has(normalizeStatus(a.status));\r\n+      if (hasProf) {\r\n+        let pid = a.profissionalId ? String(a.profissionalId) : null;\r\n+        if (!pid) {\r\n+          let nc = '';\r\n+          if (typeof a.profissional === 'string') nc = a.profissional;\r\n+          else if (a.profissional && typeof a.profissional === 'object') {\r\n+            nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n+                a.profissional.razaoSocial || a.profissional.nome || '';\r\n+          }\r\n+          pid = byNameAll.get(String(nc).trim().toLowerCase()) || null;\r\n+        }\r\n+        ok = ok && pid && state.filters.profIds.has(String(pid));\r\n+      }\r\n+      return ok;\r\n+    });\r\n+  }\r\n+\r\n+  function getVisibleProfissionais() {\r\n+    const profs = state.profissionais || [];\r\n+    if (!state.filters.profIds.size) return profs;\r\n+    return profs.filter(p => state.filters.profIds.has(String(p._id)));\r\n+  }\r\n+\r\n+  // Helpers de data e utilitários\r\n+  function todayStr() {\r\n+    // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n+    const d = new Date();\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n+  function buildLocalDateTime(dateStr, hhmm) {\r\n+    let y, m, d;\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) { [d, m, y] = dateStr.split('/').map(Number); }\r\n+    else { [y, m, d] = dateStr.split('-').map(Number); }\r\n+    const [hh, mm] = (hhmm || '00:00').split(':').map(Number);\r\n+    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n+  }\r\n+  function normalizeDate(v) {\r\n+    if (!v) return todayStr();\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n+    return v;\r\n+  }\r\n+\r\n+  // ==== NOVO: utilitários de intervalo e label ====\r\n+  function startOfWeek(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    const dow = (d.getDay() + 6) % 7; // 0 = seg\r\n+    d.setDate(d.getDate() - dow);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function addDays(dateStr, n) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(d.getDate() + n);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function startOfMonth(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(1);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function startOfNextMonth(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(1);\r\n+    d.setMonth(d.getMonth() + 1);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function updateHeaderLabel() {\r\n+    if (!dateLabelVisible) return;\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    if (state.view === 'week') {\r\n+      const ini = startOfWeek(base);\r\n+      const fim = addDays(ini, 6);\r\n+      const li = new Date(ini + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      const lf = new Date(fim + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      dateLabelVisible.textContent = `${li} a ${lf}`;\r\n+    } else if (state.view === 'month') {\r\n+      const m0 = startOfMonth(base);\r\n+      const dt = new Date(m0 + 'T00:00:00');\r\n+      const label = dt.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });\r\n+      dateLabelVisible.textContent = label.charAt(0).toUpperCase() + label.slice(1);\r\n+    } else {\r\n+      dateLabelVisible.textContent = new Date(base + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+    }\r\n+  }\r\n+  function localDateStr(d) {\r\n+    const y = d.getFullYear();\r\n+    const m = String(d.getMonth() + 1).padStart(2, '0');\r\n+    const dd = String(d.getDate()).padStart(2, '0');\r\n+    return `${y}-${m}-${dd}`;\r\n+  }\r\n+\r\n+  // === NOVO: abrevia tutor para \"Primeiro Sob..\" ===\r\n+  function shortTutorName(name) {\r\n+    if (!name) return '';\r\n+    const parts = String(name).trim().split(/\\s+/);\r\n+    const cap = s => s ? (s[0].toUpperCase() + s.slice(1).toLowerCase()) : '';\r\n+    const preps = new Set(['da','de','do','das','dos','e']);\r\n+    const first = cap(parts[0] || '');\r\n+    let second = '';\r\n+    for (let i = 1; i < parts.length; i++) {\r\n+      const w = parts[i];\r\n+      if (!preps.has(w.toLowerCase())) { second = w; break; }\r\n+    }\r\n+    const secondAbbr = second ? cap(second).slice(0, 3) : '';\r\n+    return secondAbbr ? `${first} ${secondAbbr}..` : first;\r\n+  }\r\n+\r\n+  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n+  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n+  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n+\r\n+  // Stores\r\n+  async function loadStores() {\r\n+    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.stores = Array.isArray(list) ? list : [];\r\n+    if (storeSelect) {\r\n+      storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+    }\r\n+    if (!state.selectedStoreId && state.stores[0]) {\r\n+      state.selectedStoreId = state.stores[0]._id;\r\n+      if (storeSelect) storeSelect.value = state.selectedStoreId;\r\n+    }\r\n+    updateStoreLabel();\r\n+  }\r\n+  function updateStoreLabel() {\r\n+    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n+    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n+    const vis = document.getElementById('agenda-store-label-visible');\r\n+    if (vis) vis.textContent = s ? s.nome : '—';\r\n+  }\r\n+\r\n+  // Profissionais\r\n+  async function populateModalProfissionais(storeId, preselectId) {\r\n+    try {\r\n+      if (!storeId || !profSelect) return;\r\n+      const resp = await api(`/func/profissionais/esteticistas?storeId=${storeId}`);\r\n+      const list = await resp.json().catch(() => []);\r\n+      const arr = Array.isArray(list) ? list : [];\r\n+      profSelect.innerHTML = arr.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+      const pid = preselectId ? String(preselectId) : '';\r\n+      if (pid && arr.some(p => String(p._id) === pid)) {\r\n+        profSelect.value = pid;\r\n+      } else if (arr[0]) {\r\n+        profSelect.value = String(arr[0]._id);\r\n+      }\r\n+    } catch (_) { /* silencioso no modal */ }\r\n+  }\r\n+\r\n+  // Agendamentos\r\n+  async function loadAgendamentos() {\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    const date = base; // compat: alguns trechos antigos ainda usam \"date\"\r\n+    let url = '';\r\n+\r\n+    if (state.view === 'week') {\r\n+      const ini = startOfWeek(base);\r\n+      const fim = addDays(ini, 7); // exclusivo\r\n+      url = `/func/agendamentos/range?start=${ini}&end=${fim}&storeId=${state.selectedStoreId}`;\r\n+    } else if (state.view === 'month') {\r\n+      const m0 = startOfMonth(base);\r\n+      const m1 = startOfNextMonth(base); // exclusivo\r\n+      url = `/func/agendamentos/range?start=${m0}&end=${m1}&storeId=${state.selectedStoreId}`;\r\n+    } else {\r\n+      url = `/func/agendamentos?date=${base}&storeId=${state.selectedStoreId}`;\r\n+    }\r\n+\r\n+    try {\r\n+      const resp = await api(url);\r\n+      if (!resp.ok) {\r\n+        const txt = await resp.text();\r\n+        console.error('GET', url, '->', resp.status, txt);\r\n+        state.agendamentos = [];\r\n+        return;\r\n+      }\r\n+\r\n+      const list = await resp.json();\r\n+      state.agendamentos = Array.isArray(list) ? list : [];\r\n+\r\n+      // snapshot/label\r\n+      updateHeaderLabel();\r\n+      state.lastSnapshotHash = `${state.view}:${date}:${state.selectedStoreId || ''}:${state.agendamentos.length}`;\r\n+\r\n+      console.info('[Agenda]', 'view=', state.view, 'dataBase=', date, 'loja=', state.selectedStoreId, 'itens=', state.agendamentos.length);\r\n+    } catch (e) {\r\n+      console.error('Erro ao carregar agendamentos', e);\r\n+      state.agendamentos = [];\r\n+    }\r\n+  }\r\n+\r\n+  // Grade (sem coluna \"Outros\")\r\n+  function renderGrid() {\r\n+      if (!agendaList) return;\r\n+      if (state.view === 'week')  { renderWeekGrid();  return; }\r\n+      if (state.view === 'month') { renderMonthGrid(); return; }\r\n+\r\n+      // ===== Visão DIÁRIA (original) =====\r\n+      const date = normalizeDate(dateInput?.value || todayStr());\r\n+      updateHeaderLabel();\r\n+\r\n+      // janelas de trabalho (ajuste se quiser)\r\n+      const BUSINESS_START = 8;   // 08:00\r\n+      const BUSINESS_END   = 19;  // 19:00\r\n+\r\n+      const hours = [];\r\n+      for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+\r\n+      clearChildren(agendaList);\r\n+\r\n+      const profsAll  = state.profissionais || [];\r\n+      const profs     = getVisibleProfissionais();\r\n+      const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n+\r\n+      const colCount = 1 + (profs?.length || 0);\r\n+\r\n+      // Cabeçalho\r\n+      const header = document.createElement('div');\r\n+      header.style.display = 'grid';\r\n+      // >>> COLUNAS ELÁSTICAS: ocupam o espaço restante sem “vão” à direita\r\n+      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n+      header.className = 'bg-white border-b';\r\n+\r\n+      const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n+      headLabels.forEach((label, idx) => {\r\n+        const cell = document.createElement('div');\r\n+        cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n+        if (idx === 0) {\r\n+          cell.textContent = label;\r\n+        }\r\n+        else {\r\n+          // >>> centraliza o nome do profissional\r\n+          cell.style.textAlign = 'center';\r\n+          const span = document.createElement('span');\r\n+          span.className = 'agenda-head-label inline-block';\r\n+          span.textContent = label || '';\r\n+          cell.dataset.profId = String(profs[idx - 1]._id);\r\n+          cell.appendChild(span);\r\n+        }\r\n+        header.appendChild(cell);\r\n+      });\r\n+\r\n+      const counter = document.createElement('div');\r\n+      counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n+      const itemsAll = state.agendamentos || [];\r\n+      const items    = getFilteredAgendamentos(itemsAll);\r\n+      const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n+      counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n+      header.appendChild(counter);\r\n+\r\n+      agendaList.appendChild(header);\r\n+\r\n+      // Corpo\r\n+      const body = document.createElement('div');\r\n+      body.style.display = 'grid';\r\n+      // >>> COLUNAS ELÁSTICAS: cada profissional tem no mínimo 360px e expande até preencher\r\n+      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n+      agendaList.appendChild(body);\r\n+\r\n+      const isToday = normalizeDate(date) === todayStr();\r\n+      const now = new Date();\r\n+      const nowHH = `${pad(now.getHours())}:00`;\r\n+\r\n+      hours.forEach(hh => {\r\n+        const hourNumber = parseInt(hh.split(':')[0], 10);\r\n+        const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n+        const isNowRow   = isToday && hh === nowHH;\r\n+\r\n+        // coluna de horário\r\n+        const timeCell = document.createElement('div');\r\n+        timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n+        timeCell.textContent = hh;\r\n+\r\n+        body.appendChild(timeCell);\r\n+\r\n+        // células por profissional\r\n+        (profs || []).forEach(p => {\r\n+          const cell = document.createElement('div');\r\n+          // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n+          cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n+          cell.dataset.profissionalId = String(p._id);\r\n+          cell.dataset.hh = hh;\r\n+          body.appendChild(cell);\r\n+        });\r\n+      });\r\n+\r\n+      // posiciona cartões\r\n+      let placed = 0;\r\n+      for (const a of items) {\r\n+        const when = a.h || a.scheduledAt;\r\n+        if (!when) continue;\r\n+\r\n+        const d  = new Date(when);\r\n+        const hh = `${pad(d.getHours())}:00`;\r\n+\r\n+        let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+        if (!profId) {\r\n+          let nameCandidate = '';\r\n+          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n+          else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n+          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n+          if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n+        }\r\n+        if (!profId) continue;\r\n+\r\n+        let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+        if (!col && profs[0]) {\r\n+          col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n+        }\r\n+        if (!col) continue;\r\n+\r\n+        const meta = statusMeta(a.status);\r\n+        const card = document.createElement('div');\r\n+        card.setAttribute('data-appointment-id', a._id || '');\r\n+        card.style.setProperty('--stripe', meta.stripe);\r\n+        card.style.setProperty('--card-max-w', '260px');\r\n+        card.className = `agenda-card border ${meta.borderClass} cursor-move select-none`;\r\n+        card.setAttribute('draggable', 'true');\r\n+\r\n+        const headerEl = document.createElement('div');\r\n+        // reserva espaço à direita para os botões flutuantes (evita o chip “ficar por baixo”)\r\n+        headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n+\r\n+        // usa o nome do cliente que já vem da API (clienteNome); fallback mantém o comportamento antigo\r\n+        const tutorShort = shortTutorName(a.clienteNome || '');\r\n+        const headLabel  = tutorShort ? `${tutorShort} | ${a.pet || ''}` : (a.pet || '');\r\n+\r\n+        headerEl.innerHTML = `\r\n+          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${headLabel}\">${headLabel}</div>\r\n+          ${renderStatusBadge(a.status)}\r\n+        `;\r\n+\r\n+        const bodyEl = document.createElement('div');\r\n+        if (a.observacoes && String(a.observacoes).trim()) {\r\n+          const svc = document.createElement('div');\r\n+          svc.className = 'text-[13px] text-gray-600 clamp-2';\r\n+          svc.textContent = a.servico || '';\r\n+          const obs = document.createElement('div');\r\n+          obs.className = 'mt-1 text-[12px] text-gray-700 italic clamp-2';\r\n+          obs.textContent = String(a.observacoes).trim();\r\n+          bodyEl.appendChild(svc);\r\n+          bodyEl.appendChild(obs);\r\n+        } else {\r\n+          bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+          bodyEl.textContent = a.servico || '';\r\n+        }\r\n+\r\n+        const footerEl = document.createElement('div');\r\n+        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+        const price = document.createElement('div');\r\n+        price.className = 'text-[13px] text-gray-800 font-medium';\r\n+        price.textContent = money(a.valor);\r\n+\r\n+        footerEl.appendChild(price);\r\n+\r\n+        card.appendChild(headerEl);\r\n+        card.appendChild(bodyEl);\r\n+        card.appendChild(footerEl);\r\n+\r\n+        col.appendChild(card);\r\n+        placed++;\r\n+      }\r\n+\r\n+      if (placed === 0) {\r\n+        const empty = document.createElement('div');\r\n+        empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n+        empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n+        agendaList.insertBefore(empty, header.nextSibling);\r\n+      }\r\n+  }\r\n+\r\n+  /** ===== NOVO: visão semanal ===== */\r\n+  function renderWeekGrid() {\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    const ini  = startOfWeek(base);\r\n+    const days = Array.from({ length: 7 }, (_, i) => addDays(ini, i));\r\n+    updateHeaderLabel();\r\n+\r\n+    clearChildren(agendaList);\r\n+\r\n+    // Cabeçalho: horários + 7 dias\r\n+    const BUSINESS_START = 8, BUSINESS_END = 19;\r\n+    const hours = []; for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+\r\n+    const header = document.createElement('div');\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n+    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n+    header.innerHTML = `\r\n+      <div class=\"px-2 py-2 text-xs text-slate-500\">Horário</div>\r\n+      ${days.map(d=>{\r\n+        const lab = new Date(d+'T00:00:00').toLocaleDateString('pt-BR', { weekday:'short', day:'2-digit', month:'2-digit' });\r\n+        return `<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${lab}</div>`;\r\n+      }).join('')}\r\n+    `;\r\n+    agendaList.appendChild(header);\r\n+\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n+    agendaList.appendChild(body);\r\n+\r\n+    // Linhas por hora\r\n+    hours.forEach(hh => {\r\n+      const hNum = parseInt(hh.slice(0,2),10);\r\n+      const inBusiness = (hNum>=BUSINESS_START && hNum< BUSINESS_END);\r\n+\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = `px-2 py-2 border-b text-[12px] ${inBusiness?'text-slate-800':'text-slate-400'}`;\r\n+      timeCell.textContent = hh;\r\n+      body.appendChild(timeCell);\r\n+\r\n+      days.forEach(d=>{\r\n+        const cell = document.createElement('div');\r\n+        cell.className = 'px-2 py-2 border-b agenda-slot';\r\n+        cell.dataset.day = d;\r\n+        cell.dataset.hh  = hh;\r\n+        body.appendChild(cell);\r\n+      });\r\n+    });\r\n+\r\n+    // Posiciona cartões (compactos)\r\n+    const items = getFilteredAgendamentos(state.agendamentos || []);\r\n+    let placed = 0;\r\n+\r\n+    for (const a of items) {\r\n+      const when = a.h || a.scheduledAt;\r\n+      if (!when) continue;\r\n+\r\n+      const dt     = new Date(when);\r\n+      const dayStr = localDateStr(dt); // data local evita deslocamento de fuso\r\n+      if (dayStr < days[0] || dayStr > days[6]) continue;\r\n+\r\n+      const hh = `${pad(dt.getHours())}:00`;\r\n+      const cell = agendaList.querySelector(`div[data-day=\"${dayStr}\"][data-hh=\"${hh}\"]`);\r\n+      if (!cell) continue;\r\n+\r\n+      const meta = statusMeta(a.status);\r\n+      const hhmm = `${pad(dt.getHours())}:${String(dt.getMinutes()).padStart(2,'0')}`;\r\n+\r\n+      const card = document.createElement('div');\r\n+      card.setAttribute('data-appointment-id', a._id || '');\r\n+      card.style.setProperty('--stripe', meta.stripe);\r\n+      card.style.setProperty('--card-max-w', '100%');                       // ocupa a coluna\r\n+      card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n+      card.setAttribute('draggable', 'true');\r\n+      card.title = [\r\n+        a.pet || '',\r\n+        a.servico || '',\r\n+        (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n+      ].filter(Boolean).join(' • ');\r\n+\r\n+      // Header denso: horário + pet + status (badge menor)\r\n+      const headerEl = document.createElement('div');\r\n+      headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+      headerEl.innerHTML = `\r\n+        <div class=\"flex items-center gap-2\">\r\n+          <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n+          <span class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</span>\r\n+        </div>\r\n+        ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n+      `;\r\n+\r\n+      // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n+      const bodyEl = document.createElement('div');\r\n+      const svc = document.createElement('div');\r\n+      svc.className = 'text-[12px] text-gray-600 truncate';\r\n+      svc.textContent = a.servico || '';\r\n+      bodyEl.appendChild(svc);\r\n+\r\n+      if (a.observacoes && String(a.observacoes).trim()) {\r\n+        const obs = document.createElement('div');\r\n+        obs.className = 'text-[11px] text-gray-700 italic truncate';\r\n+        obs.textContent = String(a.observacoes).trim();\r\n+        bodyEl.appendChild(obs);\r\n+      }\r\n+\r\n+      // Rodapé: valor à direita\r\n+      const footerEl = document.createElement('div');\r\n+      footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n+      const price = document.createElement('div');\r\n+      price.className = 'text-[12px] text-gray-800 font-semibold';\r\n+      price.textContent = money(a.valor);\r\n+      footerEl.appendChild(price);\r\n+\r\n+      card.appendChild(headerEl);\r\n+      card.appendChild(bodyEl);\r\n+      card.appendChild(footerEl);\r\n+\r\n+      cell.appendChild(card);\r\n+      placed++;\r\n+    }\r\n+\r\n+    if (placed === 0) {\r\n+      const empty = document.createElement('div');\r\n+      empty.className = 'p-6 text-sm text-slate-500';\r\n+      empty.textContent = 'Nenhum agendamento no intervalo.';\r\n+      agendaList.appendChild(empty);\r\n+    }\r\n+  }\r\n+\r\n+  /** ===== NOVO: visão mensal ===== */\r\n+  function renderMonthGrid() {\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    const m0   = startOfMonth(base);\r\n+    const m1   = startOfNextMonth(base); // exclusivo\r\n+    updateHeaderLabel();\r\n+\r\n+    clearChildren(agendaList);\r\n+\r\n+    // cabeçalho: seg a dom\r\n+    const weekDays = ['Seg','Ter','Qua','Qui','Sex','Sáb','Dom'];\r\n+    const header = document.createElement('div');\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n+    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n+    header.innerHTML = weekDays.map(d=>`<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${d}</div>`).join('');\r\n+    agendaList.appendChild(header);\r\n+\r\n+    // calcular início da grade (segunda da semana que contém o dia 1)\r\n+    const startGrid = startOfWeek(m0);\r\n+    const days = Array.from({length:42},(_,i)=> addDays(startGrid,i)); // 6 semanas\r\n+\r\n+    const grid = document.createElement('div');\r\n+    grid.style.display = 'grid';\r\n+    grid.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n+    agendaList.appendChild(grid);\r\n+\r\n+    // usar FILTRO + AGRUPAR por data local\r\n+    const items = getFilteredAgendamentos((state.agendamentos||[]).slice().sort((a,b)=>(new Date(a.h||a.scheduledAt))-(new Date(b.h||b.scheduledAt))));\r\n+    const byDay = new Map();\r\n+    for (const a of items) {\r\n+      const d = localDateStr(new Date(a.h || a.scheduledAt));\r\n+      if (d >= m0 && d < m1) {\r\n+        if (!byDay.has(d)) byDay.set(d, []);\r\n+        byDay.get(d).push(a);\r\n+      }\r\n+    }\r\n+\r\n+    days.forEach(d=>{\r\n+      const inMonth = (d>=m0 && d<m1);\r\n+      const cell = document.createElement('div');\r\n+      cell.className = `min-h-[140px] border p-2 ${inMonth? 'bg-white':'bg-slate-50'}`; // min-h menor\r\n+\r\n+      const title = document.createElement('div');\r\n+      title.className = `flex items-center justify-between text-[11px] ${inMonth?'text-slate-700':'text-slate-400'}`;\r\n+      const dayNum = new Date(d+'T00:00:00').getDate();\r\n+      title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n+\r\n+      const list = document.createElement('div');\r\n+      list.className = 'mt-1 space-y-1';\r\n+\r\n+      const itemsDay = byDay.get(d) || [];\r\n+      itemsDay.forEach((a, idx)=>{\r\n+        const meta = statusMeta(a.status);\r\n+        const when = new Date(a.h || a.scheduledAt);\r\n+        const hhmm = `${pad(when.getHours())}:${String(when.getMinutes()).padStart(2,'0')}`;\r\n+\r\n+        const card = document.createElement('div');\r\n+        card.setAttribute('data-appointment-id', a._id || '');\r\n+        card.style.setProperty('--stripe', meta.stripe);\r\n+        card.style.setProperty('--card-max-w', '100%');\r\n+        card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n+        card.setAttribute('draggable', 'true');\r\n+        card.title = [\r\n+          a.pet || '',\r\n+          a.servico || '',\r\n+          (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n+        ].filter(Boolean).join(' • '); // tooltip exibe tudo sem poluir o card\r\n+\r\n+        // Header denso: horário à esquerda + status à direita\r\n+        const headerEl = document.createElement('div');\r\n+        headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+        headerEl.innerHTML = `\r\n+          <div class=\"flex items-center gap-2\">\r\n+            <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n+            <span class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</span>\r\n+          </div>\r\n+          ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n+        `;\r\n+\r\n+        // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n+        const bodyEl = document.createElement('div');\r\n+        const svc = document.createElement('div');\r\n+        svc.className = 'text-[12px] text-gray-600 truncate';     // 1 linha\r\n+        svc.textContent = a.servico || '';\r\n+        bodyEl.appendChild(svc);\r\n+\r\n+        if (a.observacoes && String(a.observacoes).trim()) {\r\n+          const obs = document.createElement('div');\r\n+          obs.className = 'text-[11px] text-gray-700 italic truncate'; // 1 linha\r\n+          obs.textContent = String(a.observacoes).trim();\r\n+          bodyEl.appendChild(obs);\r\n+        }\r\n+\r\n+        // Rodapé enxuto: valor à direita\r\n+        const footerEl = document.createElement('div');\r\n+        footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n+        const price = document.createElement('div');\r\n+        price.className = 'text-[12px] text-gray-800 font-semibold';\r\n+        price.textContent = money(a.valor);\r\n+        footerEl.appendChild(price);\r\n+\r\n+        card.appendChild(headerEl);\r\n+        card.appendChild(bodyEl);\r\n+        card.appendChild(footerEl);\r\n+\r\n+        list.appendChild(card);\r\n+\r\n+        // Limitar o excesso visual\r\n+        if (idx>=6 && itemsDay.length>7) {\r\n+          const more = document.createElement('div');\r\n+          more.className = 'text-[11px] text-slate-500';\r\n+          more.textContent = `+${itemsDay.length-6} itens`;\r\n+          list.appendChild(more);\r\n+          return;\r\n+        }\r\n+      });\r\n+\r\n+      cell.appendChild(title);\r\n+      cell.appendChild(list);\r\n+      grid.appendChild(cell);\r\n+    });\r\n+  }\r\n+\r\n+  // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n+  function statusMeta(s) {\r\n+    // Normalização: acentos/maiúsculas/espaços/hífens\r\n+    const keyRaw = String(s || 'agendado')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n+\r\n+    const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+    const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n+\r\n+    // Paleta acessível (contraste AA) + info para faixa lateral e badge compacta\r\n+    const map = {\r\n+      agendado: {\r\n+        label: 'Agendado',\r\n+        short: 'Agend.',\r\n+        stripe: '#64748B',     // slate-500\r\n+        text: '#0F172A',       // slate-900\r\n+        badgeClass: 'bg-slate-100 text-slate-700 border border-slate-200',\r\n+        borderClass: 'border-slate-300'\r\n+      },\r\n+      em_espera: {\r\n+        label: 'Em espera',\r\n+        short: 'Espera',\r\n+        stripe: '#B45309',     // amber-700\r\n+        text: '#1F2937',       // gray-800\r\n+        badgeClass: 'bg-amber-50 text-amber-800 border border-amber-200',\r\n+        borderClass: 'border-amber-400'\r\n+      },\r\n+      em_atendimento: {\r\n+        label: 'Em atendimento',\r\n+        short: 'Atend.',\r\n+        stripe: '#1D4ED8',     // blue-700\r\n+        text: '#0B1235',\r\n+        badgeClass: 'bg-blue-50 text-blue-800 border border-blue-200',\r\n+        borderClass: 'border-blue-500'\r\n+      },\r\n+      finalizado: {\r\n+        label: 'Finalizado',\r\n+        short: 'Fim.',\r\n+        stripe: '#16A34A',     // green-600\r\n+        text: '#052E16',\r\n+        badgeClass: 'bg-green-50 text-green-800 border border-green-200',\r\n+        borderClass: 'border-green-500'\r\n+      }\r\n+    };\r\n+\r\n+    return map[k];\r\n+  }\r\n+\r\n+  function renderStatusBadge(s) {\r\n+    const { label, badgeClass } = statusMeta(s);\r\n+    // `whitespace-nowrap` garante que o chip não quebre em duas linhas\r\n+    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium whitespace-nowrap ${badgeClass}\">${label}</span>`;\r\n+  }\r\n+\r\n+  // Modal — modo adicionar\r\n+  function openAddModal() {\r\n+    state.editing = null;\r\n+    if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n+\r\n+    // Reset serviços temporários\r\n+    state.tempServicos = [];\r\n+    renderServicosLista();\r\n+    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n+\r\n+    // Campos editáveis habilitados\r\n+    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n+\r\n+    // Limpa estado/inputs\r\n+    state.selectedCliente = null;\r\n+    state.selectedServico = null;\r\n+    if (cliInput) { cliInput.value = ''; }\r\n+    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+    if (servInput) { servInput.value = ''; }\r\n+    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    if (valorInput) { valorInput.value = ''; }\r\n+    if (petSelect) { petSelect.innerHTML = ''; }\r\n+    if (obsInput) { obsInput.value = ''; }\r\n+\r\n+    // Empresa (usa as mesmas opções do seletor da página)\r\n+    if (addStoreSelect) {\r\n+      if (storeSelect && storeSelect.options.length) {\r\n+        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n+      } else if (state.stores?.length) {\r\n+        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+      }\r\n+      const sid = state.selectedStoreId || storeSelect?.value || '';\r\n+      addStoreSelect.value = sid;\r\n+\r\n+      // Carrega os profissionais correspondentes à empresa escolhida no modal (sem travar a abertura)\r\n+      try { if (sid) { populateModalProfissionais(sid); } } catch(_) {}\r\n+    }\r\n+\r\n+    // Data (usa a data visível na página)\r\n+    if (addDateInput) {\r\n+      const date = normalizeDate(dateInput?.value || todayStr()); // YYYY-MM-DD\r\n+      addDateInput.value = date;\r\n+    }\r\n+\r\n+    // Hora default (agora)\r\n+    const now = new Date();\r\n+    const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n+    if (horaInput) horaInput.value = hh;\r\n+    \r\n+    // Observações\r\n+    if (obsInput) { obsInput.value = ''; }\r\n+\r\n+    // Status default\r\n+    if (statusSelect) statusSelect.value = 'agendado';\r\n+\r\n+    // Botão Excluir só em edição\r\n+    if (modalDelete) modalDelete.classList.add('hidden');\r\n+\r\n+    modal.classList.remove('hidden'); \r\n+    modal.classList.add('flex');\r\n+    cliInput?.focus();\r\n+  }\r\n+\r\n+  // cache simples: clienteId -> nome\r\n+  const _clienteNomeCache = new Map();\r\n+\r\n+  async function resolveClienteNome(a) {\r\n+    try {\r\n+      if (!a) return '';\r\n+\r\n+      // 1) nome direto vindo da API\r\n+      const direct =\r\n+        a.clienteNome ||\r\n+        (a.cliente && typeof a.cliente === 'object' && (a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial)) ||\r\n+        null;\r\n+      if (typeof direct === 'string' && direct.trim()) return direct.trim();\r\n+\r\n+      // 2) clienteId em qualquer formato\r\n+      let maybeId =\r\n+        a.clienteId ||\r\n+        a.clientId ||\r\n+        a.customerId ||\r\n+        (typeof a.cliente === 'string' ? a.cliente : null);\r\n+\r\n+      if (typeof maybeId === 'object' && maybeId !== null && maybeId._id) {\r\n+        maybeId = String(maybeId._id);\r\n+      }\r\n+      const id = (typeof maybeId === 'string' && /^[0-9a-fA-F]{24}$/.test(maybeId)) ? maybeId : null;\r\n+\r\n+      if (id) {\r\n+        if (_clienteNomeCache.has(id)) return _clienteNomeCache.get(id);\r\n+        const r = await api(`/func/clientes/${id}`);\r\n+        if (r.ok) {\r\n+          const c = await r.json();\r\n+          const nome = c?.nome || '';\r\n+          if (nome) { _clienteNomeCache.set(id, nome); return nome; }\r\n+        }\r\n+      }\r\n+\r\n+      // 3) fallback por petId\r\n+      const petId =\r\n+        a.petId ||\r\n+        (a.pet && typeof a.pet === 'object' && a.pet._id ? a.pet._id : null) ||\r\n+        null;\r\n+\r\n+      if (petId && /^[0-9a-fA-F]{24}$/.test(String(petId))) {\r\n+        const r2 = await api(`/func/pets/${petId}`);\r\n+        if (r2.ok) {\r\n+          const p = await r2.json();\r\n+          const nome =\r\n+            (p?.cliente && (p.cliente.nome || p.cliente.nomeCompleto || p.cliente.razaoSocial)) ||\r\n+            p?.clienteNome ||\r\n+            '';\r\n+          if (nome) return String(nome);\r\n+        }\r\n+      }\r\n+    } catch (e) {\r\n+      console.info('[resolveClienteNome] não foi possível resolver', e);\r\n+    }\r\n+    return '';\r\n+  }\r\n+\r\n+  // --- DEPOIS: openEditModal (indica carregamento e garante preenchimento) ---\r\n+  function toDateInputValueFromISO(isoStr) {\r\n+    const d = new Date(isoStr);\r\n+    if (isNaN(d.getTime())) return todayStr();\r\n+    const yyyy = d.getFullYear();\r\n+    const mm = String(d.getMonth() + 1).padStart(2, '0');\r\n+    const dd = String(d.getDate()).padStart(2, '0');\r\n+    return `${yyyy}-${mm}-${dd}`;\r\n+  }\r\n+\r\n+  function openEditModal(a) {\r\n+    state.editing = a || null;\r\n+    if (!modal || !state.editing) return;\r\n+\r\n+    // Preenche lista de serviços no modo edição (somente leitura)\r\n+    state.tempServicos = Array.isArray(a.servicos)\r\n+      ? a.servicos.map(x => ({ _id: x._id, nome: x.nome, valor: Number(x.valor || 0) }))\r\n+      : (a.servico ? [{ _id: null, nome: a.servico, valor: Number(a.valor || 0) }] : []);\r\n+    renderServicosLista();\r\n+\r\n+    // habilita campo de busca/valor para adicionar novos serviços\r\n+    state.selectedServico = null;\r\n+    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n+    if (servSug)   { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    if (valorInput){ valorInput.value = ''; valorInput.disabled = false; }\r\n+\r\n+    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n+\r\n+    // Empresa (mostra a loja do agendamento e permite trocar)\r\n+    if (addStoreSelect) {\r\n+      if (storeSelect && storeSelect.options.length) {\r\n+        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n+      } else if (state.stores?.length) {\r\n+        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+      }\r\n+      addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n+      addStoreSelect.disabled = false;\r\n+    }\r\n+\r\n+    // Data do agendamento\r\n+    if (addDateInput) {\r\n+      const iso = a.h || a.scheduledAt || new Date().toISOString();\r\n+      addDateInput.value = toDateInputValueFromISO(iso);\r\n+    }\r\n+\r\n+    // Hora\r\n+    const d = new Date((a.h || a.scheduledAt) || new Date());\r\n+    const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n+    if (horaInput) horaInput.value = hh;\r\n+\r\n+    // Profissional (tenta resolver o id atual)\r\n+    let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+    if (!profId && typeof a.profissional === 'string') {\r\n+      const key = a.profissional.trim().toLowerCase();\r\n+      const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n+      if (match) profId = String(match._id);\r\n+    }\r\n+    if (profSelect && profId) profSelect.value = profId;\r\n+\r\n+    // Ao abrir o modal de edição, carregamos os profissionais da EMPRESA selecionada no modal\r\n+    try {\r\n+      const sid = addStoreSelect?.value || a.storeId || '';\r\n+      if (sid) { populateModalProfissionais(sid, profId); } // não bloqueia a abertura do modal\r\n+    } catch (_) {}\r\n+\r\n+    // Status (normalizado p/ os values do <select>)\r\n+    if (statusSelect) {\r\n+      const keyRaw = String(a.status || 'agendado')\r\n+        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+        .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n+      const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+      statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n+    }\r\n+\r\n+    // Observações (preenche com a descrição do card)\r\n+    if (obsInput) { obsInput.value = (a.observacoes || '').trim(); }\r\n+\r\n+    // Cliente e Pet (preenche e bloqueia busca no modo edição)\r\n+    if (cliInput) { cliInput.value = (a.clienteNome || ''); cliInput.disabled = true; }\r\n+   \r\n+    if (petSelect) {\r\n+      petSelect.innerHTML = '';\r\n+      try {\r\n+        const clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n+        if (clienteId) {\r\n+          api(`/func/clientes/${clienteId}/pets`).then(r => r.json().catch(() => []))\r\n+            .then(pets => {\r\n+              petSelect.innerHTML = (Array.isArray(pets) ? pets : []).map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+              const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n+              if (currentPetId) petSelect.value = String(currentPetId);\r\n+            });\r\n+        }\r\n+      } catch (_) {}\r\n+    }\r\n+\r\n+    // Serviço/Valor: leitura\r\n+    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n+    if (valorInput) { valorInput.value = ''; valorInput.disabled = false; }\r\n+\r\n+    // Botão excluir visível\r\n+    if (modalDelete) modalDelete.classList.remove('hidden');\r\n+\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n+  }\r\n+\r\n+  function closeModal() {\r\n+    if (!modal) return;\r\n+    modal.classList.add('hidden');\r\n+    modal.classList.remove('flex');\r\n+    state.editing = null;\r\n+    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n+  }\r\n+\r\n+  // Busca cliente\r\n+  async function searchClientes(term) {\r\n+    if (!term || term.length < 2) {\r\n+      if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+      return;\r\n+    }\r\n+    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    if (!cliSug) return;\r\n+    cliSug.innerHTML = list.map(u => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n+        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n+      </li>`).join('');\r\n+    cliSug.classList.remove('hidden');\r\n+    cliSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', async () => {\r\n+        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n+        if (cliInput) cliInput.value = li.dataset.nome;\r\n+        cliSug.classList.add('hidden');\r\n+        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n+        const pets = await resp.json().catch(() => []);\r\n+        if (petSelect) {\r\n+          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+        }\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  function confirmAsync(title, message, opts = {}) {\r\n+    const confirmText = opts.confirmText || 'Excluir';\r\n+    const cancelText  = opts.cancelText  || 'Cancelar';\r\n+\r\n+    if (typeof window.showModal === 'function') {\r\n+      return new Promise((resolve) => {\r\n+        // 1) Esconde temporariamente o modal de edição (sem desmontar)\r\n+        const prevVis = modal ? modal.style.visibility : '';\r\n+        const prevPe  = modal ? modal.style.pointerEvents : '';\r\n+        if (modal) {\r\n+          modal.style.visibility = 'hidden';\r\n+          modal.style.pointerEvents = 'none';\r\n+        }\r\n+\r\n+        // 2) Abre o modal padrão do projeto\r\n+        window.showModal({\r\n+          title: title || 'Confirmação',\r\n+          message: message || 'Deseja prosseguir?',\r\n+          confirmText,\r\n+          cancelText,\r\n+          onConfirm: () => { restore(); resolve(true); },\r\n+          onCancel : () => { restore(); resolve(false); }\r\n+        });\r\n+\r\n+        // 3) Após montar, garante overlay por cima de tudo\r\n+        //    (pega o último elemento \"fixed\" full-screen e sobe o z-index)\r\n+        const bump = () => {\r\n+          try {\r\n+            const all = Array.from(document.querySelectorAll('body *'));\r\n+            const overlays = all.filter(el => {\r\n+              const cs = getComputedStyle(el);\r\n+              if (cs.position !== 'fixed') return false;\r\n+              const r = el.getBoundingClientRect();\r\n+              return r.width >= window.innerWidth * 0.95 && r.height >= window.innerHeight * 0.95;\r\n+            });\r\n+            const overlay = overlays.at(-1);\r\n+            if (overlay) {\r\n+              overlay.style.zIndex = '9999';\r\n+              overlay.style.pointerEvents = 'auto';\r\n+            }\r\n+          } catch (_) { /* noop */ }\r\n+        };\r\n+        requestAnimationFrame(bump);\r\n+        setTimeout(bump, 0);\r\n+\r\n+        // 4) Restaura o modal de edição quando fechar a confirmação\r\n+        function restore() {\r\n+          if (modal) {\r\n+            modal.style.visibility = prevVis || '';\r\n+            modal.style.pointerEvents = prevPe || '';\r\n+          }\r\n+        }\r\n+      });\r\n+    }\r\n+\r\n+    // Fallback (apenas se o componente não existir)\r\n+    const ok = window.confirm(message || title || 'Confirmar?');\r\n+    return Promise.resolve(!!ok);\r\n+  }\r\n+\r\n+  async function handleDelete() {\r\n+      const id = state.editing && state.editing._id ? String(state.editing._id) : null;\r\n+      if (!id) return;\r\n+\r\n+      const ok = await confirmAsync('Excluir atendimento', 'Tem ce...a excluir este atendimento? Esta ação não pode ser desfeita.', {\r\n+        confirmText: 'Excluir',\r\n+        cancelText: 'Cancelar'\r\n+      });\r\n+      if (!ok) return;\r\n+\r\n+      const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(() => ({}));\r\n+        alert(err.message || 'Erro ao excluir agendamento');\r\n+        return;\r\n+      }\r\n+      await loadAgendamentos();\r\n+      renderKpis();\r\n+      renderFilters();\r\n+      closeModal();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+  }\r\n+\r\n+  // Busca serviços\r\n+  async function searchServicos(term) {\r\n+    if (!term || term.length < 2) {\r\n+      if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+      return;\r\n+    }\r\n+    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    if (!servSug) return;\r\n+    servSug.innerHTML = list.map(s => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor}\">\r\n+        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${money(s.valor)}</div>\r\n+      </li>`).join('');\r\n+    servSug.classList.remove('hidden');\r\n+    servSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', () => {\r\n+        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n+        if (servInput) servInput.value = state.selectedServico.nome;\r\n+        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n+        servSug.classList.add('hidden');\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  // --- Lista de serviços no modal ---\r\n+  function renderServicosLista() {\r\n+    if (!servListUL || !servTotalEl) return;\r\n+    const items = state.tempServicos || [];\r\n+    servListUL.innerHTML = items.map((it, idx) => `\r\n+      <li class=\"flex items-center justify-between px-3 py-2 text-sm\">\r\n+        <div class=\"flex items-center gap-3\">\r\n+          <span class=\"w-20 text-right tabular-nums\">${money(Number(it.valor || 0))}</span>\r\n+          <span class=\"text-gray-700\">${it.nome || ''}</span>\r\n+        </div>\r\n+        <button data-idx=\"${idx}\" class=\"remove-serv px-2 py-1 rounded-md border text-gray-600 hover:bg-gray-50\">Remover</button>\r\n+      </li>\r\n+    `).join('');\r\n+    const total = items.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+    servTotalEl.textContent = money(total);\r\n+\r\n+    servListUL.querySelectorAll('.remove-serv').forEach(btn => {\r\n+      btn.addEventListener('click', () => {\r\n+        const i = parseInt(btn.getAttribute('data-idx'), 10);\r\n+        if (!isNaN(i)) {\r\n+          state.tempServicos.splice(i, 1);\r\n+          renderServicosLista();\r\n+        }\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  // Salvar (adicionar/editar)\r\n+  async function saveAgendamento() {\r\n+      try {\r\n+        const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n+        const storeIdSelected = (addStoreSelect?.value) || state.selectedStoreId || storeSelect?.value;\r\n+        const hora = horaInput?.value;\r\n+        const profissionalId = profSelect?.value;\r\n+        const status = (statusSelect?.value) || 'agendado';\r\n+\r\n+        if (!hora || !profissionalId) { alert('Preencha hora e profissional.'); return; }\r\n+        if (!storeIdSelected) { alert('Selecione a empresa.'); return; }\r\n+\r\n+        const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n+\r\n+        // Edição\r\n+        if (state.editing && state.editing._id) {\r\n+          const id = state.editing._id;\r\n+\r\n+          // usa os itens montados na UI (edição agora permite adicionar/remover)\r\n+          const items = Array.isArray(state.tempServicos) ? state.tempServicos : [];\r\n+          if (!items.length) { alert('Adicione pelo menos 1 serviço ao agendamento.'); return; }\r\n+\r\n+          const body = {\r\n+            storeId: storeIdSelected,\r\n+            profissionalId,\r\n+            scheduledAt,\r\n+            status,\r\n+            observacoes: (obsInput?.value || '').trim(),\r\n+            servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n+            ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n+            ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n+            ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n+          };\r\n+\r\n+          const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\r\n+          if (!resp.ok) {\r\n+            const err = await resp.json().catch(() => ({}));\r\n+            alert(err.message || 'Erro ao atualizar agendamento.');\r\n+            return;\r\n+          }\r\n+\r\n+          await loadAgendamentos();\r\n+          renderKpis();\r\n+          renderFilters();\r\n+          closeModal();\r\n+          renderGrid();\r\n+          enhanceAgendaUI();\r\n+          return;\r\n+        }\r\n+\r\n+        // Adição\r\n+        const clienteId = state.selectedCliente?._id;\r\n+        const petId = petSelect?.value;\r\n+        const items = state.tempServicos || [];\r\n+\r\n+        if (!(clienteId && petId && items.length)) { alert('Preencha cliente, pet e adicione pelo menos 1 serviço.'); return; }\r\n+\r\n+        const body = {\r\n+          storeId: storeIdSelected,\r\n+          clienteId, petId,\r\n+          servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n+          profissionalId, scheduledAt,\r\n+          status,\r\n+          observacoes: (obsInput?.value || '').trim(),\r\n+          pago: false\r\n+        };\r\n+        const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao salvar');\r\n+        }\r\n+\r\n+        await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n+        closeModal();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error(e);\r\n+        alert(e.message || 'Erro ao salvar');\r\n+      }\r\n+    }\r\n+\r\n+  function enhanceAgendaUI() {\r\n+    try {\r\n+      applyZebraAndSublines();\r\n+      decorateCards();\r\n+\r\n+      if (state.view === 'day') {\r\n+        enableDragDrop();\r\n+        drawNowLine();\r\n+\r\n+        const date = normalizeDate(dateInput?.value || todayStr());\r\n+        if (!state.__didInitialScroll && date === todayStr()) {\r\n+          scrollToNow();\r\n+          state.__didInitialScroll = true;\r\n+        }\r\n+      }\r\n+    } catch (e) {\r\n+      console.info('[enhanceAgendaUI] skip', e);\r\n+    }\r\n+  }\r\n+\r\n+  function scrollToNow() {\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body || !state.profissionais?.length) return;\r\n+\r\n+      // encontra a célula da primeira coluna de profissional no horário atual\r\n+      const now = new Date();\r\n+      const hh = String(now.getHours()).padStart(2, '0') + ':00';\r\n+      const firstProfId = String(state.profissionais[0]._id);\r\n+      const target = body.querySelector(`div[data-profissional-id=\"${firstProfId}\"][data-hh=\"${hh}\"]`);\r\n+\r\n+      if (target) {\r\n+        const top = target.getBoundingClientRect().top + window.pageYOffset;\r\n+        const offset = 80; // sobe um pouco para contexto\r\n+        window.scrollTo({ top: Math.max(0, top - offset), behavior: 'smooth' });\r\n+      }\r\n+  }\r\n+\r\n+  // compacta a lista para um hash leve (ordem estável)\r\n+  function snapshotHash(items) {\r\n+    try {\r\n+      const compact = (items || []).map(x => [\r\n+        String(x._id || ''),\r\n+        String(x.status || ''),\r\n+        String(x.h || x.scheduledAt || ''),\r\n+        Number(x.valor || 0),\r\n+        !!x.pago\r\n+      ]).sort((a, b) => a[0].localeCompare(b[0]));\r\n+      return JSON.stringify(compact);\r\n+    } catch (_) {\r\n+      return String(Date.now());\r\n+    }\r\n+  }\r\n+\r\n+  // reconsulta e só re-renderiza se houver mudança relevante\r\n+  async function refreshAgendaIfChanged() {\r\n+    const prev = state.lastSnapshotHash || '';\r\n+    await loadAgendamentos();\r\n+    const next = snapshotHash(state.agendamentos);\r\n+    if (next !== prev) {\r\n+      state.lastSnapshotHash = next;\r\n+      renderGrid();\r\n+      // ao re-render com mesma data de hoje, não repete o scroll\r\n+      enhanceAgendaUI();\r\n+    }\r\n+  }\r\n+\r\n+  // inicia/renova o timer de auto-refresh (60s)\r\n+  function startAutoRefresh() {\r\n+    if (window.__agendaRefreshTimer) clearInterval(window.__agendaRefreshTimer);\r\n+    state.lastSnapshotHash = snapshotHash(state.agendamentos);\r\n+    window.__agendaRefreshTimer = setInterval(refreshAgendaIfChanged, 60000);\r\n+  }\r\n+\r\n+  // cria o botão \"Hoje\" ao lado do input de data (uma vez)\r\n+  function ensureTodayButton() {\r\n+    if (!dateInput) return;\r\n+    if (document.getElementById('agenda-today-btn')) return;\r\n+\r\n+    const btn = document.createElement('button');\r\n+    btn.id = 'agenda-today-btn';\r\n+    btn.type = 'button';\r\n+    btn.className = 'ml-2 inline-flex items-center gap-1 text-xs px-2 py-1 rounded border border-slate-300 text-slate-700 hover:bg-slate-50';\r\n+    btn.textContent = 'Hoje';\r\n+\r\n+    dateInput.insertAdjacentElement('afterend', btn);\r\n+    btn.addEventListener('click', async () => {\r\n+      dateInput.value = todayStr();\r\n+      state.__didInitialScroll = false;   // permite novo auto-scroll\r\n+      await loadAgendamentos();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    });\r\n+  }\r\n+\r\n+  // Zebra de linhas + sublinha 30min com CSS (via classe)\r\n+  function applyZebraAndSublines() {\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n+\r\n+      body.style.position = 'relative'; // para linha do \"agora\"\r\n+      const totalCols = 1 + (state.profissionais?.length || 0); // 1 (hora) + N profissionais\r\n+      if (totalCols <= 0) return;\r\n+\r\n+      const cells = Array.from(body.children);\r\n+      const totalRows = Math.floor(cells.length / totalCols);\r\n+\r\n+      for (let row = 0; row < totalRows; row++) {\r\n+        const start = row * totalCols;\r\n+        const zebraClass = (row % 2 === 0) ? 'bg-white' : 'bg-slate-50';\r\n+\r\n+        // primeira coluna (hora)\r\n+        const tCell = cells[start];\r\n+        if (tCell) {\r\n+          tCell.classList.remove('bg-white','bg-slate-50');\r\n+          tCell.classList.add(zebraClass);\r\n+        }\r\n+\r\n+        // colunas dos profissionais\r\n+        for (let col = 1; col < totalCols; col++) {\r\n+          const idx = start + col;\r\n+          const slot = cells[idx];\r\n+          if (!slot) continue;\r\n+          slot.classList.remove('bg-white','bg-slate-50');\r\n+          slot.classList.add(zebraClass, 'agenda-slot'); // garante classe\r\n+        }\r\n+      }\r\n+  }\r\n+\r\n+  // Insere ícones de ação nos cartões (editar / mudar status)\r\n+  function decorateCards() {\r\n+    const cards = agendaList?.querySelectorAll('div[data-appointment-id]');\r\n+    if (!cards || !cards.length) return;\r\n+\r\n+    cards.forEach((card) => {\r\n+      if (card.querySelector('.agenda-card__actions')) return; // já decorado\r\n+      card.classList.add('agenda-card'); // ativa hover via CSS\r\n+      card.style.position = 'relative';\r\n+\r\n+      const id = card.getAttribute('data-appointment-id') || '';\r\n+      const item = (state.agendamentos || []).find(x => String(x._id) === String(id)) || {};\r\n+      const isPaid = !!item.pago;\r\n+\r\n+      const actions = document.createElement('div');\r\n+      // flex em coluna para ter a “segunda linha” abaixo do '+'\r\n+      actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex flex-col items-end gap-1';\r\n+\r\n+      actions.innerHTML = `\r\n+        <!-- primeira linha: editar + status (mantém seu layout atual lado a lado) -->\r\n+        <div class=\"flex items-center gap-1\">\r\n+          <button class=\"agenda-action edit\" data-id=\"${id}\" title=\"Editar\">\r\n+            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\">\r\n+              <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 0 0 0-1.41L18.37 3.29a1.003 1.003 0 0 0-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.83z\"/>\r\n+            </svg>\r\n+          </button>\r\n+          <button class=\"agenda-action status\" data-id=\"${id}\" title=\"Mudar status\">\r\n+            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n+              <circle cx=\"12\" cy=\"12\" r=\"9\" stroke-width=\"2\"></circle>\r\n+              <path d=\"M12 7v5l3 3\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\r\n+            </svg>\r\n+          </button>\r\n+        </div>\r\n+\r\n+        <!-- segunda linha: ícone de pagamento (abaixo do '+') -->\r\n+        <button class=\"agenda-action cobrar ${isPaid ? 'text-green-600' : 'text-slate-500'}\" data-id=\"${id}\" title=\"${isPaid ? 'Pago' : 'Registrar pagamento'}\">\r\n+          ${\r\n+            isPaid\r\n+              // Cifão normal (Real)\r\n+              ? `<i class=\"fa-solid fa-dollar-sign text-[16px] leading-none\"></i>`\r\n+              // Cifrão com risco (stack do FA para “pendente”)\r\n+              : `<span class=\"fa-stack text-[12px] leading-none\" style=\"width: 1.25em;\">\r\n+                  <i class=\"fa-solid fa-dollar-sign fa-stack-1x\"></i>\r\n+                  <i class=\"fa-solid fa-slash fa-stack-1x\"></i>\r\n+                </span>`\r\n+          }\r\n+        </button>\r\n+      `;\r\n+      card.appendChild(actions);\r\n+    });\r\n+  }\r\n+\r\n+  /* === Drag & Drop na agenda: mover card entre horários/profissionais === */\r\n+  function injectDndStylesOnce() {\r\n+    if (document.getElementById('agenda-dnd-style')) return;\r\n+    const st = document.createElement('style');\r\n+    st.id = 'agenda-dnd-style';\r\n+    st.textContent = `\r\n+      .agenda-card.is-dragging { opacity: .6; }\r\n+      .agenda-drop-target { outline: 2px dashed #0ea5e9; outline-offset: -2px; background: rgba(14,165,233,0.06); }\r\n+    `;\r\n+    document.head.appendChild(st);\r\n+  }\r\n+\r\n+  // PUT rápido para mover agendamento (profissional/horário)\r\n+  async function moveAppointmentQuick(id, payload) {\r\n+      try {\r\n+        const body = {\r\n+          ...payload,\r\n+          storeId: state.selectedStoreId || storeSelect?.value\r\n+        };\r\n+        const resp = await api(`/func/agendamentos/${id}`, {\r\n+          method: 'PUT',\r\n+          headers: { 'Content-Type': 'application/json' },\r\n+          body: JSON.stringify(body)\r\n+        });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao mover agendamento');\r\n+        }\r\n+        await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error('moveAppointmentQuick', e);\r\n+        alert(e.message || 'Não foi possível mover o agendamento.');\r\n+      }\r\n+    }\r\n+\r\n+  function enableDragDrop() {\r\n+      injectDndStylesOnce();\r\n+\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n+\r\n+      // Garante que todos os cards estejam \"arrastáveis\"\r\n+      body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n+        if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n+      });\r\n+\r\n+      // Evita múltiplos binds ao re-renderizar a agenda\r\n+      if (body.__dndDelegated) return;\r\n+      body.__dndDelegated = true;\r\n+\r\n+      // DRAGSTART (captura): funciona mesmo se o usuário começar o arrasto em um filho do card\r\n+      body.addEventListener('dragstart', (ev) => {\r\n+        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+        if (!card || !ev.dataTransfer) return;\r\n+\r\n+        const id = card.getAttribute('data-appointment-id') || '';\r\n+        if (!id) return;\r\n+\r\n+        try { ev.dataTransfer.setData('text/plain', id); } catch (_) {}\r\n+        try { ev.dataTransfer.setDragImage(card, 10, 10); } catch (_) {}\r\n+        ev.dataTransfer.effectAllowed = 'move';\r\n+        card.classList.add('is-dragging');\r\n+      }, true);\r\n+\r\n+      // DRAGEND: limpa estados visuais\r\n+      body.addEventListener('dragend', (ev) => {\r\n+        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+        if (card) card.classList.remove('is-dragging');\r\n+        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n+      }, true);\r\n+\r\n+      // DRAGOVER: habilita drop quando o ponteiro está sobre QUALQUER filho dentro da célula\r\n+      body.addEventListener('dragover', (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        ev.preventDefault();                 // obrigatório para permitir drop\r\n+        if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n+        slot.classList.add('agenda-drop-target');\r\n+      });\r\n+\r\n+      // DRAGLEAVE: remove realce\r\n+      body.addEventListener('dragleave', (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        slot.classList.remove('agenda-drop-target');\r\n+      });\r\n+\r\n+      // DROP: pega a célula alvo e move (profissional + horário)\r\n+      body.addEventListener('drop', async (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        ev.preventDefault();\r\n+        slot.classList.remove('agenda-drop-target');\r\n+\r\n+        const id = ev.dataTransfer?.getData('text/plain');\r\n+        if (!id) return;\r\n+\r\n+        const newProf = slot.dataset.profissionalId;\r\n+        const hh      = slot.dataset.hh; // ex.: \"14:00\"\r\n+        if (!newProf || !hh) return;\r\n+\r\n+        const dateRaw     = normalizeDate(dateInput?.value || todayStr());\r\n+        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n+\r\n+        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n+      });\r\n+  }\r\n+\r\n+  async function loadProfissionais() {\r\n+    if (!state.selectedStoreId) {\r\n+      state.profissionais = [];\r\n+      if (profSelect) profSelect.innerHTML = '';\r\n+      return;\r\n+    }\r\n+\r\n+    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.profissionais = Array.isArray(list) ? list : [];\r\n+\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais\r\n+        .map(p => `<option value=\"${p._id}\">${p.nome}</option>`)\r\n+        .join('');\r\n+    }\r\n+  }\r\n+\r\n+  // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n+  function drawNowLine() {\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n+\r\n+      body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n+\r\n+      const now = new Date();\r\n+      const minutes = now.getHours() * 60 + now.getMinutes();\r\n+      const percent = minutes / (24 * 60);\r\n+      const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n+\r\n+      const line = document.createElement('div');\r\n+      line.className = 'agenda-nowline';\r\n+      line.style.top = `${y}px`;\r\n+      body.appendChild(line);\r\n+\r\n+      if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n+      window.__agendaNowTimer = setInterval(() => {\r\n+        const now2 = new Date();\r\n+        const minutes2 = now2.getHours() * 60 + now2.getMinutes();\r\n+        const percent2 = minutes2 / (24 * 60);\r\n+        const y2 = Math.max(0, Math.min(1, percent2)) * body.scrollHeight;\r\n+        const ln = body.querySelector('.agenda-nowline');\r\n+        if (ln) ln.style.top = `${y2}px`;\r\n+      }, 60_000);\r\n+  }\r\n+\r\n+  // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n+  async function updateStatusQuick(id, status) {\r\n+      try {\r\n+        const resp = await api(`/func/agendamentos/${id}`, {\r\n+          method: 'PUT',\r\n+          headers: { 'Content-Type': 'application/json' },\r\n+          body: JSON.stringify({ status })\r\n+        });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao mudar status');\r\n+        }\r\n+        await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error('updateStatusQuick', e);\r\n+        alert(e.message || 'Erro ao mudar status');\r\n+      }\r\n+    }\r\n+\r\n+    // === Impressão em cupom (80mm) ===\r\n+  function buildCupomHTML(items, meta = {}) {\r\n+    const storeName = (meta.storeName || '').trim();\r\n+    const dateStr   = (meta.dateStr || '').trim();\r\n+\r\n+    const rows = (items || []).map(a => {\r\n+      const pet   = (a.pet || '').toString().trim();\r\n+      const serv  = (a.servico || '').toString().trim();\r\n+      const valor = money(Number(a.valor || 0));\r\n+      // \"Pet Serviço - Valor\" em linha única\r\n+      return `<div class=\"row\"><span class=\"txt\">${pet} ${serv}</span><span class=\"val\">${valor}</span></div>`;\r\n+    }).join('');\r\n+\r\n+    return `\r\n+  <!doctype html>\r\n+  <html>\r\n+  <head>\r\n+    <meta charset=\"utf-8\">\r\n+    <title>Impressão</title>\r\n+    <style>\r\n+      @page { size: 80mm auto; margin: 3mm; }\r\n+      * { box-sizing: border-box; }\r\n+      html, body { padding: 0; margin: 0; }\r\n+      /* Aumenta um pouco o tamanho e usa preto sólido para ganhar contraste na térmica */\r\n+      body {\r\n+        width: 74mm;\r\n+        font: 13px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\";\r\n+        color: #000;\r\n+        -webkit-font-smoothing: none; /* deixa o traço mais “cheio” na impressão */\r\n+        font-weight: 600; /* base mais pesada */\r\n+      }\r\n+      .wrap { padding: 2mm 0; }\r\n+      .h1 { text-align:center; font-weight:700; font-size: 15px; margin-bottom: 1mm; }\r\n+      .meta { text-align:center; font-size: 12px; color:#000; font-weight:700; margin-bottom: 2mm; }\r\n+      .hr { border-top: 1px dashed #000; margin: 2mm 0; }\r\n+      .row { display:flex; align-items:flex-start; justify-content:space-between; gap: 4mm; padding: 1mm 0; }\r\n+      /* Linhas do cupom bem escuras */\r\n+      .row .txt { flex: 1 1 auto; word-break: break-word; font-weight:700; }\r\n+      .row .val { flex: 0 0 auto; white-space: nowrap; font-weight:700; }\r\n+      .foot { text-align:center; margin-top: 2mm; font-size: 12px; color:#000; font-weight:700; }\r\n+      @media print { .no-print { display: none !important; } }\r\n+    </style>\r\n+  </head>\r\n+  <body>\r\n+    <div class=\"wrap\">\r\n+      <div class=\"h1\">Agenda</div>\r\n+      <div class=\"meta\">${storeName ? storeName + ' • ' : ''}${dateStr}</div>\r\n+      <div class=\"hr\"></div>\r\n+      ${rows || '<div class=\"row\"><span class=\"txt\">Sem itens</span><span class=\"val\"></span></div>'}\r\n+      <div class=\"hr\"></div>\r\n+      <div class=\"foot\">Obrigado!</div>\r\n+    </div>\r\n+    <script>\r\n+      window.onload = function(){ setTimeout(function(){ window.print(); }, 50); };\r\n+      window.onafterprint = function(){ setTimeout(function(){ window.close(); }, 50); };\r\n+    </script>\r\n+  </body>\r\n+  </html>`;\r\n+  }\r\n+\r\n+  function handlePrintCupom() {\r\n+    try {\r\n+      const items = getFilteredAgendamentos();\r\n+\r\n+      // Ordena por horário (se houver)\r\n+      items.sort((a, b) => {\r\n+        const da = new Date(a.h || a.scheduledAt || 0).getTime();\r\n+        const db = new Date(b.h || b.scheduledAt || 0).getTime();\r\n+        return da - db;\r\n+      });\r\n+\r\n+      const dateStr =\r\n+        (document.getElementById('agenda-date-label-visible')?.textContent || '').trim() ||\r\n+        new Date((normalizeDate(dateInput?.value || todayStr())) + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+\r\n+      const storeName =\r\n+        (document.getElementById('agenda-store-label-visible')?.textContent || '').trim();\r\n+\r\n+      const html = buildCupomHTML(items, { storeName, dateStr });\r\n+\r\n+      const w = window.open('', 'print_cupom', 'width=420,height=600');\r\n+      if (!w) { alert('O navegador bloqueou a janela de impressão. Habilite pop-ups para continuar.'); return; }\r\n+      w.document.open('text/html');\r\n+      w.document.write(html);\r\n+      w.document.close();\r\n+      w.focus();\r\n+    } catch (e) {\r\n+      console.error('handlePrintCupom', e);\r\n+      alert('Não foi possível preparar a impressão.');\r\n+    }\r\n+  }\r\n+\r\n+  // Events\r\n+  addBtn?.addEventListener('click', openAddModal);\r\n+  modalClose?.addEventListener('click', closeModal);\r\n+  modalCancel?.addEventListener('click', closeModal);\r\n+  modalSave?.addEventListener('click', saveAgendamento);\r\n+\r\n+  addStoreSelect?.addEventListener('change', () => {\r\n+    const sid = addStoreSelect.value;\r\n+    const current = profSelect?.value || '';\r\n+    populateModalProfissionais(sid, current);\r\n+  });\r\n+\r\n+  // Botão \"Imprimir\" — cupom 80mm com \"Pet Serviço - Valor\"\r\n+    (function () {\r\n+      const btn0 = document.getElementById('print-agenda-btn');\r\n+      // (se algum listener antigo ainda existir em outro build, garantimos o nosso fluxo)\r\n+      if (btn0) {\r\n+        // remove listeners antigos (se houver) clonando o nó\r\n+        const clone = btn0.cloneNode(true);\r\n+        btn0.parentNode.replaceChild(clone, btn0);\r\n+        clone.addEventListener('click', (ev) => {\r\n+          ev.preventDefault();\r\n+          ev.stopImmediatePropagation?.();\r\n+          handlePrintCupom();\r\n+        });\r\n+      }\r\n+    })();\r\n+\r\n+  cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n+  servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n+\r\n+  addServAddBtn?.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    const s = state.selectedServico;\r\n+    const v = Number(valorInput?.value || 0);\r\n+    if (!s || !s._id) { alert('Escolha um serviço na busca.'); return; }\r\n+    if (!(v >= 0)) { alert('Valor inválido.'); return; }\r\n+    state.tempServicos.push({ _id: s._id, nome: s.nome, valor: v });\r\n+    // limpa seleção\r\n+    state.selectedServico = null;\r\n+    if (servInput)  servInput.value = '';\r\n+    if (valorInput) valorInput.value = '';\r\n+    renderServicosLista();\r\n+  });\r\n+\r\n+  modalDelete?.addEventListener('click', handleDelete);\r\n+\r\n+  // Ações rápidas nos cartões (delegação no container da agenda)\r\n+  agendaList?.addEventListener('click', (ev) => {\r\n+    // toggle do menu mobile\r\n+    const more = ev.target.closest('.agenda-card__more');\r\n+    if (more) {\r\n+      const holder = more.parentElement?.querySelector('.agenda-card__actions');\r\n+      if (holder) holder.classList.toggle('hidden');\r\n+      return;\r\n+    }\r\n+\r\n+    const btn = ev.target.closest('.agenda-action');\r\n+    if (!btn) return;\r\n+    const id = btn.getAttribute('data-id');\r\n+    if (!id) return;\r\n+\r\n+    if (btn.classList.contains('edit')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      if (item) openEditModal(item);\r\n+    } else if (btn.classList.contains('status')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+      const cur = (item && item.status) || 'agendado';\r\n+      const next = chain[(chain.indexOf(cur) + 1) % chain.length];\r\n+      updateStatusQuick(id, next);\r\n+    } else if (btn.classList.contains('cobrar')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      if (item) openEditModal(item); // reaproveite seu modal/fluxo de cobrança\r\n+    }\r\n+  });\r\n+\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    updateStoreLabel();\r\n+    state.__didInitialScroll = false;     // nova loja -> recalcula scroll\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;     // nova data -> permite auto-scroll\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  // Boot\r\n+  function setupShortcuts() {\r\n+    document.addEventListener('keydown', (e) => {\r\n+      if (e.target && ['INPUT','SELECT','TEXTAREA'].includes(e.target.tagName)) return; // não atrapalhar digitação\r\n+      if (e.key === 't' || e.key === 'T') {\r\n+        if (dateInput) {\r\n+          dateInput.value = todayStr();\r\n+          state.__didInitialScroll = false;\r\n+          loadAgendamentos().then(() => {\r\n+            renderKpis(); renderFilters(); renderGrid(); enhanceAgendaUI();\r\n+          });\r\n+        }\r\n+      }\r\n+      if (e.key === 'n' || e.key === 'N') {\r\n+        e.preventDefault();\r\n+        openAddModal();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  (async function init() {\r\n+    if (!dateInput?.value) dateInput.value = todayStr();\r\n+    if (viewSelect && !viewSelect.value) viewSelect.value = 'day';\r\n+    state.view = (viewSelect?.value) || 'day';\r\n+\r\n+    loadFiltersFromStorage();\r\n+    await loadStores();\r\n+    if (!state.selectedStoreId && storeSelect?.value) {\r\n+      state.selectedStoreId = storeSelect.value;\r\n+    }\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+\r\n+    ensureToolbar();\r\n+    ensureTodayButton();\r\n+    setupShortcuts();\r\n+\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  })();\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  viewSelect?.addEventListener('change', async () => {\r\n+    state.view = viewSelect.value || 'day';\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  // Atualizações após troca de loja/data/status etc.\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    updateStoreLabel();\r\n+    state.__didInitialScroll = false;\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+})();\r\n"
                },
                {
                    "date": 1757601406040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2047,4096 +2047,4 @@\n     renderGrid();\r\n     enhanceAgendaUI();\r\n   });\r\n })();\r\n-(function () {\r\n-  // Helper para requisições com token\r\n-  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n-  function api(url, opts = {}) {\r\n-    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n-      ...opts,\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        ...(opts.headers || {}),\r\n-        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  // Elements\r\n-  const agendaList = document.getElementById('agenda-list');\r\n-  const dateInput = document.getElementById('agenda-date');\r\n-  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n-  const viewSelect = document.getElementById('agenda-view');\r\n-  const addBtn = document.getElementById('add-service-btn');\r\n-  const storeSelect = document.getElementById('agenda-store');\r\n-  const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n-\r\n-  // Modal (reutilizado p/ adicionar e editar)\r\n-  const modal = document.getElementById('modal-add-servico');\r\n-  const modalClose = document.getElementById('modal-add-close');\r\n-  const modalCancel = document.getElementById('modal-add-cancel');\r\n-  const modalSave = document.getElementById('modal-add-save');\r\n-  const modalDelete = document.getElementById('modal-add-delete');\r\n-\r\n-  const addStoreSelect = document.getElementById('add-store-select');\r\n-  const addDateInput   = document.getElementById('add-date');\r\n-  const statusSelect   = document.getElementById('add-status');\r\n-\r\n-  const cliInput = document.getElementById('add-cli-input');\r\n-  const cliSug = document.getElementById('add-cli-sug');\r\n-  const petSelect = document.getElementById('add-pet-select');\r\n-  const servInput   = document.getElementById('add-serv-input');\r\n-  const servSug     = document.getElementById('add-serv-sug');\r\n-  const valorInput  = document.getElementById('add-valor');\r\n-  const addServAddBtn = document.getElementById('add-serv-add-btn');\r\n-  const servListUL  = document.getElementById('add-serv-list');\r\n-  const servTotalEl = document.getElementById('add-serv-total');\r\n-  const obsInput   = document.getElementById('add-observacoes');\r\n-  const horaInput   = document.getElementById('add-hora');\r\n-  const profSelect  = document.getElementById('add-prof-select');\r\n-\r\n-  // State\r\n-  const FILTER_STORAGE_KEY = 'agenda_filters_v1';\r\n-\r\n-  const state = {\r\n-    stores: [],\r\n-    profissionais: [],\r\n-    agendamentos: [],\r\n-    selectedStoreId: null,\r\n-    selectedCliente: null,\r\n-    selectedServico: null,\r\n-    tempServicos: [],\r\n-    editing: null,\r\n-    lastSnapshotHash: '',\r\n-    __didInitialScroll: false,\r\n-    view: 'day',\r\n-    filters: {                 // filtros persistentes\r\n-      statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n-      profIds: new Set()       // _id dos profissionais\r\n-    }\r\n-  };\r\n-\r\n-  function loadFiltersFromStorage() {\r\n-    try {\r\n-      const raw = JSON.parse(localStorage.getItem(FILTER_STORAGE_KEY) || 'null');\r\n-      if (raw && typeof raw === 'object') {\r\n-        state.filters.statuses = new Set(Array.isArray(raw.statuses) ? raw.statuses : []);\r\n-        state.filters.profIds  = new Set(Array.isArray(raw.profIds)  ? raw.profIds  : []);\r\n-      }\r\n-    } catch(_) {}\r\n-  }\r\n-  function saveFiltersToStorage() {\r\n-    try {\r\n-      localStorage.setItem(FILTER_STORAGE_KEY, JSON.stringify({\r\n-        statuses: Array.from(state.filters.statuses),\r\n-        profIds : Array.from(state.filters.profIds)\r\n-      }));\r\n-    } catch(_) {}\r\n-  }\r\n-\r\n-  function ensureToolbar() {\r\n-    if (!agendaList) return;\r\n-    if (document.getElementById('agenda-toolbar')) return;\r\n-\r\n-    const bar = document.createElement('div');\r\n-    bar.id = 'agenda-toolbar';\r\n-    // sticky sob o cabeçalho; leve blur para legibilidade; borda inferior discreta\r\n-    bar.className = 'sticky top-0 z-30 bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/60 border-b border-slate-200 mb-2 flex flex-col gap-2 px-3 py-2 rounded-lg';\r\n-\r\n-    // KPIs\r\n-    const kpis = document.createElement('div');\r\n-    kpis.id = 'agenda-kpis';\r\n-    kpis.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(kpis);\r\n-\r\n-    // Filtros\r\n-    const filters = document.createElement('div');\r\n-    filters.id = 'agenda-filters';\r\n-    filters.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(filters);\r\n-\r\n-    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n-  }\r\n-\r\n-  function computeKPIs(items) {\r\n-    const total = items.length;\r\n-    const previsto = items.reduce((s, i) => s + Number(i.valor || 0), 0);\r\n-    const recebido = items.reduce((s, i) => s + (i.pago ? Number(i.valor || 0) : 0), 0);\r\n-    const pendente = previsto - recebido;\r\n-    return { total, previsto, recebido, pendente };\r\n-  }\r\n-\r\n-  function renderKpis() {\r\n-    const wrap = document.getElementById('agenda-kpis');\r\n-    if (!wrap) return;\r\n-\r\n-    const all = state.agendamentos || [];\r\n-    const f = getFilteredAgendamentos();   // filtrados atuais\r\n-    const kAll = computeKPIs(all);\r\n-    const kF   = computeKPIs(f);\r\n-\r\n-    const totalLabel = state.view === 'week' ? 'Total semana' : (state.view === 'month' ? 'Total mês' : 'Total dia');\r\n-    wrap.innerHTML = `\r\n-      <div class=\"kpi-chip\">${totalLabel}: <strong>${kAll.total}</strong></div>\r\n-      <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n-      <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n-      <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n-      ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n-          ? `<div class=\"kpi-chip kpi-muted\">Filtrados: <strong>${kF.total}</strong></div>` : '' }\r\n-    `;\r\n-  }\r\n-\r\n-  function renderFilters() {\r\n-    const el = document.getElementById('agenda-filters');\r\n-    if (!el) return;\r\n-\r\n-    // contadores por status\r\n-    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n-    for (const a of (state.agendamentos || [])) {\r\n-      const key = String(a.status || 'agendado')\r\n-        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n-      if (counts[key] !== undefined) counts[key] += 1;\r\n-    }\r\n-\r\n-    // contadores por profissional\r\n-    const byProf = new Map();\r\n-    for (const a of (state.agendamentos || [])) {\r\n-      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n-      if (!id) continue;\r\n-      const key = String(id);\r\n-      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n-    }\r\n-\r\n-    const statuses = [\r\n-      {key:'agendado', label:'Agend.'},\r\n-      {key:'em_espera', label:'Espera'},\r\n-      {key:'em_atendimento', label:'Atend.'},\r\n-      {key:'finalizado', label:'Fim.'}\r\n-    ];\r\n-\r\n-    // chips de status\r\n-    const chipsStatus = statuses.map(s => {\r\n-      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n-      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n-                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n-              </button>`;\r\n-    }).join('');\r\n-\r\n-    // chips de profissional (apenas os que existem)\r\n-    const chipsProf = (state.profissionais || []).map(p => {\r\n-      const id = String(p._id);\r\n-      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n-      const n = byProf.get(id) || 0;\r\n-      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n-                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n-              </button>`;\r\n-    }).join('');\r\n-\r\n-    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n-      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n-\r\n-    el.innerHTML = `\r\n-      <div class=\"flex flex-wrap items-center gap-2\">\r\n-        ${chipsStatus}\r\n-        <span class=\"chip-sep\"></span>\r\n-        ${chipsProf}\r\n-        ${clearBtn}\r\n-      </div>\r\n-    `;\r\n-\r\n-    // handlers\r\n-    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n-      btn.addEventListener('click', () => {\r\n-        const type = btn.getAttribute('data-filter');\r\n-        const val  = btn.getAttribute('data-value');\r\n-        if (type === 'status') {\r\n-          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n-        } else if (type === 'prof') {\r\n-          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n-        }\r\n-        saveFiltersToStorage();\r\n-        renderFilters();\r\n-        renderKpis();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      });\r\n-    });\r\n-\r\n-    const clear = document.getElementById('chip-clear');\r\n-    if (clear) clear.addEventListener('click', () => {\r\n-      state.filters.statuses.clear();\r\n-      state.filters.profIds.clear();\r\n-      saveFiltersToStorage();\r\n-      renderFilters();\r\n-      renderKpis();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    });\r\n-  }\r\n-\r\n-  function normalizeStatus(s) {\r\n-    return String(s || 'agendado')\r\n-      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-      .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n-  }\r\n-\r\n-  function getFilteredAgendamentos() {\r\n-    const hasStatus = state.filters.statuses.size > 0;\r\n-    const hasProf   = state.filters.profIds.size   > 0;\r\n-\r\n-    if (!hasStatus && !hasProf) return state.agendamentos || [];\r\n-\r\n-    const byNameAll = new Map(\r\n-      (state.profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n-    );\r\n-\r\n-    return (state.agendamentos || []).filter(a => {\r\n-      let ok = true;\r\n-      if (hasStatus) ok = ok && state.filters.statuses.has(normalizeStatus(a.status));\r\n-      if (hasProf) {\r\n-        let pid = a.profissionalId ? String(a.profissionalId) : null;\r\n-        if (!pid) {\r\n-          let nc = '';\r\n-          if (typeof a.profissional === 'string') nc = a.profissional;\r\n-          else if (a.profissional && typeof a.profissional === 'object') {\r\n-            nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n-                a.profissional.razaoSocial || a.profissional.nome || '';\r\n-          }\r\n-          pid = byNameAll.get(String(nc).trim().toLowerCase()) || null;\r\n-        }\r\n-        ok = ok && pid && state.filters.profIds.has(String(pid));\r\n-      }\r\n-      return ok;\r\n-    });\r\n-  }\r\n-\r\n-  function getVisibleProfissionais() {\r\n-    const profs = state.profissionais || [];\r\n-    if (!state.filters.profIds.size) return profs;\r\n-    return profs.filter(p => state.filters.profIds.has(String(p._id)));\r\n-  }\r\n-\r\n-  // Helpers de data e utilitários\r\n-  function todayStr() {\r\n-    // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n-    const d = new Date();\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n-  function buildLocalDateTime(dateStr, hhmm) {\r\n-    let y, m, d;\r\n-    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) { [d, m, y] = dateStr.split('/').map(Number); }\r\n-    else { [y, m, d] = dateStr.split('-').map(Number); }\r\n-    const [hh, mm] = (hhmm || '00:00').split(':').map(Number);\r\n-    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n-  }\r\n-  function normalizeDate(v) {\r\n-    if (!v) return todayStr();\r\n-    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n-    return v;\r\n-  }\r\n-\r\n-  // ==== NOVO: utilitários de intervalo e label ====\r\n-  function startOfWeek(dateStr) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    const dow = (d.getDay() + 6) % 7; // 0 = seg\r\n-    d.setDate(d.getDate() - dow);\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function addDays(dateStr, n) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    d.setDate(d.getDate() + n);\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function startOfMonth(dateStr) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    d.setDate(1);\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function startOfNextMonth(dateStr) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    d.setDate(1);\r\n-    d.setMonth(d.getMonth() + 1);\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function updateHeaderLabel() {\r\n-    if (!dateLabelVisible) return;\r\n-    const base = normalizeDate(dateInput?.value || todayStr());\r\n-    if (state.view === 'week') {\r\n-      const ini = startOfWeek(base);\r\n-      const fim = addDays(ini, 6);\r\n-      const li = new Date(ini + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-      const lf = new Date(fim + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-      dateLabelVisible.textContent = `${li} a ${lf}`;\r\n-    } else if (state.view === 'month') {\r\n-      const m0 = startOfMonth(base);\r\n-      const dt = new Date(m0 + 'T00:00:00');\r\n-      const label = dt.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });\r\n-      dateLabelVisible.textContent = label.charAt(0).toUpperCase() + label.slice(1);\r\n-    } else {\r\n-      dateLabelVisible.textContent = new Date(base + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-    }\r\n-  }\r\n-  function localDateStr(d) {\r\n-    const y = d.getFullYear();\r\n-    const m = String(d.getMonth() + 1).padStart(2, '0');\r\n-    const dd = String(d.getDate()).padStart(2, '0');\r\n-    return `${y}-${m}-${dd}`;\r\n-  }\r\n-\r\n-  // === NOVO: abrevia tutor para \"Primeiro Sob..\" ===\r\n-  function shortTutorName(name) {\r\n-    if (!name) return '';\r\n-    const parts = String(name).trim().split(/\\s+/);\r\n-    const cap = s => s ? (s[0].toUpperCase() + s.slice(1).toLowerCase()) : '';\r\n-    const preps = new Set(['da','de','do','das','dos','e']);\r\n-    const first = cap(parts[0] || '');\r\n-    let second = '';\r\n-    for (let i = 1; i < parts.length; i++) {\r\n-      const w = parts[i];\r\n-      if (!preps.has(w.toLowerCase())) { second = w; break; }\r\n-    }\r\n-    const secondAbbr = second ? cap(second).slice(0, 3) : '';\r\n-    return secondAbbr ? `${first} ${secondAbbr}..` : first;\r\n-  }\r\n-\r\n-  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n-  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n-  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n-\r\n-  // Stores\r\n-  async function loadStores() {\r\n-    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    state.stores = Array.isArray(list) ? list : [];\r\n-    if (storeSelect) {\r\n-      storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-    }\r\n-    if (!state.selectedStoreId && state.stores[0]) {\r\n-      state.selectedStoreId = state.stores[0]._id;\r\n-      if (storeSelect) storeSelect.value = state.selectedStoreId;\r\n-    }\r\n-    updateStoreLabel();\r\n-  }\r\n-  function updateStoreLabel() {\r\n-    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n-    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n-    const vis = document.getElementById('agenda-store-label-visible');\r\n-    if (vis) vis.textContent = s ? s.nome : '—';\r\n-  }\r\n-\r\n-  // Profissionais\r\n-  async function populateModalProfissionais(storeId, preselectId) {\r\n-    try {\r\n-      if (!storeId || !profSelect) return;\r\n-      const resp = await api(`/func/profissionais/esteticistas?storeId=${storeId}`);\r\n-      const list = await resp.json().catch(() => []);\r\n-      const arr = Array.isArray(list) ? list : [];\r\n-      profSelect.innerHTML = arr.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-      const pid = preselectId ? String(preselectId) : '';\r\n-      if (pid && arr.some(p => String(p._id) === pid)) {\r\n-        profSelect.value = pid;\r\n-      } else if (arr[0]) {\r\n-        profSelect.value = String(arr[0]._id);\r\n-      }\r\n-    } catch (_) { /* silencioso no modal */ }\r\n-  }\r\n-\r\n-  // Agendamentos\r\n-  async function loadAgendamentos() {\r\n-    const base = normalizeDate(dateInput?.value || todayStr());\r\n-    const date = base; // compat: alguns trechos antigos ainda usam \"date\"\r\n-    let url = '';\r\n-\r\n-    if (state.view === 'week') {\r\n-      const ini = startOfWeek(base);\r\n-      const fim = addDays(ini, 7); // exclusivo\r\n-      url = `/func/agendamentos/range?start=${ini}&end=${fim}&storeId=${state.selectedStoreId}`;\r\n-    } else if (state.view === 'month') {\r\n-      const m0 = startOfMonth(base);\r\n-      const m1 = startOfNextMonth(base); // exclusivo\r\n-      url = `/func/agendamentos/range?start=${m0}&end=${m1}&storeId=${state.selectedStoreId}`;\r\n-    } else {\r\n-      url = `/func/agendamentos?date=${base}&storeId=${state.selectedStoreId}`;\r\n-    }\r\n-\r\n-    try {\r\n-      const resp = await api(url);\r\n-      if (!resp.ok) {\r\n-        const txt = await resp.text();\r\n-        console.error('GET', url, '->', resp.status, txt);\r\n-        state.agendamentos = [];\r\n-        return;\r\n-      }\r\n-\r\n-      const list = await resp.json();\r\n-      state.agendamentos = Array.isArray(list) ? list : [];\r\n-\r\n-      // snapshot/label\r\n-      updateHeaderLabel();\r\n-      state.lastSnapshotHash = `${state.view}:${date}:${state.selectedStoreId || ''}:${state.agendamentos.length}`;\r\n-\r\n-      console.info('[Agenda]', 'view=', state.view, 'dataBase=', date, 'loja=', state.selectedStoreId, 'itens=', state.agendamentos.length);\r\n-    } catch (e) {\r\n-      console.error('Erro ao carregar agendamentos', e);\r\n-      state.agendamentos = [];\r\n-    }\r\n-  }\r\n-\r\n-  // Grade (sem coluna \"Outros\")\r\n-  function renderGrid() {\r\n-      if (!agendaList) return;\r\n-      if (state.view === 'week')  { renderWeekGrid();  return; }\r\n-      if (state.view === 'month') { renderMonthGrid(); return; }\r\n-\r\n-      // ===== Visão DIÁRIA (original) =====\r\n-      const date = normalizeDate(dateInput?.value || todayStr());\r\n-      updateHeaderLabel();\r\n-\r\n-      // janelas de trabalho (ajuste se quiser)\r\n-      const BUSINESS_START = 8;   // 08:00\r\n-      const BUSINESS_END   = 19;  // 19:00\r\n-\r\n-      const hours = [];\r\n-      for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n-\r\n-      clearChildren(agendaList);\r\n-\r\n-      const profsAll  = state.profissionais || [];\r\n-      const profs     = getVisibleProfissionais();\r\n-      const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n-\r\n-      const colCount = 1 + (profs?.length || 0);\r\n-\r\n-      // Cabeçalho\r\n-      const header = document.createElement('div');\r\n-      header.style.display = 'grid';\r\n-      // >>> COLUNAS ELÁSTICAS: ocupam o espaço restante sem “vão” à direita\r\n-      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n-      header.className = 'bg-white border-b';\r\n-\r\n-      const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n-      headLabels.forEach((label, idx) => {\r\n-        const cell = document.createElement('div');\r\n-        cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n-        if (idx === 0) {\r\n-          cell.textContent = label;\r\n-        }\r\n-        else {\r\n-          // >>> centraliza o nome do profissional\r\n-          cell.style.textAlign = 'center';\r\n-          const span = document.createElement('span');\r\n-          span.className = 'agenda-head-label inline-block';\r\n-          span.textContent = label || '';\r\n-          cell.dataset.profId = String(profs[idx - 1]._id);\r\n-          cell.appendChild(span);\r\n-        }\r\n-        header.appendChild(cell);\r\n-      });\r\n-\r\n-      const counter = document.createElement('div');\r\n-      counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n-      const itemsAll = state.agendamentos || [];\r\n-      const items    = getFilteredAgendamentos(itemsAll);\r\n-      const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n-      counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n-      header.appendChild(counter);\r\n-\r\n-      agendaList.appendChild(header);\r\n-\r\n-      // Corpo\r\n-      const body = document.createElement('div');\r\n-      body.style.display = 'grid';\r\n-      // >>> COLUNAS ELÁSTICAS: cada profissional tem no mínimo 360px e expande até preencher\r\n-      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n-      agendaList.appendChild(body);\r\n-\r\n-      const isToday = normalizeDate(date) === todayStr();\r\n-      const now = new Date();\r\n-      const nowHH = `${pad(now.getHours())}:00`;\r\n-\r\n-      hours.forEach(hh => {\r\n-        const hourNumber = parseInt(hh.split(':')[0], 10);\r\n-        const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n-        const isNowRow   = isToday && hh === nowHH;\r\n-\r\n-        // coluna de horário\r\n-        const timeCell = document.createElement('div');\r\n-        timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n-        timeCell.textContent = hh;\r\n-\r\n-        body.appendChild(timeCell);\r\n-\r\n-        // células por profissional\r\n-        (profs || []).forEach(p => {\r\n-          const cell = document.createElement('div');\r\n-          // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n-          cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n-          cell.dataset.profissionalId = String(p._id);\r\n-          cell.dataset.hh = hh;\r\n-          body.appendChild(cell);\r\n-        });\r\n-      });\r\n-\r\n-      // posiciona cartões\r\n-      let placed = 0;\r\n-      for (const a of items) {\r\n-        const when = a.h || a.scheduledAt;\r\n-        if (!when) continue;\r\n-\r\n-        const d  = new Date(when);\r\n-        const hh = `${pad(d.getHours())}:00`;\r\n-\r\n-        let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-        if (!profId) {\r\n-          let nameCandidate = '';\r\n-          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n-          else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n-          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n-          if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n-        }\r\n-        if (!profId) continue;\r\n-\r\n-        let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n-        if (!col && profs[0]) {\r\n-          col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n-        }\r\n-        if (!col) continue;\r\n-\r\n-        const meta = statusMeta(a.status);\r\n-        const card = document.createElement('div');\r\n-        card.setAttribute('data-appointment-id', a._id || '');\r\n-        card.style.setProperty('--stripe', meta.stripe);\r\n-        card.style.setProperty('--card-max-w', '260px');\r\n-        card.className = `agenda-card border ${meta.borderClass} cursor-move select-none`;\r\n-        card.setAttribute('draggable', 'true');\r\n-\r\n-        const headerEl = document.createElement('div');\r\n-        // reserva espaço à direita para os botões flutuantes (evita o chip “ficar por baixo”)\r\n-        headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n-\r\n-        // usa o nome do cliente que já vem da API (clienteNome); fallback mantém o comportamento antigo\r\n-        const tutorShort = shortTutorName(a.clienteNome || '');\r\n-        const headLabel  = tutorShort ? `${tutorShort} | ${a.pet || ''}` : (a.pet || '');\r\n-\r\n-        headerEl.innerHTML = `\r\n-          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${headLabel}\">${headLabel}</div>\r\n-          ${renderStatusBadge(a.status)}\r\n-        `;\r\n-\r\n-        const bodyEl = document.createElement('div');\r\n-        if (a.observacoes && String(a.observacoes).trim()) {\r\n-          const svc = document.createElement('div');\r\n-          svc.className = 'text-[13px] text-gray-600 clamp-2';\r\n-          svc.textContent = a.servico || '';\r\n-          const obs = document.createElement('div');\r\n-          obs.className = 'mt-1 text-[12px] text-gray-700 italic clamp-2';\r\n-          obs.textContent = String(a.observacoes).trim();\r\n-          bodyEl.appendChild(svc);\r\n-          bodyEl.appendChild(obs);\r\n-        } else {\r\n-          bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n-          bodyEl.textContent = a.servico || '';\r\n-        }\r\n-\r\n-        const footerEl = document.createElement('div');\r\n-        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n-        const price = document.createElement('div');\r\n-        price.className = 'text-[13px] text-gray-800 font-medium';\r\n-        price.textContent = money(a.valor);\r\n-\r\n-        footerEl.appendChild(price);\r\n-\r\n-        card.appendChild(headerEl);\r\n-        card.appendChild(bodyEl);\r\n-        card.appendChild(footerEl);\r\n-\r\n-        col.appendChild(card);\r\n-        placed++;\r\n-      }\r\n-\r\n-      if (placed === 0) {\r\n-        const empty = document.createElement('div');\r\n-        empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n-        empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n-        agendaList.insertBefore(empty, header.nextSibling);\r\n-      }\r\n-  }\r\n-\r\n-  /** ===== NOVO: visão semanal ===== */\r\n-  function renderWeekGrid() {\r\n-    const base = normalizeDate(dateInput?.value || todayStr());\r\n-    const ini  = startOfWeek(base);\r\n-    const days = Array.from({ length: 7 }, (_, i) => addDays(ini, i));\r\n-    updateHeaderLabel();\r\n-\r\n-    clearChildren(agendaList);\r\n-\r\n-    // Cabeçalho: horários + 7 dias\r\n-    const BUSINESS_START = 8, BUSINESS_END = 19;\r\n-    const hours = []; for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n-\r\n-    const header = document.createElement('div');\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n-    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n-    header.innerHTML = `\r\n-      <div class=\"px-2 py-2 text-xs text-slate-500\">Horário</div>\r\n-      ${days.map(d=>{\r\n-        const lab = new Date(d+'T00:00:00').toLocaleDateString('pt-BR', { weekday:'short', day:'2-digit', month:'2-digit' });\r\n-        return `<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${lab}</div>`;\r\n-      }).join('')}\r\n-    `;\r\n-    agendaList.appendChild(header);\r\n-\r\n-    const body = document.createElement('div');\r\n-    body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n-    agendaList.appendChild(body);\r\n-\r\n-    // Linhas por hora\r\n-    hours.forEach(hh => {\r\n-      const hNum = parseInt(hh.slice(0,2),10);\r\n-      const inBusiness = (hNum>=BUSINESS_START && hNum< BUSINESS_END);\r\n-\r\n-      const timeCell = document.createElement('div');\r\n-      timeCell.className = `px-2 py-2 border-b text-[12px] ${inBusiness?'text-slate-800':'text-slate-400'}`;\r\n-      timeCell.textContent = hh;\r\n-      body.appendChild(timeCell);\r\n-\r\n-      days.forEach(d=>{\r\n-        const cell = document.createElement('div');\r\n-        cell.className = 'px-2 py-2 border-b agenda-slot';\r\n-        cell.dataset.day = d;\r\n-        cell.dataset.hh  = hh;\r\n-        body.appendChild(cell);\r\n-      });\r\n-    });\r\n-\r\n-    // Posiciona cartões (compactos)\r\n-    const items = getFilteredAgendamentos(state.agendamentos || []);\r\n-    let placed = 0;\r\n-\r\n-    for (const a of items) {\r\n-      const when = a.h || a.scheduledAt;\r\n-      if (!when) continue;\r\n-\r\n-      const dt     = new Date(when);\r\n-      const dayStr = localDateStr(dt); // data local evita deslocamento de fuso\r\n-      if (dayStr < days[0] || dayStr > days[6]) continue;\r\n-\r\n-      const hh = `${pad(dt.getHours())}:00`;\r\n-      const cell = agendaList.querySelector(`div[data-day=\"${dayStr}\"][data-hh=\"${hh}\"]`);\r\n-      if (!cell) continue;\r\n-\r\n-      const meta = statusMeta(a.status);\r\n-      const hhmm = `${pad(dt.getHours())}:${String(dt.getMinutes()).padStart(2,'0')}`;\r\n-\r\n-      const card = document.createElement('div');\r\n-      card.setAttribute('data-appointment-id', a._id || '');\r\n-      card.style.setProperty('--stripe', meta.stripe);\r\n-      card.style.setProperty('--card-max-w', '100%');                       // ocupa a coluna\r\n-      card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n-      card.setAttribute('draggable', 'true');\r\n-      card.title = [\r\n-        a.pet || '',\r\n-        a.servico || '',\r\n-        (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n-      ].filter(Boolean).join(' • ');\r\n-\r\n-      // Header denso: horário + pet + status (badge menor)\r\n-      const headerEl = document.createElement('div');\r\n-      headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n-      headerEl.innerHTML = `\r\n-        <div class=\"flex items-center gap-2\">\r\n-          <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n-          <span class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</span>\r\n-        </div>\r\n-        ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n-      `;\r\n-\r\n-      // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n-      const bodyEl = document.createElement('div');\r\n-      const svc = document.createElement('div');\r\n-      svc.className = 'text-[12px] text-gray-600 truncate';\r\n-      svc.textContent = a.servico || '';\r\n-      bodyEl.appendChild(svc);\r\n-\r\n-      if (a.observacoes && String(a.observacoes).trim()) {\r\n-        const obs = document.createElement('div');\r\n-        obs.className = 'text-[11px] text-gray-700 italic truncate';\r\n-        obs.textContent = String(a.observacoes).trim();\r\n-        bodyEl.appendChild(obs);\r\n-      }\r\n-\r\n-      // Rodapé: valor à direita\r\n-      const footerEl = document.createElement('div');\r\n-      footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n-      const price = document.createElement('div');\r\n-      price.className = 'text-[12px] text-gray-800 font-semibold';\r\n-      price.textContent = money(a.valor);\r\n-      footerEl.appendChild(price);\r\n-\r\n-      card.appendChild(headerEl);\r\n-      card.appendChild(bodyEl);\r\n-      card.appendChild(footerEl);\r\n-\r\n-      cell.appendChild(card);\r\n-      placed++;\r\n-    }\r\n-\r\n-    if (placed === 0) {\r\n-      const empty = document.createElement('div');\r\n-      empty.className = 'p-6 text-sm text-slate-500';\r\n-      empty.textContent = 'Nenhum agendamento no intervalo.';\r\n-      agendaList.appendChild(empty);\r\n-    }\r\n-  }\r\n-\r\n-  /** ===== NOVO: visão mensal ===== */\r\n-  function renderMonthGrid() {\r\n-    const base = normalizeDate(dateInput?.value || todayStr());\r\n-    const m0   = startOfMonth(base);\r\n-    const m1   = startOfNextMonth(base); // exclusivo\r\n-    updateHeaderLabel();\r\n-\r\n-    clearChildren(agendaList);\r\n-\r\n-    // cabeçalho: seg a dom\r\n-    const weekDays = ['Seg','Ter','Qua','Qui','Sex','Sáb','Dom'];\r\n-    const header = document.createElement('div');\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n-    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n-    header.innerHTML = weekDays.map(d=>`<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${d}</div>`).join('');\r\n-    agendaList.appendChild(header);\r\n-\r\n-    // calcular início da grade (segunda da semana que contém o dia 1)\r\n-    const startGrid = startOfWeek(m0);\r\n-    const days = Array.from({length:42},(_,i)=> addDays(startGrid,i)); // 6 semanas\r\n-\r\n-    const grid = document.createElement('div');\r\n-    grid.style.display = 'grid';\r\n-    grid.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n-    agendaList.appendChild(grid);\r\n-\r\n-    // usar FILTRO + AGRUPAR por data local\r\n-    const items = getFilteredAgendamentos((state.agendamentos||[]).slice().sort((a,b)=>(new Date(a.h||a.scheduledAt))-(new Date(b.h||b.scheduledAt))));\r\n-    const byDay = new Map();\r\n-    for (const a of items) {\r\n-      const d = localDateStr(new Date(a.h || a.scheduledAt));\r\n-      if (d >= m0 && d < m1) {\r\n-        if (!byDay.has(d)) byDay.set(d, []);\r\n-        byDay.get(d).push(a);\r\n-      }\r\n-    }\r\n-\r\n-    days.forEach(d=>{\r\n-      const inMonth = (d>=m0 && d<m1);\r\n-      const cell = document.createElement('div');\r\n-      cell.className = `min-h-[140px] border p-2 ${inMonth? 'bg-white':'bg-slate-50'}`; // min-h menor\r\n-\r\n-      const title = document.createElement('div');\r\n-      title.className = `flex items-center justify-between text-[11px] ${inMonth?'text-slate-700':'text-slate-400'}`;\r\n-      const dayNum = new Date(d+'T00:00:00').getDate();\r\n-      title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n-\r\n-      const list = document.createElement('div');\r\n-      list.className = 'mt-1 space-y-1';\r\n-\r\n-      const itemsDay = byDay.get(d) || [];\r\n-      itemsDay.forEach((a, idx)=>{\r\n-        const meta = statusMeta(a.status);\r\n-        const when = new Date(a.h || a.scheduledAt);\r\n-        const hhmm = `${pad(when.getHours())}:${String(when.getMinutes()).padStart(2,'0')}`;\r\n-\r\n-        const card = document.createElement('div');\r\n-        card.setAttribute('data-appointment-id', a._id || '');\r\n-        card.style.setProperty('--stripe', meta.stripe);\r\n-        card.style.setProperty('--card-max-w', '100%');\r\n-        card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n-        card.setAttribute('draggable', 'true');\r\n-        card.title = [\r\n-          a.pet || '',\r\n-          a.servico || '',\r\n-          (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n-        ].filter(Boolean).join(' • '); // tooltip exibe tudo sem poluir o card\r\n-\r\n-        // Header denso: horário à esquerda + status à direita\r\n-        const headerEl = document.createElement('div');\r\n-        headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n-        headerEl.innerHTML = `\r\n-          <div class=\"flex items-center gap-2\">\r\n-            <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n-            <span class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</span>\r\n-          </div>\r\n-          ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n-        `;\r\n-\r\n-        // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n-        const bodyEl = document.createElement('div');\r\n-        const svc = document.createElement('div');\r\n-        svc.className = 'text-[12px] text-gray-600 truncate';     // 1 linha\r\n-        svc.textContent = a.servico || '';\r\n-        bodyEl.appendChild(svc);\r\n-\r\n-        if (a.observacoes && String(a.observacoes).trim()) {\r\n-          const obs = document.createElement('div');\r\n-          obs.className = 'text-[11px] text-gray-700 italic truncate'; // 1 linha\r\n-          obs.textContent = String(a.observacoes).trim();\r\n-          bodyEl.appendChild(obs);\r\n-        }\r\n-\r\n-        // Rodapé enxuto: valor à direita\r\n-        const footerEl = document.createElement('div');\r\n-        footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n-        const price = document.createElement('div');\r\n-        price.className = 'text-[12px] text-gray-800 font-semibold';\r\n-        price.textContent = money(a.valor);\r\n-        footerEl.appendChild(price);\r\n-\r\n-        card.appendChild(headerEl);\r\n-        card.appendChild(bodyEl);\r\n-        card.appendChild(footerEl);\r\n-\r\n-        list.appendChild(card);\r\n-\r\n-        // Limitar o excesso visual\r\n-        if (idx>=6 && itemsDay.length>7) {\r\n-          const more = document.createElement('div');\r\n-          more.className = 'text-[11px] text-slate-500';\r\n-          more.textContent = `+${itemsDay.length-6} itens`;\r\n-          list.appendChild(more);\r\n-          return;\r\n-        }\r\n-      });\r\n-\r\n-      cell.appendChild(title);\r\n-      cell.appendChild(list);\r\n-      grid.appendChild(cell);\r\n-    });\r\n-  }\r\n-\r\n-  // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n-  function statusMeta(s) {\r\n-    // Normalização: acentos/maiúsculas/espaços/hífens\r\n-    const keyRaw = String(s || 'agendado')\r\n-      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-      .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n-\r\n-    const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-    const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n-\r\n-    // Paleta acessível (contraste AA) + info para faixa lateral e badge compacta\r\n-    const map = {\r\n-      agendado: {\r\n-        label: 'Agendado',\r\n-        short: 'Agend.',\r\n-        stripe: '#64748B',     // slate-500\r\n-        text: '#0F172A',       // slate-900\r\n-        badgeClass: 'bg-slate-100 text-slate-700 border border-slate-200',\r\n-        borderClass: 'border-slate-300'\r\n-      },\r\n-      em_espera: {\r\n-        label: 'Em espera',\r\n-        short: 'Espera',\r\n-        stripe: '#B45309',     // amber-700\r\n-        text: '#1F2937',       // gray-800\r\n-        badgeClass: 'bg-amber-50 text-amber-800 border border-amber-200',\r\n-        borderClass: 'border-amber-400'\r\n-      },\r\n-      em_atendimento: {\r\n-        label: 'Em atendimento',\r\n-        short: 'Atend.',\r\n-        stripe: '#1D4ED8',     // blue-700\r\n-        text: '#0B1235',\r\n-        badgeClass: 'bg-blue-50 text-blue-800 border border-blue-200',\r\n-        borderClass: 'border-blue-500'\r\n-      },\r\n-      finalizado: {\r\n-        label: 'Finalizado',\r\n-        short: 'Fim.',\r\n-        stripe: '#16A34A',     // green-600\r\n-        text: '#052E16',\r\n-        badgeClass: 'bg-green-50 text-green-800 border border-green-200',\r\n-        borderClass: 'border-green-500'\r\n-      }\r\n-    };\r\n-\r\n-    return map[k];\r\n-  }\r\n-\r\n-  function renderStatusBadge(s) {\r\n-    const { label, badgeClass } = statusMeta(s);\r\n-    // `whitespace-nowrap` garante que o chip não quebre em duas linhas\r\n-    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium whitespace-nowrap ${badgeClass}\">${label}</span>`;\r\n-  }\r\n-\r\n-  // Modal — modo adicionar\r\n-  function openAddModal() {\r\n-    state.editing = null;\r\n-    if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n-\r\n-    // Reset serviços temporários\r\n-    state.tempServicos = [];\r\n-    renderServicosLista();\r\n-    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n-\r\n-    // Campos editáveis habilitados\r\n-    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n-\r\n-    // Limpa estado/inputs\r\n-    state.selectedCliente = null;\r\n-    state.selectedServico = null;\r\n-    if (cliInput) { cliInput.value = ''; }\r\n-    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n-    if (servInput) { servInput.value = ''; }\r\n-    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-    if (valorInput) { valorInput.value = ''; }\r\n-    if (petSelect) { petSelect.innerHTML = ''; }\r\n-    if (obsInput) { obsInput.value = ''; }\r\n-\r\n-    // Empresa (usa as mesmas opções do seletor da página)\r\n-    if (addStoreSelect) {\r\n-      if (storeSelect && storeSelect.options.length) {\r\n-        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n-      } else if (state.stores?.length) {\r\n-        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-      }\r\n-      const sid = state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.value = sid;\r\n-\r\n-      // Carrega os profissionais correspondentes à empresa escolhida no modal (sem travar a abertura)\r\n-      try { if (sid) { populateModalProfissionais(sid); } } catch(_) {}\r\n-    }\r\n-\r\n-    // Data (usa a data visível na página)\r\n-    if (addDateInput) {\r\n-      const date = normalizeDate(dateInput?.value || todayStr()); // YYYY-MM-DD\r\n-      addDateInput.value = date;\r\n-    }\r\n-\r\n-    // Hora default (agora)\r\n-    const now = new Date();\r\n-    const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n-    if (horaInput) horaInput.value = hh;\r\n-    \r\n-    // Observações\r\n-    if (obsInput) { obsInput.value = ''; }\r\n-\r\n-    // Status default\r\n-    if (statusSelect) statusSelect.value = 'agendado';\r\n-\r\n-    // Botão Excluir só em edição\r\n-    if (modalDelete) modalDelete.classList.add('hidden');\r\n-\r\n-    modal.classList.remove('hidden'); \r\n-    modal.classList.add('flex');\r\n-    cliInput?.focus();\r\n-  }\r\n-\r\n-  // cache simples: clienteId -> nome\r\n-  const _clienteNomeCache = new Map();\r\n-\r\n-  async function resolveClienteNome(a) {\r\n-    try {\r\n-      if (!a) return '';\r\n-\r\n-      // 1) nome direto vindo da API\r\n-      const direct =\r\n-        a.clienteNome ||\r\n-        (a.cliente && typeof a.cliente === 'object' && (a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial)) ||\r\n-        null;\r\n-      if (typeof direct === 'string' && direct.trim()) return direct.trim();\r\n-\r\n-      // 2) clienteId em qualquer formato\r\n-      let maybeId =\r\n-        a.clienteId ||\r\n-        a.clientId ||\r\n-        a.customerId ||\r\n-        (typeof a.cliente === 'string' ? a.cliente : null);\r\n-\r\n-      if (typeof maybeId === 'object' && maybeId !== null && maybeId._id) {\r\n-        maybeId = String(maybeId._id);\r\n-      }\r\n-      const id = (typeof maybeId === 'string' && /^[0-9a-fA-F]{24}$/.test(maybeId)) ? maybeId : null;\r\n-\r\n-      if (id) {\r\n-        if (_clienteNomeCache.has(id)) return _clienteNomeCache.get(id);\r\n-        const r = await api(`/func/clientes/${id}`);\r\n-        if (r.ok) {\r\n-          const c = await r.json();\r\n-          const nome = c?.nome || '';\r\n-          if (nome) { _clienteNomeCache.set(id, nome); return nome; }\r\n-        }\r\n-      }\r\n-\r\n-      // 3) fallback por petId\r\n-      const petId =\r\n-        a.petId ||\r\n-        (a.pet && typeof a.pet === 'object' && a.pet._id ? a.pet._id : null) ||\r\n-        null;\r\n-\r\n-      if (petId && /^[0-9a-fA-F]{24}$/.test(String(petId))) {\r\n-        const r2 = await api(`/func/pets/${petId}`);\r\n-        if (r2.ok) {\r\n-          const p = await r2.json();\r\n-          const nome =\r\n-            (p?.cliente && (p.cliente.nome || p.cliente.nomeCompleto || p.cliente.razaoSocial)) ||\r\n-            p?.clienteNome ||\r\n-            '';\r\n-          if (nome) return String(nome);\r\n-        }\r\n-      }\r\n-    } catch (e) {\r\n-      console.info('[resolveClienteNome] não foi possível resolver', e);\r\n-    }\r\n-    return '';\r\n-  }\r\n-\r\n-  // --- DEPOIS: openEditModal (indica carregamento e garante preenchimento) ---\r\n-  function toDateInputValueFromISO(isoStr) {\r\n-    const d = new Date(isoStr);\r\n-    if (isNaN(d.getTime())) return todayStr();\r\n-    const yyyy = d.getFullYear();\r\n-    const mm = String(d.getMonth() + 1).padStart(2, '0');\r\n-    const dd = String(d.getDate()).padStart(2, '0');\r\n-    return `${yyyy}-${mm}-${dd}`;\r\n-  }\r\n-\r\n-  function openEditModal(a) {\r\n-    state.editing = a || null;\r\n-    if (!modal || !state.editing) return;\r\n-\r\n-    // Preenche lista de serviços no modo edição (somente leitura)\r\n-    state.tempServicos = Array.isArray(a.servicos)\r\n-      ? a.servicos.map(x => ({ _id: x._id, nome: x.nome, valor: Number(x.valor || 0) }))\r\n-      : (a.servico ? [{ _id: null, nome: a.servico, valor: Number(a.valor || 0) }] : []);\r\n-    renderServicosLista();\r\n-\r\n-    // habilita campo de busca/valor para adicionar novos serviços\r\n-    state.selectedServico = null;\r\n-    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n-    if (servSug)   { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-    if (valorInput){ valorInput.value = ''; valorInput.disabled = false; }\r\n-\r\n-    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n-\r\n-    // Empresa (mostra a loja do agendamento e permite trocar)\r\n-    if (addStoreSelect) {\r\n-      if (storeSelect && storeSelect.options.length) {\r\n-        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n-      } else if (state.stores?.length) {\r\n-        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-      }\r\n-      addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.disabled = false;\r\n-    }\r\n-\r\n-    // Data do agendamento\r\n-    if (addDateInput) {\r\n-      const iso = a.h || a.scheduledAt || new Date().toISOString();\r\n-      addDateInput.value = toDateInputValueFromISO(iso);\r\n-    }\r\n-\r\n-    // Hora\r\n-    const d = new Date((a.h || a.scheduledAt) || new Date());\r\n-    const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n-    if (horaInput) horaInput.value = hh;\r\n-\r\n-    // Profissional (tenta resolver o id atual)\r\n-    let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-    if (!profId && typeof a.profissional === 'string') {\r\n-      const key = a.profissional.trim().toLowerCase();\r\n-      const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n-      if (match) profId = String(match._id);\r\n-    }\r\n-    if (profSelect && profId) profSelect.value = profId;\r\n-\r\n-    // Ao abrir o modal de edição, carregamos os profissionais da EMPRESA selecionada no modal\r\n-    try {\r\n-      const sid = addStoreSelect?.value || a.storeId || '';\r\n-      if (sid) { populateModalProfissionais(sid, profId); } // não bloqueia a abertura do modal\r\n-    } catch (_) {}\r\n-\r\n-    // Status (normalizado p/ os values do <select>)\r\n-    if (statusSelect) {\r\n-      const keyRaw = String(a.status || 'agendado')\r\n-        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-        .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n-      const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-      statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n-    }\r\n-\r\n-    // Observações (preenche com a descrição do card)\r\n-    if (obsInput) { obsInput.value = (a.observacoes || '').trim(); }\r\n-\r\n-    // Cliente e Pet (preenche e bloqueia busca no modo edição)\r\n-    if (cliInput) { cliInput.value = (a.clienteNome || ''); cliInput.disabled = true; }\r\n-   \r\n-    if (petSelect) {\r\n-      petSelect.innerHTML = '';\r\n-      try {\r\n-        const clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n-        if (clienteId) {\r\n-          api(`/func/clientes/${clienteId}/pets`).then(r => r.json().catch(() => []))\r\n-            .then(pets => {\r\n-              petSelect.innerHTML = (Array.isArray(pets) ? pets : []).map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-              const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n-              if (currentPetId) petSelect.value = String(currentPetId);\r\n-            });\r\n-        }\r\n-      } catch (_) {}\r\n-    }\r\n-\r\n-    // Serviço/Valor: leitura\r\n-    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n-    if (valorInput) { valorInput.value = ''; valorInput.disabled = false; }\r\n-\r\n-    // Botão excluir visível\r\n-    if (modalDelete) modalDelete.classList.remove('hidden');\r\n-\r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n-  }\r\n-\r\n-  function closeModal() {\r\n-    if (!modal) return;\r\n-    modal.classList.add('hidden');\r\n-    modal.classList.remove('flex');\r\n-    state.editing = null;\r\n-    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n-  }\r\n-\r\n-  // Busca cliente\r\n-  async function searchClientes(term) {\r\n-    if (!term || term.length < 2) {\r\n-      if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n-      return;\r\n-    }\r\n-    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    if (!cliSug) return;\r\n-    cliSug.innerHTML = list.map(u => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n-        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n-      </li>`).join('');\r\n-    cliSug.classList.remove('hidden');\r\n-    cliSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', async () => {\r\n-        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n-        if (cliInput) cliInput.value = li.dataset.nome;\r\n-        cliSug.classList.add('hidden');\r\n-        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n-        const pets = await resp.json().catch(() => []);\r\n-        if (petSelect) {\r\n-          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-        }\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  function confirmAsync(title, message, opts = {}) {\r\n-    const confirmText = opts.confirmText || 'Excluir';\r\n-    const cancelText  = opts.cancelText  || 'Cancelar';\r\n-\r\n-    if (typeof window.showModal === 'function') {\r\n-      return new Promise((resolve) => {\r\n-        // 1) Esconde temporariamente o modal de edição (sem desmontar)\r\n-        const prevVis = modal ? modal.style.visibility : '';\r\n-        const prevPe  = modal ? modal.style.pointerEvents : '';\r\n-        if (modal) {\r\n-          modal.style.visibility = 'hidden';\r\n-          modal.style.pointerEvents = 'none';\r\n-        }\r\n-\r\n-        // 2) Abre o modal padrão do projeto\r\n-        window.showModal({\r\n-          title: title || 'Confirmação',\r\n-          message: message || 'Deseja prosseguir?',\r\n-          confirmText,\r\n-          cancelText,\r\n-          onConfirm: () => { restore(); resolve(true); },\r\n-          onCancel : () => { restore(); resolve(false); }\r\n-        });\r\n-\r\n-        // 3) Após montar, garante overlay por cima de tudo\r\n-        //    (pega o último elemento \"fixed\" full-screen e sobe o z-index)\r\n-        const bump = () => {\r\n-          try {\r\n-            const all = Array.from(document.querySelectorAll('body *'));\r\n-            const overlays = all.filter(el => {\r\n-              const cs = getComputedStyle(el);\r\n-              if (cs.position !== 'fixed') return false;\r\n-              const r = el.getBoundingClientRect();\r\n-              return r.width >= window.innerWidth * 0.95 && r.height >= window.innerHeight * 0.95;\r\n-            });\r\n-            const overlay = overlays.at(-1);\r\n-            if (overlay) {\r\n-              overlay.style.zIndex = '9999';\r\n-              overlay.style.pointerEvents = 'auto';\r\n-            }\r\n-          } catch (_) { /* noop */ }\r\n-        };\r\n-        requestAnimationFrame(bump);\r\n-        setTimeout(bump, 0);\r\n-\r\n-        // 4) Restaura o modal de edição quando fechar a confirmação\r\n-        function restore() {\r\n-          if (modal) {\r\n-            modal.style.visibility = prevVis || '';\r\n-            modal.style.pointerEvents = prevPe || '';\r\n-          }\r\n-        }\r\n-      });\r\n-    }\r\n-\r\n-    // Fallback (apenas se o componente não existir)\r\n-    const ok = window.confirm(message || title || 'Confirmar?');\r\n-    return Promise.resolve(!!ok);\r\n-  }\r\n-\r\n-  async function handleDelete() {\r\n-      const id = state.editing && state.editing._id ? String(state.editing._id) : null;\r\n-      if (!id) return;\r\n-\r\n-      const ok = await confirmAsync('Excluir atendimento', 'Tem ce...a excluir este atendimento? Esta ação não pode ser desfeita.', {\r\n-        confirmText: 'Excluir',\r\n-        cancelText: 'Cancelar'\r\n-      });\r\n-      if (!ok) return;\r\n-\r\n-      const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(() => ({}));\r\n-        alert(err.message || 'Erro ao excluir agendamento');\r\n-        return;\r\n-      }\r\n-      await loadAgendamentos();\r\n-      renderKpis();\r\n-      renderFilters();\r\n-      closeModal();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-  }\r\n-\r\n-  // Busca serviços\r\n-  async function searchServicos(term) {\r\n-    if (!term || term.length < 2) {\r\n-      if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-      return;\r\n-    }\r\n-    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    if (!servSug) return;\r\n-    servSug.innerHTML = list.map(s => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor}\">\r\n-        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${money(s.valor)}</div>\r\n-      </li>`).join('');\r\n-    servSug.classList.remove('hidden');\r\n-    servSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', () => {\r\n-        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n-        if (servInput) servInput.value = state.selectedServico.nome;\r\n-        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n-        servSug.classList.add('hidden');\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  // --- Lista de serviços no modal ---\r\n-  function renderServicosLista() {\r\n-    if (!servListUL || !servTotalEl) return;\r\n-    const items = state.tempServicos || [];\r\n-    servListUL.innerHTML = items.map((it, idx) => `\r\n-      <li class=\"flex items-center justify-between px-3 py-2 text-sm\">\r\n-        <div class=\"flex items-center gap-3\">\r\n-          <span class=\"w-20 text-right tabular-nums\">${money(Number(it.valor || 0))}</span>\r\n-          <span class=\"text-gray-700\">${it.nome || ''}</span>\r\n-        </div>\r\n-        <button data-idx=\"${idx}\" class=\"remove-serv px-2 py-1 rounded-md border text-gray-600 hover:bg-gray-50\">Remover</button>\r\n-      </li>\r\n-    `).join('');\r\n-    const total = items.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-    servTotalEl.textContent = money(total);\r\n-\r\n-    servListUL.querySelectorAll('.remove-serv').forEach(btn => {\r\n-      btn.addEventListener('click', () => {\r\n-        const i = parseInt(btn.getAttribute('data-idx'), 10);\r\n-        if (!isNaN(i)) {\r\n-          state.tempServicos.splice(i, 1);\r\n-          renderServicosLista();\r\n-        }\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  // Salvar (adicionar/editar)\r\n-  async function saveAgendamento() {\r\n-      try {\r\n-        const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n-        const storeIdSelected = (addStoreSelect?.value) || state.selectedStoreId || storeSelect?.value;\r\n-        const hora = horaInput?.value;\r\n-        const profissionalId = profSelect?.value;\r\n-        const status = (statusSelect?.value) || 'agendado';\r\n-\r\n-        if (!hora || !profissionalId) { alert('Preencha hora e profissional.'); return; }\r\n-        if (!storeIdSelected) { alert('Selecione a empresa.'); return; }\r\n-\r\n-        const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n-\r\n-        // Edição\r\n-        if (state.editing && state.editing._id) {\r\n-          const id = state.editing._id;\r\n-\r\n-          // usa os itens montados na UI (edição agora permite adicionar/remover)\r\n-          const items = Array.isArray(state.tempServicos) ? state.tempServicos : [];\r\n-          if (!items.length) { alert('Adicione pelo menos 1 serviço ao agendamento.'); return; }\r\n-\r\n-          const body = {\r\n-            storeId: storeIdSelected,\r\n-            profissionalId,\r\n-            scheduledAt,\r\n-            status,\r\n-            observacoes: (obsInput?.value || '').trim(),\r\n-            servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n-            ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n-            ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n-            ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n-          };\r\n-\r\n-          const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\r\n-          if (!resp.ok) {\r\n-            const err = await resp.json().catch(() => ({}));\r\n-            alert(err.message || 'Erro ao atualizar agendamento.');\r\n-            return;\r\n-          }\r\n-\r\n-          await loadAgendamentos();\r\n-          renderKpis();\r\n-          renderFilters();\r\n-          closeModal();\r\n-          renderGrid();\r\n-          enhanceAgendaUI();\r\n-          return;\r\n-        }\r\n-\r\n-        // Adição\r\n-        const clienteId = state.selectedCliente?._id;\r\n-        const petId = petSelect?.value;\r\n-        const items = state.tempServicos || [];\r\n-\r\n-        if (!(clienteId && petId && items.length)) { alert('Preencha cliente, pet e adicione pelo menos 1 serviço.'); return; }\r\n-\r\n-        const body = {\r\n-          storeId: storeIdSelected,\r\n-          clienteId, petId,\r\n-          servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n-          profissionalId, scheduledAt,\r\n-          status,\r\n-          observacoes: (obsInput?.value || '').trim(),\r\n-          pago: false\r\n-        };\r\n-        const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n-        if (!resp.ok) {\r\n-          const err = await resp.json().catch(() => ({}));\r\n-          throw new Error(err.message || 'Erro ao salvar');\r\n-        }\r\n-\r\n-        await loadAgendamentos();\r\n-        renderKpis();\r\n-        renderFilters();\r\n-        closeModal();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      } catch (e) {\r\n-        console.error(e);\r\n-        alert(e.message || 'Erro ao salvar');\r\n-      }\r\n-    }\r\n-\r\n-  function enhanceAgendaUI() {\r\n-    try {\r\n-      applyZebraAndSublines();\r\n-      decorateCards();\r\n-\r\n-      if (state.view === 'day') {\r\n-        enableDragDrop();\r\n-        drawNowLine();\r\n-\r\n-        const date = normalizeDate(dateInput?.value || todayStr());\r\n-        if (!state.__didInitialScroll && date === todayStr()) {\r\n-          scrollToNow();\r\n-          state.__didInitialScroll = true;\r\n-        }\r\n-      }\r\n-    } catch (e) {\r\n-      console.info('[enhanceAgendaUI] skip', e);\r\n-    }\r\n-  }\r\n-\r\n-  function scrollToNow() {\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body || !state.profissionais?.length) return;\r\n-\r\n-      // encontra a célula da primeira coluna de profissional no horário atual\r\n-      const now = new Date();\r\n-      const hh = String(now.getHours()).padStart(2, '0') + ':00';\r\n-      const firstProfId = String(state.profissionais[0]._id);\r\n-      const target = body.querySelector(`div[data-profissional-id=\"${firstProfId}\"][data-hh=\"${hh}\"]`);\r\n-\r\n-      if (target) {\r\n-        const top = target.getBoundingClientRect().top + window.pageYOffset;\r\n-        const offset = 80; // sobe um pouco para contexto\r\n-        window.scrollTo({ top: Math.max(0, top - offset), behavior: 'smooth' });\r\n-      }\r\n-  }\r\n-\r\n-  // compacta a lista para um hash leve (ordem estável)\r\n-  function snapshotHash(items) {\r\n-    try {\r\n-      const compact = (items || []).map(x => [\r\n-        String(x._id || ''),\r\n-        String(x.status || ''),\r\n-        String(x.h || x.scheduledAt || ''),\r\n-        Number(x.valor || 0),\r\n-        !!x.pago\r\n-      ]).sort((a, b) => a[0].localeCompare(b[0]));\r\n-      return JSON.stringify(compact);\r\n-    } catch (_) {\r\n-      return String(Date.now());\r\n-    }\r\n-  }\r\n-\r\n-  // reconsulta e só re-renderiza se houver mudança relevante\r\n-  async function refreshAgendaIfChanged() {\r\n-    const prev = state.lastSnapshotHash || '';\r\n-    await loadAgendamentos();\r\n-    const next = snapshotHash(state.agendamentos);\r\n-    if (next !== prev) {\r\n-      state.lastSnapshotHash = next;\r\n-      renderGrid();\r\n-      // ao re-render com mesma data de hoje, não repete o scroll\r\n-      enhanceAgendaUI();\r\n-    }\r\n-  }\r\n-\r\n-  // inicia/renova o timer de auto-refresh (60s)\r\n-  function startAutoRefresh() {\r\n-    if (window.__agendaRefreshTimer) clearInterval(window.__agendaRefreshTimer);\r\n-    state.lastSnapshotHash = snapshotHash(state.agendamentos);\r\n-    window.__agendaRefreshTimer = setInterval(refreshAgendaIfChanged, 60000);\r\n-  }\r\n-\r\n-  // cria o botão \"Hoje\" ao lado do input de data (uma vez)\r\n-  function ensureTodayButton() {\r\n-    if (!dateInput) return;\r\n-    if (document.getElementById('agenda-today-btn')) return;\r\n-\r\n-    const btn = document.createElement('button');\r\n-    btn.id = 'agenda-today-btn';\r\n-    btn.type = 'button';\r\n-    btn.className = 'ml-2 inline-flex items-center gap-1 text-xs px-2 py-1 rounded border border-slate-300 text-slate-700 hover:bg-slate-50';\r\n-    btn.textContent = 'Hoje';\r\n-\r\n-    dateInput.insertAdjacentElement('afterend', btn);\r\n-    btn.addEventListener('click', async () => {\r\n-      dateInput.value = todayStr();\r\n-      state.__didInitialScroll = false;   // permite novo auto-scroll\r\n-      await loadAgendamentos();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    });\r\n-  }\r\n-\r\n-  // Zebra de linhas + sublinha 30min com CSS (via classe)\r\n-  function applyZebraAndSublines() {\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body) return;\r\n-\r\n-      body.style.position = 'relative'; // para linha do \"agora\"\r\n-      const totalCols = 1 + (state.profissionais?.length || 0); // 1 (hora) + N profissionais\r\n-      if (totalCols <= 0) return;\r\n-\r\n-      const cells = Array.from(body.children);\r\n-      const totalRows = Math.floor(cells.length / totalCols);\r\n-\r\n-      for (let row = 0; row < totalRows; row++) {\r\n-        const start = row * totalCols;\r\n-        const zebraClass = (row % 2 === 0) ? 'bg-white' : 'bg-slate-50';\r\n-\r\n-        // primeira coluna (hora)\r\n-        const tCell = cells[start];\r\n-        if (tCell) {\r\n-          tCell.classList.remove('bg-white','bg-slate-50');\r\n-          tCell.classList.add(zebraClass);\r\n-        }\r\n-\r\n-        // colunas dos profissionais\r\n-        for (let col = 1; col < totalCols; col++) {\r\n-          const idx = start + col;\r\n-          const slot = cells[idx];\r\n-          if (!slot) continue;\r\n-          slot.classList.remove('bg-white','bg-slate-50');\r\n-          slot.classList.add(zebraClass, 'agenda-slot'); // garante classe\r\n-        }\r\n-      }\r\n-  }\r\n-\r\n-  // Insere ícones de ação nos cartões (editar / mudar status)\r\n-  function decorateCards() {\r\n-    const cards = agendaList?.querySelectorAll('div[data-appointment-id]');\r\n-    if (!cards || !cards.length) return;\r\n-\r\n-    cards.forEach((card) => {\r\n-      if (card.querySelector('.agenda-card__actions')) return; // já decorado\r\n-      card.classList.add('agenda-card'); // ativa hover via CSS\r\n-      card.style.position = 'relative';\r\n-\r\n-      const id = card.getAttribute('data-appointment-id') || '';\r\n-      const item = (state.agendamentos || []).find(x => String(x._id) === String(id)) || {};\r\n-      const isPaid = !!item.pago;\r\n-\r\n-      const actions = document.createElement('div');\r\n-      // flex em coluna para ter a “segunda linha” abaixo do '+'\r\n-      actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex flex-col items-end gap-1';\r\n-\r\n-      actions.innerHTML = `\r\n-        <!-- primeira linha: editar + status (mantém seu layout atual lado a lado) -->\r\n-        <div class=\"flex items-center gap-1\">\r\n-          <button class=\"agenda-action edit\" data-id=\"${id}\" title=\"Editar\">\r\n-            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\">\r\n-              <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 0 0 0-1.41L18.37 3.29a1.003 1.003 0 0 0-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.83z\"/>\r\n-            </svg>\r\n-          </button>\r\n-          <button class=\"agenda-action status\" data-id=\"${id}\" title=\"Mudar status\">\r\n-            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n-              <circle cx=\"12\" cy=\"12\" r=\"9\" stroke-width=\"2\"></circle>\r\n-              <path d=\"M12 7v5l3 3\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\r\n-            </svg>\r\n-          </button>\r\n-        </div>\r\n-\r\n-        <!-- segunda linha: ícone de pagamento (abaixo do '+') -->\r\n-        <button class=\"agenda-action cobrar ${isPaid ? 'text-green-600' : 'text-slate-500'}\" data-id=\"${id}\" title=\"${isPaid ? 'Pago' : 'Registrar pagamento'}\">\r\n-          ${\r\n-            isPaid\r\n-              // Cifão normal (Real)\r\n-              ? `<i class=\"fa-solid fa-dollar-sign text-[16px] leading-none\"></i>`\r\n-              // Cifrão com risco (stack do FA para “pendente”)\r\n-              : `<span class=\"fa-stack text-[12px] leading-none\" style=\"width: 1.25em;\">\r\n-                  <i class=\"fa-solid fa-dollar-sign fa-stack-1x\"></i>\r\n-                  <i class=\"fa-solid fa-slash fa-stack-1x\"></i>\r\n-                </span>`\r\n-          }\r\n-        </button>\r\n-      `;\r\n-      card.appendChild(actions);\r\n-    });\r\n-  }\r\n-\r\n-  /* === Drag & Drop na agenda: mover card entre horários/profissionais === */\r\n-  function injectDndStylesOnce() {\r\n-    if (document.getElementById('agenda-dnd-style')) return;\r\n-    const st = document.createElement('style');\r\n-    st.id = 'agenda-dnd-style';\r\n-    st.textContent = `\r\n-      .agenda-card.is-dragging { opacity: .6; }\r\n-      .agenda-drop-target { outline: 2px dashed #0ea5e9; outline-offset: -2px; background: rgba(14,165,233,0.06); }\r\n-    `;\r\n-    document.head.appendChild(st);\r\n-  }\r\n-\r\n-  // PUT rápido para mover agendamento (profissional/horário)\r\n-  async function moveAppointmentQuick(id, payload) {\r\n-      try {\r\n-        const body = {\r\n-          ...payload,\r\n-          storeId: state.selectedStoreId || storeSelect?.value\r\n-        };\r\n-        const resp = await api(`/func/agendamentos/${id}`, {\r\n-          method: 'PUT',\r\n-          headers: { 'Content-Type': 'application/json' },\r\n-          body: JSON.stringify(body)\r\n-        });\r\n-        if (!resp.ok) {\r\n-          const err = await resp.json().catch(() => ({}));\r\n-          throw new Error(err.message || 'Erro ao mover agendamento');\r\n-        }\r\n-        await loadAgendamentos();\r\n-        renderKpis();\r\n-        renderFilters();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      } catch (e) {\r\n-        console.error('moveAppointmentQuick', e);\r\n-        alert(e.message || 'Não foi possível mover o agendamento.');\r\n-      }\r\n-    }\r\n-\r\n-  function enableDragDrop() {\r\n-      injectDndStylesOnce();\r\n-\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body) return;\r\n-\r\n-      // Garante que todos os cards estejam \"arrastáveis\"\r\n-      body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n-        if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n-      });\r\n-\r\n-      // Evita múltiplos binds ao re-renderizar a agenda\r\n-      if (body.__dndDelegated) return;\r\n-      body.__dndDelegated = true;\r\n-\r\n-      // DRAGSTART (captura): funciona mesmo se o usuário começar o arrasto em um filho do card\r\n-      body.addEventListener('dragstart', (ev) => {\r\n-        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-        if (!card || !ev.dataTransfer) return;\r\n-\r\n-        const id = card.getAttribute('data-appointment-id') || '';\r\n-        if (!id) return;\r\n-\r\n-        try { ev.dataTransfer.setData('text/plain', id); } catch (_) {}\r\n-        try { ev.dataTransfer.setDragImage(card, 10, 10); } catch (_) {}\r\n-        ev.dataTransfer.effectAllowed = 'move';\r\n-        card.classList.add('is-dragging');\r\n-      }, true);\r\n-\r\n-      // DRAGEND: limpa estados visuais\r\n-      body.addEventListener('dragend', (ev) => {\r\n-        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-        if (card) card.classList.remove('is-dragging');\r\n-        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n-      }, true);\r\n-\r\n-      // DRAGOVER: habilita drop quando o ponteiro está sobre QUALQUER filho dentro da célula\r\n-      body.addEventListener('dragover', (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        ev.preventDefault();                 // obrigatório para permitir drop\r\n-        if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n-        slot.classList.add('agenda-drop-target');\r\n-      });\r\n-\r\n-      // DRAGLEAVE: remove realce\r\n-      body.addEventListener('dragleave', (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        slot.classList.remove('agenda-drop-target');\r\n-      });\r\n-\r\n-      // DROP: pega a célula alvo e move (profissional + horário)\r\n-      body.addEventListener('drop', async (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        ev.preventDefault();\r\n-        slot.classList.remove('agenda-drop-target');\r\n-\r\n-        const id = ev.dataTransfer?.getData('text/plain');\r\n-        if (!id) return;\r\n-\r\n-        const newProf = slot.dataset.profissionalId;\r\n-        const hh      = slot.dataset.hh; // ex.: \"14:00\"\r\n-        if (!newProf || !hh) return;\r\n-\r\n-        const dateRaw     = normalizeDate(dateInput?.value || todayStr());\r\n-        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n-\r\n-        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n-      });\r\n-  }\r\n-\r\n-  async function loadProfissionais() {\r\n-    if (!state.selectedStoreId) {\r\n-      state.profissionais = [];\r\n-      if (profSelect) profSelect.innerHTML = '';\r\n-      return;\r\n-    }\r\n-\r\n-    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    state.profissionais = Array.isArray(list) ? list : [];\r\n-\r\n-    if (profSelect) {\r\n-      profSelect.innerHTML = state.profissionais\r\n-        .map(p => `<option value=\"${p._id}\">${p.nome}</option>`)\r\n-        .join('');\r\n-    }\r\n-  }\r\n-\r\n-  // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n-  function drawNowLine() {\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body) return;\r\n-\r\n-      body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n-\r\n-      const now = new Date();\r\n-      const minutes = now.getHours() * 60 + now.getMinutes();\r\n-      const percent = minutes / (24 * 60);\r\n-      const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n-\r\n-      const line = document.createElement('div');\r\n-      line.className = 'agenda-nowline';\r\n-      line.style.top = `${y}px`;\r\n-      body.appendChild(line);\r\n-\r\n-      if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n-      window.__agendaNowTimer = setInterval(() => {\r\n-        const now2 = new Date();\r\n-        const minutes2 = now2.getHours() * 60 + now2.getMinutes();\r\n-        const percent2 = minutes2 / (24 * 60);\r\n-        const y2 = Math.max(0, Math.min(1, percent2)) * body.scrollHeight;\r\n-        const ln = body.querySelector('.agenda-nowline');\r\n-        if (ln) ln.style.top = `${y2}px`;\r\n-      }, 60_000);\r\n-  }\r\n-\r\n-  // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n-  async function updateStatusQuick(id, status) {\r\n-      try {\r\n-        const resp = await api(`/func/agendamentos/${id}`, {\r\n-          method: 'PUT',\r\n-          headers: { 'Content-Type': 'application/json' },\r\n-          body: JSON.stringify({ status })\r\n-        });\r\n-        if (!resp.ok) {\r\n-          const err = await resp.json().catch(() => ({}));\r\n-          throw new Error(err.message || 'Erro ao mudar status');\r\n-        }\r\n-        await loadAgendamentos();\r\n-        renderKpis();\r\n-        renderFilters();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      } catch (e) {\r\n-        console.error('updateStatusQuick', e);\r\n-        alert(e.message || 'Erro ao mudar status');\r\n-      }\r\n-    }\r\n-\r\n-    // === Impressão em cupom (80mm) ===\r\n-  function buildCupomHTML(items, meta = {}) {\r\n-    const storeName = (meta.storeName || '').trim();\r\n-    const dateStr   = (meta.dateStr || '').trim();\r\n-\r\n-    const rows = (items || []).map(a => {\r\n-      const pet   = (a.pet || '').toString().trim();\r\n-      const serv  = (a.servico || '').toString().trim();\r\n-      const valor = money(Number(a.valor || 0));\r\n-      // \"Pet Serviço - Valor\" em linha única\r\n-      return `<div class=\"row\"><span class=\"txt\">${pet} ${serv}</span><span class=\"val\">${valor}</span></div>`;\r\n-    }).join('');\r\n-\r\n-    return `\r\n-  <!doctype html>\r\n-  <html>\r\n-  <head>\r\n-    <meta charset=\"utf-8\">\r\n-    <title>Impressão</title>\r\n-    <style>\r\n-      @page { size: 80mm auto; margin: 3mm; }\r\n-      * { box-sizing: border-box; }\r\n-      html, body { padding: 0; margin: 0; }\r\n-      /* Aumenta um pouco o tamanho e usa preto sólido para ganhar contraste na térmica */\r\n-      body {\r\n-        width: 74mm;\r\n-        font: 13px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\";\r\n-        color: #000;\r\n-        -webkit-font-smoothing: none; /* deixa o traço mais “cheio” na impressão */\r\n-        font-weight: 600; /* base mais pesada */\r\n-      }\r\n-      .wrap { padding: 2mm 0; }\r\n-      .h1 { text-align:center; font-weight:700; font-size: 15px; margin-bottom: 1mm; }\r\n-      .meta { text-align:center; font-size: 12px; color:#000; font-weight:700; margin-bottom: 2mm; }\r\n-      .hr { border-top: 1px dashed #000; margin: 2mm 0; }\r\n-      .row { display:flex; align-items:flex-start; justify-content:space-between; gap: 4mm; padding: 1mm 0; }\r\n-      /* Linhas do cupom bem escuras */\r\n-      .row .txt { flex: 1 1 auto; word-break: break-word; font-weight:700; }\r\n-      .row .val { flex: 0 0 auto; white-space: nowrap; font-weight:700; }\r\n-      .foot { text-align:center; margin-top: 2mm; font-size: 12px; color:#000; font-weight:700; }\r\n-      @media print { .no-print { display: none !important; } }\r\n-    </style>\r\n-  </head>\r\n-  <body>\r\n-    <div class=\"wrap\">\r\n-      <div class=\"h1\">Agenda</div>\r\n-      <div class=\"meta\">${storeName ? storeName + ' • ' : ''}${dateStr}</div>\r\n-      <div class=\"hr\"></div>\r\n-      ${rows || '<div class=\"row\"><span class=\"txt\">Sem itens</span><span class=\"val\"></span></div>'}\r\n-      <div class=\"hr\"></div>\r\n-      <div class=\"foot\">Obrigado!</div>\r\n-    </div>\r\n-    <script>\r\n-      window.onload = function(){ setTimeout(function(){ window.print(); }, 50); };\r\n-      window.onafterprint = function(){ setTimeout(function(){ window.close(); }, 50); };\r\n-    </script>\r\n-  </body>\r\n-  </html>`;\r\n-  }\r\n-\r\n-  function handlePrintCupom() {\r\n-    try {\r\n-      const items = getFilteredAgendamentos();\r\n-\r\n-      // Ordena por horário (se houver)\r\n-      items.sort((a, b) => {\r\n-        const da = new Date(a.h || a.scheduledAt || 0).getTime();\r\n-        const db = new Date(b.h || b.scheduledAt || 0).getTime();\r\n-        return da - db;\r\n-      });\r\n-\r\n-      const dateStr =\r\n-        (document.getElementById('agenda-date-label-visible')?.textContent || '').trim() ||\r\n-        new Date((normalizeDate(dateInput?.value || todayStr())) + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-\r\n-      const storeName =\r\n-        (document.getElementById('agenda-store-label-visible')?.textContent || '').trim();\r\n-\r\n-      const html = buildCupomHTML(items, { storeName, dateStr });\r\n-\r\n-      const w = window.open('', 'print_cupom', 'width=420,height=600');\r\n-      if (!w) { alert('O navegador bloqueou a janela de impressão. Habilite pop-ups para continuar.'); return; }\r\n-      w.document.open('text/html');\r\n-      w.document.write(html);\r\n-      w.document.close();\r\n-      w.focus();\r\n-    } catch (e) {\r\n-      console.error('handlePrintCupom', e);\r\n-      alert('Não foi possível preparar a impressão.');\r\n-    }\r\n-  }\r\n-\r\n-  // Events\r\n-  addBtn?.addEventListener('click', openAddModal);\r\n-  modalClose?.addEventListener('click', closeModal);\r\n-  modalCancel?.addEventListener('click', closeModal);\r\n-  modalSave?.addEventListener('click', saveAgendamento);\r\n-\r\n-  addStoreSelect?.addEventListener('change', () => {\r\n-    const sid = addStoreSelect.value;\r\n-    const current = profSelect?.value || '';\r\n-    populateModalProfissionais(sid, current);\r\n-  });\r\n-\r\n-  // Botão \"Imprimir\" — cupom 80mm com \"Pet Serviço - Valor\"\r\n-    (function () {\r\n-      const btn0 = document.getElementById('print-agenda-btn');\r\n-      // (se algum listener antigo ainda existir em outro build, garantimos o nosso fluxo)\r\n-      if (btn0) {\r\n-        // remove listeners antigos (se houver) clonando o nó\r\n-        const clone = btn0.cloneNode(true);\r\n-        btn0.parentNode.replaceChild(clone, btn0);\r\n-        clone.addEventListener('click', (ev) => {\r\n-          ev.preventDefault();\r\n-          ev.stopImmediatePropagation?.();\r\n-          handlePrintCupom();\r\n-        });\r\n-      }\r\n-    })();\r\n-\r\n-  cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n-  servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n-\r\n-  addServAddBtn?.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    const s = state.selectedServico;\r\n-    const v = Number(valorInput?.value || 0);\r\n-    if (!s || !s._id) { alert('Escolha um serviço na busca.'); return; }\r\n-    if (!(v >= 0)) { alert('Valor inválido.'); return; }\r\n-    state.tempServicos.push({ _id: s._id, nome: s.nome, valor: v });\r\n-    // limpa seleção\r\n-    state.selectedServico = null;\r\n-    if (servInput)  servInput.value = '';\r\n-    if (valorInput) valorInput.value = '';\r\n-    renderServicosLista();\r\n-  });\r\n-\r\n-  modalDelete?.addEventListener('click', handleDelete);\r\n-\r\n-  // Ações rápidas nos cartões (delegação no container da agenda)\r\n-  agendaList?.addEventListener('click', (ev) => {\r\n-    // toggle do menu mobile\r\n-    const more = ev.target.closest('.agenda-card__more');\r\n-    if (more) {\r\n-      const holder = more.parentElement?.querySelector('.agenda-card__actions');\r\n-      if (holder) holder.classList.toggle('hidden');\r\n-      return;\r\n-    }\r\n-\r\n-    const btn = ev.target.closest('.agenda-action');\r\n-    if (!btn) return;\r\n-    const id = btn.getAttribute('data-id');\r\n-    if (!id) return;\r\n-\r\n-    if (btn.classList.contains('edit')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      if (item) openEditModal(item);\r\n-    } else if (btn.classList.contains('status')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-      const cur = (item && item.status) || 'agendado';\r\n-      const next = chain[(chain.indexOf(cur) + 1) % chain.length];\r\n-      updateStatusQuick(id, next);\r\n-    } else if (btn.classList.contains('cobrar')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      if (item) openEditModal(item); // reaproveite seu modal/fluxo de cobrança\r\n-    }\r\n-  });\r\n-\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    updateStoreLabel();\r\n-    state.__didInitialScroll = false;     // nova loja -> recalcula scroll\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    state.__didInitialScroll = false;     // nova data -> permite auto-scroll\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  // Boot\r\n-  function setupShortcuts() {\r\n-    document.addEventListener('keydown', (e) => {\r\n-      if (e.target && ['INPUT','SELECT','TEXTAREA'].includes(e.target.tagName)) return; // não atrapalhar digitação\r\n-      if (e.key === 't' || e.key === 'T') {\r\n-        if (dateInput) {\r\n-          dateInput.value = todayStr();\r\n-          state.__didInitialScroll = false;\r\n-          loadAgendamentos().then(() => {\r\n-            renderKpis(); renderFilters(); renderGrid(); enhanceAgendaUI();\r\n-          });\r\n-        }\r\n-      }\r\n-      if (e.key === 'n' || e.key === 'N') {\r\n-        e.preventDefault();\r\n-        openAddModal();\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  (async function init() {\r\n-    if (!dateInput?.value) dateInput.value = todayStr();\r\n-    if (viewSelect && !viewSelect.value) viewSelect.value = 'day';\r\n-    state.view = (viewSelect?.value) || 'day';\r\n-\r\n-    loadFiltersFromStorage();\r\n-    await loadStores();\r\n-    if (!state.selectedStoreId && storeSelect?.value) {\r\n-      state.selectedStoreId = storeSelect.value;\r\n-    }\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-\r\n-    ensureToolbar();\r\n-    ensureTodayButton();\r\n-    setupShortcuts();\r\n-\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  })();\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    state.__didInitialScroll = false;\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  viewSelect?.addEventListener('change', async () => {\r\n-    state.view = viewSelect.value || 'day';\r\n-    state.__didInitialScroll = false;\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  // Atualizações após troca de loja/data/status etc.\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    updateStoreLabel();\r\n-    state.__didInitialScroll = false;\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    state.__didInitialScroll = false;\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-})();\r\n-(function () {\r\n-  // Helper para requisições com token\r\n-  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n-  function api(url, opts = {}) {\r\n-    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n-      ...opts,\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        ...(opts.headers || {}),\r\n-        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  // Elements\r\n-  const agendaList = document.getElementById('agenda-list');\r\n-  const dateInput = document.getElementById('agenda-date');\r\n-  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n-  const viewSelect = document.getElementById('agenda-view');\r\n-  const addBtn = document.getElementById('add-service-btn');\r\n-  const storeSelect = document.getElementById('agenda-store');\r\n-  const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n-\r\n-  // Modal (reutilizado p/ adicionar e editar)\r\n-  const modal = document.getElementById('modal-add-servico');\r\n-  const modalClose = document.getElementById('modal-add-close');\r\n-  const modalCancel = document.getElementById('modal-add-cancel');\r\n-  const modalSave = document.getElementById('modal-add-save');\r\n-  const modalDelete = document.getElementById('modal-add-delete');\r\n-\r\n-  const addStoreSelect = document.getElementById('add-store-select');\r\n-  const addDateInput   = document.getElementById('add-date');\r\n-  const statusSelect   = document.getElementById('add-status');\r\n-\r\n-  const cliInput = document.getElementById('add-cli-input');\r\n-  const cliSug = document.getElementById('add-cli-sug');\r\n-  const petSelect = document.getElementById('add-pet-select');\r\n-  const servInput   = document.getElementById('add-serv-input');\r\n-  const servSug     = document.getElementById('add-serv-sug');\r\n-  const valorInput  = document.getElementById('add-valor');\r\n-  const addServAddBtn = document.getElementById('add-serv-add-btn');\r\n-  const servListUL  = document.getElementById('add-serv-list');\r\n-  const servTotalEl = document.getElementById('add-serv-total');\r\n-  const obsInput   = document.getElementById('add-observacoes');\r\n-  const horaInput   = document.getElementById('add-hora');\r\n-  const profSelect  = document.getElementById('add-prof-select');\r\n-\r\n-  // State\r\n-  const FILTER_STORAGE_KEY = 'agenda_filters_v1';\r\n-\r\n-  const state = {\r\n-    stores: [],\r\n-    profissionais: [],\r\n-    agendamentos: [],\r\n-    selectedStoreId: null,\r\n-    selectedCliente: null,\r\n-    selectedServico: null,\r\n-    tempServicos: [],\r\n-    editing: null,\r\n-    lastSnapshotHash: '',\r\n-    __didInitialScroll: false,\r\n-    view: 'day',\r\n-    filters: {                 // filtros persistentes\r\n-      statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n-      profIds: new Set()       // _id dos profissionais\r\n-    }\r\n-  };\r\n-\r\n-  function loadFiltersFromStorage() {\r\n-    try {\r\n-      const raw = JSON.parse(localStorage.getItem(FILTER_STORAGE_KEY) || 'null');\r\n-      if (raw && typeof raw === 'object') {\r\n-        state.filters.statuses = new Set(Array.isArray(raw.statuses) ? raw.statuses : []);\r\n-        state.filters.profIds  = new Set(Array.isArray(raw.profIds)  ? raw.profIds  : []);\r\n-      }\r\n-    } catch(_) {}\r\n-  }\r\n-  function saveFiltersToStorage() {\r\n-    try {\r\n-      localStorage.setItem(FILTER_STORAGE_KEY, JSON.stringify({\r\n-        statuses: Array.from(state.filters.statuses),\r\n-        profIds : Array.from(state.filters.profIds)\r\n-      }));\r\n-    } catch(_) {}\r\n-  }\r\n-\r\n-  function ensureToolbar() {\r\n-    if (!agendaList) return;\r\n-    if (document.getElementById('agenda-toolbar')) return;\r\n-\r\n-    const bar = document.createElement('div');\r\n-    bar.id = 'agenda-toolbar';\r\n-    // sticky sob o cabeçalho; leve blur para legibilidade; borda inferior discreta\r\n-    bar.className = 'sticky top-0 z-30 bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/60 border-b border-slate-200 mb-2 flex flex-col gap-2 px-3 py-2 rounded-lg';\r\n-\r\n-    // KPIs\r\n-    const kpis = document.createElement('div');\r\n-    kpis.id = 'agenda-kpis';\r\n-    kpis.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(kpis);\r\n-\r\n-    // Filtros\r\n-    const filters = document.createElement('div');\r\n-    filters.id = 'agenda-filters';\r\n-    filters.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(filters);\r\n-\r\n-    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n-  }\r\n-\r\n-  function computeKPIs(items) {\r\n-    const total = items.length;\r\n-    const previsto = items.reduce((s, i) => s + Number(i.valor || 0), 0);\r\n-    const recebido = items.reduce((s, i) => s + (i.pago ? Number(i.valor || 0) : 0), 0);\r\n-    const pendente = previsto - recebido;\r\n-    return { total, previsto, recebido, pendente };\r\n-  }\r\n-\r\n-  function renderKpis() {\r\n-    const wrap = document.getElementById('agenda-kpis');\r\n-    if (!wrap) return;\r\n-\r\n-    const all = state.agendamentos || [];\r\n-    const f = getFilteredAgendamentos();   // filtrados atuais\r\n-    const kAll = computeKPIs(all);\r\n-    const kF   = computeKPIs(f);\r\n-\r\n-    const totalLabel = state.view === 'week' ? 'Total semana' : (state.view === 'month' ? 'Total mês' : 'Total dia');\r\n-    wrap.innerHTML = `\r\n-      <div class=\"kpi-chip\">${totalLabel}: <strong>${kAll.total}</strong></div>\r\n-      <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n-      <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n-      <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n-      ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n-          ? `<div class=\"kpi-chip kpi-muted\">Filtrados: <strong>${kF.total}</strong></div>` : '' }\r\n-    `;\r\n-  }\r\n-\r\n-  function renderFilters() {\r\n-    const el = document.getElementById('agenda-filters');\r\n-    if (!el) return;\r\n-\r\n-    // contadores por status\r\n-    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n-    for (const a of (state.agendamentos || [])) {\r\n-      const key = String(a.status || 'agendado')\r\n-        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n-      if (counts[key] !== undefined) counts[key] += 1;\r\n-    }\r\n-\r\n-    // contadores por profissional\r\n-    const byProf = new Map();\r\n-    for (const a of (state.agendamentos || [])) {\r\n-      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n-      if (!id) continue;\r\n-      const key = String(id);\r\n-      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n-    }\r\n-\r\n-    const statuses = [\r\n-      {key:'agendado', label:'Agend.'},\r\n-      {key:'em_espera', label:'Espera'},\r\n-      {key:'em_atendimento', label:'Atend.'},\r\n-      {key:'finalizado', label:'Fim.'}\r\n-    ];\r\n-\r\n-    // chips de status\r\n-    const chipsStatus = statuses.map(s => {\r\n-      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n-      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n-                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n-              </button>`;\r\n-    }).join('');\r\n-\r\n-    // chips de profissional (apenas os que existem)\r\n-    const chipsProf = (state.profissionais || []).map(p => {\r\n-      const id = String(p._id);\r\n-      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n-      const n = byProf.get(id) || 0;\r\n-      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n-                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n-              </button>`;\r\n-    }).join('');\r\n-\r\n-    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n-      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n-\r\n-    el.innerHTML = `\r\n-      <div class=\"flex flex-wrap items-center gap-2\">\r\n-        ${chipsStatus}\r\n-        <span class=\"chip-sep\"></span>\r\n-        ${chipsProf}\r\n-        ${clearBtn}\r\n-      </div>\r\n-    `;\r\n-\r\n-    // handlers\r\n-    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n-      btn.addEventListener('click', () => {\r\n-        const type = btn.getAttribute('data-filter');\r\n-        const val  = btn.getAttribute('data-value');\r\n-        if (type === 'status') {\r\n-          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n-        } else if (type === 'prof') {\r\n-          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n-        }\r\n-        saveFiltersToStorage();\r\n-        renderFilters();\r\n-        renderKpis();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      });\r\n-    });\r\n-\r\n-    const clear = document.getElementById('chip-clear');\r\n-    if (clear) clear.addEventListener('click', () => {\r\n-      state.filters.statuses.clear();\r\n-      state.filters.profIds.clear();\r\n-      saveFiltersToStorage();\r\n-      renderFilters();\r\n-      renderKpis();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    });\r\n-  }\r\n-\r\n-  function normalizeStatus(s) {\r\n-    return String(s || 'agendado')\r\n-      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-      .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n-  }\r\n-\r\n-  function getFilteredAgendamentos() {\r\n-    const hasStatus = state.filters.statuses.size > 0;\r\n-    const hasProf   = state.filters.profIds.size   > 0;\r\n-\r\n-    if (!hasStatus && !hasProf) return state.agendamentos || [];\r\n-\r\n-    const byNameAll = new Map(\r\n-      (state.profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n-    );\r\n-\r\n-    return (state.agendamentos || []).filter(a => {\r\n-      let ok = true;\r\n-      if (hasStatus) ok = ok && state.filters.statuses.has(normalizeStatus(a.status));\r\n-      if (hasProf) {\r\n-        let pid = a.profissionalId ? String(a.profissionalId) : null;\r\n-        if (!pid) {\r\n-          let nc = '';\r\n-          if (typeof a.profissional === 'string') nc = a.profissional;\r\n-          else if (a.profissional && typeof a.profissional === 'object') {\r\n-            nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n-                a.profissional.razaoSocial || a.profissional.nome || '';\r\n-          }\r\n-          pid = byNameAll.get(String(nc).trim().toLowerCase()) || null;\r\n-        }\r\n-        ok = ok && pid && state.filters.profIds.has(String(pid));\r\n-      }\r\n-      return ok;\r\n-    });\r\n-  }\r\n-\r\n-  function getVisibleProfissionais() {\r\n-    const profs = state.profissionais || [];\r\n-    if (!state.filters.profIds.size) return profs;\r\n-    return profs.filter(p => state.filters.profIds.has(String(p._id)));\r\n-  }\r\n-\r\n-  // Helpers de data e utilitários\r\n-  function todayStr() {\r\n-    // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n-    const d = new Date();\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n-  function buildLocalDateTime(dateStr, hhmm) {\r\n-    let y, m, d;\r\n-    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) { [d, m, y] = dateStr.split('/').map(Number); }\r\n-    else { [y, m, d] = dateStr.split('-').map(Number); }\r\n-    const [hh, mm] = (hhmm || '00:00').split(':').map(Number);\r\n-    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n-  }\r\n-  function normalizeDate(v) {\r\n-    if (!v) return todayStr();\r\n-    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n-    return v;\r\n-  }\r\n-\r\n-  // ==== NOVO: utilitários de intervalo e label ====\r\n-  function startOfWeek(dateStr) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    const dow = (d.getDay() + 6) % 7; // 0 = seg\r\n-    d.setDate(d.getDate() - dow);\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function addDays(dateStr, n) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    d.setDate(d.getDate() + n);\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function startOfMonth(dateStr) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    d.setDate(1);\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function startOfNextMonth(dateStr) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    d.setDate(1);\r\n-    d.setMonth(d.getMonth() + 1);\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function updateHeaderLabel() {\r\n-    if (!dateLabelVisible) return;\r\n-    const base = normalizeDate(dateInput?.value || todayStr());\r\n-    if (state.view === 'week') {\r\n-      const ini = startOfWeek(base);\r\n-      const fim = addDays(ini, 6);\r\n-      const li = new Date(ini + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-      const lf = new Date(fim + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-      dateLabelVisible.textContent = `${li} a ${lf}`;\r\n-    } else if (state.view === 'month') {\r\n-      const m0 = startOfMonth(base);\r\n-      const dt = new Date(m0 + 'T00:00:00');\r\n-      const label = dt.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });\r\n-      dateLabelVisible.textContent = label.charAt(0).toUpperCase() + label.slice(1);\r\n-    } else {\r\n-      dateLabelVisible.textContent = new Date(base + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-    }\r\n-  }\r\n-  function localDateStr(d) {\r\n-    const y = d.getFullYear();\r\n-    const m = String(d.getMonth() + 1).padStart(2, '0');\r\n-    const dd = String(d.getDate()).padStart(2, '0');\r\n-    return `${y}-${m}-${dd}`;\r\n-  }\r\n-\r\n-  // === NOVO: abrevia tutor para \"Primeiro Sob..\" ===\r\n-  function shortTutorName(name) {\r\n-    if (!name) return '';\r\n-    const parts = String(name).trim().split(/\\s+/);\r\n-    const cap = s => s ? (s[0].toUpperCase() + s.slice(1).toLowerCase()) : '';\r\n-    const first = cap(parts[0] || '');\r\n-    const second = parts[1] ? cap(parts[1]).slice(0, 3) : '';\r\n-    return second ? `${first} ${second}..` : first;\r\n-  }\r\n-\r\n-  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n-  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n-  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n-\r\n-  // Stores\r\n-  async function loadStores() {\r\n-    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    state.stores = Array.isArray(list) ? list : [];\r\n-    if (storeSelect) {\r\n-      storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-    }\r\n-    if (!state.selectedStoreId && state.stores[0]) {\r\n-      state.selectedStoreId = state.stores[0]._id;\r\n-      if (storeSelect) storeSelect.value = state.selectedStoreId;\r\n-    }\r\n-    updateStoreLabel();\r\n-  }\r\n-  function updateStoreLabel() {\r\n-    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n-    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n-    const vis = document.getElementById('agenda-store-label-visible');\r\n-    if (vis) vis.textContent = s ? s.nome : '—';\r\n-  }\r\n-\r\n-  // Profissionais\r\n-  async function populateModalProfissionais(storeId, preselectId) {\r\n-    try {\r\n-      if (!storeId || !profSelect) return;\r\n-      const resp = await api(`/func/profissionais/esteticistas?storeId=${storeId}`);\r\n-      const list = await resp.json().catch(() => []);\r\n-      const arr = Array.isArray(list) ? list : [];\r\n-      profSelect.innerHTML = arr.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-      const pid = preselectId ? String(preselectId) : '';\r\n-      if (pid && arr.some(p => String(p._id) === pid)) {\r\n-        profSelect.value = pid;\r\n-      } else if (arr[0]) {\r\n-        profSelect.value = String(arr[0]._id);\r\n-      }\r\n-    } catch (_) { /* silencioso no modal */ }\r\n-  }\r\n-\r\n-  // Agendamentos\r\n-  async function loadAgendamentos() {\r\n-    const base = normalizeDate(dateInput?.value || todayStr());\r\n-    const date = base; // compat: alguns trechos antigos ainda usam \"date\"\r\n-    let url = '';\r\n-\r\n-    if (state.view === 'week') {\r\n-      const ini = startOfWeek(base);\r\n-      const fim = addDays(ini, 7); // exclusivo\r\n-      url = `/func/agendamentos/range?start=${ini}&end=${fim}&storeId=${state.selectedStoreId}`;\r\n-    } else if (state.view === 'month') {\r\n-      const m0 = startOfMonth(base);\r\n-      const m1 = startOfNextMonth(base); // exclusivo\r\n-      url = `/func/agendamentos/range?start=${m0}&end=${m1}&storeId=${state.selectedStoreId}`;\r\n-    } else {\r\n-      url = `/func/agendamentos?date=${base}&storeId=${state.selectedStoreId}`;\r\n-    }\r\n-\r\n-    try {\r\n-      const resp = await api(url);\r\n-      if (!resp.ok) {\r\n-        const txt = await resp.text();\r\n-        console.error('GET', url, '->', resp.status, txt);\r\n-        state.agendamentos = [];\r\n-        return;\r\n-      }\r\n-\r\n-      const list = await resp.json();\r\n-      state.agendamentos = Array.isArray(list) ? list : [];\r\n-\r\n-      // snapshot/label\r\n-      updateHeaderLabel();\r\n-      state.lastSnapshotHash = `${state.view}:${date}:${state.selectedStoreId || ''}:${state.agendamentos.length}`;\r\n-\r\n-      console.info('[Agenda]', 'view=', state.view, 'dataBase=', date, 'loja=', state.selectedStoreId, 'itens=', state.agendamentos.length);\r\n-    } catch (e) {\r\n-      console.error('Erro ao carregar agendamentos', e);\r\n-      state.agendamentos = [];\r\n-    }\r\n-  }\r\n-\r\n-  // Grade (sem coluna \"Outros\")\r\n-  function renderGrid() {\r\n-      if (!agendaList) return;\r\n-      if (state.view === 'week')  { renderWeekGrid();  return; }\r\n-      if (state.view === 'month') { renderMonthGrid(); return; }\r\n-\r\n-      // ===== Visão DIÁRIA (original) =====\r\n-      const date = normalizeDate(dateInput?.value || todayStr());\r\n-      updateHeaderLabel();\r\n-\r\n-      // janelas de trabalho (ajuste se quiser)\r\n-      const BUSINESS_START = 8;   // 08:00\r\n-      const BUSINESS_END   = 19;  // 19:00\r\n-\r\n-      const hours = [];\r\n-      for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n-\r\n-      clearChildren(agendaList);\r\n-\r\n-      const profsAll  = state.profissionais || [];\r\n-      const profs     = getVisibleProfissionais();\r\n-      const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n-\r\n-      const colCount = 1 + (profs?.length || 0);\r\n-\r\n-      // Cabeçalho\r\n-      const header = document.createElement('div');\r\n-      header.style.display = 'grid';\r\n-      // >>> COLUNAS ELÁSTICAS: ocupam o espaço restante sem “vão” à direita\r\n-      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n-      header.className = 'bg-white border-b';\r\n-\r\n-      const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n-      headLabels.forEach((label, idx) => {\r\n-        const cell = document.createElement('div');\r\n-        cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n-        if (idx === 0) {\r\n-          cell.textContent = label;\r\n-        }\r\n-        else {\r\n-          // >>> centraliza o nome do profissional\r\n-          cell.style.textAlign = 'center';\r\n-          const span = document.createElement('span');\r\n-          span.className = 'agenda-head-label inline-block';\r\n-          span.textContent = label || '';\r\n-          cell.dataset.profId = String(profs[idx - 1]._id);\r\n-          cell.appendChild(span);\r\n-        }\r\n-        header.appendChild(cell);\r\n-      });\r\n-\r\n-      const counter = document.createElement('div');\r\n-      counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n-      const itemsAll = state.agendamentos || [];\r\n-      const items    = getFilteredAgendamentos(itemsAll);\r\n-      const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n-      counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n-      header.appendChild(counter);\r\n-\r\n-      agendaList.appendChild(header);\r\n-\r\n-      // Corpo\r\n-      const body = document.createElement('div');\r\n-      body.style.display = 'grid';\r\n-      // >>> COLUNAS ELÁSTICAS: cada profissional tem no mínimo 360px e expande até preencher\r\n-      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n-      agendaList.appendChild(body);\r\n-\r\n-      const isToday = normalizeDate(date) === todayStr();\r\n-      const now = new Date();\r\n-      const nowHH = `${pad(now.getHours())}:00`;\r\n-\r\n-      hours.forEach(hh => {\r\n-        const hourNumber = parseInt(hh.split(':')[0], 10);\r\n-        const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n-        const isNowRow   = isToday && hh === nowHH;\r\n-\r\n-        // coluna de horário\r\n-        const timeCell = document.createElement('div');\r\n-        timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n-        timeCell.textContent = hh;\r\n-\r\n-        body.appendChild(timeCell);\r\n-\r\n-        // células por profissional\r\n-        (profs || []).forEach(p => {\r\n-          const cell = document.createElement('div');\r\n-          // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n-          cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n-          cell.dataset.profissionalId = String(p._id);\r\n-          cell.dataset.hh = hh;\r\n-          body.appendChild(cell);\r\n-        });\r\n-      });\r\n-\r\n-      // posiciona cartões\r\n-      let placed = 0;\r\n-      for (const a of items) {\r\n-        const when = a.h || a.scheduledAt;\r\n-        if (!when) continue;\r\n-\r\n-        const d  = new Date(when);\r\n-        const hh = `${pad(d.getHours())}:00`;\r\n-\r\n-        let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-        if (!profId) {\r\n-          let nameCandidate = '';\r\n-          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n-          else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n-          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n-          if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n-        }\r\n-        if (!profId) continue;\r\n-\r\n-        let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n-        if (!col && profs[0]) {\r\n-          col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n-        }\r\n-        if (!col) continue;\r\n-\r\n-        const meta = statusMeta(a.status);\r\n-        const card = document.createElement('div');\r\n-        card.setAttribute('data-appointment-id', a._id || '');\r\n-        card.style.setProperty('--stripe', meta.stripe);\r\n-        card.style.setProperty('--card-max-w', '260px');\r\n-        card.className = `agenda-card border ${meta.borderClass} cursor-move select-none`;\r\n-        card.setAttribute('draggable', 'true');\r\n-\r\n-        const headerEl = document.createElement('div');\r\n-        headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n-\r\n-        const tutorShort = shortTutorName(a.tutor || '');\r\n-        const headLabel = tutorShort ? `${tutorShort} | ${a.pet || ''}` : (a.pet || '');\r\n-\r\n-        headerEl.innerHTML = `\r\n-          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${headLabel}\">${headLabel}</div>\r\n-          ${renderStatusBadge(a.status)}\r\n-        `;\r\n-\r\n-        const bodyEl = document.createElement('div');\r\n-        if (a.observacoes && String(a.observacoes).trim()) {\r\n-          const svc = document.createElement('div');\r\n-          svc.className = 'text-[13px] text-gray-600 clamp-2';\r\n-          svc.textContent = a.servico || '';\r\n-          const obs = document.createElement('div');\r\n-          obs.className = 'mt-1 text-[12px] text-gray-700 italic clamp-2';\r\n-          obs.textContent = String(a.observacoes).trim();\r\n-          bodyEl.appendChild(svc);\r\n-          bodyEl.appendChild(obs);\r\n-        } else {\r\n-          bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n-          bodyEl.textContent = a.servico || '';\r\n-        }\r\n-\r\n-        const footerEl = document.createElement('div');\r\n-        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n-        const price = document.createElement('div');\r\n-        price.className = 'text-[13px] text-gray-800 font-medium';\r\n-        price.textContent = money(a.valor);\r\n-\r\n-        footerEl.appendChild(price);\r\n-\r\n-        card.appendChild(headerEl);\r\n-        card.appendChild(bodyEl);\r\n-        card.appendChild(footerEl);\r\n-\r\n-        col.appendChild(card);\r\n-        placed++;\r\n-      }\r\n-\r\n-      if (placed === 0) {\r\n-        const empty = document.createElement('div');\r\n-        empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n-        empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n-        agendaList.insertBefore(empty, header.nextSibling);\r\n-      }\r\n-  }\r\n-\r\n-  /** ===== NOVO: visão semanal ===== */\r\n-  function renderWeekGrid() {\r\n-    const base = normalizeDate(dateInput?.value || todayStr());\r\n-    const ini  = startOfWeek(base);\r\n-    const days = Array.from({ length: 7 }, (_, i) => addDays(ini, i));\r\n-    updateHeaderLabel();\r\n-\r\n-    clearChildren(agendaList);\r\n-\r\n-    // Cabeçalho: horários + 7 dias\r\n-    const BUSINESS_START = 8, BUSINESS_END = 19;\r\n-    const hours = []; for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n-\r\n-    const header = document.createElement('div');\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n-    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n-    header.innerHTML = `\r\n-      <div class=\"px-2 py-2 text-xs text-slate-500\">Horário</div>\r\n-      ${days.map(d=>{\r\n-        const lab = new Date(d+'T00:00:00').toLocaleDateString('pt-BR', { weekday:'short', day:'2-digit', month:'2-digit' });\r\n-        return `<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${lab}</div>`;\r\n-      }).join('')}\r\n-    `;\r\n-    agendaList.appendChild(header);\r\n-\r\n-    const body = document.createElement('div');\r\n-    body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n-    agendaList.appendChild(body);\r\n-\r\n-    // Linhas por hora\r\n-    hours.forEach(hh => {\r\n-      const hNum = parseInt(hh.slice(0,2),10);\r\n-      const inBusiness = (hNum>=BUSINESS_START && hNum< BUSINESS_END);\r\n-\r\n-      const timeCell = document.createElement('div');\r\n-      timeCell.className = `px-2 py-2 border-b text-[12px] ${inBusiness?'text-slate-800':'text-slate-400'}`;\r\n-      timeCell.textContent = hh;\r\n-      body.appendChild(timeCell);\r\n-\r\n-      days.forEach(d=>{\r\n-        const cell = document.createElement('div');\r\n-        cell.className = 'px-2 py-2 border-b agenda-slot';\r\n-        cell.dataset.day = d;\r\n-        cell.dataset.hh  = hh;\r\n-        body.appendChild(cell);\r\n-      });\r\n-    });\r\n-\r\n-    // Posiciona cartões (compactos)\r\n-    const items = getFilteredAgendamentos(state.agendamentos || []);\r\n-    let placed = 0;\r\n-\r\n-    for (const a of items) {\r\n-      const when = a.h || a.scheduledAt;\r\n-      if (!when) continue;\r\n-\r\n-      const dt     = new Date(when);\r\n-      const dayStr = localDateStr(dt); // data local evita deslocamento de fuso\r\n-      if (dayStr < days[0] || dayStr > days[6]) continue;\r\n-\r\n-      const hh = `${pad(dt.getHours())}:00`;\r\n-      const cell = agendaList.querySelector(`div[data-day=\"${dayStr}\"][data-hh=\"${hh}\"]`);\r\n-      if (!cell) continue;\r\n-\r\n-      const meta = statusMeta(a.status);\r\n-      const hhmm = `${pad(dt.getHours())}:${String(dt.getMinutes()).padStart(2,'0')}`;\r\n-\r\n-      const card = document.createElement('div');\r\n-      card.setAttribute('data-appointment-id', a._id || '');\r\n-      card.style.setProperty('--stripe', meta.stripe);\r\n-      card.style.setProperty('--card-max-w', '100%');                       // ocupa a coluna\r\n-      card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n-      card.setAttribute('draggable', 'true');\r\n-      card.title = [\r\n-        a.pet || '',\r\n-        a.servico || '',\r\n-        (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n-      ].filter(Boolean).join(' • ');\r\n-\r\n-      // Header denso: horário + pet + status (badge menor)\r\n-      const headerEl = document.createElement('div');\r\n-      headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n-      headerEl.innerHTML = `\r\n-        <div class=\"flex items-center gap-2\">\r\n-          <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n-          <span class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</span>\r\n-        </div>\r\n-        ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n-      `;\r\n-\r\n-      // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n-      const bodyEl = document.createElement('div');\r\n-      const svc = document.createElement('div');\r\n-      svc.className = 'text-[12px] text-gray-600 truncate';\r\n-      svc.textContent = a.servico || '';\r\n-      bodyEl.appendChild(svc);\r\n-\r\n-      if (a.observacoes && String(a.observacoes).trim()) {\r\n-        const obs = document.createElement('div');\r\n-        obs.className = 'text-[11px] text-gray-700 italic truncate';\r\n-        obs.textContent = String(a.observacoes).trim();\r\n-        bodyEl.appendChild(obs);\r\n-      }\r\n-\r\n-      // Rodapé: valor à direita\r\n-      const footerEl = document.createElement('div');\r\n-      footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n-      const price = document.createElement('div');\r\n-      price.className = 'text-[12px] text-gray-800 font-semibold';\r\n-      price.textContent = money(a.valor);\r\n-      footerEl.appendChild(price);\r\n-\r\n-      card.appendChild(headerEl);\r\n-      card.appendChild(bodyEl);\r\n-      card.appendChild(footerEl);\r\n-\r\n-      cell.appendChild(card);\r\n-      placed++;\r\n-    }\r\n-\r\n-    if (placed === 0) {\r\n-      const empty = document.createElement('div');\r\n-      empty.className = 'p-6 text-sm text-slate-500';\r\n-      empty.textContent = 'Nenhum agendamento no intervalo.';\r\n-      agendaList.appendChild(empty);\r\n-    }\r\n-  }\r\n-\r\n-  /** ===== NOVO: visão mensal ===== */\r\n-  function renderMonthGrid() {\r\n-    const base = normalizeDate(dateInput?.value || todayStr());\r\n-    const m0   = startOfMonth(base);\r\n-    const m1   = startOfNextMonth(base); // exclusivo\r\n-    updateHeaderLabel();\r\n-\r\n-    clearChildren(agendaList);\r\n-\r\n-    // cabeçalho: seg a dom\r\n-    const weekDays = ['Seg','Ter','Qua','Qui','Sex','Sáb','Dom'];\r\n-    const header = document.createElement('div');\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n-    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n-    header.innerHTML = weekDays.map(d=>`<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${d}</div>`).join('');\r\n-    agendaList.appendChild(header);\r\n-\r\n-    // calcular início da grade (segunda da semana que contém o dia 1)\r\n-    const startGrid = startOfWeek(m0);\r\n-    const days = Array.from({length:42},(_,i)=> addDays(startGrid,i)); // 6 semanas\r\n-\r\n-    const grid = document.createElement('div');\r\n-    grid.style.display = 'grid';\r\n-    grid.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n-    agendaList.appendChild(grid);\r\n-\r\n-    // usar FILTRO + AGRUPAR por data local\r\n-    const items = getFilteredAgendamentos((state.agendamentos||[]).slice().sort((a,b)=>(new Date(a.h||a.scheduledAt))-(new Date(b.h||b.scheduledAt))));\r\n-    const byDay = new Map();\r\n-    for (const a of items) {\r\n-      const d = localDateStr(new Date(a.h || a.scheduledAt));\r\n-      if (d >= m0 && d < m1) {\r\n-        if (!byDay.has(d)) byDay.set(d, []);\r\n-        byDay.get(d).push(a);\r\n-      }\r\n-    }\r\n-\r\n-    days.forEach(d=>{\r\n-      const inMonth = (d>=m0 && d<m1);\r\n-      const cell = document.createElement('div');\r\n-      cell.className = `min-h-[140px] border p-2 ${inMonth? 'bg-white':'bg-slate-50'}`; // min-h menor\r\n-\r\n-      const title = document.createElement('div');\r\n-      title.className = `flex items-center justify-between text-[11px] ${inMonth?'text-slate-700':'text-slate-400'}`;\r\n-      const dayNum = new Date(d+'T00:00:00').getDate();\r\n-      title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n-\r\n-      const list = document.createElement('div');\r\n-      list.className = 'mt-1 space-y-1';\r\n-\r\n-      const itemsDay = byDay.get(d) || [];\r\n-      itemsDay.forEach((a, idx)=>{\r\n-        const meta = statusMeta(a.status);\r\n-        const when = new Date(a.h || a.scheduledAt);\r\n-        const hhmm = `${pad(when.getHours())}:${String(when.getMinutes()).padStart(2,'0')}`;\r\n-\r\n-        const card = document.createElement('div');\r\n-        card.setAttribute('data-appointment-id', a._id || '');\r\n-        card.style.setProperty('--stripe', meta.stripe);\r\n-        card.style.setProperty('--card-max-w', '100%');\r\n-        card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n-        card.setAttribute('draggable', 'true');\r\n-        card.title = [\r\n-          a.pet || '',\r\n-          a.servico || '',\r\n-          (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n-        ].filter(Boolean).join(' • '); // tooltip exibe tudo sem poluir o card\r\n-\r\n-        // Header denso: horário à esquerda + status à direita\r\n-        const headerEl = document.createElement('div');\r\n-        headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n-        headerEl.innerHTML = `\r\n-          <div class=\"flex items-center gap-2\">\r\n-            <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n-            <span class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</span>\r\n-          </div>\r\n-          ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n-        `;\r\n-\r\n-        // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n-        const bodyEl = document.createElement('div');\r\n-        const svc = document.createElement('div');\r\n-        svc.className = 'text-[12px] text-gray-600 truncate';     // 1 linha\r\n-        svc.textContent = a.servico || '';\r\n-        bodyEl.appendChild(svc);\r\n-\r\n-        if (a.observacoes && String(a.observacoes).trim()) {\r\n-          const obs = document.createElement('div');\r\n-          obs.className = 'text-[11px] text-gray-700 italic truncate'; // 1 linha\r\n-          obs.textContent = String(a.observacoes).trim();\r\n-          bodyEl.appendChild(obs);\r\n-        }\r\n-\r\n-        // Rodapé enxuto: valor à direita\r\n-        const footerEl = document.createElement('div');\r\n-        footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n-        const price = document.createElement('div');\r\n-        price.className = 'text-[12px] text-gray-800 font-semibold';\r\n-        price.textContent = money(a.valor);\r\n-        footerEl.appendChild(price);\r\n-\r\n-        card.appendChild(headerEl);\r\n-        card.appendChild(bodyEl);\r\n-        card.appendChild(footerEl);\r\n-\r\n-        list.appendChild(card);\r\n-\r\n-        // Limitar o excesso visual\r\n-        if (idx>=6 && itemsDay.length>7) {\r\n-          const more = document.createElement('div');\r\n-          more.className = 'text-[11px] text-slate-500';\r\n-          more.textContent = `+${itemsDay.length-6} itens`;\r\n-          list.appendChild(more);\r\n-          return;\r\n-        }\r\n-      });\r\n-\r\n-      cell.appendChild(title);\r\n-      cell.appendChild(list);\r\n-      grid.appendChild(cell);\r\n-    });\r\n-  }\r\n-\r\n-  // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n-  function statusMeta(s) {\r\n-    // Normalização: acentos/maiúsculas/espaços/hífens\r\n-    const keyRaw = String(s || 'agendado')\r\n-      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-      .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n-\r\n-    const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-    const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n-\r\n-    // Paleta acessível (contraste AA) + info para faixa lateral e badge compacta\r\n-    const map = {\r\n-      agendado: {\r\n-        label: 'Agendado',\r\n-        short: 'Agend.',\r\n-        stripe: '#64748B',     // slate-500\r\n-        text: '#0F172A',       // slate-900\r\n-        badgeClass: 'bg-slate-100 text-slate-700 border border-slate-200',\r\n-        borderClass: 'border-slate-300'\r\n-      },\r\n-      em_espera: {\r\n-        label: 'Em espera',\r\n-        short: 'Espera',\r\n-        stripe: '#B45309',     // amber-700\r\n-        text: '#1F2937',       // gray-800\r\n-        badgeClass: 'bg-amber-50 text-amber-800 border border-amber-200',\r\n-        borderClass: 'border-amber-400'\r\n-      },\r\n-      em_atendimento: {\r\n-        label: 'Em atendimento',\r\n-        short: 'Atend.',\r\n-        stripe: '#1D4ED8',     // blue-700\r\n-        text: '#0B1235',\r\n-        badgeClass: 'bg-blue-50 text-blue-800 border border-blue-200',\r\n-        borderClass: 'border-blue-500'\r\n-      },\r\n-      finalizado: {\r\n-        label: 'Finalizado',\r\n-        short: 'Fim.',\r\n-        stripe: '#16A34A',     // green-600\r\n-        text: '#052E16',\r\n-        badgeClass: 'bg-green-50 text-green-800 border border-green-200',\r\n-        borderClass: 'border-green-500'\r\n-      }\r\n-    };\r\n-\r\n-    return map[k];\r\n-  }\r\n-\r\n-  function renderStatusBadge(s) {\r\n-    const { label, badgeClass } = statusMeta(s);\r\n-    // `whitespace-nowrap` garante que o chip não quebre em duas linhas\r\n-    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium whitespace-nowrap ${badgeClass}\">${label}</span>`;\r\n-  }\r\n-\r\n-  // Modal — modo adicionar\r\n-  function openAddModal() {\r\n-    state.editing = null;\r\n-    if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n-\r\n-    // Reset serviços temporários\r\n-    state.tempServicos = [];\r\n-    renderServicosLista();\r\n-    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n-\r\n-    // Campos editáveis habilitados\r\n-    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n-\r\n-    // Limpa estado/inputs\r\n-    state.selectedCliente = null;\r\n-    state.selectedServico = null;\r\n-    if (cliInput) { cliInput.value = ''; }\r\n-    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n-    if (servInput) { servInput.value = ''; }\r\n-    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-    if (valorInput) { valorInput.value = ''; }\r\n-    if (petSelect) { petSelect.innerHTML = ''; }\r\n-    if (obsInput) { obsInput.value = ''; }\r\n-\r\n-    // Empresa (usa as mesmas opções do seletor da página)\r\n-    if (addStoreSelect) {\r\n-      if (storeSelect && storeSelect.options.length) {\r\n-        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n-      } else if (state.stores?.length) {\r\n-        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-      }\r\n-      const sid = state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.value = sid;\r\n-\r\n-      // Carrega os profissionais correspondentes à empresa escolhida no modal (sem travar a abertura)\r\n-      try { if (sid) { populateModalProfissionais(sid); } } catch(_) {}\r\n-    }\r\n-\r\n-    // Data (usa a data visível na página)\r\n-    if (addDateInput) {\r\n-      const date = normalizeDate(dateInput?.value || todayStr()); // YYYY-MM-DD\r\n-      addDateInput.value = date;\r\n-    }\r\n-\r\n-    // Hora default (agora)\r\n-    const now = new Date();\r\n-    const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n-    if (horaInput) horaInput.value = hh;\r\n-    \r\n-    // Observações\r\n-    if (obsInput) { obsInput.value = ''; }\r\n-\r\n-    // Status default\r\n-    if (statusSelect) statusSelect.value = 'agendado';\r\n-\r\n-    // Botão Excluir só em edição\r\n-    if (modalDelete) modalDelete.classList.add('hidden');\r\n-\r\n-    modal.classList.remove('hidden'); \r\n-    modal.classList.add('flex');\r\n-    cliInput?.focus();\r\n-  }\r\n-\r\n-  // cache simples: clienteId -> nome\r\n-  const _clienteNomeCache = new Map();\r\n-\r\n-  async function resolveClienteNome(a) {\r\n-    try {\r\n-      if (!a) return '';\r\n-\r\n-      // 1) nome direto vindo da API\r\n-      const direct =\r\n-        a.clienteNome ||\r\n-        (a.cliente && typeof a.cliente === 'object' && (a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial)) ||\r\n-        null;\r\n-      if (typeof direct === 'string' && direct.trim()) return direct.trim();\r\n-\r\n-      // 2) clienteId em qualquer formato\r\n-      let maybeId =\r\n-        a.clienteId ||\r\n-        a.clientId ||\r\n-        a.customerId ||\r\n-        (typeof a.cliente === 'string' ? a.cliente : null);\r\n-\r\n-      if (typeof maybeId === 'object' && maybeId !== null && maybeId._id) {\r\n-        maybeId = String(maybeId._id);\r\n-      }\r\n-      const id = (typeof maybeId === 'string' && /^[0-9a-fA-F]{24}$/.test(maybeId)) ? maybeId : null;\r\n-\r\n-      if (id) {\r\n-        if (_clienteNomeCache.has(id)) return _clienteNomeCache.get(id);\r\n-        const r = await api(`/func/clientes/${id}`);\r\n-        if (r.ok) {\r\n-          const c = await r.json();\r\n-          const nome = c?.nome || '';\r\n-          if (nome) { _clienteNomeCache.set(id, nome); return nome; }\r\n-        }\r\n-      }\r\n-\r\n-      // 3) fallback por petId\r\n-      const petId =\r\n-        a.petId ||\r\n-        (a.pet && typeof a.pet === 'object' && a.pet._id ? a.pet._id : null) ||\r\n-        null;\r\n-\r\n-      if (petId && /^[0-9a-fA-F]{24}$/.test(String(petId))) {\r\n-        const r2 = await api(`/func/pets/${petId}`);\r\n-        if (r2.ok) {\r\n-          const p = await r2.json();\r\n-          const nome =\r\n-            (p?.cliente && (p.cliente.nome || p.cliente.nomeCompleto || p.cliente.razaoSocial)) ||\r\n-            p?.clienteNome ||\r\n-            '';\r\n-          if (nome) return String(nome);\r\n-        }\r\n-      }\r\n-    } catch (e) {\r\n-      console.info('[resolveClienteNome] não foi possível resolver', e);\r\n-    }\r\n-    return '';\r\n-  }\r\n-\r\n-  // --- DEPOIS: openEditModal (indica carregamento e garante preenchimento) ---\r\n-  function toDateInputValueFromISO(isoStr) {\r\n-    const d = new Date(isoStr);\r\n-    if (isNaN(d.getTime())) return todayStr();\r\n-    const yyyy = d.getFullYear();\r\n-    const mm = String(d.getMonth() + 1).padStart(2, '0');\r\n-    const dd = String(d.getDate()).padStart(2, '0');\r\n-    return `${yyyy}-${mm}-${dd}`;\r\n-  }\r\n-\r\n-  function openEditModal(a) {\r\n-    state.editing = a || null;\r\n-    if (!modal || !state.editing) return;\r\n-\r\n-    // Preenche lista de serviços no modo edição (somente leitura)\r\n-    state.tempServicos = Array.isArray(a.servicos)\r\n-      ? a.servicos.map(x => ({ _id: x._id, nome: x.nome, valor: Number(x.valor || 0) }))\r\n-      : (a.servico ? [{ _id: null, nome: a.servico, valor: Number(a.valor || 0) }] : []);\r\n-    renderServicosLista();\r\n-\r\n-    // habilita campo de busca/valor para adicionar novos serviços\r\n-    state.selectedServico = null;\r\n-    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n-    if (servSug)   { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-    if (valorInput){ valorInput.value = ''; valorInput.disabled = false; }\r\n-\r\n-    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n-\r\n-    // Empresa (mostra a loja do agendamento e permite trocar)\r\n-    if (addStoreSelect) {\r\n-      if (storeSelect && storeSelect.options.length) {\r\n-        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n-      } else if (state.stores?.length) {\r\n-        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-      }\r\n-      addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.disabled = false;\r\n-    }\r\n-\r\n-    // Data do agendamento\r\n-    if (addDateInput) {\r\n-      const iso = a.h || a.scheduledAt || new Date().toISOString();\r\n-      addDateInput.value = toDateInputValueFromISO(iso);\r\n-    }\r\n-\r\n-    // Hora\r\n-    const d = new Date((a.h || a.scheduledAt) || new Date());\r\n-    const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n-    if (horaInput) horaInput.value = hh;\r\n-\r\n-    // Profissional (tenta resolver o id atual)\r\n-    let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-    if (!profId && typeof a.profissional === 'string') {\r\n-      const key = a.profissional.trim().toLowerCase();\r\n-      const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n-      if (match) profId = String(match._id);\r\n-    }\r\n-    if (profSelect && profId) profSelect.value = profId;\r\n-\r\n-    // Ao abrir o modal de edição, carregamos os profissionais da EMPRESA selecionada no modal\r\n-    try {\r\n-      const sid = addStoreSelect?.value || a.storeId || '';\r\n-      if (sid) { populateModalProfissionais(sid, profId); } // não bloqueia a abertura do modal\r\n-    } catch (_) {}\r\n-\r\n-    // Status (normalizado p/ os values do <select>)\r\n-    if (statusSelect) {\r\n-      const keyRaw = String(a.status || 'agendado')\r\n-        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-        .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n-      const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-      statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n-    }\r\n-\r\n-    // Observações (preenche com a descrição do card)\r\n-    if (obsInput) { obsInput.value = (a.observacoes || '').trim(); }\r\n-\r\n-    // Cliente e Pet (preenche e bloqueia busca no modo edição)\r\n-    if (cliInput) { cliInput.value = (a.clienteNome || ''); cliInput.disabled = true; }\r\n-   \r\n-    if (petSelect) {\r\n-      petSelect.innerHTML = '';\r\n-      try {\r\n-        const clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n-        if (clienteId) {\r\n-          api(`/func/clientes/${clienteId}/pets`).then(r => r.json().catch(() => []))\r\n-            .then(pets => {\r\n-              petSelect.innerHTML = (Array.isArray(pets) ? pets : []).map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-              const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n-              if (currentPetId) petSelect.value = String(currentPetId);\r\n-            });\r\n-        }\r\n-      } catch (_) {}\r\n-    }\r\n-\r\n-    // Serviço/Valor: leitura\r\n-    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n-    if (valorInput) { valorInput.value = ''; valorInput.disabled = false; }\r\n-\r\n-    // Botão excluir visível\r\n-    if (modalDelete) modalDelete.classList.remove('hidden');\r\n-\r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n-  }\r\n-\r\n-  function closeModal() {\r\n-    if (!modal) return;\r\n-    modal.classList.add('hidden');\r\n-    modal.classList.remove('flex');\r\n-    state.editing = null;\r\n-    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n-  }\r\n-\r\n-  // Busca cliente\r\n-  async function searchClientes(term) {\r\n-    if (!term || term.length < 2) {\r\n-      if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n-      return;\r\n-    }\r\n-    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    if (!cliSug) return;\r\n-    cliSug.innerHTML = list.map(u => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n-        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n-      </li>`).join('');\r\n-    cliSug.classList.remove('hidden');\r\n-    cliSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', async () => {\r\n-        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n-        if (cliInput) cliInput.value = li.dataset.nome;\r\n-        cliSug.classList.add('hidden');\r\n-        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n-        const pets = await resp.json().catch(() => []);\r\n-        if (petSelect) {\r\n-          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-        }\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  function confirmAsync(title, message, opts = {}) {\r\n-    const confirmText = opts.confirmText || 'Excluir';\r\n-    const cancelText  = opts.cancelText  || 'Cancelar';\r\n-\r\n-    if (typeof window.showModal === 'function') {\r\n-      return new Promise((resolve) => {\r\n-        // 1) Esconde temporariamente o modal de edição (sem desmontar)\r\n-        const prevVis = modal ? modal.style.visibility : '';\r\n-        const prevPe  = modal ? modal.style.pointerEvents : '';\r\n-        if (modal) {\r\n-          modal.style.visibility = 'hidden';\r\n-          modal.style.pointerEvents = 'none';\r\n-        }\r\n-\r\n-        // 2) Abre o modal padrão do projeto\r\n-        window.showModal({\r\n-          title: title || 'Confirmação',\r\n-          message: message || 'Deseja prosseguir?',\r\n-          confirmText,\r\n-          cancelText,\r\n-          onConfirm: () => { restore(); resolve(true); },\r\n-          onCancel : () => { restore(); resolve(false); }\r\n-        });\r\n-\r\n-        // 3) Após montar, garante overlay por cima de tudo\r\n-        //    (pega o último elemento \"fixed\" full-screen e sobe o z-index)\r\n-        const bump = () => {\r\n-          try {\r\n-            const all = Array.from(document.querySelectorAll('body *'));\r\n-            const overlays = all.filter(el => {\r\n-              const cs = getComputedStyle(el);\r\n-              if (cs.position !== 'fixed') return false;\r\n-              const r = el.getBoundingClientRect();\r\n-              return r.width >= window.innerWidth * 0.95 && r.height >= window.innerHeight * 0.95;\r\n-            });\r\n-            const overlay = overlays.at(-1);\r\n-            if (overlay) {\r\n-              overlay.style.zIndex = '9999';\r\n-              overlay.style.pointerEvents = 'auto';\r\n-            }\r\n-          } catch (_) { /* noop */ }\r\n-        };\r\n-        requestAnimationFrame(bump);\r\n-        setTimeout(bump, 0);\r\n-\r\n-        // 4) Restaura o modal de edição quando fechar a confirmação\r\n-        function restore() {\r\n-          if (modal) {\r\n-            modal.style.visibility = prevVis || '';\r\n-            modal.style.pointerEvents = prevPe || '';\r\n-          }\r\n-        }\r\n-      });\r\n-    }\r\n-\r\n-    // Fallback (apenas se o componente não existir)\r\n-    const ok = window.confirm(message || title || 'Confirmar?');\r\n-    return Promise.resolve(!!ok);\r\n-  }\r\n-\r\n-  async function handleDelete() {\r\n-      const id = state.editing && state.editing._id ? String(state.editing._id) : null;\r\n-      if (!id) return;\r\n-\r\n-      const ok = await confirmAsync('Excluir atendimento', 'Tem ce...a excluir este atendimento? Esta ação não pode ser desfeita.', {\r\n-        confirmText: 'Excluir',\r\n-        cancelText: 'Cancelar'\r\n-      });\r\n-      if (!ok) return;\r\n-\r\n-      const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(() => ({}));\r\n-        alert(err.message || 'Erro ao excluir agendamento');\r\n-        return;\r\n-      }\r\n-      await loadAgendamentos();\r\n-      renderKpis();\r\n-      renderFilters();\r\n-      closeModal();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-  }\r\n-\r\n-  // Busca serviços\r\n-  async function searchServicos(term) {\r\n-    if (!term || term.length < 2) {\r\n-      if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-      return;\r\n-    }\r\n-    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    if (!servSug) return;\r\n-    servSug.innerHTML = list.map(s => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor}\">\r\n-        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${money(s.valor)}</div>\r\n-      </li>`).join('');\r\n-    servSug.classList.remove('hidden');\r\n-    servSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', () => {\r\n-        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n-        if (servInput) servInput.value = state.selectedServico.nome;\r\n-        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n-        servSug.classList.add('hidden');\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  // --- Lista de serviços no modal ---\r\n-  function renderServicosLista() {\r\n-    if (!servListUL || !servTotalEl) return;\r\n-    const items = state.tempServicos || [];\r\n-    servListUL.innerHTML = items.map((it, idx) => `\r\n-      <li class=\"flex items-center justify-between px-3 py-2 text-sm\">\r\n-        <div class=\"flex items-center gap-3\">\r\n-          <span class=\"w-20 text-right tabular-nums\">${money(Number(it.valor || 0))}</span>\r\n-          <span class=\"text-gray-700\">${it.nome || ''}</span>\r\n-        </div>\r\n-        <button data-idx=\"${idx}\" class=\"remove-serv px-2 py-1 rounded-md border text-gray-600 hover:bg-gray-50\">Remover</button>\r\n-      </li>\r\n-    `).join('');\r\n-    const total = items.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-    servTotalEl.textContent = money(total);\r\n-\r\n-    servListUL.querySelectorAll('.remove-serv').forEach(btn => {\r\n-      btn.addEventListener('click', () => {\r\n-        const i = parseInt(btn.getAttribute('data-idx'), 10);\r\n-        if (!isNaN(i)) {\r\n-          state.tempServicos.splice(i, 1);\r\n-          renderServicosLista();\r\n-        }\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  // Salvar (adicionar/editar)\r\n-  async function saveAgendamento() {\r\n-      try {\r\n-        const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n-        const storeIdSelected = (addStoreSelect?.value) || state.selectedStoreId || storeSelect?.value;\r\n-        const hora = horaInput?.value;\r\n-        const profissionalId = profSelect?.value;\r\n-        const status = (statusSelect?.value) || 'agendado';\r\n-\r\n-        if (!hora || !profissionalId) { alert('Preencha hora e profissional.'); return; }\r\n-        if (!storeIdSelected) { alert('Selecione a empresa.'); return; }\r\n-\r\n-        const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n-\r\n-        // Edição\r\n-        if (state.editing && state.editing._id) {\r\n-          const id = state.editing._id;\r\n-\r\n-          // usa os itens montados na UI (edição agora permite adicionar/remover)\r\n-          const items = Array.isArray(state.tempServicos) ? state.tempServicos : [];\r\n-          if (!items.length) { alert('Adicione pelo menos 1 serviço ao agendamento.'); return; }\r\n-\r\n-          const body = {\r\n-            storeId: storeIdSelected,\r\n-            profissionalId,\r\n-            scheduledAt,\r\n-            status,\r\n-            observacoes: (obsInput?.value || '').trim(),\r\n-            servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n-            ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n-            ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n-            ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n-          };\r\n-\r\n-          const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\r\n-          if (!resp.ok) {\r\n-            const err = await resp.json().catch(() => ({}));\r\n-            alert(err.message || 'Erro ao atualizar agendamento.');\r\n-            return;\r\n-          }\r\n-\r\n-          await loadAgendamentos();\r\n-          renderKpis();\r\n-          renderFilters();\r\n-          closeModal();\r\n-          renderGrid();\r\n-          enhanceAgendaUI();\r\n-          return;\r\n-        }\r\n-\r\n-        // Adição\r\n-        const clienteId = state.selectedCliente?._id;\r\n-        const petId = petSelect?.value;\r\n-        const items = state.tempServicos || [];\r\n-\r\n-        if (!(clienteId && petId && items.length)) { alert('Preencha cliente, pet e adicione pelo menos 1 serviço.'); return; }\r\n-\r\n-        const body = {\r\n-          storeId: storeIdSelected,\r\n-          clienteId, petId,\r\n-          servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n-          profissionalId, scheduledAt,\r\n-          status,\r\n-          observacoes: (obsInput?.value || '').trim(),\r\n-          pago: false\r\n-        };\r\n-        const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n-        if (!resp.ok) {\r\n-          const err = await resp.json().catch(() => ({}));\r\n-          throw new Error(err.message || 'Erro ao salvar');\r\n-        }\r\n-\r\n-        await loadAgendamentos();\r\n-        renderKpis();\r\n-        renderFilters();\r\n-        closeModal();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      } catch (e) {\r\n-        console.error(e);\r\n-        alert(e.message || 'Erro ao salvar');\r\n-      }\r\n-    }\r\n-\r\n-  function enhanceAgendaUI() {\r\n-    try {\r\n-      applyZebraAndSublines();\r\n-      decorateCards();\r\n-\r\n-      if (state.view === 'day') {\r\n-        enableDragDrop();\r\n-        drawNowLine();\r\n-\r\n-        const date = normalizeDate(dateInput?.value || todayStr());\r\n-        if (!state.__didInitialScroll && date === todayStr()) {\r\n-          scrollToNow();\r\n-          state.__didInitialScroll = true;\r\n-        }\r\n-      }\r\n-    } catch (e) {\r\n-      console.info('[enhanceAgendaUI] skip', e);\r\n-    }\r\n-  }\r\n-\r\n-  function scrollToNow() {\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body || !state.profissionais?.length) return;\r\n-\r\n-      // encontra a célula da primeira coluna de profissional no horário atual\r\n-      const now = new Date();\r\n-      const hh = String(now.getHours()).padStart(2, '0') + ':00';\r\n-      const firstProfId = String(state.profissionais[0]._id);\r\n-      const target = body.querySelector(`div[data-profissional-id=\"${firstProfId}\"][data-hh=\"${hh}\"]`);\r\n-\r\n-      if (target) {\r\n-        const top = target.getBoundingClientRect().top + window.pageYOffset;\r\n-        const offset = 80; // sobe um pouco para contexto\r\n-        window.scrollTo({ top: Math.max(0, top - offset), behavior: 'smooth' });\r\n-      }\r\n-  }\r\n-\r\n-  // compacta a lista para um hash leve (ordem estável)\r\n-  function snapshotHash(items) {\r\n-    try {\r\n-      const compact = (items || []).map(x => [\r\n-        String(x._id || ''),\r\n-        String(x.status || ''),\r\n-        String(x.h || x.scheduledAt || ''),\r\n-        Number(x.valor || 0),\r\n-        !!x.pago\r\n-      ]).sort((a, b) => a[0].localeCompare(b[0]));\r\n-      return JSON.stringify(compact);\r\n-    } catch (_) {\r\n-      return String(Date.now());\r\n-    }\r\n-  }\r\n-\r\n-  // reconsulta e só re-renderiza se houver mudança relevante\r\n-  async function refreshAgendaIfChanged() {\r\n-    const prev = state.lastSnapshotHash || '';\r\n-    await loadAgendamentos();\r\n-    const next = snapshotHash(state.agendamentos);\r\n-    if (next !== prev) {\r\n-      state.lastSnapshotHash = next;\r\n-      renderGrid();\r\n-      // ao re-render com mesma data de hoje, não repete o scroll\r\n-      enhanceAgendaUI();\r\n-    }\r\n-  }\r\n-\r\n-  // inicia/renova o timer de auto-refresh (60s)\r\n-  function startAutoRefresh() {\r\n-    if (window.__agendaRefreshTimer) clearInterval(window.__agendaRefreshTimer);\r\n-    state.lastSnapshotHash = snapshotHash(state.agendamentos);\r\n-    window.__agendaRefreshTimer = setInterval(refreshAgendaIfChanged, 60000);\r\n-  }\r\n-\r\n-  // cria o botão \"Hoje\" ao lado do input de data (uma vez)\r\n-  function ensureTodayButton() {\r\n-    if (!dateInput) return;\r\n-    if (document.getElementById('agenda-today-btn')) return;\r\n-\r\n-    const btn = document.createElement('button');\r\n-    btn.id = 'agenda-today-btn';\r\n-    btn.type = 'button';\r\n-    btn.className = 'ml-2 inline-flex items-center gap-1 text-xs px-2 py-1 rounded border border-slate-300 text-slate-700 hover:bg-slate-50';\r\n-    btn.textContent = 'Hoje';\r\n-\r\n-    dateInput.insertAdjacentElement('afterend', btn);\r\n-    btn.addEventListener('click', async () => {\r\n-      dateInput.value = todayStr();\r\n-      state.__didInitialScroll = false;   // permite novo auto-scroll\r\n-      await loadAgendamentos();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    });\r\n-  }\r\n-\r\n-  // Zebra de linhas + sublinha 30min com CSS (via classe)\r\n-  function applyZebraAndSublines() {\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body) return;\r\n-\r\n-      body.style.position = 'relative'; // para linha do \"agora\"\r\n-      const totalCols = 1 + (state.profissionais?.length || 0); // 1 (hora) + N profissionais\r\n-      if (totalCols <= 0) return;\r\n-\r\n-      const cells = Array.from(body.children);\r\n-      const totalRows = Math.floor(cells.length / totalCols);\r\n-\r\n-      for (let row = 0; row < totalRows; row++) {\r\n-        const start = row * totalCols;\r\n-        const zebraClass = (row % 2 === 0) ? 'bg-white' : 'bg-slate-50';\r\n-\r\n-        // primeira coluna (hora)\r\n-        const tCell = cells[start];\r\n-        if (tCell) {\r\n-          tCell.classList.remove('bg-white','bg-slate-50');\r\n-          tCell.classList.add(zebraClass);\r\n-        }\r\n-\r\n-        // colunas dos profissionais\r\n-        for (let col = 1; col < totalCols; col++) {\r\n-          const idx = start + col;\r\n-          const slot = cells[idx];\r\n-          if (!slot) continue;\r\n-          slot.classList.remove('bg-white','bg-slate-50');\r\n-          slot.classList.add(zebraClass, 'agenda-slot'); // garante classe\r\n-        }\r\n-      }\r\n-  }\r\n-\r\n-  // Insere ícones de ação nos cartões (editar / mudar status)\r\n-  function decorateCards() {\r\n-    const cards = agendaList?.querySelectorAll('div[data-appointment-id]');\r\n-    if (!cards || !cards.length) return;\r\n-\r\n-    cards.forEach((card) => {\r\n-      if (card.querySelector('.agenda-card__actions')) return; // já decorado\r\n-      card.classList.add('agenda-card'); // ativa hover via CSS\r\n-      card.style.position = 'relative';\r\n-\r\n-      const id = card.getAttribute('data-appointment-id') || '';\r\n-      const item = (state.agendamentos || []).find(x => String(x._id) === String(id)) || {};\r\n-      const isPaid = !!item.pago;\r\n-\r\n-      const actions = document.createElement('div');\r\n-      // flex em coluna para ter a “segunda linha” abaixo do '+'\r\n-      actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex flex-col items-end gap-1';\r\n-\r\n-      actions.innerHTML = `\r\n-        <!-- primeira linha: editar + status (mantém seu layout atual lado a lado) -->\r\n-        <div class=\"flex items-center gap-1\">\r\n-          <button class=\"agenda-action edit\" data-id=\"${id}\" title=\"Editar\">\r\n-            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\">\r\n-              <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 0 0 0-1.41L18.37 3.29a1.003 1.003 0 0 0-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.83z\"/>\r\n-            </svg>\r\n-          </button>\r\n-          <button class=\"agenda-action status\" data-id=\"${id}\" title=\"Mudar status\">\r\n-            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n-              <circle cx=\"12\" cy=\"12\" r=\"9\" stroke-width=\"2\"></circle>\r\n-              <path d=\"M12 7v5l3 3\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\r\n-            </svg>\r\n-          </button>\r\n-        </div>\r\n-\r\n-        <!-- segunda linha: ícone de pagamento (abaixo do '+') -->\r\n-        <button class=\"agenda-action cobrar ${isPaid ? 'text-green-600' : 'text-slate-500'}\" data-id=\"${id}\" title=\"${isPaid ? 'Pago' : 'Registrar pagamento'}\">\r\n-          ${\r\n-            isPaid\r\n-              // Cifão normal (Real)\r\n-              ? `<i class=\"fa-solid fa-dollar-sign text-[16px] leading-none\"></i>`\r\n-              // Cifrão com risco (stack do FA para “pendente”)\r\n-              : `<span class=\"fa-stack text-[12px] leading-none\" style=\"width: 1.25em;\">\r\n-                  <i class=\"fa-solid fa-dollar-sign fa-stack-1x\"></i>\r\n-                  <i class=\"fa-solid fa-slash fa-stack-1x\"></i>\r\n-                </span>`\r\n-          }\r\n-        </button>\r\n-      `;\r\n-      card.appendChild(actions);\r\n-    });\r\n-  }\r\n-\r\n-  /* === Drag & Drop na agenda: mover card entre horários/profissionais === */\r\n-  function injectDndStylesOnce() {\r\n-    if (document.getElementById('agenda-dnd-style')) return;\r\n-    const st = document.createElement('style');\r\n-    st.id = 'agenda-dnd-style';\r\n-    st.textContent = `\r\n-      .agenda-card.is-dragging { opacity: .6; }\r\n-      .agenda-drop-target { outline: 2px dashed #0ea5e9; outline-offset: -2px; background: rgba(14,165,233,0.06); }\r\n-    `;\r\n-    document.head.appendChild(st);\r\n-  }\r\n-\r\n-  // PUT rápido para mover agendamento (profissional/horário)\r\n-  async function moveAppointmentQuick(id, payload) {\r\n-      try {\r\n-        const body = {\r\n-          ...payload,\r\n-          storeId: state.selectedStoreId || storeSelect?.value\r\n-        };\r\n-        const resp = await api(`/func/agendamentos/${id}`, {\r\n-          method: 'PUT',\r\n-          headers: { 'Content-Type': 'application/json' },\r\n-          body: JSON.stringify(body)\r\n-        });\r\n-        if (!resp.ok) {\r\n-          const err = await resp.json().catch(() => ({}));\r\n-          throw new Error(err.message || 'Erro ao mover agendamento');\r\n-        }\r\n-        await loadAgendamentos();\r\n-        renderKpis();\r\n-        renderFilters();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      } catch (e) {\r\n-        console.error('moveAppointmentQuick', e);\r\n-        alert(e.message || 'Não foi possível mover o agendamento.');\r\n-      }\r\n-    }\r\n-\r\n-  function enableDragDrop() {\r\n-      injectDndStylesOnce();\r\n-\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body) return;\r\n-\r\n-      // Garante que todos os cards estejam \"arrastáveis\"\r\n-      body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n-        if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n-      });\r\n-\r\n-      // Evita múltiplos binds ao re-renderizar a agenda\r\n-      if (body.__dndDelegated) return;\r\n-      body.__dndDelegated = true;\r\n-\r\n-      // DRAGSTART (captura): funciona mesmo se o usuário começar o arrasto em um filho do card\r\n-      body.addEventListener('dragstart', (ev) => {\r\n-        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-        if (!card || !ev.dataTransfer) return;\r\n-\r\n-        const id = card.getAttribute('data-appointment-id') || '';\r\n-        if (!id) return;\r\n-\r\n-        try { ev.dataTransfer.setData('text/plain', id); } catch (_) {}\r\n-        try { ev.dataTransfer.setDragImage(card, 10, 10); } catch (_) {}\r\n-        ev.dataTransfer.effectAllowed = 'move';\r\n-        card.classList.add('is-dragging');\r\n-      }, true);\r\n-\r\n-      // DRAGEND: limpa estados visuais\r\n-      body.addEventListener('dragend', (ev) => {\r\n-        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-        if (card) card.classList.remove('is-dragging');\r\n-        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n-      }, true);\r\n-\r\n-      // DRAGOVER: habilita drop quando o ponteiro está sobre QUALQUER filho dentro da célula\r\n-      body.addEventListener('dragover', (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        ev.preventDefault();                 // obrigatório para permitir drop\r\n-        if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n-        slot.classList.add('agenda-drop-target');\r\n-      });\r\n-\r\n-      // DRAGLEAVE: remove realce\r\n-      body.addEventListener('dragleave', (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        slot.classList.remove('agenda-drop-target');\r\n-      });\r\n-\r\n-      // DROP: pega a célula alvo e move (profissional + horário)\r\n-      body.addEventListener('drop', async (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        ev.preventDefault();\r\n-        slot.classList.remove('agenda-drop-target');\r\n-\r\n-        const id = ev.dataTransfer?.getData('text/plain');\r\n-        if (!id) return;\r\n-\r\n-        const newProf = slot.dataset.profissionalId;\r\n-        const hh      = slot.dataset.hh; // ex.: \"14:00\"\r\n-        if (!newProf || !hh) return;\r\n-\r\n-        const dateRaw     = normalizeDate(dateInput?.value || todayStr());\r\n-        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n-\r\n-        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n-      });\r\n-  }\r\n-\r\n-  async function loadProfissionais() {\r\n-    if (!state.selectedStoreId) {\r\n-      state.profissionais = [];\r\n-      if (profSelect) profSelect.innerHTML = '';\r\n-      return;\r\n-    }\r\n-\r\n-    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    state.profissionais = Array.isArray(list) ? list : [];\r\n-\r\n-    if (profSelect) {\r\n-      profSelect.innerHTML = state.profissionais\r\n-        .map(p => `<option value=\"${p._id}\">${p.nome}</option>`)\r\n-        .join('');\r\n-    }\r\n-  }\r\n-\r\n-  // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n-  function drawNowLine() {\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body) return;\r\n-\r\n-      body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n-\r\n-      const now = new Date();\r\n-      const minutes = now.getHours() * 60 + now.getMinutes();\r\n-      const percent = minutes / (24 * 60);\r\n-      const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n-\r\n-      const line = document.createElement('div');\r\n-      line.className = 'agenda-nowline';\r\n-      line.style.top = `${y}px`;\r\n-      body.appendChild(line);\r\n-\r\n-      if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n-      window.__agendaNowTimer = setInterval(() => {\r\n-        const now2 = new Date();\r\n-        const minutes2 = now2.getHours() * 60 + now2.getMinutes();\r\n-        const percent2 = minutes2 / (24 * 60);\r\n-        const y2 = Math.max(0, Math.min(1, percent2)) * body.scrollHeight;\r\n-        const ln = body.querySelector('.agenda-nowline');\r\n-        if (ln) ln.style.top = `${y2}px`;\r\n-      }, 60_000);\r\n-  }\r\n-\r\n-  // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n-  async function updateStatusQuick(id, status) {\r\n-      try {\r\n-        const resp = await api(`/func/agendamentos/${id}`, {\r\n-          method: 'PUT',\r\n-          headers: { 'Content-Type': 'application/json' },\r\n-          body: JSON.stringify({ status })\r\n-        });\r\n-        if (!resp.ok) {\r\n-          const err = await resp.json().catch(() => ({}));\r\n-          throw new Error(err.message || 'Erro ao mudar status');\r\n-        }\r\n-        await loadAgendamentos();\r\n-        renderKpis();\r\n-        renderFilters();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      } catch (e) {\r\n-        console.error('updateStatusQuick', e);\r\n-        alert(e.message || 'Erro ao mudar status');\r\n-      }\r\n-    }\r\n-\r\n-    // === Impressão em cupom (80mm) ===\r\n-  function buildCupomHTML(items, meta = {}) {\r\n-    const storeName = (meta.storeName || '').trim();\r\n-    const dateStr   = (meta.dateStr || '').trim();\r\n-\r\n-    const rows = (items || []).map(a => {\r\n-      const pet   = (a.pet || '').toString().trim();\r\n-      const serv  = (a.servico || '').toString().trim();\r\n-      const valor = money(Number(a.valor || 0));\r\n-      // \"Pet Serviço - Valor\" em linha única\r\n-      return `<div class=\"row\"><span class=\"txt\">${pet} ${serv}</span><span class=\"val\">${valor}</span></div>`;\r\n-    }).join('');\r\n-\r\n-    return `\r\n-  <!doctype html>\r\n-  <html>\r\n-  <head>\r\n-    <meta charset=\"utf-8\">\r\n-    <title>Impressão</title>\r\n-    <style>\r\n-      @page { size: 80mm auto; margin: 3mm; }\r\n-      * { box-sizing: border-box; }\r\n-      html, body { padding: 0; margin: 0; }\r\n-      /* Aumenta um pouco o tamanho e usa preto sólido para ganhar contraste na térmica */\r\n-      body {\r\n-        width: 74mm;\r\n-        font: 13px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\";\r\n-        color: #000;\r\n-        -webkit-font-smoothing: none; /* deixa o traço mais “cheio” na impressão */\r\n-        font-weight: 600; /* base mais pesada */\r\n-      }\r\n-      .wrap { padding: 2mm 0; }\r\n-      .h1 { text-align:center; font-weight:700; font-size: 15px; margin-bottom: 1mm; }\r\n-      .meta { text-align:center; font-size: 12px; color:#000; font-weight:700; margin-bottom: 2mm; }\r\n-      .hr { border-top: 1px dashed #000; margin: 2mm 0; }\r\n-      .row { display:flex; align-items:flex-start; justify-content:space-between; gap: 4mm; padding: 1mm 0; }\r\n-      /* Linhas do cupom bem escuras */\r\n-      .row .txt { flex: 1 1 auto; word-break: break-word; font-weight:700; }\r\n-      .row .val { flex: 0 0 auto; white-space: nowrap; font-weight:700; }\r\n-      .foot { text-align:center; margin-top: 2mm; font-size: 12px; color:#000; font-weight:700; }\r\n-      @media print { .no-print { display: none !important; } }\r\n-    </style>\r\n-  </head>\r\n-  <body>\r\n-    <div class=\"wrap\">\r\n-      <div class=\"h1\">Agenda</div>\r\n-      <div class=\"meta\">${storeName ? storeName + ' • ' : ''}${dateStr}</div>\r\n-      <div class=\"hr\"></div>\r\n-      ${rows || '<div class=\"row\"><span class=\"txt\">Sem itens</span><span class=\"val\"></span></div>'}\r\n-      <div class=\"hr\"></div>\r\n-      <div class=\"foot\">Obrigado!</div>\r\n-    </div>\r\n-    <script>\r\n-      window.onload = function(){ setTimeout(function(){ window.print(); }, 50); };\r\n-      window.onafterprint = function(){ setTimeout(function(){ window.close(); }, 50); };\r\n-    </script>\r\n-  </body>\r\n-  </html>`;\r\n-  }\r\n-\r\n-  function handlePrintCupom() {\r\n-    try {\r\n-      const items = getFilteredAgendamentos();\r\n-\r\n-      // Ordena por horário (se houver)\r\n-      items.sort((a, b) => {\r\n-        const da = new Date(a.h || a.scheduledAt || 0).getTime();\r\n-        const db = new Date(b.h || b.scheduledAt || 0).getTime();\r\n-        return da - db;\r\n-      });\r\n-\r\n-      const dateStr =\r\n-        (document.getElementById('agenda-date-label-visible')?.textContent || '').trim() ||\r\n-        new Date((normalizeDate(dateInput?.value || todayStr())) + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-\r\n-      const storeName =\r\n-        (document.getElementById('agenda-store-label-visible')?.textContent || '').trim();\r\n-\r\n-      const html = buildCupomHTML(items, { storeName, dateStr });\r\n-\r\n-      const w = window.open('', 'print_cupom', 'width=420,height=600');\r\n-      if (!w) { alert('O navegador bloqueou a janela de impressão. Habilite pop-ups para continuar.'); return; }\r\n-      w.document.open('text/html');\r\n-      w.document.write(html);\r\n-      w.document.close();\r\n-      w.focus();\r\n-    } catch (e) {\r\n-      console.error('handlePrintCupom', e);\r\n-      alert('Não foi possível preparar a impressão.');\r\n-    }\r\n-  }\r\n-\r\n-  // Events\r\n-  addBtn?.addEventListener('click', openAddModal);\r\n-  modalClose?.addEventListener('click', closeModal);\r\n-  modalCancel?.addEventListener('click', closeModal);\r\n-  modalSave?.addEventListener('click', saveAgendamento);\r\n-\r\n-  addStoreSelect?.addEventListener('change', () => {\r\n-    const sid = addStoreSelect.value;\r\n-    const current = profSelect?.value || '';\r\n-    populateModalProfissionais(sid, current);\r\n-  });\r\n-\r\n-  // Botão \"Imprimir\" — cupom 80mm com \"Pet Serviço - Valor\"\r\n-    (function () {\r\n-      const btn0 = document.getElementById('print-agenda-btn');\r\n-      // (se algum listener antigo ainda existir em outro build, garantimos o nosso fluxo)\r\n-      if (btn0) {\r\n-        // remove listeners antigos (se houver) clonando o nó\r\n-        const clone = btn0.cloneNode(true);\r\n-        btn0.parentNode.replaceChild(clone, btn0);\r\n-        clone.addEventListener('click', (ev) => {\r\n-          ev.preventDefault();\r\n-          ev.stopImmediatePropagation?.();\r\n-          handlePrintCupom();\r\n-        });\r\n-      }\r\n-    })();\r\n-\r\n-  cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n-  servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n-\r\n-  addServAddBtn?.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    const s = state.selectedServico;\r\n-    const v = Number(valorInput?.value || 0);\r\n-    if (!s || !s._id) { alert('Escolha um serviço na busca.'); return; }\r\n-    if (!(v >= 0)) { alert('Valor inválido.'); return; }\r\n-    state.tempServicos.push({ _id: s._id, nome: s.nome, valor: v });\r\n-    // limpa seleção\r\n-    state.selectedServico = null;\r\n-    if (servInput)  servInput.value = '';\r\n-    if (valorInput) valorInput.value = '';\r\n-    renderServicosLista();\r\n-  });\r\n-\r\n-  modalDelete?.addEventListener('click', handleDelete);\r\n-\r\n-  // Ações rápidas nos cartões (delegação no container da agenda)\r\n-  agendaList?.addEventListener('click', (ev) => {\r\n-    // toggle do menu mobile\r\n-    const more = ev.target.closest('.agenda-card__more');\r\n-    if (more) {\r\n-      const holder = more.parentElement?.querySelector('.agenda-card__actions');\r\n-      if (holder) holder.classList.toggle('hidden');\r\n-      return;\r\n-    }\r\n-\r\n-    const btn = ev.target.closest('.agenda-action');\r\n-    if (!btn) return;\r\n-    const id = btn.getAttribute('data-id');\r\n-    if (!id) return;\r\n-\r\n-    if (btn.classList.contains('edit')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      if (item) openEditModal(item);\r\n-    } else if (btn.classList.contains('status')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-      const cur = (item && item.status) || 'agendado';\r\n-      const next = chain[(chain.indexOf(cur) + 1) % chain.length];\r\n-      updateStatusQuick(id, next);\r\n-    } else if (btn.classList.contains('cobrar')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      if (item) openEditModal(item); // reaproveite seu modal/fluxo de cobrança\r\n-    }\r\n-  });\r\n-\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    updateStoreLabel();\r\n-    state.__didInitialScroll = false;     // nova loja -> recalcula scroll\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    state.__didInitialScroll = false;     // nova data -> permite auto-scroll\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  // Boot\r\n-  function setupShortcuts() {\r\n-    document.addEventListener('keydown', (e) => {\r\n-      if (e.target && ['INPUT','SELECT','TEXTAREA'].includes(e.target.tagName)) return; // não atrapalhar digitação\r\n-      if (e.key === 't' || e.key === 'T') {\r\n-        if (dateInput) {\r\n-          dateInput.value = todayStr();\r\n-          state.__didInitialScroll = false;\r\n-          loadAgendamentos().then(() => {\r\n-            renderKpis(); renderFilters(); renderGrid(); enhanceAgendaUI();\r\n-          });\r\n-        }\r\n-      }\r\n-      if (e.key === 'n' || e.key === 'N') {\r\n-        e.preventDefault();\r\n-        openAddModal();\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  (async function init() {\r\n-    if (!dateInput?.value) dateInput.value = todayStr();\r\n-    if (viewSelect && !viewSelect.value) viewSelect.value = 'day';\r\n-    state.view = (viewSelect?.value) || 'day';\r\n-\r\n-    loadFiltersFromStorage();\r\n-    await loadStores();\r\n-    if (!state.selectedStoreId && storeSelect?.value) {\r\n-      state.selectedStoreId = storeSelect.value;\r\n-    }\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-\r\n-    ensureToolbar();\r\n-    ensureTodayButton();\r\n-    setupShortcuts();\r\n-\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  })();\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    state.__didInitialScroll = false;\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  viewSelect?.addEventListener('change', async () => {\r\n-    state.view = viewSelect.value || 'day';\r\n-    state.__didInitialScroll = false;\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  // Atualizações após troca de loja/data/status etc.\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    updateStoreLabel();\r\n-    state.__didInitialScroll = false;\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    state.__didInitialScroll = false;\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-})();\r\n"
                },
                {
                    "date": 1757602120809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -699,39 +699,41 @@\n         a.servico || '',\r\n         (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n       ].filter(Boolean).join(' • ');\r\n \r\n-      // Header denso: horário + pet + status (badge menor)\r\n+      // Header: Tutor abreviado | Pet (sem hora)\r\n       const headerEl = document.createElement('div');\r\n       headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+      const tutorShort = shortTutorName(a.clienteNome || a.tutor || '');\r\n+      const headLabel  = tutorShort ? `${tutorShort} | ${a.pet || ''}` : (a.pet || '');\r\n       headerEl.innerHTML = `\r\n-        <div class=\"flex items-center gap-2\">\r\n-          <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n-          <span class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</span>\r\n-        </div>\r\n-        ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n+        <div class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${headLabel}\">${headLabel}</div>\r\n+        <!-- nada do lado direito no header -->\r\n       `;\r\n \r\n       // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n       const bodyEl = document.createElement('div');\r\n       const svc = document.createElement('div');\r\n       svc.className = 'text-[12px] text-gray-600 truncate';\r\n       svc.textContent = a.servico || '';\r\n       bodyEl.appendChild(svc);\r\n-\r\n       if (a.observacoes && String(a.observacoes).trim()) {\r\n         const obs = document.createElement('div');\r\n         obs.className = 'text-[11px] text-gray-700 italic truncate';\r\n         obs.textContent = String(a.observacoes).trim();\r\n         bodyEl.appendChild(obs);\r\n       }\r\n \r\n-      // Rodapé: valor à direita\r\n+      // Rodapé: status + valor à direita\r\n       const footerEl = document.createElement('div');\r\n       footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n+      const statusEl = document.createElement('div');\r\n+      // badge menor para caber bem\r\n+      statusEl.innerHTML = renderStatusBadge(a.status).replace('text-xs','text-[10px]');\r\n       const price = document.createElement('div');\r\n       price.className = 'text-[12px] text-gray-800 font-semibold';\r\n       price.textContent = money(a.valor);\r\n+      footerEl.appendChild(statusEl);\r\n       footerEl.appendChild(price);\r\n \r\n       card.appendChild(headerEl);\r\n       card.appendChild(bodyEl);\r\n"
                },
                {
                    "date": 1757604483242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -819,19 +819,28 @@\n           a.servico || '',\r\n           (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n         ].filter(Boolean).join(' • '); // tooltip exibe tudo sem poluir o card\r\n \r\n-        // Header denso: horário à esquerda + status à direita\r\n+        // Header: apenas horário (remoção do pet aqui)\r\n         const headerEl = document.createElement('div');\r\n-        headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+        headerEl.className = 'flex items-center gap-2 mb-1';\r\n         headerEl.innerHTML = `\r\n-          <div class=\"flex items-center gap-2\">\r\n-            <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n-            <span class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${a.pet || ''}\">${a.pet || ''}</span>\r\n-          </div>\r\n-          ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n+          <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n         `;\r\n \r\n+        // Linha com Tutor abreviado | Pet (como no semanal/diário), na linha de baixo\r\n+        const tutorShort = shortTutorName(a.clienteNome || '');\r\n+        const headLabel  = tutorShort ? `${tutorShort} | ${a.pet || ''}` : (a.pet || '');\r\n+        const nameEl = document.createElement('div');\r\n+        nameEl.className = 'text-[11px] font-medium text-gray-900 text-center truncate';\r\n+        nameEl.title = headLabel;\r\n+        nameEl.textContent = headLabel;\r\n+\r\n+        // Status centralizado (evita ficar sob os botões flutuantes)\r\n+        const statusRow = document.createElement('div');\r\n+        statusRow.className = 'flex justify-center mt-0.5';\r\n+        statusRow.innerHTML = renderStatusBadge(a.status).replace('text-xs','text-[10px]');\r\n+\r\n         // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n         const bodyEl = document.createElement('div');\r\n         const svc = document.createElement('div');\r\n         svc.className = 'text-[12px] text-gray-600 truncate';     // 1 linha\r\n@@ -853,8 +862,10 @@\n         price.textContent = money(a.valor);\r\n         footerEl.appendChild(price);\r\n \r\n         card.appendChild(headerEl);\r\n+        card.appendChild(nameEl);\r\n+        card.appendChild(statusRow);\r\n         card.appendChild(bodyEl);\r\n         card.appendChild(footerEl);\r\n \r\n         list.appendChild(card);\r\n"
                },
                {
                    "date": 1757605393192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -807,70 +807,67 @@\n         const meta = statusMeta(a.status);\r\n         const when = new Date(a.h || a.scheduledAt);\r\n         const hhmm = `${pad(when.getHours())}:${String(when.getMinutes()).padStart(2,'0')}`;\r\n \r\n-        const card = document.createElement('div');\r\n-        card.setAttribute('data-appointment-id', a._id || '');\r\n-        card.style.setProperty('--stripe', meta.stripe);\r\n-        card.style.setProperty('--card-max-w', '100%');\r\n-        card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n-        card.setAttribute('draggable', 'true');\r\n-        card.title = [\r\n-          a.pet || '',\r\n-          a.servico || '',\r\n-          (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n-        ].filter(Boolean).join(' • '); // tooltip exibe tudo sem poluir o card\r\n+      const card = document.createElement('div');\r\n+      card.setAttribute('data-appointment-id', a._id || '');\r\n+      card.style.setProperty('--stripe', meta.stripe);\r\n+      card.style.setProperty('--card-max-w', '100%');\r\n+      card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n+      card.setAttribute('draggable', 'true');\r\n+      card.title = [\r\n+        a.pet || '',\r\n+        a.servico || '',\r\n+        (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n+      ].filter(Boolean).join(' • '); // tooltip exibe tudo sem poluir o card\r\n \r\n-        // Header: apenas horário (remoção do pet aqui)\r\n-        const headerEl = document.createElement('div');\r\n-        headerEl.className = 'flex items-center gap-2 mb-1';\r\n-        headerEl.innerHTML = `\r\n-          <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n-        `;\r\n+      // Header com hora à esquerda e STATUS centralizado na mesma linha (reserva espaço p/ botões à direita)\r\n+      const headerEl = document.createElement('div');\r\n+      headerEl.className = 'flex items-center gap-2 pr-14 md:pr-16 mb-1';\r\n+      headerEl.innerHTML = `\r\n+        <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n+        <div class=\"flex-1 flex items-center justify-center\">\r\n+          ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n+        </div>\r\n+      `;\r\n \r\n-        // Linha com Tutor abreviado | Pet (como no semanal/diário), na linha de baixo\r\n-        const tutorShort = shortTutorName(a.clienteNome || '');\r\n-        const headLabel  = tutorShort ? `${tutorShort} | ${a.pet || ''}` : (a.pet || '');\r\n-        const nameEl = document.createElement('div');\r\n-        nameEl.className = 'text-[11px] font-medium text-gray-900 text-center truncate';\r\n-        nameEl.title = headLabel;\r\n-        nameEl.textContent = headLabel;\r\n+      // Linha abaixo: Tutor abreviado | Pet (como no semanal/diário)\r\n+      const tutorShort = shortTutorName(a.clienteNome || '');\r\n+      const headLabel  = tutorShort ? `${tutorShort} | ${a.pet || ''}` : (a.pet || '');\r\n+      const nameEl = document.createElement('div');\r\n+      nameEl.className = 'text-[12px] font-medium text-gray-900 text-center truncate';\r\n+      nameEl.title = headLabel;\r\n+      nameEl.textContent = headLabel;\r\n \r\n-        // Status centralizado (evita ficar sob os botões flutuantes)\r\n-        const statusRow = document.createElement('div');\r\n-        statusRow.className = 'flex justify-center mt-0.5';\r\n-        statusRow.innerHTML = renderStatusBadge(a.status).replace('text-xs','text-[10px]');\r\n+      // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n+      const bodyEl = document.createElement('div');\r\n+      const svc = document.createElement('div');\r\n+      svc.className = 'text-[12px] text-gray-600 truncate';     // 1 linha\r\n+      svc.textContent = a.servico || '';\r\n+      bodyEl.appendChild(svc);\r\n \r\n-        // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n-        const bodyEl = document.createElement('div');\r\n-        const svc = document.createElement('div');\r\n-        svc.className = 'text-[12px] text-gray-600 truncate';     // 1 linha\r\n-        svc.textContent = a.servico || '';\r\n-        bodyEl.appendChild(svc);\r\n+      if (a.observacoes && String(a.observacoes).trim()) {\r\n+        const obs = document.createElement('div');\r\n+        obs.className = 'text-[11px] text-gray-700 italic truncate'; // 1 linha\r\n+        obs.textContent = String(a.observacoes).trim();\r\n+        bodyEl.appendChild(obs);\r\n+      }\r\n \r\n-        if (a.observacoes && String(a.observacoes).trim()) {\r\n-          const obs = document.createElement('div');\r\n-          obs.className = 'text-[11px] text-gray-700 italic truncate'; // 1 linha\r\n-          obs.textContent = String(a.observacoes).trim();\r\n-          bodyEl.appendChild(obs);\r\n-        }\r\n+      // Rodapé enxuto: valor à direita\r\n+      const footerEl = document.createElement('div');\r\n+      footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n+      const price = document.createElement('div');\r\n+      price.className = 'text-[12px] text-gray-800 font-semibold';\r\n+      price.textContent = money(a.valor);\r\n+      footerEl.appendChild(price);\r\n \r\n-        // Rodapé enxuto: valor à direita\r\n-        const footerEl = document.createElement('div');\r\n-        footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n-        const price = document.createElement('div');\r\n-        price.className = 'text-[12px] text-gray-800 font-semibold';\r\n-        price.textContent = money(a.valor);\r\n-        footerEl.appendChild(price);\r\n+      card.appendChild(headerEl);\r\n+      card.appendChild(nameEl);\r\n+      card.appendChild(bodyEl);\r\n+      card.appendChild(footerEl);\r\n \r\n-        card.appendChild(headerEl);\r\n-        card.appendChild(nameEl);\r\n-        card.appendChild(statusRow);\r\n-        card.appendChild(bodyEl);\r\n-        card.appendChild(footerEl);\r\n+      list.appendChild(card);\r\n \r\n-        list.appendChild(card);\r\n-\r\n         // Limitar o excesso visual\r\n         if (idx>=6 && itemsDay.length>7) {\r\n           const more = document.createElement('div');\r\n           more.className = 'text-[11px] text-slate-500';\r\n"
                },
                {
                    "date": 1757607412541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -829,11 +829,21 @@\n           ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n         </div>\r\n       `;\r\n \r\n-      // Linha abaixo: Tutor abreviado | Pet (como no semanal/diário)\r\n-      const tutorShort = shortTutorName(a.clienteNome || '');\r\n-      const headLabel  = tutorShort ? `${tutorShort} | ${a.pet || ''}` : (a.pet || '');\r\n+      // Linha abaixo: Tutor abreviado | Pet (fazendo fallback para múltiplas origens do nome do tutor)\r\n+      const rawTutorName =\r\n+        a.tutorNome ||\r\n+        a.clienteNome ||\r\n+        (a.cliente && (a.cliente.nome || a.cliente.name)) ||\r\n+        (a.tutor && (a.tutor.nome || a.tutor.name)) ||\r\n+        a.responsavelNome ||\r\n+        (a.responsavel && a.responsavel.nome) ||\r\n+        '';\r\n+\r\n+      const tutorShort = shortTutorName(rawTutorName);\r\n+      const headLabel = [tutorShort, (a.pet || '')].filter(Boolean).join(' | ');\r\n+\r\n       const nameEl = document.createElement('div');\r\n       nameEl.className = 'text-[12px] font-medium text-gray-900 text-center truncate';\r\n       nameEl.title = headLabel;\r\n       nameEl.textContent = headLabel;\r\n"
                },
                {
                    "date": 1757616798507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2071 @@\n+(function () {\r\n+  // Helper para requisições com token\r\n+  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n+  function api(url, opts = {}) {\r\n+    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n+      ...opts,\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+        ...(opts.headers || {}),\r\n+        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Elements\r\n+  const agendaList = document.getElementById('agenda-list');\r\n+  const dateInput = document.getElementById('agenda-date');\r\n+  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n+  const viewSelect = document.getElementById('agenda-view');\r\n+  const addBtn = document.getElementById('add-service-btn');\r\n+  const storeSelect = document.getElementById('agenda-store');\r\n+  const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n+\r\n+  // Modal (reutilizado p/ adicionar e editar)\r\n+  const modal = document.getElementById('modal-add-servico');\r\n+  const modalClose = document.getElementById('modal-add-close');\r\n+  const modalCancel = document.getElementById('modal-add-cancel');\r\n+  const modalSave = document.getElementById('modal-add-save');\r\n+  const modalDelete = document.getElementById('modal-add-delete');\r\n+\r\n+  const addStoreSelect = document.getElementById('add-store-select');\r\n+  const addDateInput   = document.getElementById('add-date');\r\n+  const statusSelect   = document.getElementById('add-status');\r\n+\r\n+  const cliInput = document.getElementById('add-cli-input');\r\n+  const cliSug = document.getElementById('add-cli-sug');\r\n+  const petSelect = document.getElementById('add-pet-select');\r\n+  const servInput   = document.getElementById('add-serv-input');\r\n+  const servSug     = document.getElementById('add-serv-sug');\r\n+  const valorInput  = document.getElementById('add-valor');\r\n+  const addServAddBtn = document.getElementById('add-serv-add-btn');\r\n+  const servListUL  = document.getElementById('add-serv-list');\r\n+  const servTotalEl = document.getElementById('add-serv-total');\r\n+  const obsInput   = document.getElementById('add-observacoes');\r\n+  const horaInput   = document.getElementById('add-hora');\r\n+  const profSelect  = document.getElementById('add-prof-select');\r\n+\r\n+  // State\r\n+  const FILTER_STORAGE_KEY = 'agenda_filters_v1';\r\n+\r\n+  const state = {\r\n+    stores: [],\r\n+    profissionais: [],\r\n+    agendamentos: [],\r\n+    selectedStoreId: null,\r\n+    selectedCliente: null,\r\n+    selectedServico: null,\r\n+    tempServicos: [],\r\n+    editing: null,\r\n+    lastSnapshotHash: '',\r\n+    __didInitialScroll: false,\r\n+    view: 'day',\r\n+    filters: {                 // filtros persistentes\r\n+      statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n+      profIds: new Set()       // _id dos profissionais\r\n+    }\r\n+  };\r\n+\r\n+  function loadFiltersFromStorage() {\r\n+    try {\r\n+      const raw = JSON.parse(localStorage.getItem(FILTER_STORAGE_KEY) || 'null');\r\n+      if (raw && typeof raw === 'object') {\r\n+        state.filters.statuses = new Set(Array.isArray(raw.statuses) ? raw.statuses : []);\r\n+        state.filters.profIds  = new Set(Array.isArray(raw.profIds)  ? raw.profIds  : []);\r\n+      }\r\n+    } catch(_) {}\r\n+  }\r\n+  function saveFiltersToStorage() {\r\n+    try {\r\n+      localStorage.setItem(FILTER_STORAGE_KEY, JSON.stringify({\r\n+        statuses: Array.from(state.filters.statuses),\r\n+        profIds : Array.from(state.filters.profIds)\r\n+      }));\r\n+    } catch(_) {}\r\n+  }\r\n+\r\n+  function ensureToolbar() {\r\n+    if (!agendaList) return;\r\n+    if (document.getElementById('agenda-toolbar')) return;\r\n+\r\n+    const bar = document.createElement('div');\r\n+    bar.id = 'agenda-toolbar';\r\n+    // sticky sob o cabeçalho; leve blur para legibilidade; borda inferior discreta\r\n+    bar.className = 'sticky top-0 z-30 bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/60 border-b border-slate-200 mb-2 flex flex-col gap-2 px-3 py-2 rounded-lg';\r\n+\r\n+    // KPIs\r\n+    const kpis = document.createElement('div');\r\n+    kpis.id = 'agenda-kpis';\r\n+    kpis.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(kpis);\r\n+\r\n+    // Filtros\r\n+    const filters = document.createElement('div');\r\n+    filters.id = 'agenda-filters';\r\n+    filters.className = 'flex flex-wrap items-center gap-2';\r\n+    bar.appendChild(filters);\r\n+\r\n+    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n+  }\r\n+\r\n+  function computeKPIs(items) {\r\n+    const total = items.length;\r\n+    const previsto = items.reduce((s, i) => s + Number(i.valor || 0), 0);\r\n+    const recebido = items.reduce((s, i) => s + (i.pago ? Number(i.valor || 0) : 0), 0);\r\n+    const pendente = previsto - recebido;\r\n+    return { total, previsto, recebido, pendente };\r\n+  }\r\n+\r\n+  function renderKpis() {\r\n+    const wrap = document.getElementById('agenda-kpis');\r\n+    if (!wrap) return;\r\n+\r\n+    const all = state.agendamentos || [];\r\n+    const f = getFilteredAgendamentos();   // filtrados atuais\r\n+    const kAll = computeKPIs(all);\r\n+    const kF   = computeKPIs(f);\r\n+\r\n+    const totalLabel = state.view === 'week' ? 'Total semana' : (state.view === 'month' ? 'Total mês' : 'Total dia');\r\n+    wrap.innerHTML = `\r\n+      <div class=\"kpi-chip\">${totalLabel}: <strong>${kAll.total}</strong></div>\r\n+      <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n+      <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n+      <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n+      ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n+          ? `<div class=\"kpi-chip kpi-muted\">Filtrados: <strong>${kF.total}</strong></div>` : '' }\r\n+    `;\r\n+  }\r\n+\r\n+  function renderFilters() {\r\n+    const el = document.getElementById('agenda-filters');\r\n+    if (!el) return;\r\n+\r\n+    // contadores por status\r\n+    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const key = String(a.status || 'agendado')\r\n+        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n+      if (counts[key] !== undefined) counts[key] += 1;\r\n+    }\r\n+\r\n+    // contadores por profissional\r\n+    const byProf = new Map();\r\n+    for (const a of (state.agendamentos || [])) {\r\n+      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n+      if (!id) continue;\r\n+      const key = String(id);\r\n+      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n+    }\r\n+\r\n+    const statuses = [\r\n+      {key:'agendado', label:'Agend.'},\r\n+      {key:'em_espera', label:'Espera'},\r\n+      {key:'em_atendimento', label:'Atend.'},\r\n+      {key:'finalizado', label:'Fim.'}\r\n+    ];\r\n+\r\n+    // chips de status\r\n+    const chipsStatus = statuses.map(s => {\r\n+      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n+      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n+                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    // chips de profissional (apenas os que existem)\r\n+    const chipsProf = (state.profissionais || []).map(p => {\r\n+      const id = String(p._id);\r\n+      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n+      const n = byProf.get(id) || 0;\r\n+      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n+                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n+              </button>`;\r\n+    }).join('');\r\n+\r\n+    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n+      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n+\r\n+    el.innerHTML = `\r\n+      <div class=\"flex flex-wrap items-center gap-2\">\r\n+        ${chipsStatus}\r\n+        <span class=\"chip-sep\"></span>\r\n+        ${chipsProf}\r\n+        ${clearBtn}\r\n+      </div>\r\n+    `;\r\n+\r\n+    // handlers\r\n+    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n+      btn.addEventListener('click', () => {\r\n+        const type = btn.getAttribute('data-filter');\r\n+        const val  = btn.getAttribute('data-value');\r\n+        if (type === 'status') {\r\n+          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n+        } else if (type === 'prof') {\r\n+          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n+        }\r\n+        saveFiltersToStorage();\r\n+        renderFilters();\r\n+        renderKpis();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      });\r\n+    });\r\n+\r\n+    const clear = document.getElementById('chip-clear');\r\n+    if (clear) clear.addEventListener('click', () => {\r\n+      state.filters.statuses.clear();\r\n+      state.filters.profIds.clear();\r\n+      saveFiltersToStorage();\r\n+      renderFilters();\r\n+      renderKpis();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    });\r\n+  }\r\n+\r\n+  function normalizeStatus(s) {\r\n+    return String(s || 'agendado')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n+  }\r\n+\r\n+  function getFilteredAgendamentos() {\r\n+    const hasStatus = state.filters.statuses.size > 0;\r\n+    const hasProf   = state.filters.profIds.size   > 0;\r\n+\r\n+    if (!hasStatus && !hasProf) return state.agendamentos || [];\r\n+\r\n+    const byNameAll = new Map(\r\n+      (state.profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n+    );\r\n+\r\n+    return (state.agendamentos || []).filter(a => {\r\n+      let ok = true;\r\n+      if (hasStatus) ok = ok && state.filters.statuses.has(normalizeStatus(a.status));\r\n+      if (hasProf) {\r\n+        let pid = a.profissionalId ? String(a.profissionalId) : null;\r\n+        if (!pid) {\r\n+          let nc = '';\r\n+          if (typeof a.profissional === 'string') nc = a.profissional;\r\n+          else if (a.profissional && typeof a.profissional === 'object') {\r\n+            nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n+                a.profissional.razaoSocial || a.profissional.nome || '';\r\n+          }\r\n+          pid = byNameAll.get(String(nc).trim().toLowerCase()) || null;\r\n+        }\r\n+        ok = ok && pid && state.filters.profIds.has(String(pid));\r\n+      }\r\n+      return ok;\r\n+    });\r\n+  }\r\n+\r\n+  function getVisibleProfissionais() {\r\n+    const profs = state.profissionais || [];\r\n+    if (!state.filters.profIds.size) return profs;\r\n+    return profs.filter(p => state.filters.profIds.has(String(p._id)));\r\n+  }\r\n+\r\n+  // Helpers de data e utilitários\r\n+  function todayStr() {\r\n+    // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n+    const d = new Date();\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n+  function buildLocalDateTime(dateStr, hhmm) {\r\n+    let y, m, d;\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) { [d, m, y] = dateStr.split('/').map(Number); }\r\n+    else { [y, m, d] = dateStr.split('-').map(Number); }\r\n+    const [hh, mm] = (hhmm || '00:00').split(':').map(Number);\r\n+    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n+  }\r\n+  function normalizeDate(v) {\r\n+    if (!v) return todayStr();\r\n+    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n+    return v;\r\n+  }\r\n+\r\n+  // ==== NOVO: utilitários de intervalo e label ====\r\n+  function startOfWeek(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    const dow = (d.getDay() + 6) % 7; // 0 = seg\r\n+    d.setDate(d.getDate() - dow);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function addDays(dateStr, n) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(d.getDate() + n);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function startOfMonth(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(1);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function startOfNextMonth(dateStr) {\r\n+    const d = new Date(dateStr + 'T00:00:00');\r\n+    d.setDate(1);\r\n+    d.setMonth(d.getMonth() + 1);\r\n+    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n+    return d.toISOString().slice(0, 10);\r\n+  }\r\n+  function updateHeaderLabel() {\r\n+    if (!dateLabelVisible) return;\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    if (state.view === 'week') {\r\n+      const ini = startOfWeek(base);\r\n+      const fim = addDays(ini, 6);\r\n+      const li = new Date(ini + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      const lf = new Date(fim + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+      dateLabelVisible.textContent = `${li} a ${lf}`;\r\n+    } else if (state.view === 'month') {\r\n+      const m0 = startOfMonth(base);\r\n+      const dt = new Date(m0 + 'T00:00:00');\r\n+      const label = dt.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });\r\n+      dateLabelVisible.textContent = label.charAt(0).toUpperCase() + label.slice(1);\r\n+    } else {\r\n+      dateLabelVisible.textContent = new Date(base + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+    }\r\n+  }\r\n+  function localDateStr(d) {\r\n+    const y = d.getFullYear();\r\n+    const m = String(d.getMonth() + 1).padStart(2, '0');\r\n+    const dd = String(d.getDate()).padStart(2, '0');\r\n+    return `${y}-${m}-${dd}`;\r\n+  }\r\n+\r\n+  // === NOVO: abrevia tutor para \"Primeiro Sob..\" ===\r\n+  function shortTutorName(name) {\r\n+    if (!name) return '';\r\n+    const parts = String(name).trim().split(/\\s+/);\r\n+    const cap = s => s ? (s[0].toUpperCase() + s.slice(1).toLowerCase()) : '';\r\n+    const preps = new Set(['da','de','do','das','dos','e']);\r\n+    const first = cap(parts[0] || '');\r\n+    let second = '';\r\n+    for (let i = 1; i < parts.length; i++) {\r\n+      const w = parts[i];\r\n+      if (!preps.has(w.toLowerCase())) { second = w; break; }\r\n+    }\r\n+    const secondAbbr = second ? cap(second).slice(0, 3) : '';\r\n+    return secondAbbr ? `${first} ${secondAbbr}..` : first;\r\n+  }\r\n+\r\n+  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n+  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n+  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n+\r\n+  // Stores\r\n+  async function loadStores() {\r\n+    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.stores = Array.isArray(list) ? list : [];\r\n+    if (storeSelect) {\r\n+      storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+    }\r\n+    if (!state.selectedStoreId && state.stores[0]) {\r\n+      state.selectedStoreId = state.stores[0]._id;\r\n+      if (storeSelect) storeSelect.value = state.selectedStoreId;\r\n+    }\r\n+    updateStoreLabel();\r\n+  }\r\n+  function updateStoreLabel() {\r\n+    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n+    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n+    const vis = document.getElementById('agenda-store-label-visible');\r\n+    if (vis) vis.textContent = s ? s.nome : '—';\r\n+  }\r\n+\r\n+  // Profissionais\r\n+  async function populateModalProfissionais(storeId, preselectId) {\r\n+    try {\r\n+      if (!storeId || !profSelect) return;\r\n+      const resp = await api(`/func/profissionais/esteticistas?storeId=${storeId}`);\r\n+      const list = await resp.json().catch(() => []);\r\n+      const arr = Array.isArray(list) ? list : [];\r\n+      profSelect.innerHTML = arr.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+      const pid = preselectId ? String(preselectId) : '';\r\n+      if (pid && arr.some(p => String(p._id) === pid)) {\r\n+        profSelect.value = pid;\r\n+      } else if (arr[0]) {\r\n+        profSelect.value = String(arr[0]._id);\r\n+      }\r\n+    } catch (_) { /* silencioso no modal */ }\r\n+  }\r\n+\r\n+  // Agendamentos\r\n+  async function loadAgendamentos() {\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    const date = base; // compat: alguns trechos antigos ainda usam \"date\"\r\n+    let url = '';\r\n+\r\n+    if (state.view === 'week') {\r\n+      const ini = startOfWeek(base);\r\n+      const fim = addDays(ini, 7); // exclusivo\r\n+      url = `/func/agendamentos/range?start=${ini}&end=${fim}&storeId=${state.selectedStoreId}`;\r\n+    } else if (state.view === 'month') {\r\n+      const m0 = startOfMonth(base);\r\n+      const m1 = startOfNextMonth(base); // exclusivo\r\n+      url = `/func/agendamentos/range?start=${m0}&end=${m1}&storeId=${state.selectedStoreId}`;\r\n+    } else {\r\n+      url = `/func/agendamentos?date=${base}&storeId=${state.selectedStoreId}`;\r\n+    }\r\n+\r\n+    try {\r\n+      const resp = await api(url);\r\n+      if (!resp.ok) {\r\n+        const txt = await resp.text();\r\n+        console.error('GET', url, '->', resp.status, txt);\r\n+        state.agendamentos = [];\r\n+        return;\r\n+      }\r\n+\r\n+      const list = await resp.json();\r\n+      state.agendamentos = Array.isArray(list) ? list : [];\r\n+\r\n+      // snapshot/label\r\n+      updateHeaderLabel();\r\n+      state.lastSnapshotHash = `${state.view}:${date}:${state.selectedStoreId || ''}:${state.agendamentos.length}`;\r\n+\r\n+      console.info('[Agenda]', 'view=', state.view, 'dataBase=', date, 'loja=', state.selectedStoreId, 'itens=', state.agendamentos.length);\r\n+    } catch (e) {\r\n+      console.error('Erro ao carregar agendamentos', e);\r\n+      state.agendamentos = [];\r\n+    }\r\n+  }\r\n+\r\n+  // Grade (sem coluna \"Outros\")\r\n+  function renderGrid() {\r\n+      if (!agendaList) return;\r\n+      if (state.view === 'week')  { renderWeekGrid();  return; }\r\n+      if (state.view === 'month') { renderMonthGrid(); return; }\r\n+\r\n+      // ===== Visão DIÁRIA (original) =====\r\n+      const date = normalizeDate(dateInput?.value || todayStr());\r\n+      updateHeaderLabel();\r\n+\r\n+      // janelas de trabalho (ajuste se quiser)\r\n+      const BUSINESS_START = 8;   // 08:00\r\n+      const BUSINESS_END   = 19;  // 19:00\r\n+\r\n+      const hours = [];\r\n+      for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+\r\n+      clearChildren(agendaList);\r\n+\r\n+      const profsAll  = state.profissionais || [];\r\n+      const profs     = getVisibleProfissionais();\r\n+      const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n+\r\n+      const colCount = 1 + (profs?.length || 0);\r\n+\r\n+      // Cabeçalho\r\n+      const header = document.createElement('div');\r\n+      header.style.display = 'grid';\r\n+      // >>> COLUNAS ELÁSTICAS: ocupam o espaço restante sem “vão” à direita\r\n+      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n+      header.className = 'bg-white border-b';\r\n+\r\n+      const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n+      headLabels.forEach((label, idx) => {\r\n+        const cell = document.createElement('div');\r\n+        cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n+        if (idx === 0) {\r\n+          cell.textContent = label;\r\n+        }\r\n+        else {\r\n+          // >>> centraliza o nome do profissional\r\n+          cell.style.textAlign = 'center';\r\n+          const span = document.createElement('span');\r\n+          span.className = 'agenda-head-label inline-block';\r\n+          span.textContent = label || '';\r\n+          cell.dataset.profId = String(profs[idx - 1]._id);\r\n+          cell.appendChild(span);\r\n+        }\r\n+        header.appendChild(cell);\r\n+      });\r\n+\r\n+      const counter = document.createElement('div');\r\n+      counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n+      const itemsAll = state.agendamentos || [];\r\n+      const items    = getFilteredAgendamentos(itemsAll);\r\n+      const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n+      counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n+      header.appendChild(counter);\r\n+\r\n+      agendaList.appendChild(header);\r\n+\r\n+      // Corpo\r\n+      const body = document.createElement('div');\r\n+      body.style.display = 'grid';\r\n+      // >>> COLUNAS ELÁSTICAS: cada profissional tem no mínimo 360px e expande até preencher\r\n+      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n+      agendaList.appendChild(body);\r\n+\r\n+      const isToday = normalizeDate(date) === todayStr();\r\n+      const now = new Date();\r\n+      const nowHH = `${pad(now.getHours())}:00`;\r\n+\r\n+      hours.forEach(hh => {\r\n+        const hourNumber = parseInt(hh.split(':')[0], 10);\r\n+        const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n+        const isNowRow   = isToday && hh === nowHH;\r\n+\r\n+        // coluna de horário\r\n+        const timeCell = document.createElement('div');\r\n+        timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n+        timeCell.textContent = hh;\r\n+\r\n+        body.appendChild(timeCell);\r\n+\r\n+        // células por profissional\r\n+        (profs || []).forEach(p => {\r\n+          const cell = document.createElement('div');\r\n+          // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n+          cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n+          cell.dataset.profissionalId = String(p._id);\r\n+          cell.dataset.hh = hh;\r\n+          body.appendChild(cell);\r\n+        });\r\n+      });\r\n+\r\n+      // posiciona cartões\r\n+      let placed = 0;\r\n+      for (const a of items) {\r\n+        const when = a.h || a.scheduledAt;\r\n+        if (!when) continue;\r\n+\r\n+        const d  = new Date(when);\r\n+        const hh = `${pad(d.getHours())}:00`;\r\n+\r\n+        let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+        if (!profId) {\r\n+          let nameCandidate = '';\r\n+          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n+          else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n+          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n+          if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n+        }\r\n+        if (!profId) continue;\r\n+\r\n+        let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n+        if (!col && profs[0]) {\r\n+          col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n+        }\r\n+        if (!col) continue;\r\n+\r\n+        const meta = statusMeta(a.status);\r\n+        const card = document.createElement('div');\r\n+        card.setAttribute('data-appointment-id', a._id || '');\r\n+        card.style.setProperty('--stripe', meta.stripe);\r\n+        card.style.setProperty('--card-max-w', '260px');\r\n+        card.className = `agenda-card border ${meta.borderClass} cursor-move select-none`;\r\n+        card.setAttribute('draggable', 'true');\r\n+\r\n+        const headerEl = document.createElement('div');\r\n+        // reserva espaço à direita para os botões flutuantes (evita o chip “ficar por baixo”)\r\n+        headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n+\r\n+        // usa o nome do cliente que já vem da API (clienteNome); fallback mantém o comportamento antigo\r\n+        const tutorShort = shortTutorName(a.clienteNome || '');\r\n+        const headLabel  = tutorShort ? `${tutorShort} | ${a.pet || ''}` : (a.pet || '');\r\n+\r\n+        headerEl.innerHTML = `\r\n+          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${headLabel}\">${headLabel}</div>\r\n+          ${renderStatusBadge(a.status)}\r\n+        `;\r\n+\r\n+        const bodyEl = document.createElement('div');\r\n+        if (a.observacoes && String(a.observacoes).trim()) {\r\n+          const svc = document.createElement('div');\r\n+          svc.className = 'text-[13px] text-gray-600 clamp-2';\r\n+          svc.textContent = a.servico || '';\r\n+          const obs = document.createElement('div');\r\n+          obs.className = 'mt-1 text-[12px] text-gray-700 italic clamp-2';\r\n+          obs.textContent = String(a.observacoes).trim();\r\n+          bodyEl.appendChild(svc);\r\n+          bodyEl.appendChild(obs);\r\n+        } else {\r\n+          bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n+          bodyEl.textContent = a.servico || '';\r\n+        }\r\n+\r\n+        const footerEl = document.createElement('div');\r\n+        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n+        const price = document.createElement('div');\r\n+        price.className = 'text-[13px] text-gray-800 font-medium';\r\n+        price.textContent = money(a.valor);\r\n+\r\n+        footerEl.appendChild(price);\r\n+\r\n+        card.appendChild(headerEl);\r\n+        card.appendChild(bodyEl);\r\n+        card.appendChild(footerEl);\r\n+\r\n+        col.appendChild(card);\r\n+        placed++;\r\n+      }\r\n+\r\n+      if (placed === 0) {\r\n+        const empty = document.createElement('div');\r\n+        empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n+        empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n+        agendaList.insertBefore(empty, header.nextSibling);\r\n+      }\r\n+  }\r\n+\r\n+  /** ===== NOVO: visão semanal ===== */\r\n+  function renderWeekGrid() {\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    const ini  = startOfWeek(base);\r\n+    const days = Array.from({ length: 7 }, (_, i) => addDays(ini, i));\r\n+    updateHeaderLabel();\r\n+\r\n+    clearChildren(agendaList);\r\n+\r\n+    // Cabeçalho: horários + 7 dias\r\n+    const BUSINESS_START = 8, BUSINESS_END = 19;\r\n+    const hours = []; for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n+\r\n+    const header = document.createElement('div');\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n+    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n+    header.innerHTML = `\r\n+      <div class=\"px-2 py-2 text-xs text-slate-500\">Horário</div>\r\n+      ${days.map(d=>{\r\n+        const lab = new Date(d+'T00:00:00').toLocaleDateString('pt-BR', { weekday:'short', day:'2-digit', month:'2-digit' });\r\n+        return `<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${lab}</div>`;\r\n+      }).join('')}\r\n+    `;\r\n+    agendaList.appendChild(header);\r\n+\r\n+    const body = document.createElement('div');\r\n+    body.style.display = 'grid';\r\n+    body.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n+    agendaList.appendChild(body);\r\n+\r\n+    // Linhas por hora\r\n+    hours.forEach(hh => {\r\n+      const hNum = parseInt(hh.slice(0,2),10);\r\n+      const inBusiness = (hNum>=BUSINESS_START && hNum< BUSINESS_END);\r\n+\r\n+      const timeCell = document.createElement('div');\r\n+      timeCell.className = `px-2 py-2 border-b text-[12px] ${inBusiness?'text-slate-800':'text-slate-400'}`;\r\n+      timeCell.textContent = hh;\r\n+      body.appendChild(timeCell);\r\n+\r\n+      days.forEach(d=>{\r\n+        const cell = document.createElement('div');\r\n+        cell.className = 'px-2 py-2 border-b agenda-slot';\r\n+        cell.dataset.day = d;\r\n+        cell.dataset.hh  = hh;\r\n+        body.appendChild(cell);\r\n+      });\r\n+    });\r\n+\r\n+    // Posiciona cartões (compactos)\r\n+    const items = getFilteredAgendamentos(state.agendamentos || []);\r\n+    let placed = 0;\r\n+\r\n+    for (const a of items) {\r\n+      const when = a.h || a.scheduledAt;\r\n+      if (!when) continue;\r\n+\r\n+      const dt     = new Date(when);\r\n+      const dayStr = localDateStr(dt); // data local evita deslocamento de fuso\r\n+      if (dayStr < days[0] || dayStr > days[6]) continue;\r\n+\r\n+      const hh = `${pad(dt.getHours())}:00`;\r\n+      const cell = agendaList.querySelector(`div[data-day=\"${dayStr}\"][data-hh=\"${hh}\"]`);\r\n+      if (!cell) continue;\r\n+\r\n+      const meta = statusMeta(a.status);\r\n+      const hhmm = `${pad(dt.getHours())}:${String(dt.getMinutes()).padStart(2,'0')}`;\r\n+\r\n+      const card = document.createElement('div');\r\n+      card.setAttribute('data-appointment-id', a._id || '');\r\n+      card.style.setProperty('--stripe', meta.stripe);\r\n+      card.style.setProperty('--card-max-w', '100%');                       // ocupa a coluna\r\n+      card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n+      card.setAttribute('draggable', 'true');\r\n+      card.title = [\r\n+        a.pet || '',\r\n+        a.servico || '',\r\n+        (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n+      ].filter(Boolean).join(' • ');\r\n+\r\n+      // Header: Tutor abreviado | Pet (sem hora)\r\n+      const headerEl = document.createElement('div');\r\n+      headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n+      const tutorShort = shortTutorName(a.clienteNome || a.tutor || '');\r\n+      const headLabel  = tutorShort ? `${tutorShort} | ${a.pet || ''}` : (a.pet || '');\r\n+      headerEl.innerHTML = `\r\n+        <div class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${headLabel}\">${headLabel}</div>\r\n+        <!-- nada do lado direito no header -->\r\n+      `;\r\n+\r\n+      // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n+      const bodyEl = document.createElement('div');\r\n+      const svc = document.createElement('div');\r\n+      svc.className = 'text-[12px] text-gray-600 truncate';\r\n+      svc.textContent = a.servico || '';\r\n+      bodyEl.appendChild(svc);\r\n+      if (a.observacoes && String(a.observacoes).trim()) {\r\n+        const obs = document.createElement('div');\r\n+        obs.className = 'text-[11px] text-gray-700 italic truncate';\r\n+        obs.textContent = String(a.observacoes).trim();\r\n+        bodyEl.appendChild(obs);\r\n+      }\r\n+\r\n+      // Rodapé: status + valor à direita\r\n+      const footerEl = document.createElement('div');\r\n+      footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n+      const statusEl = document.createElement('div');\r\n+      // badge menor para caber bem\r\n+      statusEl.innerHTML = renderStatusBadge(a.status).replace('text-xs','text-[10px]');\r\n+      const price = document.createElement('div');\r\n+      price.className = 'text-[12px] text-gray-800 font-semibold';\r\n+      price.textContent = money(a.valor);\r\n+      footerEl.appendChild(statusEl);\r\n+      footerEl.appendChild(price);\r\n+\r\n+      card.appendChild(headerEl);\r\n+      card.appendChild(bodyEl);\r\n+      card.appendChild(footerEl);\r\n+\r\n+      cell.appendChild(card);\r\n+      placed++;\r\n+    }\r\n+\r\n+    if (placed === 0) {\r\n+      const empty = document.createElement('div');\r\n+      empty.className = 'p-6 text-sm text-slate-500';\r\n+      empty.textContent = 'Nenhum agendamento no intervalo.';\r\n+      agendaList.appendChild(empty);\r\n+    }\r\n+  }\r\n+\r\n+  /** ===== NOVO: visão mensal ===== */\r\n+  function renderMonthGrid() {\r\n+    const base = normalizeDate(dateInput?.value || todayStr());\r\n+    const m0   = startOfMonth(base);\r\n+    const m1   = startOfNextMonth(base); // exclusivo\r\n+    updateHeaderLabel();\r\n+\r\n+    clearChildren(agendaList);\r\n+\r\n+    // cabeçalho: seg a dom\r\n+    const weekDays = ['Seg','Ter','Qua','Qui','Sex','Sáb','Dom'];\r\n+    const header = document.createElement('div');\r\n+    header.style.display = 'grid';\r\n+    header.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n+    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n+    header.innerHTML = weekDays.map(d=>`<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${d}</div>`).join('');\r\n+    agendaList.appendChild(header);\r\n+\r\n+    // calcular início da grade (segunda da semana que contém o dia 1)\r\n+    const startGrid = startOfWeek(m0);\r\n+    const days = Array.from({length:42},(_,i)=> addDays(startGrid,i)); // 6 semanas\r\n+\r\n+    const grid = document.createElement('div');\r\n+    grid.style.display = 'grid';\r\n+    grid.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n+    agendaList.appendChild(grid);\r\n+\r\n+    // usar FILTRO + AGRUPAR por data local\r\n+    const items = getFilteredAgendamentos((state.agendamentos||[]).slice().sort((a,b)=>(new Date(a.h||a.scheduledAt))-(new Date(b.h||b.scheduledAt))));\r\n+    const byDay = new Map();\r\n+    for (const a of items) {\r\n+      const d = localDateStr(new Date(a.h || a.scheduledAt));\r\n+      if (d >= m0 && d < m1) {\r\n+        if (!byDay.has(d)) byDay.set(d, []);\r\n+        byDay.get(d).push(a);\r\n+      }\r\n+    }\r\n+\r\n+    days.forEach(d=>{\r\n+      const inMonth = (d>=m0 && d<m1);\r\n+      const cell = document.createElement('div');\r\n+      cell.className = `min-h-[140px] border p-2 ${inMonth? 'bg-white':'bg-slate-50'}`; // min-h menor\r\n+\r\n+      const title = document.createElement('div');\r\n+      title.className = `flex items-center justify-between text-[11px] ${inMonth?'text-slate-700':'text-slate-400'}`;\r\n+      const dayNum = new Date(d+'T00:00:00').getDate();\r\n+      title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n+\r\n+      const list = document.createElement('div');\r\n+      list.className = 'mt-1 space-y-1';\r\n+\r\n+      const itemsDay = byDay.get(d) || [];\r\n+      itemsDay.forEach((a, idx)=>{\r\n+        const meta = statusMeta(a.status);\r\n+        const when = new Date(a.h || a.scheduledAt);\r\n+        const hhmm = `${pad(when.getHours())}:${String(when.getMinutes()).padStart(2,'0')}`;\r\n+\r\n+      const card = document.createElement('div');\r\n+      card.setAttribute('data-appointment-id', a._id || '');\r\n+      card.style.setProperty('--stripe', meta.stripe);\r\n+      card.style.setProperty('--card-max-w', '100%');\r\n+      card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n+      card.setAttribute('draggable', 'true');\r\n+      card.title = [\r\n+        a.pet || '',\r\n+        a.servico || '',\r\n+        (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n+      ].filter(Boolean).join(' • '); // tooltip exibe tudo sem poluir o card\r\n+\r\n+      // Header: hora à esquerda + STATUS centralizado (reserva espaço p/ botões à direita)\r\n+      const headerEl = document.createElement('div');\r\n+      headerEl.className = 'flex items-center gap-2 pr-14 md:pr-16 mb-1';\r\n+      headerEl.innerHTML = `\r\n+        <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n+        <div class=\"flex-1 flex items-center justify-center\">\r\n+          ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n+        </div>\r\n+      `;\r\n+\r\n+      // Linha abaixo: Tutor abreviado | Pet (agora lendo também `a.tutor` da rota /func/agendamentos/range)\r\n+      const rawTutorName =\r\n+        a.tutor ||                       // **principal** no mensal\r\n+        a.tutorNome ||\r\n+        a.clienteNome ||\r\n+        (a.cliente && (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.nome || a.cliente.name)) ||\r\n+        (a.tutor && (a.tutor.nomeCompleto || a.tutor.nomeContato || a.tutor.razaoSocial || a.tutor.nome)) ||\r\n+        a.responsavelNome ||\r\n+        (a.responsavel && (a.responsavel.nome || a.responsavel.name)) ||\r\n+        '';\r\n+\r\n+      const tutorShort = shortTutorName(rawTutorName);\r\n+      const headLabel  = [tutorShort, (a.pet || '')].filter(Boolean).join(' | ');\r\n+\r\n+      const nameEl = document.createElement('div');\r\n+      nameEl.className = 'text-[12px] font-medium text-gray-900 text-center truncate';\r\n+      nameEl.title = headLabel;\r\n+      nameEl.textContent = headLabel;\r\n+\r\n+      // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n+      const bodyEl = document.createElement('div');\r\n+      const svc = document.createElement('div');\r\n+      svc.className = 'text-[12px] text-gray-600 truncate';     // 1 linha\r\n+      svc.textContent = a.servico || '';\r\n+      bodyEl.appendChild(svc);\r\n+\r\n+      if (a.observacoes && String(a.observacoes).trim()) {\r\n+        const obs = document.createElement('div');\r\n+        obs.className = 'text-[11px] text-gray-700 italic truncate'; // 1 linha\r\n+        obs.textContent = String(a.observacoes).trim();\r\n+        bodyEl.appendChild(obs);\r\n+      }\r\n+\r\n+      // Rodapé enxuto: valor à direita\r\n+      const footerEl = document.createElement('div');\r\n+      footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n+      const price = document.createElement('div');\r\n+      price.className = 'text-[12px] text-gray-800 font-semibold';\r\n+      price.textContent = money(a.valor);\r\n+      footerEl.appendChild(price);\r\n+\r\n+      card.appendChild(headerEl);\r\n+      card.appendChild(nameEl);\r\n+      card.appendChild(bodyEl);\r\n+      card.appendChild(footerEl);\r\n+\r\n+      list.appendChild(card);\r\n+\r\n+        // Limitar o excesso visual\r\n+        if (idx>=6 && itemsDay.length>7) {\r\n+          const more = document.createElement('div');\r\n+          more.className = 'text-[11px] text-slate-500';\r\n+          more.textContent = `+${itemsDay.length-6} itens`;\r\n+          list.appendChild(more);\r\n+          return;\r\n+        }\r\n+      });\r\n+\r\n+      cell.appendChild(title);\r\n+      cell.appendChild(list);\r\n+      grid.appendChild(cell);\r\n+    });\r\n+  }\r\n+\r\n+  // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n+  function statusMeta(s) {\r\n+    // Normalização: acentos/maiúsculas/espaços/hífens\r\n+    const keyRaw = String(s || 'agendado')\r\n+      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+      .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n+\r\n+    const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+    const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n+\r\n+    // Paleta acessível (contraste AA) + info para faixa lateral e badge compacta\r\n+    const map = {\r\n+      agendado: {\r\n+        label: 'Agendado',\r\n+        short: 'Agend.',\r\n+        stripe: '#64748B',     // slate-500\r\n+        text: '#0F172A',       // slate-900\r\n+        badgeClass: 'bg-slate-100 text-slate-700 border border-slate-200',\r\n+        borderClass: 'border-slate-300'\r\n+      },\r\n+      em_espera: {\r\n+        label: 'Em espera',\r\n+        short: 'Espera',\r\n+        stripe: '#B45309',     // amber-700\r\n+        text: '#1F2937',       // gray-800\r\n+        badgeClass: 'bg-amber-50 text-amber-800 border border-amber-200',\r\n+        borderClass: 'border-amber-400'\r\n+      },\r\n+      em_atendimento: {\r\n+        label: 'Em atendimento',\r\n+        short: 'Atend.',\r\n+        stripe: '#1D4ED8',     // blue-700\r\n+        text: '#0B1235',\r\n+        badgeClass: 'bg-blue-50 text-blue-800 border border-blue-200',\r\n+        borderClass: 'border-blue-500'\r\n+      },\r\n+      finalizado: {\r\n+        label: 'Finalizado',\r\n+        short: 'Fim.',\r\n+        stripe: '#16A34A',     // green-600\r\n+        text: '#052E16',\r\n+        badgeClass: 'bg-green-50 text-green-800 border border-green-200',\r\n+        borderClass: 'border-green-500'\r\n+      }\r\n+    };\r\n+\r\n+    return map[k];\r\n+  }\r\n+\r\n+  function renderStatusBadge(s) {\r\n+    const { label, badgeClass } = statusMeta(s);\r\n+    // `whitespace-nowrap` garante que o chip não quebre em duas linhas\r\n+    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium whitespace-nowrap ${badgeClass}\">${label}</span>`;\r\n+  }\r\n+\r\n+  // Modal — modo adicionar\r\n+  function openAddModal() {\r\n+    state.editing = null;\r\n+    if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n+\r\n+    // Reset serviços temporários\r\n+    state.tempServicos = [];\r\n+    renderServicosLista();\r\n+    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n+\r\n+    // Campos editáveis habilitados\r\n+    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n+\r\n+    // Limpa estado/inputs\r\n+    state.selectedCliente = null;\r\n+    state.selectedServico = null;\r\n+    if (cliInput) { cliInput.value = ''; }\r\n+    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+    if (servInput) { servInput.value = ''; }\r\n+    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    if (valorInput) { valorInput.value = ''; }\r\n+    if (petSelect) { petSelect.innerHTML = ''; }\r\n+    if (obsInput) { obsInput.value = ''; }\r\n+\r\n+    // Empresa (usa as mesmas opções do seletor da página)\r\n+    if (addStoreSelect) {\r\n+      if (storeSelect && storeSelect.options.length) {\r\n+        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n+      } else if (state.stores?.length) {\r\n+        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+      }\r\n+      const sid = state.selectedStoreId || storeSelect?.value || '';\r\n+      addStoreSelect.value = sid;\r\n+\r\n+      // Carrega os profissionais correspondentes à empresa escolhida no modal (sem travar a abertura)\r\n+      try { if (sid) { populateModalProfissionais(sid); } } catch(_) {}\r\n+    }\r\n+\r\n+    // Data (usa a data visível na página)\r\n+    if (addDateInput) {\r\n+      const date = normalizeDate(dateInput?.value || todayStr()); // YYYY-MM-DD\r\n+      addDateInput.value = date;\r\n+    }\r\n+\r\n+    // Hora default (agora)\r\n+    const now = new Date();\r\n+    const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n+    if (horaInput) horaInput.value = hh;\r\n+    \r\n+    // Observações\r\n+    if (obsInput) { obsInput.value = ''; }\r\n+\r\n+    // Status default\r\n+    if (statusSelect) statusSelect.value = 'agendado';\r\n+\r\n+    // Botão Excluir só em edição\r\n+    if (modalDelete) modalDelete.classList.add('hidden');\r\n+\r\n+    modal.classList.remove('hidden'); \r\n+    modal.classList.add('flex');\r\n+    cliInput?.focus();\r\n+  }\r\n+\r\n+  // cache simples: clienteId -> nome\r\n+  const _clienteNomeCache = new Map();\r\n+\r\n+  async function resolveClienteNome(a) {\r\n+    try {\r\n+      if (!a) return '';\r\n+\r\n+      // 1) nome direto vindo da API\r\n+      const direct =\r\n+        a.clienteNome ||\r\n+        (a.cliente && typeof a.cliente === 'object' && (a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial)) ||\r\n+        null;\r\n+      if (typeof direct === 'string' && direct.trim()) return direct.trim();\r\n+\r\n+      // 2) clienteId em qualquer formato\r\n+      let maybeId =\r\n+        a.clienteId ||\r\n+        a.clientId ||\r\n+        a.customerId ||\r\n+        (typeof a.cliente === 'string' ? a.cliente : null);\r\n+\r\n+      if (typeof maybeId === 'object' && maybeId !== null && maybeId._id) {\r\n+        maybeId = String(maybeId._id);\r\n+      }\r\n+      const id = (typeof maybeId === 'string' && /^[0-9a-fA-F]{24}$/.test(maybeId)) ? maybeId : null;\r\n+\r\n+      if (id) {\r\n+        if (_clienteNomeCache.has(id)) return _clienteNomeCache.get(id);\r\n+        const r = await api(`/func/clientes/${id}`);\r\n+        if (r.ok) {\r\n+          const c = await r.json();\r\n+          const nome = c?.nome || '';\r\n+          if (nome) { _clienteNomeCache.set(id, nome); return nome; }\r\n+        }\r\n+      }\r\n+\r\n+      // 3) fallback por petId\r\n+      const petId =\r\n+        a.petId ||\r\n+        (a.pet && typeof a.pet === 'object' && a.pet._id ? a.pet._id : null) ||\r\n+        null;\r\n+\r\n+      if (petId && /^[0-9a-fA-F]{24}$/.test(String(petId))) {\r\n+        const r2 = await api(`/func/pets/${petId}`);\r\n+        if (r2.ok) {\r\n+          const p = await r2.json();\r\n+          const nome =\r\n+            (p?.cliente && (p.cliente.nome || p.cliente.nomeCompleto || p.cliente.razaoSocial)) ||\r\n+            p?.clienteNome ||\r\n+            '';\r\n+          if (nome) return String(nome);\r\n+        }\r\n+      }\r\n+    } catch (e) {\r\n+      console.info('[resolveClienteNome] não foi possível resolver', e);\r\n+    }\r\n+    return '';\r\n+  }\r\n+\r\n+  // --- DEPOIS: openEditModal (indica carregamento e garante preenchimento) ---\r\n+  function toDateInputValueFromISO(isoStr) {\r\n+    const d = new Date(isoStr);\r\n+    if (isNaN(d.getTime())) return todayStr();\r\n+    const yyyy = d.getFullYear();\r\n+    const mm = String(d.getMonth() + 1).padStart(2, '0');\r\n+    const dd = String(d.getDate()).padStart(2, '0');\r\n+    return `${yyyy}-${mm}-${dd}`;\r\n+  }\r\n+\r\n+  function openEditModal(a) {\r\n+    state.editing = a || null;\r\n+    if (!modal || !state.editing) return;\r\n+\r\n+    // Preenche lista de serviços no modo edição (somente leitura)\r\n+    state.tempServicos = Array.isArray(a.servicos)\r\n+      ? a.servicos.map(x => ({ _id: x._id, nome: x.nome, valor: Number(x.valor || 0) }))\r\n+      : (a.servico ? [{ _id: null, nome: a.servico, valor: Number(a.valor || 0) }] : []);\r\n+    renderServicosLista();\r\n+\r\n+    // habilita campo de busca/valor para adicionar novos serviços\r\n+    state.selectedServico = null;\r\n+    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n+    if (servSug)   { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+    if (valorInput){ valorInput.value = ''; valorInput.disabled = false; }\r\n+\r\n+    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n+\r\n+    // Empresa (mostra a loja do agendamento e permite trocar)\r\n+    if (addStoreSelect) {\r\n+      if (storeSelect && storeSelect.options.length) {\r\n+        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n+      } else if (state.stores?.length) {\r\n+        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n+      }\r\n+      addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n+      addStoreSelect.disabled = false;\r\n+    }\r\n+\r\n+    // Data do agendamento\r\n+    if (addDateInput) {\r\n+      const iso = a.h || a.scheduledAt || new Date().toISOString();\r\n+      addDateInput.value = toDateInputValueFromISO(iso);\r\n+    }\r\n+\r\n+    // Hora\r\n+    const d = new Date((a.h || a.scheduledAt) || new Date());\r\n+    const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n+    if (horaInput) horaInput.value = hh;\r\n+\r\n+    // Profissional (tenta resolver o id atual)\r\n+    let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n+    if (!profId && typeof a.profissional === 'string') {\r\n+      const key = a.profissional.trim().toLowerCase();\r\n+      const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n+      if (match) profId = String(match._id);\r\n+    }\r\n+    if (profSelect && profId) profSelect.value = profId;\r\n+\r\n+    // Ao abrir o modal de edição, carregamos os profissionais da EMPRESA selecionada no modal\r\n+    try {\r\n+      const sid = addStoreSelect?.value || a.storeId || '';\r\n+      if (sid) { populateModalProfissionais(sid, profId); } // não bloqueia a abertura do modal\r\n+    } catch (_) {}\r\n+\r\n+    // Status (normalizado p/ os values do <select>)\r\n+    if (statusSelect) {\r\n+      const keyRaw = String(a.status || 'agendado')\r\n+        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n+        .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n+      const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+      statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n+    }\r\n+\r\n+    // Observações (preenche com a descrição do card)\r\n+    if (obsInput) { obsInput.value = (a.observacoes || '').trim(); }\r\n+\r\n+    // Cliente e Pet (preenche e bloqueia busca no modo edição)\r\n+    if (cliInput) { cliInput.value = (a.clienteNome || ''); cliInput.disabled = true; }\r\n+   \r\n+    if (petSelect) {\r\n+      petSelect.innerHTML = '';\r\n+      try {\r\n+        const clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n+        if (clienteId) {\r\n+          api(`/func/clientes/${clienteId}/pets`).then(r => r.json().catch(() => []))\r\n+            .then(pets => {\r\n+              petSelect.innerHTML = (Array.isArray(pets) ? pets : []).map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+              const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n+              if (currentPetId) petSelect.value = String(currentPetId);\r\n+            });\r\n+        }\r\n+      } catch (_) {}\r\n+    }\r\n+\r\n+    // Serviço/Valor: leitura\r\n+    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n+    if (valorInput) { valorInput.value = ''; valorInput.disabled = false; }\r\n+\r\n+    // Botão excluir visível\r\n+    if (modalDelete) modalDelete.classList.remove('hidden');\r\n+\r\n+    modal.classList.remove('hidden');\r\n+    modal.classList.add('flex');\r\n+  }\r\n+\r\n+  function closeModal() {\r\n+    if (!modal) return;\r\n+    modal.classList.add('hidden');\r\n+    modal.classList.remove('flex');\r\n+    state.editing = null;\r\n+    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n+  }\r\n+\r\n+  // Busca cliente\r\n+  async function searchClientes(term) {\r\n+    if (!term || term.length < 2) {\r\n+      if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n+      return;\r\n+    }\r\n+    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    if (!cliSug) return;\r\n+    cliSug.innerHTML = list.map(u => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n+        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n+      </li>`).join('');\r\n+    cliSug.classList.remove('hidden');\r\n+    cliSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', async () => {\r\n+        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n+        if (cliInput) cliInput.value = li.dataset.nome;\r\n+        cliSug.classList.add('hidden');\r\n+        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n+        const pets = await resp.json().catch(() => []);\r\n+        if (petSelect) {\r\n+          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n+        }\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  function confirmAsync(title, message, opts = {}) {\r\n+    const confirmText = opts.confirmText || 'Excluir';\r\n+    const cancelText  = opts.cancelText  || 'Cancelar';\r\n+\r\n+    if (typeof window.showModal === 'function') {\r\n+      return new Promise((resolve) => {\r\n+        // 1) Esconde temporariamente o modal de edição (sem desmontar)\r\n+        const prevVis = modal ? modal.style.visibility : '';\r\n+        const prevPe  = modal ? modal.style.pointerEvents : '';\r\n+        if (modal) {\r\n+          modal.style.visibility = 'hidden';\r\n+          modal.style.pointerEvents = 'none';\r\n+        }\r\n+\r\n+        // 2) Abre o modal padrão do projeto\r\n+        window.showModal({\r\n+          title: title || 'Confirmação',\r\n+          message: message || 'Deseja prosseguir?',\r\n+          confirmText,\r\n+          cancelText,\r\n+          onConfirm: () => { restore(); resolve(true); },\r\n+          onCancel : () => { restore(); resolve(false); }\r\n+        });\r\n+\r\n+        // 3) Após montar, garante overlay por cima de tudo\r\n+        //    (pega o último elemento \"fixed\" full-screen e sobe o z-index)\r\n+        const bump = () => {\r\n+          try {\r\n+            const all = Array.from(document.querySelectorAll('body *'));\r\n+            const overlays = all.filter(el => {\r\n+              const cs = getComputedStyle(el);\r\n+              if (cs.position !== 'fixed') return false;\r\n+              const r = el.getBoundingClientRect();\r\n+              return r.width >= window.innerWidth * 0.95 && r.height >= window.innerHeight * 0.95;\r\n+            });\r\n+            const overlay = overlays.at(-1);\r\n+            if (overlay) {\r\n+              overlay.style.zIndex = '9999';\r\n+              overlay.style.pointerEvents = 'auto';\r\n+            }\r\n+          } catch (_) { /* noop */ }\r\n+        };\r\n+        requestAnimationFrame(bump);\r\n+        setTimeout(bump, 0);\r\n+\r\n+        // 4) Restaura o modal de edição quando fechar a confirmação\r\n+        function restore() {\r\n+          if (modal) {\r\n+            modal.style.visibility = prevVis || '';\r\n+            modal.style.pointerEvents = prevPe || '';\r\n+          }\r\n+        }\r\n+      });\r\n+    }\r\n+\r\n+    // Fallback (apenas se o componente não existir)\r\n+    const ok = window.confirm(message || title || 'Confirmar?');\r\n+    return Promise.resolve(!!ok);\r\n+  }\r\n+\r\n+  async function handleDelete() {\r\n+      const id = state.editing && state.editing._id ? String(state.editing._id) : null;\r\n+      if (!id) return;\r\n+\r\n+      const ok = await confirmAsync('Excluir atendimento', 'Tem ce...a excluir este atendimento? Esta ação não pode ser desfeita.', {\r\n+        confirmText: 'Excluir',\r\n+        cancelText: 'Cancelar'\r\n+      });\r\n+      if (!ok) return;\r\n+\r\n+      const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\r\n+      if (!resp.ok) {\r\n+        const err = await resp.json().catch(() => ({}));\r\n+        alert(err.message || 'Erro ao excluir agendamento');\r\n+        return;\r\n+      }\r\n+      await loadAgendamentos();\r\n+      renderKpis();\r\n+      renderFilters();\r\n+      closeModal();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+  }\r\n+\r\n+  // Busca serviços\r\n+  async function searchServicos(term) {\r\n+    if (!term || term.length < 2) {\r\n+      if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n+      return;\r\n+    }\r\n+    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    if (!servSug) return;\r\n+    servSug.innerHTML = list.map(s => `\r\n+      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor}\">\r\n+        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${money(s.valor)}</div>\r\n+      </li>`).join('');\r\n+    servSug.classList.remove('hidden');\r\n+    servSug.querySelectorAll('li').forEach(li => {\r\n+      li.addEventListener('click', () => {\r\n+        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n+        if (servInput) servInput.value = state.selectedServico.nome;\r\n+        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n+        servSug.classList.add('hidden');\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  // --- Lista de serviços no modal ---\r\n+  function renderServicosLista() {\r\n+    if (!servListUL || !servTotalEl) return;\r\n+    const items = state.tempServicos || [];\r\n+    servListUL.innerHTML = items.map((it, idx) => `\r\n+      <li class=\"flex items-center justify-between px-3 py-2 text-sm\">\r\n+        <div class=\"flex items-center gap-3\">\r\n+          <span class=\"w-20 text-right tabular-nums\">${money(Number(it.valor || 0))}</span>\r\n+          <span class=\"text-gray-700\">${it.nome || ''}</span>\r\n+        </div>\r\n+        <button data-idx=\"${idx}\" class=\"remove-serv px-2 py-1 rounded-md border text-gray-600 hover:bg-gray-50\">Remover</button>\r\n+      </li>\r\n+    `).join('');\r\n+    const total = items.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n+    servTotalEl.textContent = money(total);\r\n+\r\n+    servListUL.querySelectorAll('.remove-serv').forEach(btn => {\r\n+      btn.addEventListener('click', () => {\r\n+        const i = parseInt(btn.getAttribute('data-idx'), 10);\r\n+        if (!isNaN(i)) {\r\n+          state.tempServicos.splice(i, 1);\r\n+          renderServicosLista();\r\n+        }\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  // Salvar (adicionar/editar)\r\n+  async function saveAgendamento() {\r\n+      try {\r\n+        const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n+        const storeIdSelected = (addStoreSelect?.value) || state.selectedStoreId || storeSelect?.value;\r\n+        const hora = horaInput?.value;\r\n+        const profissionalId = profSelect?.value;\r\n+        const status = (statusSelect?.value) || 'agendado';\r\n+\r\n+        if (!hora || !profissionalId) { alert('Preencha hora e profissional.'); return; }\r\n+        if (!storeIdSelected) { alert('Selecione a empresa.'); return; }\r\n+\r\n+        const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n+\r\n+        // Edição\r\n+        if (state.editing && state.editing._id) {\r\n+          const id = state.editing._id;\r\n+\r\n+          // usa os itens montados na UI (edição agora permite adicionar/remover)\r\n+          const items = Array.isArray(state.tempServicos) ? state.tempServicos : [];\r\n+          if (!items.length) { alert('Adicione pelo menos 1 serviço ao agendamento.'); return; }\r\n+\r\n+          const body = {\r\n+            storeId: storeIdSelected,\r\n+            profissionalId,\r\n+            scheduledAt,\r\n+            status,\r\n+            observacoes: (obsInput?.value || '').trim(),\r\n+            servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n+            ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n+            ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n+            ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n+          };\r\n+\r\n+          const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\r\n+          if (!resp.ok) {\r\n+            const err = await resp.json().catch(() => ({}));\r\n+            alert(err.message || 'Erro ao atualizar agendamento.');\r\n+            return;\r\n+          }\r\n+\r\n+          await loadAgendamentos();\r\n+          renderKpis();\r\n+          renderFilters();\r\n+          closeModal();\r\n+          renderGrid();\r\n+          enhanceAgendaUI();\r\n+          return;\r\n+        }\r\n+\r\n+        // Adição\r\n+        const clienteId = state.selectedCliente?._id;\r\n+        const petId = petSelect?.value;\r\n+        const items = state.tempServicos || [];\r\n+\r\n+        if (!(clienteId && petId && items.length)) { alert('Preencha cliente, pet e adicione pelo menos 1 serviço.'); return; }\r\n+\r\n+        const body = {\r\n+          storeId: storeIdSelected,\r\n+          clienteId, petId,\r\n+          servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n+          profissionalId, scheduledAt,\r\n+          status,\r\n+          observacoes: (obsInput?.value || '').trim(),\r\n+          pago: false\r\n+        };\r\n+        const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao salvar');\r\n+        }\r\n+\r\n+        await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n+        closeModal();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error(e);\r\n+        alert(e.message || 'Erro ao salvar');\r\n+      }\r\n+    }\r\n+\r\n+  function enhanceAgendaUI() {\r\n+    try {\r\n+      applyZebraAndSublines();\r\n+      decorateCards();\r\n+\r\n+      if (state.view === 'day') {\r\n+        enableDragDrop();\r\n+        drawNowLine();\r\n+\r\n+        const date = normalizeDate(dateInput?.value || todayStr());\r\n+        if (!state.__didInitialScroll && date === todayStr()) {\r\n+          scrollToNow();\r\n+          state.__didInitialScroll = true;\r\n+        }\r\n+      }\r\n+    } catch (e) {\r\n+      console.info('[enhanceAgendaUI] skip', e);\r\n+    }\r\n+  }\r\n+\r\n+  function scrollToNow() {\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body || !state.profissionais?.length) return;\r\n+\r\n+      // encontra a célula da primeira coluna de profissional no horário atual\r\n+      const now = new Date();\r\n+      const hh = String(now.getHours()).padStart(2, '0') + ':00';\r\n+      const firstProfId = String(state.profissionais[0]._id);\r\n+      const target = body.querySelector(`div[data-profissional-id=\"${firstProfId}\"][data-hh=\"${hh}\"]`);\r\n+\r\n+      if (target) {\r\n+        const top = target.getBoundingClientRect().top + window.pageYOffset;\r\n+        const offset = 80; // sobe um pouco para contexto\r\n+        window.scrollTo({ top: Math.max(0, top - offset), behavior: 'smooth' });\r\n+      }\r\n+  }\r\n+\r\n+  // compacta a lista para um hash leve (ordem estável)\r\n+  function snapshotHash(items) {\r\n+    try {\r\n+      const compact = (items || []).map(x => [\r\n+        String(x._id || ''),\r\n+        String(x.status || ''),\r\n+        String(x.h || x.scheduledAt || ''),\r\n+        Number(x.valor || 0),\r\n+        !!x.pago\r\n+      ]).sort((a, b) => a[0].localeCompare(b[0]));\r\n+      return JSON.stringify(compact);\r\n+    } catch (_) {\r\n+      return String(Date.now());\r\n+    }\r\n+  }\r\n+\r\n+  // reconsulta e só re-renderiza se houver mudança relevante\r\n+  async function refreshAgendaIfChanged() {\r\n+    const prev = state.lastSnapshotHash || '';\r\n+    await loadAgendamentos();\r\n+    const next = snapshotHash(state.agendamentos);\r\n+    if (next !== prev) {\r\n+      state.lastSnapshotHash = next;\r\n+      renderGrid();\r\n+      // ao re-render com mesma data de hoje, não repete o scroll\r\n+      enhanceAgendaUI();\r\n+    }\r\n+  }\r\n+\r\n+  // inicia/renova o timer de auto-refresh (60s)\r\n+  function startAutoRefresh() {\r\n+    if (window.__agendaRefreshTimer) clearInterval(window.__agendaRefreshTimer);\r\n+    state.lastSnapshotHash = snapshotHash(state.agendamentos);\r\n+    window.__agendaRefreshTimer = setInterval(refreshAgendaIfChanged, 60000);\r\n+  }\r\n+\r\n+  // cria o botão \"Hoje\" ao lado do input de data (uma vez)\r\n+  function ensureTodayButton() {\r\n+    if (!dateInput) return;\r\n+    if (document.getElementById('agenda-today-btn')) return;\r\n+\r\n+    const btn = document.createElement('button');\r\n+    btn.id = 'agenda-today-btn';\r\n+    btn.type = 'button';\r\n+    btn.className = 'ml-2 inline-flex items-center gap-1 text-xs px-2 py-1 rounded border border-slate-300 text-slate-700 hover:bg-slate-50';\r\n+    btn.textContent = 'Hoje';\r\n+\r\n+    dateInput.insertAdjacentElement('afterend', btn);\r\n+    btn.addEventListener('click', async () => {\r\n+      dateInput.value = todayStr();\r\n+      state.__didInitialScroll = false;   // permite novo auto-scroll\r\n+      await loadAgendamentos();\r\n+      renderGrid();\r\n+      enhanceAgendaUI();\r\n+    });\r\n+  }\r\n+\r\n+  // Zebra de linhas + sublinha 30min com CSS (via classe)\r\n+  function applyZebraAndSublines() {\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n+\r\n+      body.style.position = 'relative'; // para linha do \"agora\"\r\n+      const totalCols = 1 + (state.profissionais?.length || 0); // 1 (hora) + N profissionais\r\n+      if (totalCols <= 0) return;\r\n+\r\n+      const cells = Array.from(body.children);\r\n+      const totalRows = Math.floor(cells.length / totalCols);\r\n+\r\n+      for (let row = 0; row < totalRows; row++) {\r\n+        const start = row * totalCols;\r\n+        const zebraClass = (row % 2 === 0) ? 'bg-white' : 'bg-slate-50';\r\n+\r\n+        // primeira coluna (hora)\r\n+        const tCell = cells[start];\r\n+        if (tCell) {\r\n+          tCell.classList.remove('bg-white','bg-slate-50');\r\n+          tCell.classList.add(zebraClass);\r\n+        }\r\n+\r\n+        // colunas dos profissionais\r\n+        for (let col = 1; col < totalCols; col++) {\r\n+          const idx = start + col;\r\n+          const slot = cells[idx];\r\n+          if (!slot) continue;\r\n+          slot.classList.remove('bg-white','bg-slate-50');\r\n+          slot.classList.add(zebraClass, 'agenda-slot'); // garante classe\r\n+        }\r\n+      }\r\n+  }\r\n+\r\n+  // Insere ícones de ação nos cartões (editar / mudar status)\r\n+  function decorateCards() {\r\n+    const cards = agendaList?.querySelectorAll('div[data-appointment-id]');\r\n+    if (!cards || !cards.length) return;\r\n+\r\n+    cards.forEach((card) => {\r\n+      if (card.querySelector('.agenda-card__actions')) return; // já decorado\r\n+      card.classList.add('agenda-card'); // ativa hover via CSS\r\n+      card.style.position = 'relative';\r\n+\r\n+      const id = card.getAttribute('data-appointment-id') || '';\r\n+      const item = (state.agendamentos || []).find(x => String(x._id) === String(id)) || {};\r\n+      const isPaid = !!item.pago;\r\n+\r\n+      const actions = document.createElement('div');\r\n+      // flex em coluna para ter a “segunda linha” abaixo do '+'\r\n+      actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex flex-col items-end gap-1';\r\n+\r\n+      actions.innerHTML = `\r\n+        <!-- primeira linha: editar + status (mantém seu layout atual lado a lado) -->\r\n+        <div class=\"flex items-center gap-1\">\r\n+          <button class=\"agenda-action edit\" data-id=\"${id}\" title=\"Editar\">\r\n+            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\">\r\n+              <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 0 0 0-1.41L18.37 3.29a1.003 1.003 0 0 0-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.83z\"/>\r\n+            </svg>\r\n+          </button>\r\n+          <button class=\"agenda-action status\" data-id=\"${id}\" title=\"Mudar status\">\r\n+            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n+              <circle cx=\"12\" cy=\"12\" r=\"9\" stroke-width=\"2\"></circle>\r\n+              <path d=\"M12 7v5l3 3\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\r\n+            </svg>\r\n+          </button>\r\n+        </div>\r\n+\r\n+        <!-- segunda linha: ícone de pagamento (abaixo do '+') -->\r\n+        <button class=\"agenda-action cobrar ${isPaid ? 'text-green-600' : 'text-slate-500'}\" data-id=\"${id}\" title=\"${isPaid ? 'Pago' : 'Registrar pagamento'}\">\r\n+          ${\r\n+            isPaid\r\n+              // Cifão normal (Real)\r\n+              ? `<i class=\"fa-solid fa-dollar-sign text-[16px] leading-none\"></i>`\r\n+              // Cifrão com risco (stack do FA para “pendente”)\r\n+              : `<span class=\"fa-stack text-[12px] leading-none\" style=\"width: 1.25em;\">\r\n+                  <i class=\"fa-solid fa-dollar-sign fa-stack-1x\"></i>\r\n+                  <i class=\"fa-solid fa-slash fa-stack-1x\"></i>\r\n+                </span>`\r\n+          }\r\n+        </button>\r\n+      `;\r\n+      card.appendChild(actions);\r\n+    });\r\n+  }\r\n+\r\n+  /* === Drag & Drop na agenda: mover card entre horários/profissionais === */\r\n+  function injectDndStylesOnce() {\r\n+    if (document.getElementById('agenda-dnd-style')) return;\r\n+    const st = document.createElement('style');\r\n+    st.id = 'agenda-dnd-style';\r\n+    st.textContent = `\r\n+      .agenda-card.is-dragging { opacity: .6; }\r\n+      .agenda-drop-target { outline: 2px dashed #0ea5e9; outline-offset: -2px; background: rgba(14,165,233,0.06); }\r\n+    `;\r\n+    document.head.appendChild(st);\r\n+  }\r\n+\r\n+  // PUT rápido para mover agendamento (profissional/horário)\r\n+  async function moveAppointmentQuick(id, payload) {\r\n+      try {\r\n+        const body = {\r\n+          ...payload,\r\n+          storeId: state.selectedStoreId || storeSelect?.value\r\n+        };\r\n+        const resp = await api(`/func/agendamentos/${id}`, {\r\n+          method: 'PUT',\r\n+          headers: { 'Content-Type': 'application/json' },\r\n+          body: JSON.stringify(body)\r\n+        });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao mover agendamento');\r\n+        }\r\n+        await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error('moveAppointmentQuick', e);\r\n+        alert(e.message || 'Não foi possível mover o agendamento.');\r\n+      }\r\n+    }\r\n+\r\n+  function enableDragDrop() {\r\n+      injectDndStylesOnce();\r\n+\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n+\r\n+      // Garante que todos os cards estejam \"arrastáveis\"\r\n+      body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n+        if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n+      });\r\n+\r\n+      // Evita múltiplos binds ao re-renderizar a agenda\r\n+      if (body.__dndDelegated) return;\r\n+      body.__dndDelegated = true;\r\n+\r\n+      // DRAGSTART (captura): funciona mesmo se o usuário começar o arrasto em um filho do card\r\n+      body.addEventListener('dragstart', (ev) => {\r\n+        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+        if (!card || !ev.dataTransfer) return;\r\n+\r\n+        const id = card.getAttribute('data-appointment-id') || '';\r\n+        if (!id) return;\r\n+\r\n+        try { ev.dataTransfer.setData('text/plain', id); } catch (_) {}\r\n+        try { ev.dataTransfer.setDragImage(card, 10, 10); } catch (_) {}\r\n+        ev.dataTransfer.effectAllowed = 'move';\r\n+        card.classList.add('is-dragging');\r\n+      }, true);\r\n+\r\n+      // DRAGEND: limpa estados visuais\r\n+      body.addEventListener('dragend', (ev) => {\r\n+        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n+        if (card) card.classList.remove('is-dragging');\r\n+        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n+      }, true);\r\n+\r\n+      // DRAGOVER: habilita drop quando o ponteiro está sobre QUALQUER filho dentro da célula\r\n+      body.addEventListener('dragover', (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        ev.preventDefault();                 // obrigatório para permitir drop\r\n+        if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n+        slot.classList.add('agenda-drop-target');\r\n+      });\r\n+\r\n+      // DRAGLEAVE: remove realce\r\n+      body.addEventListener('dragleave', (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        slot.classList.remove('agenda-drop-target');\r\n+      });\r\n+\r\n+      // DROP: pega a célula alvo e move (profissional + horário)\r\n+      body.addEventListener('drop', async (ev) => {\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        if (!slot) return;\r\n+        ev.preventDefault();\r\n+        slot.classList.remove('agenda-drop-target');\r\n+\r\n+        const id = ev.dataTransfer?.getData('text/plain');\r\n+        if (!id) return;\r\n+\r\n+        const newProf = slot.dataset.profissionalId;\r\n+        const hh      = slot.dataset.hh; // ex.: \"14:00\"\r\n+        if (!newProf || !hh) return;\r\n+\r\n+        const dateRaw     = normalizeDate(dateInput?.value || todayStr());\r\n+        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n+\r\n+        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n+      });\r\n+  }\r\n+\r\n+  async function loadProfissionais() {\r\n+    if (!state.selectedStoreId) {\r\n+      state.profissionais = [];\r\n+      if (profSelect) profSelect.innerHTML = '';\r\n+      return;\r\n+    }\r\n+\r\n+    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n+    const list = await resp.json().catch(() => []);\r\n+    state.profissionais = Array.isArray(list) ? list : [];\r\n+\r\n+    if (profSelect) {\r\n+      profSelect.innerHTML = state.profissionais\r\n+        .map(p => `<option value=\"${p._id}\">${p.nome}</option>`)\r\n+        .join('');\r\n+    }\r\n+  }\r\n+\r\n+  // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n+  function drawNowLine() {\r\n+      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n+      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n+      if (!body) return;\r\n+\r\n+      body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n+\r\n+      const now = new Date();\r\n+      const minutes = now.getHours() * 60 + now.getMinutes();\r\n+      const percent = minutes / (24 * 60);\r\n+      const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n+\r\n+      const line = document.createElement('div');\r\n+      line.className = 'agenda-nowline';\r\n+      line.style.top = `${y}px`;\r\n+      body.appendChild(line);\r\n+\r\n+      if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n+      window.__agendaNowTimer = setInterval(() => {\r\n+        const now2 = new Date();\r\n+        const minutes2 = now2.getHours() * 60 + now2.getMinutes();\r\n+        const percent2 = minutes2 / (24 * 60);\r\n+        const y2 = Math.max(0, Math.min(1, percent2)) * body.scrollHeight;\r\n+        const ln = body.querySelector('.agenda-nowline');\r\n+        if (ln) ln.style.top = `${y2}px`;\r\n+      }, 60_000);\r\n+  }\r\n+\r\n+  // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n+  async function updateStatusQuick(id, status) {\r\n+      try {\r\n+        const resp = await api(`/func/agendamentos/${id}`, {\r\n+          method: 'PUT',\r\n+          headers: { 'Content-Type': 'application/json' },\r\n+          body: JSON.stringify({ status })\r\n+        });\r\n+        if (!resp.ok) {\r\n+          const err = await resp.json().catch(() => ({}));\r\n+          throw new Error(err.message || 'Erro ao mudar status');\r\n+        }\r\n+        await loadAgendamentos();\r\n+        renderKpis();\r\n+        renderFilters();\r\n+        renderGrid();\r\n+        enhanceAgendaUI();\r\n+      } catch (e) {\r\n+        console.error('updateStatusQuick', e);\r\n+        alert(e.message || 'Erro ao mudar status');\r\n+      }\r\n+    }\r\n+\r\n+    // === Impressão em cupom (80mm) ===\r\n+  function buildCupomHTML(items, meta = {}) {\r\n+    const storeName = (meta.storeName || '').trim();\r\n+    const dateStr   = (meta.dateStr || '').trim();\r\n+\r\n+    const rows = (items || []).map(a => {\r\n+      const pet   = (a.pet || '').toString().trim();\r\n+      const serv  = (a.servico || '').toString().trim();\r\n+      const valor = money(Number(a.valor || 0));\r\n+      // \"Pet Serviço - Valor\" em linha única\r\n+      return `<div class=\"row\"><span class=\"txt\">${pet} ${serv}</span><span class=\"val\">${valor}</span></div>`;\r\n+    }).join('');\r\n+\r\n+    return `\r\n+  <!doctype html>\r\n+  <html>\r\n+  <head>\r\n+    <meta charset=\"utf-8\">\r\n+    <title>Impressão</title>\r\n+    <style>\r\n+      @page { size: 80mm auto; margin: 3mm; }\r\n+      * { box-sizing: border-box; }\r\n+      html, body { padding: 0; margin: 0; }\r\n+      /* Aumenta um pouco o tamanho e usa preto sólido para ganhar contraste na térmica */\r\n+      body {\r\n+        width: 74mm;\r\n+        font: 13px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\";\r\n+        color: #000;\r\n+        -webkit-font-smoothing: none; /* deixa o traço mais “cheio” na impressão */\r\n+        font-weight: 600; /* base mais pesada */\r\n+      }\r\n+      .wrap { padding: 2mm 0; }\r\n+      .h1 { text-align:center; font-weight:700; font-size: 15px; margin-bottom: 1mm; }\r\n+      .meta { text-align:center; font-size: 12px; color:#000; font-weight:700; margin-bottom: 2mm; }\r\n+      .hr { border-top: 1px dashed #000; margin: 2mm 0; }\r\n+      .row { display:flex; align-items:flex-start; justify-content:space-between; gap: 4mm; padding: 1mm 0; }\r\n+      /* Linhas do cupom bem escuras */\r\n+      .row .txt { flex: 1 1 auto; word-break: break-word; font-weight:700; }\r\n+      .row .val { flex: 0 0 auto; white-space: nowrap; font-weight:700; }\r\n+      .foot { text-align:center; margin-top: 2mm; font-size: 12px; color:#000; font-weight:700; }\r\n+      @media print { .no-print { display: none !important; } }\r\n+    </style>\r\n+  </head>\r\n+  <body>\r\n+    <div class=\"wrap\">\r\n+      <div class=\"h1\">Agenda</div>\r\n+      <div class=\"meta\">${storeName ? storeName + ' • ' : ''}${dateStr}</div>\r\n+      <div class=\"hr\"></div>\r\n+      ${rows || '<div class=\"row\"><span class=\"txt\">Sem itens</span><span class=\"val\"></span></div>'}\r\n+      <div class=\"hr\"></div>\r\n+      <div class=\"foot\">Obrigado!</div>\r\n+    </div>\r\n+    <script>\r\n+      window.onload = function(){ setTimeout(function(){ window.print(); }, 50); };\r\n+      window.onafterprint = function(){ setTimeout(function(){ window.close(); }, 50); };\r\n+    </script>\r\n+  </body>\r\n+  </html>`;\r\n+  }\r\n+\r\n+  function handlePrintCupom() {\r\n+    try {\r\n+      const items = getFilteredAgendamentos();\r\n+\r\n+      // Ordena por horário (se houver)\r\n+      items.sort((a, b) => {\r\n+        const da = new Date(a.h || a.scheduledAt || 0).getTime();\r\n+        const db = new Date(b.h || b.scheduledAt || 0).getTime();\r\n+        return da - db;\r\n+      });\r\n+\r\n+      const dateStr =\r\n+        (document.getElementById('agenda-date-label-visible')?.textContent || '').trim() ||\r\n+        new Date((normalizeDate(dateInput?.value || todayStr())) + 'T00:00:00').toLocaleDateString('pt-BR');\r\n+\r\n+      const storeName =\r\n+        (document.getElementById('agenda-store-label-visible')?.textContent || '').trim();\r\n+\r\n+      const html = buildCupomHTML(items, { storeName, dateStr });\r\n+\r\n+      const w = window.open('', 'print_cupom', 'width=420,height=600');\r\n+      if (!w) { alert('O navegador bloqueou a janela de impressão. Habilite pop-ups para continuar.'); return; }\r\n+      w.document.open('text/html');\r\n+      w.document.write(html);\r\n+      w.document.close();\r\n+      w.focus();\r\n+    } catch (e) {\r\n+      console.error('handlePrintCupom', e);\r\n+      alert('Não foi possível preparar a impressão.');\r\n+    }\r\n+  }\r\n+\r\n+  // Events\r\n+  addBtn?.addEventListener('click', openAddModal);\r\n+  modalClose?.addEventListener('click', closeModal);\r\n+  modalCancel?.addEventListener('click', closeModal);\r\n+  modalSave?.addEventListener('click', saveAgendamento);\r\n+\r\n+  addStoreSelect?.addEventListener('change', () => {\r\n+    const sid = addStoreSelect.value;\r\n+    const current = profSelect?.value || '';\r\n+    populateModalProfissionais(sid, current);\r\n+  });\r\n+\r\n+  // Botão \"Imprimir\" — cupom 80mm com \"Pet Serviço - Valor\"\r\n+    (function () {\r\n+      const btn0 = document.getElementById('print-agenda-btn');\r\n+      // (se algum listener antigo ainda existir em outro build, garantimos o nosso fluxo)\r\n+      if (btn0) {\r\n+        // remove listeners antigos (se houver) clonando o nó\r\n+        const clone = btn0.cloneNode(true);\r\n+        btn0.parentNode.replaceChild(clone, btn0);\r\n+        clone.addEventListener('click', (ev) => {\r\n+          ev.preventDefault();\r\n+          ev.stopImmediatePropagation?.();\r\n+          handlePrintCupom();\r\n+        });\r\n+      }\r\n+    })();\r\n+\r\n+  cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n+  servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n+\r\n+  addServAddBtn?.addEventListener('click', (e) => {\r\n+    e.preventDefault();\r\n+    const s = state.selectedServico;\r\n+    const v = Number(valorInput?.value || 0);\r\n+    if (!s || !s._id) { alert('Escolha um serviço na busca.'); return; }\r\n+    if (!(v >= 0)) { alert('Valor inválido.'); return; }\r\n+    state.tempServicos.push({ _id: s._id, nome: s.nome, valor: v });\r\n+    // limpa seleção\r\n+    state.selectedServico = null;\r\n+    if (servInput)  servInput.value = '';\r\n+    if (valorInput) valorInput.value = '';\r\n+    renderServicosLista();\r\n+  });\r\n+\r\n+  modalDelete?.addEventListener('click', handleDelete);\r\n+\r\n+  // Ações rápidas nos cartões (delegação no container da agenda)\r\n+  agendaList?.addEventListener('click', (ev) => {\r\n+    // toggle do menu mobile\r\n+    const more = ev.target.closest('.agenda-card__more');\r\n+    if (more) {\r\n+      const holder = more.parentElement?.querySelector('.agenda-card__actions');\r\n+      if (holder) holder.classList.toggle('hidden');\r\n+      return;\r\n+    }\r\n+\r\n+    const btn = ev.target.closest('.agenda-action');\r\n+    if (!btn) return;\r\n+    const id = btn.getAttribute('data-id');\r\n+    if (!id) return;\r\n+\r\n+    if (btn.classList.contains('edit')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      if (item) openEditModal(item);\r\n+    } else if (btn.classList.contains('status')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+      const cur = (item && item.status) || 'agendado';\r\n+      const next = chain[(chain.indexOf(cur) + 1) % chain.length];\r\n+      updateStatusQuick(id, next);\r\n+    } else if (btn.classList.contains('cobrar')) {\r\n+      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+      if (item) openEditModal(item); // reaproveite seu modal/fluxo de cobrança\r\n+    }\r\n+  });\r\n+\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    updateStoreLabel();\r\n+    state.__didInitialScroll = false;     // nova loja -> recalcula scroll\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;     // nova data -> permite auto-scroll\r\n+    await loadAgendamentos();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  // Boot\r\n+  function setupShortcuts() {\r\n+    document.addEventListener('keydown', (e) => {\r\n+      if (e.target && ['INPUT','SELECT','TEXTAREA'].includes(e.target.tagName)) return; // não atrapalhar digitação\r\n+      if (e.key === 't' || e.key === 'T') {\r\n+        if (dateInput) {\r\n+          dateInput.value = todayStr();\r\n+          state.__didInitialScroll = false;\r\n+          loadAgendamentos().then(() => {\r\n+            renderKpis(); renderFilters(); renderGrid(); enhanceAgendaUI();\r\n+          });\r\n+        }\r\n+      }\r\n+      if (e.key === 'n' || e.key === 'N') {\r\n+        e.preventDefault();\r\n+        openAddModal();\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  (async function init() {\r\n+    if (!dateInput?.value) dateInput.value = todayStr();\r\n+    if (viewSelect && !viewSelect.value) viewSelect.value = 'day';\r\n+    state.view = (viewSelect?.value) || 'day';\r\n+\r\n+    loadFiltersFromStorage();\r\n+    await loadStores();\r\n+    if (!state.selectedStoreId && storeSelect?.value) {\r\n+      state.selectedStoreId = storeSelect.value;\r\n+    }\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+\r\n+    ensureToolbar();\r\n+    ensureTodayButton();\r\n+    setupShortcuts();\r\n+\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  })();\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  viewSelect?.addEventListener('change', async () => {\r\n+    state.view = viewSelect.value || 'day';\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  // Atualizações após troca de loja/data/status etc.\r\n+  storeSelect?.addEventListener('change', async () => {\r\n+    state.selectedStoreId = storeSelect.value;\r\n+    updateStoreLabel();\r\n+    state.__didInitialScroll = false;\r\n+    await loadProfissionais();\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+\r\n+  dateInput?.addEventListener('change', async () => {\r\n+    state.__didInitialScroll = false;\r\n+    await loadAgendamentos();\r\n+    renderKpis();\r\n+    renderFilters();\r\n+    renderGrid();\r\n+    enhanceAgendaUI();\r\n+  });\r\n+})();\r\n"
                },
                {
                    "date": 1757616798919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2068,2074 +2068,4 @@\n     renderGrid();\r\n     enhanceAgendaUI();\r\n   });\r\n })();\r\n-(function () {\r\n-  // Helper para requisições com token\r\n-  const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token || null;\r\n-  function api(url, opts = {}) {\r\n-    return fetch(`${API_CONFIG.BASE_URL}${url}`, {\r\n-      ...opts,\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        ...(opts.headers || {}),\r\n-        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  // Elements\r\n-  const agendaList = document.getElementById('agenda-list');\r\n-  const dateInput = document.getElementById('agenda-date');\r\n-  const dateLabelVisible = document.getElementById('agenda-date-label-visible');\r\n-  const viewSelect = document.getElementById('agenda-view');\r\n-  const addBtn = document.getElementById('add-service-btn');\r\n-  const storeSelect = document.getElementById('agenda-store');\r\n-  const storeLabelVisible = document.getElementById('agenda-store-label-visible');\r\n-\r\n-  // Modal (reutilizado p/ adicionar e editar)\r\n-  const modal = document.getElementById('modal-add-servico');\r\n-  const modalClose = document.getElementById('modal-add-close');\r\n-  const modalCancel = document.getElementById('modal-add-cancel');\r\n-  const modalSave = document.getElementById('modal-add-save');\r\n-  const modalDelete = document.getElementById('modal-add-delete');\r\n-\r\n-  const addStoreSelect = document.getElementById('add-store-select');\r\n-  const addDateInput   = document.getElementById('add-date');\r\n-  const statusSelect   = document.getElementById('add-status');\r\n-\r\n-  const cliInput = document.getElementById('add-cli-input');\r\n-  const cliSug = document.getElementById('add-cli-sug');\r\n-  const petSelect = document.getElementById('add-pet-select');\r\n-  const servInput   = document.getElementById('add-serv-input');\r\n-  const servSug     = document.getElementById('add-serv-sug');\r\n-  const valorInput  = document.getElementById('add-valor');\r\n-  const addServAddBtn = document.getElementById('add-serv-add-btn');\r\n-  const servListUL  = document.getElementById('add-serv-list');\r\n-  const servTotalEl = document.getElementById('add-serv-total');\r\n-  const obsInput   = document.getElementById('add-observacoes');\r\n-  const horaInput   = document.getElementById('add-hora');\r\n-  const profSelect  = document.getElementById('add-prof-select');\r\n-\r\n-  // State\r\n-  const FILTER_STORAGE_KEY = 'agenda_filters_v1';\r\n-\r\n-  const state = {\r\n-    stores: [],\r\n-    profissionais: [],\r\n-    agendamentos: [],\r\n-    selectedStoreId: null,\r\n-    selectedCliente: null,\r\n-    selectedServico: null,\r\n-    tempServicos: [],\r\n-    editing: null,\r\n-    lastSnapshotHash: '',\r\n-    __didInitialScroll: false,\r\n-    view: 'day',\r\n-    filters: {                 // filtros persistentes\r\n-      statuses: new Set(),     // valores: agendado, em_espera, em_atendimento, finalizado\r\n-      profIds: new Set()       // _id dos profissionais\r\n-    }\r\n-  };\r\n-\r\n-  function loadFiltersFromStorage() {\r\n-    try {\r\n-      const raw = JSON.parse(localStorage.getItem(FILTER_STORAGE_KEY) || 'null');\r\n-      if (raw && typeof raw === 'object') {\r\n-        state.filters.statuses = new Set(Array.isArray(raw.statuses) ? raw.statuses : []);\r\n-        state.filters.profIds  = new Set(Array.isArray(raw.profIds)  ? raw.profIds  : []);\r\n-      }\r\n-    } catch(_) {}\r\n-  }\r\n-  function saveFiltersToStorage() {\r\n-    try {\r\n-      localStorage.setItem(FILTER_STORAGE_KEY, JSON.stringify({\r\n-        statuses: Array.from(state.filters.statuses),\r\n-        profIds : Array.from(state.filters.profIds)\r\n-      }));\r\n-    } catch(_) {}\r\n-  }\r\n-\r\n-  function ensureToolbar() {\r\n-    if (!agendaList) return;\r\n-    if (document.getElementById('agenda-toolbar')) return;\r\n-\r\n-    const bar = document.createElement('div');\r\n-    bar.id = 'agenda-toolbar';\r\n-    // sticky sob o cabeçalho; leve blur para legibilidade; borda inferior discreta\r\n-    bar.className = 'sticky top-0 z-30 bg-white/90 backdrop-blur supports-[backdrop-filter]:bg-white/60 border-b border-slate-200 mb-2 flex flex-col gap-2 px-3 py-2 rounded-lg';\r\n-\r\n-    // KPIs\r\n-    const kpis = document.createElement('div');\r\n-    kpis.id = 'agenda-kpis';\r\n-    kpis.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(kpis);\r\n-\r\n-    // Filtros\r\n-    const filters = document.createElement('div');\r\n-    filters.id = 'agenda-filters';\r\n-    filters.className = 'flex flex-wrap items-center gap-2';\r\n-    bar.appendChild(filters);\r\n-\r\n-    agendaList.parentElement.insertBefore(bar, agendaList); // antes da grade\r\n-  }\r\n-\r\n-  function computeKPIs(items) {\r\n-    const total = items.length;\r\n-    const previsto = items.reduce((s, i) => s + Number(i.valor || 0), 0);\r\n-    const recebido = items.reduce((s, i) => s + (i.pago ? Number(i.valor || 0) : 0), 0);\r\n-    const pendente = previsto - recebido;\r\n-    return { total, previsto, recebido, pendente };\r\n-  }\r\n-\r\n-  function renderKpis() {\r\n-    const wrap = document.getElementById('agenda-kpis');\r\n-    if (!wrap) return;\r\n-\r\n-    const all = state.agendamentos || [];\r\n-    const f = getFilteredAgendamentos();   // filtrados atuais\r\n-    const kAll = computeKPIs(all);\r\n-    const kF   = computeKPIs(f);\r\n-\r\n-    const totalLabel = state.view === 'week' ? 'Total semana' : (state.view === 'month' ? 'Total mês' : 'Total dia');\r\n-    wrap.innerHTML = `\r\n-      <div class=\"kpi-chip\">${totalLabel}: <strong>${kAll.total}</strong></div>\r\n-      <div class=\"kpi-chip\">Previsto: <strong>${money(kAll.previsto)}</strong></div>\r\n-      <div class=\"kpi-chip\">Recebido: <strong>${money(kAll.recebido)}</strong></div>\r\n-      <div class=\"kpi-chip\">Pendente: <strong>${money(kAll.pendente)}</strong></div>\r\n-      ${ (state.filters.statuses.size || state.filters.profIds.size)\r\n-          ? `<div class=\"kpi-chip kpi-muted\">Filtrados: <strong>${kF.total}</strong></div>` : '' }\r\n-    `;\r\n-  }\r\n-\r\n-  function renderFilters() {\r\n-    const el = document.getElementById('agenda-filters');\r\n-    if (!el) return;\r\n-\r\n-    // contadores por status\r\n-    const counts = { agendado:0, em_espera:0, em_atendimento:0, finalizado:0 };\r\n-    for (const a of (state.agendamentos || [])) {\r\n-      const key = String(a.status || 'agendado')\r\n-        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-        .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n-      if (counts[key] !== undefined) counts[key] += 1;\r\n-    }\r\n-\r\n-    // contadores por profissional\r\n-    const byProf = new Map();\r\n-    for (const a of (state.agendamentos || [])) {\r\n-      const id = a.profissionalId || (a.profissional && a.profissional._id) || null;\r\n-      if (!id) continue;\r\n-      const key = String(id);\r\n-      byProf.set(key, (byProf.get(key) || 0) + 1);\r\n-    }\r\n-\r\n-    const statuses = [\r\n-      {key:'agendado', label:'Agend.'},\r\n-      {key:'em_espera', label:'Espera'},\r\n-      {key:'em_atendimento', label:'Atend.'},\r\n-      {key:'finalizado', label:'Fim.'}\r\n-    ];\r\n-\r\n-    // chips de status\r\n-    const chipsStatus = statuses.map(s => {\r\n-      const active = state.filters.statuses.has(s.key) ? 'chip-active' : '';\r\n-      return `<button class=\"chip ${active}\" data-filter=\"status\" data-value=\"${s.key}\">\r\n-                ${s.label} <span class=\"chip-badge\">${counts[s.key]}</span>\r\n-              </button>`;\r\n-    }).join('');\r\n-\r\n-    // chips de profissional (apenas os que existem)\r\n-    const chipsProf = (state.profissionais || []).map(p => {\r\n-      const id = String(p._id);\r\n-      const active = state.filters.profIds.has(id) ? 'chip-active' : '';\r\n-      const n = byProf.get(id) || 0;\r\n-      return `<button class=\"chip ${active}\" data-filter=\"prof\" data-value=\"${id}\" title=\"${p.nome}\">\r\n-                ${p.nome} <span class=\"chip-badge\">${n}</span>\r\n-              </button>`;\r\n-    }).join('');\r\n-\r\n-    const clearBtn = (state.filters.statuses.size || state.filters.profIds.size)\r\n-      ? `<button id=\"chip-clear\" class=\"chip chip-clear\" title=\"Limpar filtros\">Limpar</button>` : '';\r\n-\r\n-    el.innerHTML = `\r\n-      <div class=\"flex flex-wrap items-center gap-2\">\r\n-        ${chipsStatus}\r\n-        <span class=\"chip-sep\"></span>\r\n-        ${chipsProf}\r\n-        ${clearBtn}\r\n-      </div>\r\n-    `;\r\n-\r\n-    // handlers\r\n-    el.querySelectorAll('.chip[data-filter]').forEach(btn => {\r\n-      btn.addEventListener('click', () => {\r\n-        const type = btn.getAttribute('data-filter');\r\n-        const val  = btn.getAttribute('data-value');\r\n-        if (type === 'status') {\r\n-          state.filters.statuses.has(val) ? state.filters.statuses.delete(val) : state.filters.statuses.add(val);\r\n-        } else if (type === 'prof') {\r\n-          state.filters.profIds.has(val) ? state.filters.profIds.delete(val) : state.filters.profIds.add(val);\r\n-        }\r\n-        saveFiltersToStorage();\r\n-        renderFilters();\r\n-        renderKpis();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      });\r\n-    });\r\n-\r\n-    const clear = document.getElementById('chip-clear');\r\n-    if (clear) clear.addEventListener('click', () => {\r\n-      state.filters.statuses.clear();\r\n-      state.filters.profIds.clear();\r\n-      saveFiltersToStorage();\r\n-      renderFilters();\r\n-      renderKpis();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    });\r\n-  }\r\n-\r\n-  function normalizeStatus(s) {\r\n-    return String(s || 'agendado')\r\n-      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-      .trim().toLowerCase().replace(/[-\\s]+/g,'_');\r\n-  }\r\n-\r\n-  function getFilteredAgendamentos() {\r\n-    const hasStatus = state.filters.statuses.size > 0;\r\n-    const hasProf   = state.filters.profIds.size   > 0;\r\n-\r\n-    if (!hasStatus && !hasProf) return state.agendamentos || [];\r\n-\r\n-    const byNameAll = new Map(\r\n-      (state.profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\r\n-    );\r\n-\r\n-    return (state.agendamentos || []).filter(a => {\r\n-      let ok = true;\r\n-      if (hasStatus) ok = ok && state.filters.statuses.has(normalizeStatus(a.status));\r\n-      if (hasProf) {\r\n-        let pid = a.profissionalId ? String(a.profissionalId) : null;\r\n-        if (!pid) {\r\n-          let nc = '';\r\n-          if (typeof a.profissional === 'string') nc = a.profissional;\r\n-          else if (a.profissional && typeof a.profissional === 'object') {\r\n-            nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\r\n-                a.profissional.razaoSocial || a.profissional.nome || '';\r\n-          }\r\n-          pid = byNameAll.get(String(nc).trim().toLowerCase()) || null;\r\n-        }\r\n-        ok = ok && pid && state.filters.profIds.has(String(pid));\r\n-      }\r\n-      return ok;\r\n-    });\r\n-  }\r\n-\r\n-  function getVisibleProfissionais() {\r\n-    const profs = state.profissionais || [];\r\n-    if (!state.filters.profIds.size) return profs;\r\n-    return profs.filter(p => state.filters.profIds.has(String(p._id)));\r\n-  }\r\n-\r\n-  // Helpers de data e utilitários\r\n-  function todayStr() {\r\n-    // Gera YYYY-MM-DD respeitando o fuso local (corrige drift UTC)\r\n-    const d = new Date();\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function pad(n) { return n < 10 ? '0' + n : '' + n; }\r\n-  function buildLocalDateTime(dateStr, hhmm) {\r\n-    let y, m, d;\r\n-    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) { [d, m, y] = dateStr.split('/').map(Number); }\r\n-    else { [y, m, d] = dateStr.split('-').map(Number); }\r\n-    const [hh, mm] = (hhmm || '00:00').split(':').map(Number);\r\n-    return new Date(y, m - 1, d, hh, mm, 0, 0);\r\n-  }\r\n-  function normalizeDate(v) {\r\n-    if (!v) return todayStr();\r\n-    if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\r\n-    return v;\r\n-  }\r\n-\r\n-  // ==== NOVO: utilitários de intervalo e label ====\r\n-  function startOfWeek(dateStr) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    const dow = (d.getDay() + 6) % 7; // 0 = seg\r\n-    d.setDate(d.getDate() - dow);\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function addDays(dateStr, n) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    d.setDate(d.getDate() + n);\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function startOfMonth(dateStr) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    d.setDate(1);\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function startOfNextMonth(dateStr) {\r\n-    const d = new Date(dateStr + 'T00:00:00');\r\n-    d.setDate(1);\r\n-    d.setMonth(d.getMonth() + 1);\r\n-    d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\r\n-    return d.toISOString().slice(0, 10);\r\n-  }\r\n-  function updateHeaderLabel() {\r\n-    if (!dateLabelVisible) return;\r\n-    const base = normalizeDate(dateInput?.value || todayStr());\r\n-    if (state.view === 'week') {\r\n-      const ini = startOfWeek(base);\r\n-      const fim = addDays(ini, 6);\r\n-      const li = new Date(ini + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-      const lf = new Date(fim + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-      dateLabelVisible.textContent = `${li} a ${lf}`;\r\n-    } else if (state.view === 'month') {\r\n-      const m0 = startOfMonth(base);\r\n-      const dt = new Date(m0 + 'T00:00:00');\r\n-      const label = dt.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });\r\n-      dateLabelVisible.textContent = label.charAt(0).toUpperCase() + label.slice(1);\r\n-    } else {\r\n-      dateLabelVisible.textContent = new Date(base + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-    }\r\n-  }\r\n-  function localDateStr(d) {\r\n-    const y = d.getFullYear();\r\n-    const m = String(d.getMonth() + 1).padStart(2, '0');\r\n-    const dd = String(d.getDate()).padStart(2, '0');\r\n-    return `${y}-${m}-${dd}`;\r\n-  }\r\n-\r\n-  // === NOVO: abrevia tutor para \"Primeiro Sob..\" ===\r\n-  function shortTutorName(name) {\r\n-    if (!name) return '';\r\n-    const parts = String(name).trim().split(/\\s+/);\r\n-    const cap = s => s ? (s[0].toUpperCase() + s.slice(1).toLowerCase()) : '';\r\n-    const preps = new Set(['da','de','do','das','dos','e']);\r\n-    const first = cap(parts[0] || '');\r\n-    let second = '';\r\n-    for (let i = 1; i < parts.length; i++) {\r\n-      const w = parts[i];\r\n-      if (!preps.has(w.toLowerCase())) { second = w; break; }\r\n-    }\r\n-    const secondAbbr = second ? cap(second).slice(0, 3) : '';\r\n-    return secondAbbr ? `${first} ${secondAbbr}..` : first;\r\n-  }\r\n-\r\n-  function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\r\n-  function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\r\n-  function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\r\n-\r\n-  // Stores\r\n-  async function loadStores() {\r\n-    const resp = await fetch(`${API_CONFIG.BASE_URL}/stores`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    state.stores = Array.isArray(list) ? list : [];\r\n-    if (storeSelect) {\r\n-      storeSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-    }\r\n-    if (!state.selectedStoreId && state.stores[0]) {\r\n-      state.selectedStoreId = state.stores[0]._id;\r\n-      if (storeSelect) storeSelect.value = state.selectedStoreId;\r\n-    }\r\n-    updateStoreLabel();\r\n-  }\r\n-  function updateStoreLabel() {\r\n-    const s = state.stores.find(x => x._id === state.selectedStoreId);\r\n-    if (storeLabelVisible) storeLabelVisible.textContent = s ? s.nome : '—';\r\n-    const vis = document.getElementById('agenda-store-label-visible');\r\n-    if (vis) vis.textContent = s ? s.nome : '—';\r\n-  }\r\n-\r\n-  // Profissionais\r\n-  async function populateModalProfissionais(storeId, preselectId) {\r\n-    try {\r\n-      if (!storeId || !profSelect) return;\r\n-      const resp = await api(`/func/profissionais/esteticistas?storeId=${storeId}`);\r\n-      const list = await resp.json().catch(() => []);\r\n-      const arr = Array.isArray(list) ? list : [];\r\n-      profSelect.innerHTML = arr.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-      const pid = preselectId ? String(preselectId) : '';\r\n-      if (pid && arr.some(p => String(p._id) === pid)) {\r\n-        profSelect.value = pid;\r\n-      } else if (arr[0]) {\r\n-        profSelect.value = String(arr[0]._id);\r\n-      }\r\n-    } catch (_) { /* silencioso no modal */ }\r\n-  }\r\n-\r\n-  // Agendamentos\r\n-  async function loadAgendamentos() {\r\n-    const base = normalizeDate(dateInput?.value || todayStr());\r\n-    const date = base; // compat: alguns trechos antigos ainda usam \"date\"\r\n-    let url = '';\r\n-\r\n-    if (state.view === 'week') {\r\n-      const ini = startOfWeek(base);\r\n-      const fim = addDays(ini, 7); // exclusivo\r\n-      url = `/func/agendamentos/range?start=${ini}&end=${fim}&storeId=${state.selectedStoreId}`;\r\n-    } else if (state.view === 'month') {\r\n-      const m0 = startOfMonth(base);\r\n-      const m1 = startOfNextMonth(base); // exclusivo\r\n-      url = `/func/agendamentos/range?start=${m0}&end=${m1}&storeId=${state.selectedStoreId}`;\r\n-    } else {\r\n-      url = `/func/agendamentos?date=${base}&storeId=${state.selectedStoreId}`;\r\n-    }\r\n-\r\n-    try {\r\n-      const resp = await api(url);\r\n-      if (!resp.ok) {\r\n-        const txt = await resp.text();\r\n-        console.error('GET', url, '->', resp.status, txt);\r\n-        state.agendamentos = [];\r\n-        return;\r\n-      }\r\n-\r\n-      const list = await resp.json();\r\n-      state.agendamentos = Array.isArray(list) ? list : [];\r\n-\r\n-      // snapshot/label\r\n-      updateHeaderLabel();\r\n-      state.lastSnapshotHash = `${state.view}:${date}:${state.selectedStoreId || ''}:${state.agendamentos.length}`;\r\n-\r\n-      console.info('[Agenda]', 'view=', state.view, 'dataBase=', date, 'loja=', state.selectedStoreId, 'itens=', state.agendamentos.length);\r\n-    } catch (e) {\r\n-      console.error('Erro ao carregar agendamentos', e);\r\n-      state.agendamentos = [];\r\n-    }\r\n-  }\r\n-\r\n-  // Grade (sem coluna \"Outros\")\r\n-  function renderGrid() {\r\n-      if (!agendaList) return;\r\n-      if (state.view === 'week')  { renderWeekGrid();  return; }\r\n-      if (state.view === 'month') { renderMonthGrid(); return; }\r\n-\r\n-      // ===== Visão DIÁRIA (original) =====\r\n-      const date = normalizeDate(dateInput?.value || todayStr());\r\n-      updateHeaderLabel();\r\n-\r\n-      // janelas de trabalho (ajuste se quiser)\r\n-      const BUSINESS_START = 8;   // 08:00\r\n-      const BUSINESS_END   = 19;  // 19:00\r\n-\r\n-      const hours = [];\r\n-      for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n-\r\n-      clearChildren(agendaList);\r\n-\r\n-      const profsAll  = state.profissionais || [];\r\n-      const profs     = getVisibleProfissionais();\r\n-      const byNameAll = new Map((profsAll || []).map(p => [String(p.nome || '').trim().toLowerCase(), p._id]));\r\n-\r\n-      const colCount = 1 + (profs?.length || 0);\r\n-\r\n-      // Cabeçalho\r\n-      const header = document.createElement('div');\r\n-      header.style.display = 'grid';\r\n-      // >>> COLUNAS ELÁSTICAS: ocupam o espaço restante sem “vão” à direita\r\n-      header.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n-      header.className = 'bg-white border-b';\r\n-\r\n-      const headLabels = ['Hora', ...profs.map(p => p.nome)];\r\n-      headLabels.forEach((label, idx) => {\r\n-        const cell = document.createElement('div');\r\n-        cell.className = 'px-3 py-2 text-xs font-medium text-slate-600';\r\n-        if (idx === 0) {\r\n-          cell.textContent = label;\r\n-        }\r\n-        else {\r\n-          // >>> centraliza o nome do profissional\r\n-          cell.style.textAlign = 'center';\r\n-          const span = document.createElement('span');\r\n-          span.className = 'agenda-head-label inline-block';\r\n-          span.textContent = label || '';\r\n-          cell.dataset.profId = String(profs[idx - 1]._id);\r\n-          cell.appendChild(span);\r\n-        }\r\n-        header.appendChild(cell);\r\n-      });\r\n-\r\n-      const counter = document.createElement('div');\r\n-      counter.className = 'col-span-full text-right px-3 py-1 text-xs text-slate-500';\r\n-      const itemsAll = state.agendamentos || [];\r\n-      const items    = getFilteredAgendamentos(itemsAll);\r\n-      const filtered = (state.filters.statuses.size || state.filters.profIds.size) ? ` (filtrados: ${items.length})` : '';\r\n-      counter.textContent = `Agendamentos: ${itemsAll.length}${filtered}`;\r\n-      header.appendChild(counter);\r\n-\r\n-      agendaList.appendChild(header);\r\n-\r\n-      // Corpo\r\n-      const body = document.createElement('div');\r\n-      body.style.display = 'grid';\r\n-      // >>> COLUNAS ELÁSTICAS: cada profissional tem no mínimo 360px e expande até preencher\r\n-      body.style.gridTemplateColumns = `120px repeat(${Math.max(colCount - 1, 0)}, minmax(var(--agenda-col-w, 360px), 1fr))`;\r\n-      agendaList.appendChild(body);\r\n-\r\n-      const isToday = normalizeDate(date) === todayStr();\r\n-      const now = new Date();\r\n-      const nowHH = `${pad(now.getHours())}:00`;\r\n-\r\n-      hours.forEach(hh => {\r\n-        const hourNumber = parseInt(hh.split(':')[0], 10);\r\n-        const inBusiness = hourNumber >= BUSINESS_START && hourNumber < BUSINESS_END;\r\n-        const isNowRow   = isToday && hh === nowHH;\r\n-\r\n-        // coluna de horário\r\n-        const timeCell = document.createElement('div');\r\n-        timeCell.className = 'px-3 py-3 border-b text-sm ' + (isNowRow ? 'bg-sky-50 text-slate-800 font-medium' : 'bg-gray-50 text-gray-600');\r\n-        timeCell.textContent = hh;\r\n-\r\n-        body.appendChild(timeCell);\r\n-\r\n-        // células por profissional\r\n-        (profs || []).forEach(p => {\r\n-          const cell = document.createElement('div');\r\n-          // agenda-slot mantém sublinha; realces por horário útil e hora atual\r\n-          cell.className = `px-2 py-2 border-b agenda-slot ${inBusiness ? '' : 'bg-slate-50'} ${isNowRow ? 'bg-sky-50' : ''}`;\r\n-          cell.dataset.profissionalId = String(p._id);\r\n-          cell.dataset.hh = hh;\r\n-          body.appendChild(cell);\r\n-        });\r\n-      });\r\n-\r\n-      // posiciona cartões\r\n-      let placed = 0;\r\n-      for (const a of items) {\r\n-        const when = a.h || a.scheduledAt;\r\n-        if (!when) continue;\r\n-\r\n-        const d  = new Date(when);\r\n-        const hh = `${pad(d.getHours())}:00`;\r\n-\r\n-        let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-        if (!profId) {\r\n-          let nameCandidate = '';\r\n-          if (typeof a.profissional === 'string') nameCandidate = a.profissional;\r\n-          else if (a.profissional && typeof a.profissional === 'object') nameCandidate = a.profissional.nome || '';\r\n-          const normalized = String(nameCandidate || '').trim().toLowerCase();\r\n-          if (normalized && byNameAll.has(normalized)) profId = String(byNameAll.get(normalized));\r\n-        }\r\n-        if (!profId) continue;\r\n-\r\n-        let col = body.querySelector(`div[data-profissional-id=\"${profId}\"][data-hh=\"${hh}\"]`);\r\n-        if (!col && profs[0]) {\r\n-          col = body.querySelector(`div[data-profissional-id=\"${profs[0]._id}\"][data-hh=\"${hh}\"]`);\r\n-        }\r\n-        if (!col) continue;\r\n-\r\n-        const meta = statusMeta(a.status);\r\n-        const card = document.createElement('div');\r\n-        card.setAttribute('data-appointment-id', a._id || '');\r\n-        card.style.setProperty('--stripe', meta.stripe);\r\n-        card.style.setProperty('--card-max-w', '260px');\r\n-        card.className = `agenda-card border ${meta.borderClass} cursor-move select-none`;\r\n-        card.setAttribute('draggable', 'true');\r\n-\r\n-        const headerEl = document.createElement('div');\r\n-        // reserva espaço à direita para os botões flutuantes (evita o chip “ficar por baixo”)\r\n-        headerEl.className = 'flex items-center justify-between gap-2 pr-14 md:pr-16 mb-1';\r\n-\r\n-        // usa o nome do cliente que já vem da API (clienteNome); fallback mantém o comportamento antigo\r\n-        const tutorShort = shortTutorName(a.clienteNome || '');\r\n-        const headLabel  = tutorShort ? `${tutorShort} | ${a.pet || ''}` : (a.pet || '');\r\n-\r\n-        headerEl.innerHTML = `\r\n-          <div class=\"font-semibold text-sm text-gray-900 truncate\" title=\"${headLabel}\">${headLabel}</div>\r\n-          ${renderStatusBadge(a.status)}\r\n-        `;\r\n-\r\n-        const bodyEl = document.createElement('div');\r\n-        if (a.observacoes && String(a.observacoes).trim()) {\r\n-          const svc = document.createElement('div');\r\n-          svc.className = 'text-[13px] text-gray-600 clamp-2';\r\n-          svc.textContent = a.servico || '';\r\n-          const obs = document.createElement('div');\r\n-          obs.className = 'mt-1 text-[12px] text-gray-700 italic clamp-2';\r\n-          obs.textContent = String(a.observacoes).trim();\r\n-          bodyEl.appendChild(svc);\r\n-          bodyEl.appendChild(obs);\r\n-        } else {\r\n-          bodyEl.className = 'text-[13px] text-gray-600 clamp-2';\r\n-          bodyEl.textContent = a.servico || '';\r\n-        }\r\n-\r\n-        const footerEl = document.createElement('div');\r\n-        footerEl.className = 'flex items-center justify-end gap-2 pt-1';\r\n-        const price = document.createElement('div');\r\n-        price.className = 'text-[13px] text-gray-800 font-medium';\r\n-        price.textContent = money(a.valor);\r\n-\r\n-        footerEl.appendChild(price);\r\n-\r\n-        card.appendChild(headerEl);\r\n-        card.appendChild(bodyEl);\r\n-        card.appendChild(footerEl);\r\n-\r\n-        col.appendChild(card);\r\n-        placed++;\r\n-      }\r\n-\r\n-      if (placed === 0) {\r\n-        const empty = document.createElement('div');\r\n-        empty.className = 'px-4 py-3 text-sm text-slate-600 bg-slate-50 border-b';\r\n-        empty.textContent = 'Sem agendamentos para este filtro/dia.';\r\n-        agendaList.insertBefore(empty, header.nextSibling);\r\n-      }\r\n-  }\r\n-\r\n-  /** ===== NOVO: visão semanal ===== */\r\n-  function renderWeekGrid() {\r\n-    const base = normalizeDate(dateInput?.value || todayStr());\r\n-    const ini  = startOfWeek(base);\r\n-    const days = Array.from({ length: 7 }, (_, i) => addDays(ini, i));\r\n-    updateHeaderLabel();\r\n-\r\n-    clearChildren(agendaList);\r\n-\r\n-    // Cabeçalho: horários + 7 dias\r\n-    const BUSINESS_START = 8, BUSINESS_END = 19;\r\n-    const hours = []; for (let h = 0; h < 24; h++) hours.push(`${pad(h)}:00`);\r\n-\r\n-    const header = document.createElement('div');\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n-    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n-    header.innerHTML = `\r\n-      <div class=\"px-2 py-2 text-xs text-slate-500\">Horário</div>\r\n-      ${days.map(d=>{\r\n-        const lab = new Date(d+'T00:00:00').toLocaleDateString('pt-BR', { weekday:'short', day:'2-digit', month:'2-digit' });\r\n-        return `<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${lab}</div>`;\r\n-      }).join('')}\r\n-    `;\r\n-    agendaList.appendChild(header);\r\n-\r\n-    const body = document.createElement('div');\r\n-    body.style.display = 'grid';\r\n-    body.style.gridTemplateColumns = `120px repeat(7, minmax(180px,1fr))`;\r\n-    agendaList.appendChild(body);\r\n-\r\n-    // Linhas por hora\r\n-    hours.forEach(hh => {\r\n-      const hNum = parseInt(hh.slice(0,2),10);\r\n-      const inBusiness = (hNum>=BUSINESS_START && hNum< BUSINESS_END);\r\n-\r\n-      const timeCell = document.createElement('div');\r\n-      timeCell.className = `px-2 py-2 border-b text-[12px] ${inBusiness?'text-slate-800':'text-slate-400'}`;\r\n-      timeCell.textContent = hh;\r\n-      body.appendChild(timeCell);\r\n-\r\n-      days.forEach(d=>{\r\n-        const cell = document.createElement('div');\r\n-        cell.className = 'px-2 py-2 border-b agenda-slot';\r\n-        cell.dataset.day = d;\r\n-        cell.dataset.hh  = hh;\r\n-        body.appendChild(cell);\r\n-      });\r\n-    });\r\n-\r\n-    // Posiciona cartões (compactos)\r\n-    const items = getFilteredAgendamentos(state.agendamentos || []);\r\n-    let placed = 0;\r\n-\r\n-    for (const a of items) {\r\n-      const when = a.h || a.scheduledAt;\r\n-      if (!when) continue;\r\n-\r\n-      const dt     = new Date(when);\r\n-      const dayStr = localDateStr(dt); // data local evita deslocamento de fuso\r\n-      if (dayStr < days[0] || dayStr > days[6]) continue;\r\n-\r\n-      const hh = `${pad(dt.getHours())}:00`;\r\n-      const cell = agendaList.querySelector(`div[data-day=\"${dayStr}\"][data-hh=\"${hh}\"]`);\r\n-      if (!cell) continue;\r\n-\r\n-      const meta = statusMeta(a.status);\r\n-      const hhmm = `${pad(dt.getHours())}:${String(dt.getMinutes()).padStart(2,'0')}`;\r\n-\r\n-      const card = document.createElement('div');\r\n-      card.setAttribute('data-appointment-id', a._id || '');\r\n-      card.style.setProperty('--stripe', meta.stripe);\r\n-      card.style.setProperty('--card-max-w', '100%');                       // ocupa a coluna\r\n-      card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n-      card.setAttribute('draggable', 'true');\r\n-      card.title = [\r\n-        a.pet || '',\r\n-        a.servico || '',\r\n-        (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n-      ].filter(Boolean).join(' • ');\r\n-\r\n-      // Header: Tutor abreviado | Pet (sem hora)\r\n-      const headerEl = document.createElement('div');\r\n-      headerEl.className = 'flex items-center justify-between gap-2 mb-1';\r\n-      const tutorShort = shortTutorName(a.clienteNome || a.tutor || '');\r\n-      const headLabel  = tutorShort ? `${tutorShort} | ${a.pet || ''}` : (a.pet || '');\r\n-      headerEl.innerHTML = `\r\n-        <div class=\"font-medium text-[12px] text-gray-900 truncate\" title=\"${headLabel}\">${headLabel}</div>\r\n-        <!-- nada do lado direito no header -->\r\n-      `;\r\n-\r\n-      // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n-      const bodyEl = document.createElement('div');\r\n-      const svc = document.createElement('div');\r\n-      svc.className = 'text-[12px] text-gray-600 truncate';\r\n-      svc.textContent = a.servico || '';\r\n-      bodyEl.appendChild(svc);\r\n-      if (a.observacoes && String(a.observacoes).trim()) {\r\n-        const obs = document.createElement('div');\r\n-        obs.className = 'text-[11px] text-gray-700 italic truncate';\r\n-        obs.textContent = String(a.observacoes).trim();\r\n-        bodyEl.appendChild(obs);\r\n-      }\r\n-\r\n-      // Rodapé: status + valor à direita\r\n-      const footerEl = document.createElement('div');\r\n-      footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n-      const statusEl = document.createElement('div');\r\n-      // badge menor para caber bem\r\n-      statusEl.innerHTML = renderStatusBadge(a.status).replace('text-xs','text-[10px]');\r\n-      const price = document.createElement('div');\r\n-      price.className = 'text-[12px] text-gray-800 font-semibold';\r\n-      price.textContent = money(a.valor);\r\n-      footerEl.appendChild(statusEl);\r\n-      footerEl.appendChild(price);\r\n-\r\n-      card.appendChild(headerEl);\r\n-      card.appendChild(bodyEl);\r\n-      card.appendChild(footerEl);\r\n-\r\n-      cell.appendChild(card);\r\n-      placed++;\r\n-    }\r\n-\r\n-    if (placed === 0) {\r\n-      const empty = document.createElement('div');\r\n-      empty.className = 'p-6 text-sm text-slate-500';\r\n-      empty.textContent = 'Nenhum agendamento no intervalo.';\r\n-      agendaList.appendChild(empty);\r\n-    }\r\n-  }\r\n-\r\n-  /** ===== NOVO: visão mensal ===== */\r\n-  function renderMonthGrid() {\r\n-    const base = normalizeDate(dateInput?.value || todayStr());\r\n-    const m0   = startOfMonth(base);\r\n-    const m1   = startOfNextMonth(base); // exclusivo\r\n-    updateHeaderLabel();\r\n-\r\n-    clearChildren(agendaList);\r\n-\r\n-    // cabeçalho: seg a dom\r\n-    const weekDays = ['Seg','Ter','Qua','Qui','Sex','Sáb','Dom'];\r\n-    const header = document.createElement('div');\r\n-    header.style.display = 'grid';\r\n-    header.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n-    header.className = 'sticky top-0 z-20 bg-white border-b';\r\n-    header.innerHTML = weekDays.map(d=>`<div class=\"px-3 py-2 text-xs font-medium text-slate-700\">${d}</div>`).join('');\r\n-    agendaList.appendChild(header);\r\n-\r\n-    // calcular início da grade (segunda da semana que contém o dia 1)\r\n-    const startGrid = startOfWeek(m0);\r\n-    const days = Array.from({length:42},(_,i)=> addDays(startGrid,i)); // 6 semanas\r\n-\r\n-    const grid = document.createElement('div');\r\n-    grid.style.display = 'grid';\r\n-    grid.style.gridTemplateColumns = `repeat(7, minmax(180px,1fr))`;\r\n-    agendaList.appendChild(grid);\r\n-\r\n-    // usar FILTRO + AGRUPAR por data local\r\n-    const items = getFilteredAgendamentos((state.agendamentos||[]).slice().sort((a,b)=>(new Date(a.h||a.scheduledAt))-(new Date(b.h||b.scheduledAt))));\r\n-    const byDay = new Map();\r\n-    for (const a of items) {\r\n-      const d = localDateStr(new Date(a.h || a.scheduledAt));\r\n-      if (d >= m0 && d < m1) {\r\n-        if (!byDay.has(d)) byDay.set(d, []);\r\n-        byDay.get(d).push(a);\r\n-      }\r\n-    }\r\n-\r\n-    days.forEach(d=>{\r\n-      const inMonth = (d>=m0 && d<m1);\r\n-      const cell = document.createElement('div');\r\n-      cell.className = `min-h-[140px] border p-2 ${inMonth? 'bg-white':'bg-slate-50'}`; // min-h menor\r\n-\r\n-      const title = document.createElement('div');\r\n-      title.className = `flex items-center justify-between text-[11px] ${inMonth?'text-slate-700':'text-slate-400'}`;\r\n-      const dayNum = new Date(d+'T00:00:00').getDate();\r\n-      title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n-\r\n-      const list = document.createElement('div');\r\n-      list.className = 'mt-1 space-y-1';\r\n-\r\n-      const itemsDay = byDay.get(d) || [];\r\n-      itemsDay.forEach((a, idx)=>{\r\n-        const meta = statusMeta(a.status);\r\n-        const when = new Date(a.h || a.scheduledAt);\r\n-        const hhmm = `${pad(when.getHours())}:${String(when.getMinutes()).padStart(2,'0')}`;\r\n-\r\n-      const card = document.createElement('div');\r\n-      card.setAttribute('data-appointment-id', a._id || '');\r\n-      card.style.setProperty('--stripe', meta.stripe);\r\n-      card.style.setProperty('--card-max-w', '100%');\r\n-      card.className = `agenda-card border ${meta.borderClass} cursor-pointer select-none px-2 py-1`; // padding menor\r\n-      card.setAttribute('draggable', 'true');\r\n-      card.title = [\r\n-        a.pet || '',\r\n-        a.servico || '',\r\n-        (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n-      ].filter(Boolean).join(' • '); // tooltip exibe tudo sem poluir o card\r\n-\r\n-      // Header com hora à esquerda e STATUS centralizado na mesma linha (reserva espaço p/ botões à direita)\r\n-      const headerEl = document.createElement('div');\r\n-      headerEl.className = 'flex items-center gap-2 pr-14 md:pr-16 mb-1';\r\n-      headerEl.innerHTML = `\r\n-        <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n-        <div class=\"flex-1 flex items-center justify-center\">\r\n-          ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n-        </div>\r\n-      `;\r\n-\r\n-      // Linha abaixo: Tutor abreviado | Pet (fazendo fallback para múltiplas origens do nome do tutor)\r\n-      const rawTutorName =\r\n-        a.tutorNome ||\r\n-        a.clienteNome ||\r\n-        (a.cliente && (a.cliente.nome || a.cliente.name)) ||\r\n-        (a.tutor && (a.tutor.nome || a.tutor.name)) ||\r\n-        a.responsavelNome ||\r\n-        (a.responsavel && a.responsavel.nome) ||\r\n-        '';\r\n-\r\n-      const tutorShort = shortTutorName(rawTutorName);\r\n-      const headLabel = [tutorShort, (a.pet || '')].filter(Boolean).join(' | ');\r\n-\r\n-      const nameEl = document.createElement('div');\r\n-      nameEl.className = 'text-[12px] font-medium text-gray-900 text-center truncate';\r\n-      nameEl.title = headLabel;\r\n-      nameEl.textContent = headLabel;\r\n-\r\n-      // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n-      const bodyEl = document.createElement('div');\r\n-      const svc = document.createElement('div');\r\n-      svc.className = 'text-[12px] text-gray-600 truncate';     // 1 linha\r\n-      svc.textContent = a.servico || '';\r\n-      bodyEl.appendChild(svc);\r\n-\r\n-      if (a.observacoes && String(a.observacoes).trim()) {\r\n-        const obs = document.createElement('div');\r\n-        obs.className = 'text-[11px] text-gray-700 italic truncate'; // 1 linha\r\n-        obs.textContent = String(a.observacoes).trim();\r\n-        bodyEl.appendChild(obs);\r\n-      }\r\n-\r\n-      // Rodapé enxuto: valor à direita\r\n-      const footerEl = document.createElement('div');\r\n-      footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n-      const price = document.createElement('div');\r\n-      price.className = 'text-[12px] text-gray-800 font-semibold';\r\n-      price.textContent = money(a.valor);\r\n-      footerEl.appendChild(price);\r\n-\r\n-      card.appendChild(headerEl);\r\n-      card.appendChild(nameEl);\r\n-      card.appendChild(bodyEl);\r\n-      card.appendChild(footerEl);\r\n-\r\n-      list.appendChild(card);\r\n-\r\n-        // Limitar o excesso visual\r\n-        if (idx>=6 && itemsDay.length>7) {\r\n-          const more = document.createElement('div');\r\n-          more.className = 'text-[11px] text-slate-500';\r\n-          more.textContent = `+${itemsDay.length-6} itens`;\r\n-          list.appendChild(more);\r\n-          return;\r\n-        }\r\n-      });\r\n-\r\n-      cell.appendChild(title);\r\n-      cell.appendChild(list);\r\n-      grid.appendChild(cell);\r\n-    });\r\n-  }\r\n-\r\n-  // Map de estilos por status (cores seguras com Tailwind já usadas no projeto)\r\n-  function statusMeta(s) {\r\n-    // Normalização: acentos/maiúsculas/espaços/hífens\r\n-    const keyRaw = String(s || 'agendado')\r\n-      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-      .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n-\r\n-    const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-    const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n-\r\n-    // Paleta acessível (contraste AA) + info para faixa lateral e badge compacta\r\n-    const map = {\r\n-      agendado: {\r\n-        label: 'Agendado',\r\n-        short: 'Agend.',\r\n-        stripe: '#64748B',     // slate-500\r\n-        text: '#0F172A',       // slate-900\r\n-        badgeClass: 'bg-slate-100 text-slate-700 border border-slate-200',\r\n-        borderClass: 'border-slate-300'\r\n-      },\r\n-      em_espera: {\r\n-        label: 'Em espera',\r\n-        short: 'Espera',\r\n-        stripe: '#B45309',     // amber-700\r\n-        text: '#1F2937',       // gray-800\r\n-        badgeClass: 'bg-amber-50 text-amber-800 border border-amber-200',\r\n-        borderClass: 'border-amber-400'\r\n-      },\r\n-      em_atendimento: {\r\n-        label: 'Em atendimento',\r\n-        short: 'Atend.',\r\n-        stripe: '#1D4ED8',     // blue-700\r\n-        text: '#0B1235',\r\n-        badgeClass: 'bg-blue-50 text-blue-800 border border-blue-200',\r\n-        borderClass: 'border-blue-500'\r\n-      },\r\n-      finalizado: {\r\n-        label: 'Finalizado',\r\n-        short: 'Fim.',\r\n-        stripe: '#16A34A',     // green-600\r\n-        text: '#052E16',\r\n-        badgeClass: 'bg-green-50 text-green-800 border border-green-200',\r\n-        borderClass: 'border-green-500'\r\n-      }\r\n-    };\r\n-\r\n-    return map[k];\r\n-  }\r\n-\r\n-  function renderStatusBadge(s) {\r\n-    const { label, badgeClass } = statusMeta(s);\r\n-    // `whitespace-nowrap` garante que o chip não quebre em duas linhas\r\n-    return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium whitespace-nowrap ${badgeClass}\">${label}</span>`;\r\n-  }\r\n-\r\n-  // Modal — modo adicionar\r\n-  function openAddModal() {\r\n-    state.editing = null;\r\n-    if (!modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\r\n-\r\n-    // Reset serviços temporários\r\n-    state.tempServicos = [];\r\n-    renderServicosLista();\r\n-    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n-\r\n-    // Campos editáveis habilitados\r\n-    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n-\r\n-    // Limpa estado/inputs\r\n-    state.selectedCliente = null;\r\n-    state.selectedServico = null;\r\n-    if (cliInput) { cliInput.value = ''; }\r\n-    if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n-    if (servInput) { servInput.value = ''; }\r\n-    if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-    if (valorInput) { valorInput.value = ''; }\r\n-    if (petSelect) { petSelect.innerHTML = ''; }\r\n-    if (obsInput) { obsInput.value = ''; }\r\n-\r\n-    // Empresa (usa as mesmas opções do seletor da página)\r\n-    if (addStoreSelect) {\r\n-      if (storeSelect && storeSelect.options.length) {\r\n-        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n-      } else if (state.stores?.length) {\r\n-        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-      }\r\n-      const sid = state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.value = sid;\r\n-\r\n-      // Carrega os profissionais correspondentes à empresa escolhida no modal (sem travar a abertura)\r\n-      try { if (sid) { populateModalProfissionais(sid); } } catch(_) {}\r\n-    }\r\n-\r\n-    // Data (usa a data visível na página)\r\n-    if (addDateInput) {\r\n-      const date = normalizeDate(dateInput?.value || todayStr()); // YYYY-MM-DD\r\n-      addDateInput.value = date;\r\n-    }\r\n-\r\n-    // Hora default (agora)\r\n-    const now = new Date();\r\n-    const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\r\n-    if (horaInput) horaInput.value = hh;\r\n-    \r\n-    // Observações\r\n-    if (obsInput) { obsInput.value = ''; }\r\n-\r\n-    // Status default\r\n-    if (statusSelect) statusSelect.value = 'agendado';\r\n-\r\n-    // Botão Excluir só em edição\r\n-    if (modalDelete) modalDelete.classList.add('hidden');\r\n-\r\n-    modal.classList.remove('hidden'); \r\n-    modal.classList.add('flex');\r\n-    cliInput?.focus();\r\n-  }\r\n-\r\n-  // cache simples: clienteId -> nome\r\n-  const _clienteNomeCache = new Map();\r\n-\r\n-  async function resolveClienteNome(a) {\r\n-    try {\r\n-      if (!a) return '';\r\n-\r\n-      // 1) nome direto vindo da API\r\n-      const direct =\r\n-        a.clienteNome ||\r\n-        (a.cliente && typeof a.cliente === 'object' && (a.cliente.nome || a.cliente.nomeCompleto || a.cliente.razaoSocial)) ||\r\n-        null;\r\n-      if (typeof direct === 'string' && direct.trim()) return direct.trim();\r\n-\r\n-      // 2) clienteId em qualquer formato\r\n-      let maybeId =\r\n-        a.clienteId ||\r\n-        a.clientId ||\r\n-        a.customerId ||\r\n-        (typeof a.cliente === 'string' ? a.cliente : null);\r\n-\r\n-      if (typeof maybeId === 'object' && maybeId !== null && maybeId._id) {\r\n-        maybeId = String(maybeId._id);\r\n-      }\r\n-      const id = (typeof maybeId === 'string' && /^[0-9a-fA-F]{24}$/.test(maybeId)) ? maybeId : null;\r\n-\r\n-      if (id) {\r\n-        if (_clienteNomeCache.has(id)) return _clienteNomeCache.get(id);\r\n-        const r = await api(`/func/clientes/${id}`);\r\n-        if (r.ok) {\r\n-          const c = await r.json();\r\n-          const nome = c?.nome || '';\r\n-          if (nome) { _clienteNomeCache.set(id, nome); return nome; }\r\n-        }\r\n-      }\r\n-\r\n-      // 3) fallback por petId\r\n-      const petId =\r\n-        a.petId ||\r\n-        (a.pet && typeof a.pet === 'object' && a.pet._id ? a.pet._id : null) ||\r\n-        null;\r\n-\r\n-      if (petId && /^[0-9a-fA-F]{24}$/.test(String(petId))) {\r\n-        const r2 = await api(`/func/pets/${petId}`);\r\n-        if (r2.ok) {\r\n-          const p = await r2.json();\r\n-          const nome =\r\n-            (p?.cliente && (p.cliente.nome || p.cliente.nomeCompleto || p.cliente.razaoSocial)) ||\r\n-            p?.clienteNome ||\r\n-            '';\r\n-          if (nome) return String(nome);\r\n-        }\r\n-      }\r\n-    } catch (e) {\r\n-      console.info('[resolveClienteNome] não foi possível resolver', e);\r\n-    }\r\n-    return '';\r\n-  }\r\n-\r\n-  // --- DEPOIS: openEditModal (indica carregamento e garante preenchimento) ---\r\n-  function toDateInputValueFromISO(isoStr) {\r\n-    const d = new Date(isoStr);\r\n-    if (isNaN(d.getTime())) return todayStr();\r\n-    const yyyy = d.getFullYear();\r\n-    const mm = String(d.getMonth() + 1).padStart(2, '0');\r\n-    const dd = String(d.getDate()).padStart(2, '0');\r\n-    return `${yyyy}-${mm}-${dd}`;\r\n-  }\r\n-\r\n-  function openEditModal(a) {\r\n-    state.editing = a || null;\r\n-    if (!modal || !state.editing) return;\r\n-\r\n-    // Preenche lista de serviços no modo edição (somente leitura)\r\n-    state.tempServicos = Array.isArray(a.servicos)\r\n-      ? a.servicos.map(x => ({ _id: x._id, nome: x.nome, valor: Number(x.valor || 0) }))\r\n-      : (a.servico ? [{ _id: null, nome: a.servico, valor: Number(a.valor || 0) }] : []);\r\n-    renderServicosLista();\r\n-\r\n-    // habilita campo de busca/valor para adicionar novos serviços\r\n-    state.selectedServico = null;\r\n-    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n-    if (servSug)   { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-    if (valorInput){ valorInput.value = ''; valorInput.disabled = false; }\r\n-\r\n-    if (addServAddBtn) addServAddBtn.classList.remove('hidden');\r\n-\r\n-    // Empresa (mostra a loja do agendamento e permite trocar)\r\n-    if (addStoreSelect) {\r\n-      if (storeSelect && storeSelect.options.length) {\r\n-        addStoreSelect.innerHTML = storeSelect.innerHTML;\r\n-      } else if (state.stores?.length) {\r\n-        addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\r\n-      }\r\n-      addStoreSelect.value = a.storeId || state.selectedStoreId || storeSelect?.value || '';\r\n-      addStoreSelect.disabled = false;\r\n-    }\r\n-\r\n-    // Data do agendamento\r\n-    if (addDateInput) {\r\n-      const iso = a.h || a.scheduledAt || new Date().toISOString();\r\n-      addDateInput.value = toDateInputValueFromISO(iso);\r\n-    }\r\n-\r\n-    // Hora\r\n-    const d = new Date((a.h || a.scheduledAt) || new Date());\r\n-    const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\r\n-    if (horaInput) horaInput.value = hh;\r\n-\r\n-    // Profissional (tenta resolver o id atual)\r\n-    let profId = a.profissionalId ? String(a.profissionalId) : null;\r\n-    if (!profId && typeof a.profissional === 'string') {\r\n-      const key = a.profissional.trim().toLowerCase();\r\n-      const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\r\n-      if (match) profId = String(match._id);\r\n-    }\r\n-    if (profSelect && profId) profSelect.value = profId;\r\n-\r\n-    // Ao abrir o modal de edição, carregamos os profissionais da EMPRESA selecionada no modal\r\n-    try {\r\n-      const sid = addStoreSelect?.value || a.storeId || '';\r\n-      if (sid) { populateModalProfissionais(sid, profId); } // não bloqueia a abertura do modal\r\n-    } catch (_) {}\r\n-\r\n-    // Status (normalizado p/ os values do <select>)\r\n-    if (statusSelect) {\r\n-      const keyRaw = String(a.status || 'agendado')\r\n-        .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\r\n-        .trim().toLowerCase().replace(/[-\\s]+/g, '_');\r\n-      const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-      statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\r\n-    }\r\n-\r\n-    // Observações (preenche com a descrição do card)\r\n-    if (obsInput) { obsInput.value = (a.observacoes || '').trim(); }\r\n-\r\n-    // Cliente e Pet (preenche e bloqueia busca no modo edição)\r\n-    if (cliInput) { cliInput.value = (a.clienteNome || ''); cliInput.disabled = true; }\r\n-   \r\n-    if (petSelect) {\r\n-      petSelect.innerHTML = '';\r\n-      try {\r\n-        const clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\r\n-        if (clienteId) {\r\n-          api(`/func/clientes/${clienteId}/pets`).then(r => r.json().catch(() => []))\r\n-            .then(pets => {\r\n-              petSelect.innerHTML = (Array.isArray(pets) ? pets : []).map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-              const currentPetId = a.petId || (a.pet && a.pet._id) || '';\r\n-              if (currentPetId) petSelect.value = String(currentPetId);\r\n-            });\r\n-        }\r\n-      } catch (_) {}\r\n-    }\r\n-\r\n-    // Serviço/Valor: leitura\r\n-    if (servInput) { servInput.value = ''; servInput.disabled = false; }\r\n-    if (valorInput) { valorInput.value = ''; valorInput.disabled = false; }\r\n-\r\n-    // Botão excluir visível\r\n-    if (modalDelete) modalDelete.classList.remove('hidden');\r\n-\r\n-    modal.classList.remove('hidden');\r\n-    modal.classList.add('flex');\r\n-  }\r\n-\r\n-  function closeModal() {\r\n-    if (!modal) return;\r\n-    modal.classList.add('hidden');\r\n-    modal.classList.remove('flex');\r\n-    state.editing = null;\r\n-    [cliInput, servInput, valorInput, petSelect].forEach(el => { if (el) el.disabled = false; });\r\n-  }\r\n-\r\n-  // Busca cliente\r\n-  async function searchClientes(term) {\r\n-    if (!term || term.length < 2) {\r\n-      if (cliSug) { cliSug.innerHTML = ''; cliSug.classList.add('hidden'); }\r\n-      return;\r\n-    }\r\n-    const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    if (!cliSug) return;\r\n-    cliSug.innerHTML = list.map(u => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\r\n-        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n-      </li>`).join('');\r\n-    cliSug.classList.remove('hidden');\r\n-    cliSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', async () => {\r\n-        state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\r\n-        if (cliInput) cliInput.value = li.dataset.nome;\r\n-        cliSug.classList.add('hidden');\r\n-        const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\r\n-        const pets = await resp.json().catch(() => []);\r\n-        if (petSelect) {\r\n-          petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\r\n-        }\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  function confirmAsync(title, message, opts = {}) {\r\n-    const confirmText = opts.confirmText || 'Excluir';\r\n-    const cancelText  = opts.cancelText  || 'Cancelar';\r\n-\r\n-    if (typeof window.showModal === 'function') {\r\n-      return new Promise((resolve) => {\r\n-        // 1) Esconde temporariamente o modal de edição (sem desmontar)\r\n-        const prevVis = modal ? modal.style.visibility : '';\r\n-        const prevPe  = modal ? modal.style.pointerEvents : '';\r\n-        if (modal) {\r\n-          modal.style.visibility = 'hidden';\r\n-          modal.style.pointerEvents = 'none';\r\n-        }\r\n-\r\n-        // 2) Abre o modal padrão do projeto\r\n-        window.showModal({\r\n-          title: title || 'Confirmação',\r\n-          message: message || 'Deseja prosseguir?',\r\n-          confirmText,\r\n-          cancelText,\r\n-          onConfirm: () => { restore(); resolve(true); },\r\n-          onCancel : () => { restore(); resolve(false); }\r\n-        });\r\n-\r\n-        // 3) Após montar, garante overlay por cima de tudo\r\n-        //    (pega o último elemento \"fixed\" full-screen e sobe o z-index)\r\n-        const bump = () => {\r\n-          try {\r\n-            const all = Array.from(document.querySelectorAll('body *'));\r\n-            const overlays = all.filter(el => {\r\n-              const cs = getComputedStyle(el);\r\n-              if (cs.position !== 'fixed') return false;\r\n-              const r = el.getBoundingClientRect();\r\n-              return r.width >= window.innerWidth * 0.95 && r.height >= window.innerHeight * 0.95;\r\n-            });\r\n-            const overlay = overlays.at(-1);\r\n-            if (overlay) {\r\n-              overlay.style.zIndex = '9999';\r\n-              overlay.style.pointerEvents = 'auto';\r\n-            }\r\n-          } catch (_) { /* noop */ }\r\n-        };\r\n-        requestAnimationFrame(bump);\r\n-        setTimeout(bump, 0);\r\n-\r\n-        // 4) Restaura o modal de edição quando fechar a confirmação\r\n-        function restore() {\r\n-          if (modal) {\r\n-            modal.style.visibility = prevVis || '';\r\n-            modal.style.pointerEvents = prevPe || '';\r\n-          }\r\n-        }\r\n-      });\r\n-    }\r\n-\r\n-    // Fallback (apenas se o componente não existir)\r\n-    const ok = window.confirm(message || title || 'Confirmar?');\r\n-    return Promise.resolve(!!ok);\r\n-  }\r\n-\r\n-  async function handleDelete() {\r\n-      const id = state.editing && state.editing._id ? String(state.editing._id) : null;\r\n-      if (!id) return;\r\n-\r\n-      const ok = await confirmAsync('Excluir atendimento', 'Tem ce...a excluir este atendimento? Esta ação não pode ser desfeita.', {\r\n-        confirmText: 'Excluir',\r\n-        cancelText: 'Cancelar'\r\n-      });\r\n-      if (!ok) return;\r\n-\r\n-      const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\r\n-      if (!resp.ok) {\r\n-        const err = await resp.json().catch(() => ({}));\r\n-        alert(err.message || 'Erro ao excluir agendamento');\r\n-        return;\r\n-      }\r\n-      await loadAgendamentos();\r\n-      renderKpis();\r\n-      renderFilters();\r\n-      closeModal();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-  }\r\n-\r\n-  // Busca serviços\r\n-  async function searchServicos(term) {\r\n-    if (!term || term.length < 2) {\r\n-      if (servSug) { servSug.innerHTML = ''; servSug.classList.add('hidden'); }\r\n-      return;\r\n-    }\r\n-    const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    if (!servSug) return;\r\n-    servSug.innerHTML = list.map(s => `\r\n-      <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor}\">\r\n-        <div class=\"font-medium text-gray-900\">${s.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${money(s.valor)}</div>\r\n-      </li>`).join('');\r\n-    servSug.classList.remove('hidden');\r\n-    servSug.querySelectorAll('li').forEach(li => {\r\n-      li.addEventListener('click', () => {\r\n-        state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\r\n-        if (servInput) servInput.value = state.selectedServico.nome;\r\n-        if (valorInput) valorInput.value = state.selectedServico.valor.toFixed(2);\r\n-        servSug.classList.add('hidden');\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  // --- Lista de serviços no modal ---\r\n-  function renderServicosLista() {\r\n-    if (!servListUL || !servTotalEl) return;\r\n-    const items = state.tempServicos || [];\r\n-    servListUL.innerHTML = items.map((it, idx) => `\r\n-      <li class=\"flex items-center justify-between px-3 py-2 text-sm\">\r\n-        <div class=\"flex items-center gap-3\">\r\n-          <span class=\"w-20 text-right tabular-nums\">${money(Number(it.valor || 0))}</span>\r\n-          <span class=\"text-gray-700\">${it.nome || ''}</span>\r\n-        </div>\r\n-        <button data-idx=\"${idx}\" class=\"remove-serv px-2 py-1 rounded-md border text-gray-600 hover:bg-gray-50\">Remover</button>\r\n-      </li>\r\n-    `).join('');\r\n-    const total = items.reduce((s, x) => s + Number(x.valor || 0), 0);\r\n-    servTotalEl.textContent = money(total);\r\n-\r\n-    servListUL.querySelectorAll('.remove-serv').forEach(btn => {\r\n-      btn.addEventListener('click', () => {\r\n-        const i = parseInt(btn.getAttribute('data-idx'), 10);\r\n-        if (!isNaN(i)) {\r\n-          state.tempServicos.splice(i, 1);\r\n-          renderServicosLista();\r\n-        }\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  // Salvar (adicionar/editar)\r\n-  async function saveAgendamento() {\r\n-      try {\r\n-        const dateRaw = (addDateInput?.value) || (dateInput?.value) || todayStr();\r\n-        const storeIdSelected = (addStoreSelect?.value) || state.selectedStoreId || storeSelect?.value;\r\n-        const hora = horaInput?.value;\r\n-        const profissionalId = profSelect?.value;\r\n-        const status = (statusSelect?.value) || 'agendado';\r\n-\r\n-        if (!hora || !profissionalId) { alert('Preencha hora e profissional.'); return; }\r\n-        if (!storeIdSelected) { alert('Selecione a empresa.'); return; }\r\n-\r\n-        const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\r\n-\r\n-        // Edição\r\n-        if (state.editing && state.editing._id) {\r\n-          const id = state.editing._id;\r\n-\r\n-          // usa os itens montados na UI (edição agora permite adicionar/remover)\r\n-          const items = Array.isArray(state.tempServicos) ? state.tempServicos : [];\r\n-          if (!items.length) { alert('Adicione pelo menos 1 serviço ao agendamento.'); return; }\r\n-\r\n-          const body = {\r\n-            storeId: storeIdSelected,\r\n-            profissionalId,\r\n-            scheduledAt,\r\n-            status,\r\n-            observacoes: (obsInput?.value || '').trim(),\r\n-            servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n-            ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\r\n-            ...(petSelect?.value ? { petId: petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\r\n-            ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\r\n-          };\r\n-\r\n-          const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\r\n-          if (!resp.ok) {\r\n-            const err = await resp.json().catch(() => ({}));\r\n-            alert(err.message || 'Erro ao atualizar agendamento.');\r\n-            return;\r\n-          }\r\n-\r\n-          await loadAgendamentos();\r\n-          renderKpis();\r\n-          renderFilters();\r\n-          closeModal();\r\n-          renderGrid();\r\n-          enhanceAgendaUI();\r\n-          return;\r\n-        }\r\n-\r\n-        // Adição\r\n-        const clienteId = state.selectedCliente?._id;\r\n-        const petId = petSelect?.value;\r\n-        const items = state.tempServicos || [];\r\n-\r\n-        if (!(clienteId && petId && items.length)) { alert('Preencha cliente, pet e adicione pelo menos 1 serviço.'); return; }\r\n-\r\n-        const body = {\r\n-          storeId: storeIdSelected,\r\n-          clienteId, petId,\r\n-          servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\r\n-          profissionalId, scheduledAt,\r\n-          status,\r\n-          observacoes: (obsInput?.value || '').trim(),\r\n-          pago: false\r\n-        };\r\n-        const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\r\n-        if (!resp.ok) {\r\n-          const err = await resp.json().catch(() => ({}));\r\n-          throw new Error(err.message || 'Erro ao salvar');\r\n-        }\r\n-\r\n-        await loadAgendamentos();\r\n-        renderKpis();\r\n-        renderFilters();\r\n-        closeModal();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      } catch (e) {\r\n-        console.error(e);\r\n-        alert(e.message || 'Erro ao salvar');\r\n-      }\r\n-    }\r\n-\r\n-  function enhanceAgendaUI() {\r\n-    try {\r\n-      applyZebraAndSublines();\r\n-      decorateCards();\r\n-\r\n-      if (state.view === 'day') {\r\n-        enableDragDrop();\r\n-        drawNowLine();\r\n-\r\n-        const date = normalizeDate(dateInput?.value || todayStr());\r\n-        if (!state.__didInitialScroll && date === todayStr()) {\r\n-          scrollToNow();\r\n-          state.__didInitialScroll = true;\r\n-        }\r\n-      }\r\n-    } catch (e) {\r\n-      console.info('[enhanceAgendaUI] skip', e);\r\n-    }\r\n-  }\r\n-\r\n-  function scrollToNow() {\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body || !state.profissionais?.length) return;\r\n-\r\n-      // encontra a célula da primeira coluna de profissional no horário atual\r\n-      const now = new Date();\r\n-      const hh = String(now.getHours()).padStart(2, '0') + ':00';\r\n-      const firstProfId = String(state.profissionais[0]._id);\r\n-      const target = body.querySelector(`div[data-profissional-id=\"${firstProfId}\"][data-hh=\"${hh}\"]`);\r\n-\r\n-      if (target) {\r\n-        const top = target.getBoundingClientRect().top + window.pageYOffset;\r\n-        const offset = 80; // sobe um pouco para contexto\r\n-        window.scrollTo({ top: Math.max(0, top - offset), behavior: 'smooth' });\r\n-      }\r\n-  }\r\n-\r\n-  // compacta a lista para um hash leve (ordem estável)\r\n-  function snapshotHash(items) {\r\n-    try {\r\n-      const compact = (items || []).map(x => [\r\n-        String(x._id || ''),\r\n-        String(x.status || ''),\r\n-        String(x.h || x.scheduledAt || ''),\r\n-        Number(x.valor || 0),\r\n-        !!x.pago\r\n-      ]).sort((a, b) => a[0].localeCompare(b[0]));\r\n-      return JSON.stringify(compact);\r\n-    } catch (_) {\r\n-      return String(Date.now());\r\n-    }\r\n-  }\r\n-\r\n-  // reconsulta e só re-renderiza se houver mudança relevante\r\n-  async function refreshAgendaIfChanged() {\r\n-    const prev = state.lastSnapshotHash || '';\r\n-    await loadAgendamentos();\r\n-    const next = snapshotHash(state.agendamentos);\r\n-    if (next !== prev) {\r\n-      state.lastSnapshotHash = next;\r\n-      renderGrid();\r\n-      // ao re-render com mesma data de hoje, não repete o scroll\r\n-      enhanceAgendaUI();\r\n-    }\r\n-  }\r\n-\r\n-  // inicia/renova o timer de auto-refresh (60s)\r\n-  function startAutoRefresh() {\r\n-    if (window.__agendaRefreshTimer) clearInterval(window.__agendaRefreshTimer);\r\n-    state.lastSnapshotHash = snapshotHash(state.agendamentos);\r\n-    window.__agendaRefreshTimer = setInterval(refreshAgendaIfChanged, 60000);\r\n-  }\r\n-\r\n-  // cria o botão \"Hoje\" ao lado do input de data (uma vez)\r\n-  function ensureTodayButton() {\r\n-    if (!dateInput) return;\r\n-    if (document.getElementById('agenda-today-btn')) return;\r\n-\r\n-    const btn = document.createElement('button');\r\n-    btn.id = 'agenda-today-btn';\r\n-    btn.type = 'button';\r\n-    btn.className = 'ml-2 inline-flex items-center gap-1 text-xs px-2 py-1 rounded border border-slate-300 text-slate-700 hover:bg-slate-50';\r\n-    btn.textContent = 'Hoje';\r\n-\r\n-    dateInput.insertAdjacentElement('afterend', btn);\r\n-    btn.addEventListener('click', async () => {\r\n-      dateInput.value = todayStr();\r\n-      state.__didInitialScroll = false;   // permite novo auto-scroll\r\n-      await loadAgendamentos();\r\n-      renderGrid();\r\n-      enhanceAgendaUI();\r\n-    });\r\n-  }\r\n-\r\n-  // Zebra de linhas + sublinha 30min com CSS (via classe)\r\n-  function applyZebraAndSublines() {\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body) return;\r\n-\r\n-      body.style.position = 'relative'; // para linha do \"agora\"\r\n-      const totalCols = 1 + (state.profissionais?.length || 0); // 1 (hora) + N profissionais\r\n-      if (totalCols <= 0) return;\r\n-\r\n-      const cells = Array.from(body.children);\r\n-      const totalRows = Math.floor(cells.length / totalCols);\r\n-\r\n-      for (let row = 0; row < totalRows; row++) {\r\n-        const start = row * totalCols;\r\n-        const zebraClass = (row % 2 === 0) ? 'bg-white' : 'bg-slate-50';\r\n-\r\n-        // primeira coluna (hora)\r\n-        const tCell = cells[start];\r\n-        if (tCell) {\r\n-          tCell.classList.remove('bg-white','bg-slate-50');\r\n-          tCell.classList.add(zebraClass);\r\n-        }\r\n-\r\n-        // colunas dos profissionais\r\n-        for (let col = 1; col < totalCols; col++) {\r\n-          const idx = start + col;\r\n-          const slot = cells[idx];\r\n-          if (!slot) continue;\r\n-          slot.classList.remove('bg-white','bg-slate-50');\r\n-          slot.classList.add(zebraClass, 'agenda-slot'); // garante classe\r\n-        }\r\n-      }\r\n-  }\r\n-\r\n-  // Insere ícones de ação nos cartões (editar / mudar status)\r\n-  function decorateCards() {\r\n-    const cards = agendaList?.querySelectorAll('div[data-appointment-id]');\r\n-    if (!cards || !cards.length) return;\r\n-\r\n-    cards.forEach((card) => {\r\n-      if (card.querySelector('.agenda-card__actions')) return; // já decorado\r\n-      card.classList.add('agenda-card'); // ativa hover via CSS\r\n-      card.style.position = 'relative';\r\n-\r\n-      const id = card.getAttribute('data-appointment-id') || '';\r\n-      const item = (state.agendamentos || []).find(x => String(x._id) === String(id)) || {};\r\n-      const isPaid = !!item.pago;\r\n-\r\n-      const actions = document.createElement('div');\r\n-      // flex em coluna para ter a “segunda linha” abaixo do '+'\r\n-      actions.className = 'agenda-card__actions absolute top-1 right-1 hidden md:flex flex-col items-end gap-1';\r\n-\r\n-      actions.innerHTML = `\r\n-        <!-- primeira linha: editar + status (mantém seu layout atual lado a lado) -->\r\n-        <div class=\"flex items-center gap-1\">\r\n-          <button class=\"agenda-action edit\" data-id=\"${id}\" title=\"Editar\">\r\n-            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\">\r\n-              <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.003 1.003 0 0 0 0-1.41L18.37 3.29a1.003 1.003 0 0 0-1.42 0l-1.83 1.83 3.75 3.75 1.84-1.83z\"/>\r\n-            </svg>\r\n-          </button>\r\n-          <button class=\"agenda-action status\" data-id=\"${id}\" title=\"Mudar status\">\r\n-            <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n-              <circle cx=\"12\" cy=\"12\" r=\"9\" stroke-width=\"2\"></circle>\r\n-              <path d=\"M12 7v5l3 3\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\r\n-            </svg>\r\n-          </button>\r\n-        </div>\r\n-\r\n-        <!-- segunda linha: ícone de pagamento (abaixo do '+') -->\r\n-        <button class=\"agenda-action cobrar ${isPaid ? 'text-green-600' : 'text-slate-500'}\" data-id=\"${id}\" title=\"${isPaid ? 'Pago' : 'Registrar pagamento'}\">\r\n-          ${\r\n-            isPaid\r\n-              // Cifão normal (Real)\r\n-              ? `<i class=\"fa-solid fa-dollar-sign text-[16px] leading-none\"></i>`\r\n-              // Cifrão com risco (stack do FA para “pendente”)\r\n-              : `<span class=\"fa-stack text-[12px] leading-none\" style=\"width: 1.25em;\">\r\n-                  <i class=\"fa-solid fa-dollar-sign fa-stack-1x\"></i>\r\n-                  <i class=\"fa-solid fa-slash fa-stack-1x\"></i>\r\n-                </span>`\r\n-          }\r\n-        </button>\r\n-      `;\r\n-      card.appendChild(actions);\r\n-    });\r\n-  }\r\n-\r\n-  /* === Drag & Drop na agenda: mover card entre horários/profissionais === */\r\n-  function injectDndStylesOnce() {\r\n-    if (document.getElementById('agenda-dnd-style')) return;\r\n-    const st = document.createElement('style');\r\n-    st.id = 'agenda-dnd-style';\r\n-    st.textContent = `\r\n-      .agenda-card.is-dragging { opacity: .6; }\r\n-      .agenda-drop-target { outline: 2px dashed #0ea5e9; outline-offset: -2px; background: rgba(14,165,233,0.06); }\r\n-    `;\r\n-    document.head.appendChild(st);\r\n-  }\r\n-\r\n-  // PUT rápido para mover agendamento (profissional/horário)\r\n-  async function moveAppointmentQuick(id, payload) {\r\n-      try {\r\n-        const body = {\r\n-          ...payload,\r\n-          storeId: state.selectedStoreId || storeSelect?.value\r\n-        };\r\n-        const resp = await api(`/func/agendamentos/${id}`, {\r\n-          method: 'PUT',\r\n-          headers: { 'Content-Type': 'application/json' },\r\n-          body: JSON.stringify(body)\r\n-        });\r\n-        if (!resp.ok) {\r\n-          const err = await resp.json().catch(() => ({}));\r\n-          throw new Error(err.message || 'Erro ao mover agendamento');\r\n-        }\r\n-        await loadAgendamentos();\r\n-        renderKpis();\r\n-        renderFilters();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      } catch (e) {\r\n-        console.error('moveAppointmentQuick', e);\r\n-        alert(e.message || 'Não foi possível mover o agendamento.');\r\n-      }\r\n-    }\r\n-\r\n-  function enableDragDrop() {\r\n-      injectDndStylesOnce();\r\n-\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body) return;\r\n-\r\n-      // Garante que todos os cards estejam \"arrastáveis\"\r\n-      body.querySelectorAll('div[data-appointment-id]').forEach((card) => {\r\n-        if (!card.hasAttribute('draggable')) card.setAttribute('draggable', 'true');\r\n-      });\r\n-\r\n-      // Evita múltiplos binds ao re-renderizar a agenda\r\n-      if (body.__dndDelegated) return;\r\n-      body.__dndDelegated = true;\r\n-\r\n-      // DRAGSTART (captura): funciona mesmo se o usuário começar o arrasto em um filho do card\r\n-      body.addEventListener('dragstart', (ev) => {\r\n-        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-        if (!card || !ev.dataTransfer) return;\r\n-\r\n-        const id = card.getAttribute('data-appointment-id') || '';\r\n-        if (!id) return;\r\n-\r\n-        try { ev.dataTransfer.setData('text/plain', id); } catch (_) {}\r\n-        try { ev.dataTransfer.setDragImage(card, 10, 10); } catch (_) {}\r\n-        ev.dataTransfer.effectAllowed = 'move';\r\n-        card.classList.add('is-dragging');\r\n-      }, true);\r\n-\r\n-      // DRAGEND: limpa estados visuais\r\n-      body.addEventListener('dragend', (ev) => {\r\n-        const card = ev.target?.closest?.('div[data-appointment-id]');\r\n-        if (card) card.classList.remove('is-dragging');\r\n-        body.querySelectorAll('.agenda-drop-target').forEach(s => s.classList.remove('agenda-drop-target'));\r\n-      }, true);\r\n-\r\n-      // DRAGOVER: habilita drop quando o ponteiro está sobre QUALQUER filho dentro da célula\r\n-      body.addEventListener('dragover', (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        ev.preventDefault();                 // obrigatório para permitir drop\r\n-        if (ev.dataTransfer) ev.dataTransfer.dropEffect = 'move';\r\n-        slot.classList.add('agenda-drop-target');\r\n-      });\r\n-\r\n-      // DRAGLEAVE: remove realce\r\n-      body.addEventListener('dragleave', (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        slot.classList.remove('agenda-drop-target');\r\n-      });\r\n-\r\n-      // DROP: pega a célula alvo e move (profissional + horário)\r\n-      body.addEventListener('drop', async (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n-        if (!slot) return;\r\n-        ev.preventDefault();\r\n-        slot.classList.remove('agenda-drop-target');\r\n-\r\n-        const id = ev.dataTransfer?.getData('text/plain');\r\n-        if (!id) return;\r\n-\r\n-        const newProf = slot.dataset.profissionalId;\r\n-        const hh      = slot.dataset.hh; // ex.: \"14:00\"\r\n-        if (!newProf || !hh) return;\r\n-\r\n-        const dateRaw     = normalizeDate(dateInput?.value || todayStr());\r\n-        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n-\r\n-        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n-      });\r\n-  }\r\n-\r\n-  async function loadProfissionais() {\r\n-    if (!state.selectedStoreId) {\r\n-      state.profissionais = [];\r\n-      if (profSelect) profSelect.innerHTML = '';\r\n-      return;\r\n-    }\r\n-\r\n-    const resp = await api(`/func/profissionais/esteticistas?storeId=${state.selectedStoreId}`);\r\n-    const list = await resp.json().catch(() => []);\r\n-    state.profissionais = Array.isArray(list) ? list : [];\r\n-\r\n-    if (profSelect) {\r\n-      profSelect.innerHTML = state.profissionais\r\n-        .map(p => `<option value=\"${p._id}\">${p.nome}</option>`)\r\n-        .join('');\r\n-    }\r\n-  }\r\n-\r\n-  // Linha do \"agora\" (atualiza a cada 1 minuto)\r\n-  function drawNowLine() {\r\n-      const grids = agendaList?.querySelectorAll(':scope > div[style*=\"grid\"]') || [];\r\n-      const body  = Array.from(grids).find(el => el.querySelector('.agenda-slot')) || grids[1] || grids[0];\r\n-      if (!body) return;\r\n-\r\n-      body.querySelectorAll('.agenda-nowline').forEach(n => n.remove());\r\n-\r\n-      const now = new Date();\r\n-      const minutes = now.getHours() * 60 + now.getMinutes();\r\n-      const percent = minutes / (24 * 60);\r\n-      const y = Math.max(0, Math.min(1, percent)) * body.scrollHeight;\r\n-\r\n-      const line = document.createElement('div');\r\n-      line.className = 'agenda-nowline';\r\n-      line.style.top = `${y}px`;\r\n-      body.appendChild(line);\r\n-\r\n-      if (window.__agendaNowTimer) clearInterval(window.__agendaNowTimer);\r\n-      window.__agendaNowTimer = setInterval(() => {\r\n-        const now2 = new Date();\r\n-        const minutes2 = now2.getHours() * 60 + now2.getMinutes();\r\n-        const percent2 = minutes2 / (24 * 60);\r\n-        const y2 = Math.max(0, Math.min(1, percent2)) * body.scrollHeight;\r\n-        const ln = body.querySelector('.agenda-nowline');\r\n-        if (ln) ln.style.top = `${y2}px`;\r\n-      }, 60_000);\r\n-  }\r\n-\r\n-  // PUT rápido de status (ciclo: agendado → em_espera → em_atendimento → finalizado)\r\n-  async function updateStatusQuick(id, status) {\r\n-      try {\r\n-        const resp = await api(`/func/agendamentos/${id}`, {\r\n-          method: 'PUT',\r\n-          headers: { 'Content-Type': 'application/json' },\r\n-          body: JSON.stringify({ status })\r\n-        });\r\n-        if (!resp.ok) {\r\n-          const err = await resp.json().catch(() => ({}));\r\n-          throw new Error(err.message || 'Erro ao mudar status');\r\n-        }\r\n-        await loadAgendamentos();\r\n-        renderKpis();\r\n-        renderFilters();\r\n-        renderGrid();\r\n-        enhanceAgendaUI();\r\n-      } catch (e) {\r\n-        console.error('updateStatusQuick', e);\r\n-        alert(e.message || 'Erro ao mudar status');\r\n-      }\r\n-    }\r\n-\r\n-    // === Impressão em cupom (80mm) ===\r\n-  function buildCupomHTML(items, meta = {}) {\r\n-    const storeName = (meta.storeName || '').trim();\r\n-    const dateStr   = (meta.dateStr || '').trim();\r\n-\r\n-    const rows = (items || []).map(a => {\r\n-      const pet   = (a.pet || '').toString().trim();\r\n-      const serv  = (a.servico || '').toString().trim();\r\n-      const valor = money(Number(a.valor || 0));\r\n-      // \"Pet Serviço - Valor\" em linha única\r\n-      return `<div class=\"row\"><span class=\"txt\">${pet} ${serv}</span><span class=\"val\">${valor}</span></div>`;\r\n-    }).join('');\r\n-\r\n-    return `\r\n-  <!doctype html>\r\n-  <html>\r\n-  <head>\r\n-    <meta charset=\"utf-8\">\r\n-    <title>Impressão</title>\r\n-    <style>\r\n-      @page { size: 80mm auto; margin: 3mm; }\r\n-      * { box-sizing: border-box; }\r\n-      html, body { padding: 0; margin: 0; }\r\n-      /* Aumenta um pouco o tamanho e usa preto sólido para ganhar contraste na térmica */\r\n-      body {\r\n-        width: 74mm;\r\n-        font: 13px/1.35 -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, \"Apple Color Emoji\",\"Segoe UI Emoji\";\r\n-        color: #000;\r\n-        -webkit-font-smoothing: none; /* deixa o traço mais “cheio” na impressão */\r\n-        font-weight: 600; /* base mais pesada */\r\n-      }\r\n-      .wrap { padding: 2mm 0; }\r\n-      .h1 { text-align:center; font-weight:700; font-size: 15px; margin-bottom: 1mm; }\r\n-      .meta { text-align:center; font-size: 12px; color:#000; font-weight:700; margin-bottom: 2mm; }\r\n-      .hr { border-top: 1px dashed #000; margin: 2mm 0; }\r\n-      .row { display:flex; align-items:flex-start; justify-content:space-between; gap: 4mm; padding: 1mm 0; }\r\n-      /* Linhas do cupom bem escuras */\r\n-      .row .txt { flex: 1 1 auto; word-break: break-word; font-weight:700; }\r\n-      .row .val { flex: 0 0 auto; white-space: nowrap; font-weight:700; }\r\n-      .foot { text-align:center; margin-top: 2mm; font-size: 12px; color:#000; font-weight:700; }\r\n-      @media print { .no-print { display: none !important; } }\r\n-    </style>\r\n-  </head>\r\n-  <body>\r\n-    <div class=\"wrap\">\r\n-      <div class=\"h1\">Agenda</div>\r\n-      <div class=\"meta\">${storeName ? storeName + ' • ' : ''}${dateStr}</div>\r\n-      <div class=\"hr\"></div>\r\n-      ${rows || '<div class=\"row\"><span class=\"txt\">Sem itens</span><span class=\"val\"></span></div>'}\r\n-      <div class=\"hr\"></div>\r\n-      <div class=\"foot\">Obrigado!</div>\r\n-    </div>\r\n-    <script>\r\n-      window.onload = function(){ setTimeout(function(){ window.print(); }, 50); };\r\n-      window.onafterprint = function(){ setTimeout(function(){ window.close(); }, 50); };\r\n-    </script>\r\n-  </body>\r\n-  </html>`;\r\n-  }\r\n-\r\n-  function handlePrintCupom() {\r\n-    try {\r\n-      const items = getFilteredAgendamentos();\r\n-\r\n-      // Ordena por horário (se houver)\r\n-      items.sort((a, b) => {\r\n-        const da = new Date(a.h || a.scheduledAt || 0).getTime();\r\n-        const db = new Date(b.h || b.scheduledAt || 0).getTime();\r\n-        return da - db;\r\n-      });\r\n-\r\n-      const dateStr =\r\n-        (document.getElementById('agenda-date-label-visible')?.textContent || '').trim() ||\r\n-        new Date((normalizeDate(dateInput?.value || todayStr())) + 'T00:00:00').toLocaleDateString('pt-BR');\r\n-\r\n-      const storeName =\r\n-        (document.getElementById('agenda-store-label-visible')?.textContent || '').trim();\r\n-\r\n-      const html = buildCupomHTML(items, { storeName, dateStr });\r\n-\r\n-      const w = window.open('', 'print_cupom', 'width=420,height=600');\r\n-      if (!w) { alert('O navegador bloqueou a janela de impressão. Habilite pop-ups para continuar.'); return; }\r\n-      w.document.open('text/html');\r\n-      w.document.write(html);\r\n-      w.document.close();\r\n-      w.focus();\r\n-    } catch (e) {\r\n-      console.error('handlePrintCupom', e);\r\n-      alert('Não foi possível preparar a impressão.');\r\n-    }\r\n-  }\r\n-\r\n-  // Events\r\n-  addBtn?.addEventListener('click', openAddModal);\r\n-  modalClose?.addEventListener('click', closeModal);\r\n-  modalCancel?.addEventListener('click', closeModal);\r\n-  modalSave?.addEventListener('click', saveAgendamento);\r\n-\r\n-  addStoreSelect?.addEventListener('change', () => {\r\n-    const sid = addStoreSelect.value;\r\n-    const current = profSelect?.value || '';\r\n-    populateModalProfissionais(sid, current);\r\n-  });\r\n-\r\n-  // Botão \"Imprimir\" — cupom 80mm com \"Pet Serviço - Valor\"\r\n-    (function () {\r\n-      const btn0 = document.getElementById('print-agenda-btn');\r\n-      // (se algum listener antigo ainda existir em outro build, garantimos o nosso fluxo)\r\n-      if (btn0) {\r\n-        // remove listeners antigos (se houver) clonando o nó\r\n-        const clone = btn0.cloneNode(true);\r\n-        btn0.parentNode.replaceChild(clone, btn0);\r\n-        clone.addEventListener('click', (ev) => {\r\n-          ev.preventDefault();\r\n-          ev.stopImmediatePropagation?.();\r\n-          handlePrintCupom();\r\n-        });\r\n-      }\r\n-    })();\r\n-\r\n-  cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\r\n-  servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\r\n-\r\n-  addServAddBtn?.addEventListener('click', (e) => {\r\n-    e.preventDefault();\r\n-    const s = state.selectedServico;\r\n-    const v = Number(valorInput?.value || 0);\r\n-    if (!s || !s._id) { alert('Escolha um serviço na busca.'); return; }\r\n-    if (!(v >= 0)) { alert('Valor inválido.'); return; }\r\n-    state.tempServicos.push({ _id: s._id, nome: s.nome, valor: v });\r\n-    // limpa seleção\r\n-    state.selectedServico = null;\r\n-    if (servInput)  servInput.value = '';\r\n-    if (valorInput) valorInput.value = '';\r\n-    renderServicosLista();\r\n-  });\r\n-\r\n-  modalDelete?.addEventListener('click', handleDelete);\r\n-\r\n-  // Ações rápidas nos cartões (delegação no container da agenda)\r\n-  agendaList?.addEventListener('click', (ev) => {\r\n-    // toggle do menu mobile\r\n-    const more = ev.target.closest('.agenda-card__more');\r\n-    if (more) {\r\n-      const holder = more.parentElement?.querySelector('.agenda-card__actions');\r\n-      if (holder) holder.classList.toggle('hidden');\r\n-      return;\r\n-    }\r\n-\r\n-    const btn = ev.target.closest('.agenda-action');\r\n-    if (!btn) return;\r\n-    const id = btn.getAttribute('data-id');\r\n-    if (!id) return;\r\n-\r\n-    if (btn.classList.contains('edit')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      if (item) openEditModal(item);\r\n-    } else if (btn.classList.contains('status')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-      const cur = (item && item.status) || 'agendado';\r\n-      const next = chain[(chain.indexOf(cur) + 1) % chain.length];\r\n-      updateStatusQuick(id, next);\r\n-    } else if (btn.classList.contains('cobrar')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      if (item) openEditModal(item); // reaproveite seu modal/fluxo de cobrança\r\n-    }\r\n-  });\r\n-\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    updateStoreLabel();\r\n-    state.__didInitialScroll = false;     // nova loja -> recalcula scroll\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    state.__didInitialScroll = false;     // nova data -> permite auto-scroll\r\n-    await loadAgendamentos();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  // Boot\r\n-  function setupShortcuts() {\r\n-    document.addEventListener('keydown', (e) => {\r\n-      if (e.target && ['INPUT','SELECT','TEXTAREA'].includes(e.target.tagName)) return; // não atrapalhar digitação\r\n-      if (e.key === 't' || e.key === 'T') {\r\n-        if (dateInput) {\r\n-          dateInput.value = todayStr();\r\n-          state.__didInitialScroll = false;\r\n-          loadAgendamentos().then(() => {\r\n-            renderKpis(); renderFilters(); renderGrid(); enhanceAgendaUI();\r\n-          });\r\n-        }\r\n-      }\r\n-      if (e.key === 'n' || e.key === 'N') {\r\n-        e.preventDefault();\r\n-        openAddModal();\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  (async function init() {\r\n-    if (!dateInput?.value) dateInput.value = todayStr();\r\n-    if (viewSelect && !viewSelect.value) viewSelect.value = 'day';\r\n-    state.view = (viewSelect?.value) || 'day';\r\n-\r\n-    loadFiltersFromStorage();\r\n-    await loadStores();\r\n-    if (!state.selectedStoreId && storeSelect?.value) {\r\n-      state.selectedStoreId = storeSelect.value;\r\n-    }\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-\r\n-    ensureToolbar();\r\n-    ensureTodayButton();\r\n-    setupShortcuts();\r\n-\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  })();\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    state.__didInitialScroll = false;\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  viewSelect?.addEventListener('change', async () => {\r\n-    state.view = viewSelect.value || 'day';\r\n-    state.__didInitialScroll = false;\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  // Atualizações após troca de loja/data/status etc.\r\n-  storeSelect?.addEventListener('change', async () => {\r\n-    state.selectedStoreId = storeSelect.value;\r\n-    updateStoreLabel();\r\n-    state.__didInitialScroll = false;\r\n-    await loadProfissionais();\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-\r\n-  dateInput?.addEventListener('change', async () => {\r\n-    state.__didInitialScroll = false;\r\n-    await loadAgendamentos();\r\n-    renderKpis();\r\n-    renderFilters();\r\n-    renderGrid();\r\n-    enhanceAgendaUI();\r\n-  });\r\n-})();\r\n"
                },
                {
                    "date": 1757618488329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -829,11 +829,11 @@\n           ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n         </div>\r\n       `;\r\n \r\n-      // Linha abaixo: Tutor abreviado | Pet (agora lendo também `a.tutor` da rota /func/agendamentos/range)\r\n+      // Linha abaixo: Tutor abreviado | Pet\r\n       const rawTutorName =\r\n-        a.tutor ||                       // **principal** no mensal\r\n+        a.tutor ||\r\n         a.tutorNome ||\r\n         a.clienteNome ||\r\n         (a.cliente && (a.cliente.nomeCompleto || a.cliente.nomeContato || a.cliente.razaoSocial || a.cliente.nome || a.cliente.name)) ||\r\n         (a.tutor && (a.tutor.nomeCompleto || a.tutor.nomeContato || a.tutor.razaoSocial || a.tutor.nome)) ||\r\n@@ -848,33 +848,19 @@\n       nameEl.className = 'text-[12px] font-medium text-gray-900 text-center truncate';\r\n       nameEl.title = headLabel;\r\n       nameEl.textContent = headLabel;\r\n \r\n-      // Corpo: serviço 1 linha + observação 1 linha (opcional)\r\n-      const bodyEl = document.createElement('div');\r\n-      const svc = document.createElement('div');\r\n-      svc.className = 'text-[12px] text-gray-600 truncate';     // 1 linha\r\n-      svc.textContent = a.servico || '';\r\n-      bodyEl.appendChild(svc);\r\n-\r\n-      if (a.observacoes && String(a.observacoes).trim()) {\r\n-        const obs = document.createElement('div');\r\n-        obs.className = 'text-[11px] text-gray-700 italic truncate'; // 1 linha\r\n-        obs.textContent = String(a.observacoes).trim();\r\n-        bodyEl.appendChild(obs);\r\n-      }\r\n-\r\n-      // Rodapé enxuto: valor à direita\r\n+      // Rodapé: manter apenas o valor (R$) à direita\r\n       const footerEl = document.createElement('div');\r\n-      footerEl.className = 'flex items-center justify-end gap-2 pt-0.5';\r\n+      footerEl.className = 'flex items-center justify-end pt-0.5';\r\n       const price = document.createElement('div');\r\n       price.className = 'text-[12px] text-gray-800 font-semibold';\r\n       price.textContent = money(a.valor);\r\n       footerEl.appendChild(price);\r\n \r\n+      // Montagem final (sem serviço/observação)\r\n       card.appendChild(headerEl);\r\n       card.appendChild(nameEl);\r\n-      card.appendChild(bodyEl);\r\n       card.appendChild(footerEl);\r\n \r\n       list.appendChild(card);\r\n \r\n"
                },
                {
                    "date": 1757620073697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -799,9 +799,11 @@\n       const dayNum = new Date(d+'T00:00:00').getDate();\r\n       title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n \r\n       const list = document.createElement('div');\r\n-      list.className = 'mt-1 space-y-1';\r\n+      // droppable por dia no mensal\r\n+      list.className = 'mt-1 space-y-1 agenda-slot';\r\n+      list.dataset.day = d;\r\n \r\n       const itemsDay = byDay.get(d) || [];\r\n       itemsDay.forEach((a, idx)=>{\r\n         const meta = statusMeta(a.status);\r\n@@ -819,9 +821,9 @@\n         a.servico || '',\r\n         (a.observacoes ? `Obs: ${String(a.observacoes).trim()}` : '')\r\n       ].filter(Boolean).join(' • '); // tooltip exibe tudo sem poluir o card\r\n \r\n-      // Header: hora à esquerda + STATUS centralizado (reserva espaço p/ botões à direita)\r\n+      // Header: hora + STATUS centralizado (reserva espaço p/ botões à direita)\r\n       const headerEl = document.createElement('div');\r\n       headerEl.className = 'flex items-center gap-2 pr-14 md:pr-16 mb-1';\r\n       headerEl.innerHTML = `\r\n         <span class=\"inline-flex items-center px-1.5 py-[1px] rounded bg-slate-100 text-[10px] font-medium\">${hhmm}</span>\r\n@@ -829,9 +831,9 @@\n           ${renderStatusBadge(a.status).replace('text-xs','text-[10px]')}\r\n         </div>\r\n       `;\r\n \r\n-      // Linha abaixo: Tutor abreviado | Pet\r\n+      // Linha abaixo: Tutor abreviado | Pet (com fallbacks)\r\n       const rawTutorName =\r\n         a.tutor ||\r\n         a.tutorNome ||\r\n         a.clienteNome ||\r\n@@ -1424,12 +1426,18 @@\n     try {\r\n       applyZebraAndSublines();\r\n       decorateCards();\r\n \r\n-      if (state.view === 'day') {\r\n+      // DnD ativo em dia, semana e mês\r\n+      if (state.view === 'day' || state.view === 'week' || state.view === 'month') {\r\n         enableDragDrop();\r\n+      }\r\n+      // Linha do \"agora\" só onde faz sentido (dia/semana)\r\n+      if (state.view === 'day' || state.view === 'week') {\r\n         drawNowLine();\r\n+      }\r\n \r\n+      if (state.view === 'day') {\r\n         const date = normalizeDate(dateInput?.value || todayStr());\r\n         if (!state.__didInitialScroll && date === todayStr()) {\r\n           scrollToNow();\r\n           state.__didInitialScroll = true;\r\n@@ -1693,26 +1701,32 @@\n         if (!slot) return;\r\n         slot.classList.remove('agenda-drop-target');\r\n       });\r\n \r\n-      // DROP: pega a célula alvo e move (profissional + horário)\r\n+      // DROP: adapta à visão atual\r\n       body.addEventListener('drop', async (ev) => {\r\n         const slot = ev.target?.closest?.('.agenda-slot');\r\n         if (!slot) return;\r\n         ev.preventDefault();\r\n-        slot.classList.remove('agenda-drop-target');\r\n \r\n         const id = ev.dataTransfer?.getData('text/plain');\r\n         if (!id) return;\r\n \r\n-        const newProf = slot.dataset.profissionalId;\r\n-        const hh      = slot.dataset.hh; // ex.: \"14:00\"\r\n-        if (!newProf || !hh) return;\r\n+        // Objeto original para preservar minutos no mensal\r\n+        const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+        if (!item) return;\r\n+        const orig = new Date(item.h || item.scheduledAt);\r\n \r\n-        const dateRaw     = normalizeDate(dateInput?.value || todayStr());\r\n-        const scheduledAt = buildLocalDateTime(dateRaw, hh).toISOString();\r\n+        // Semanal: tem day + hh. Mensal: só day; mantém HH:MM original\r\n+        const day = slot.dataset.day || normalizeDate(dateInput?.value || todayStr());\r\n+        const hh  = slot.dataset.hh || `${pad(orig.getHours())}:${String(orig.getMinutes()).padStart(2,'0')}`;\r\n \r\n-        await moveAppointmentQuick(id, { profissionalId: newProf, scheduledAt });\r\n+        const payload = {};\r\n+        if (slot.dataset.profissionalId) payload.profissionalId = slot.dataset.profissionalId;\r\n+\r\n+        payload.scheduledAt = buildLocalDateTime(day, hh).toISOString();\r\n+\r\n+        await moveAppointmentQuick(id, payload);\r\n       });\r\n   }\r\n \r\n   async function loadProfissionais() {\r\n"
                },
                {
                    "date": 1757620397998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -798,12 +798,17 @@\n       title.className = `flex items-center justify-between text-[11px] ${inMonth?'text-slate-700':'text-slate-400'}`;\r\n       const dayNum = new Date(d+'T00:00:00').getDate();\r\n       title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n \r\n+      // célula do dia (container) vira droppable e carrega a data ISO completa\r\n+      // y = ano corrente do calendário; m = mês (0-based); d = dia (1-31) já existentes no escopo\r\n+      const dayISO = `${y}-${String(m + 1).padStart(2,'0')}-${String(d).padStart(2,'0')}`;\r\n+      dayEl.classList.add('agenda-slot');     // toda a célula aceita drop\r\n+      dayEl.dataset.day = dayISO;\r\n+\r\n+      // lista de cards do dia (apenas visual)\r\n       const list = document.createElement('div');\r\n-      // droppable por dia no mensal\r\n-      list.className = 'mt-1 space-y-1 agenda-slot';\r\n-      list.dataset.day = d;\r\n+      list.className = 'mt-1 space-y-1';\r\n \r\n       const itemsDay = byDay.get(d) || [];\r\n       itemsDay.forEach((a, idx)=>{\r\n         const meta = statusMeta(a.status);\r\n"
                },
                {
                    "date": 1757620453108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1706,25 +1706,26 @@\n         if (!slot) return;\r\n         slot.classList.remove('agenda-drop-target');\r\n       });\r\n \r\n-      // DROP: adapta à visão atual\r\n+      // DROP: usa sempre a data do alvo (Mensal = só data; Semanal/Diário = data+hora)\r\n       body.addEventListener('drop', async (ev) => {\r\n-        const slot = ev.target?.closest?.('.agenda-slot');\r\n+        const slot = ev.target?.closest?.('[data-day]'); // pega célula ou lista\r\n         if (!slot) return;\r\n         ev.preventDefault();\r\n \r\n         const id = ev.dataTransfer?.getData('text/plain');\r\n         if (!id) return;\r\n \r\n-        // Objeto original para preservar minutos no mensal\r\n         const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n         if (!item) return;\r\n+\r\n         const orig = new Date(item.h || item.scheduledAt);\r\n \r\n-        // Semanal: tem day + hh. Mensal: só day; mantém HH:MM original\r\n-        const day = slot.dataset.day || normalizeDate(dateInput?.value || todayStr());\r\n-        const hh  = slot.dataset.hh || `${pad(orig.getHours())}:${String(orig.getMinutes()).padStart(2,'0')}`;\r\n+        // day SEMPRE em YYYY-MM-DD vindo do atributo data-day da célula\r\n+        const day = slot.dataset.day;\r\n+        // Semanal/Diário informam hh no slot; Mensal não -> mantém hora original\r\n+        const hh = slot.dataset.hh || `${pad(orig.getHours())}:${String(orig.getMinutes()).padStart(2,'0')}`;\r\n \r\n         const payload = {};\r\n         if (slot.dataset.profissionalId) payload.profissionalId = slot.dataset.profissionalId;\r\n \r\n"
                },
                {
                    "date": 1757620847170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -798,18 +798,19 @@\n       title.className = `flex items-center justify-between text-[11px] ${inMonth?'text-slate-700':'text-slate-400'}`;\r\n       const dayNum = new Date(d+'T00:00:00').getDate();\r\n       title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n \r\n-      // célula do dia (container) vira droppable e carrega a data ISO completa\r\n-      // y = ano corrente do calendário; m = mês (0-based); d = dia (1-31) já existentes no escopo\r\n-      const dayISO = `${y}-${String(m + 1).padStart(2,'0')}-${String(d).padStart(2,'0')}`;\r\n-      dayEl.classList.add('agenda-slot');     // toda a célula aceita drop\r\n-      dayEl.dataset.day = dayISO;\r\n-\r\n-      // lista de cards do dia (apenas visual)\r\n+      // lista de cards do dia (droppable)\r\n       const list = document.createElement('div');\r\n-      list.className = 'mt-1 space-y-1';\r\n+      list.className = 'mt-1 space-y-1 agenda-slot';\r\n \r\n+      // baseDate = mês/ano atualmente exibidos no calendário (ou hoje)\r\n+      const baseDate = new Date(normalizeDate(dateInput?.value || todayStr()));\r\n+      const dayISO = `${baseDate.getFullYear()}-${String(baseDate.getMonth() + 1).padStart(2, '0')}-${String(d).padStart(2, '0')}`;\r\n+\r\n+      // cada coluna/dia do mês carrega a data completa para o DROP\r\n+      list.dataset.day = dayISO;\r\n+\r\n       const itemsDay = byDay.get(d) || [];\r\n       itemsDay.forEach((a, idx)=>{\r\n         const meta = statusMeta(a.status);\r\n         const when = new Date(a.h || a.scheduledAt);\r\n@@ -1708,9 +1709,9 @@\n       });\r\n \r\n       // DROP: usa sempre a data do alvo (Mensal = só data; Semanal/Diário = data+hora)\r\n       body.addEventListener('drop', async (ev) => {\r\n-        const slot = ev.target?.closest?.('[data-day]'); // pega célula ou lista\r\n+        const slot = ev.target?.closest?.('[data-day]');\r\n         if (!slot) return;\r\n         ev.preventDefault();\r\n \r\n         const id = ev.dataTransfer?.getData('text/plain');\r\n@@ -1720,12 +1721,12 @@\n         if (!item) return;\r\n \r\n         const orig = new Date(item.h || item.scheduledAt);\r\n \r\n-        // day SEMPRE em YYYY-MM-DD vindo do atributo data-day da célula\r\n+        // day SEMPRE vem do atributo data-day em ISO\r\n         const day = slot.dataset.day;\r\n-        // Semanal/Diário informam hh no slot; Mensal não -> mantém hora original\r\n-        const hh = slot.dataset.hh || `${pad(orig.getHours())}:${String(orig.getMinutes()).padStart(2,'0')}`;\r\n+        // semanal/diário informam hh; mensal não -> mantém a hora original\r\n+        const hh  = slot.dataset.hh || `${String(orig.getHours()).padStart(2,'0')}:${String(orig.getMinutes()).padStart(2,'0')}`;\r\n \r\n         const payload = {};\r\n         if (slot.dataset.profissionalId) payload.profissionalId = slot.dataset.profissionalId;\r\n \r\n"
                },
                {
                    "date": 1757621134533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1709,9 +1709,9 @@\n       });\r\n \r\n       // DROP: usa sempre a data do alvo (Mensal = só data; Semanal/Diário = data+hora)\r\n       body.addEventListener('drop', async (ev) => {\r\n-        const slot = ev.target?.closest?.('[data-day]');\r\n+        const slot = ev.target?.closest?.('[data-day]'); // pega célula ou lista\r\n         if (!slot) return;\r\n         ev.preventDefault();\r\n \r\n         const id = ev.dataTransfer?.getData('text/plain');\r\n@@ -1721,12 +1721,12 @@\n         if (!item) return;\r\n \r\n         const orig = new Date(item.h || item.scheduledAt);\r\n \r\n-        // day SEMPRE vem do atributo data-day em ISO\r\n+        // day SEMPRE em YYYY-MM-DD vindo do atributo data-day da célula\r\n         const day = slot.dataset.day;\r\n-        // semanal/diário informam hh; mensal não -> mantém a hora original\r\n-        const hh  = slot.dataset.hh || `${String(orig.getHours()).padStart(2,'0')}:${String(orig.getMinutes()).padStart(2,'0')}`;\r\n+        // Semanal/Diário informam hh no slot; Mensal não -> mantém hora original\r\n+        const hh = slot.dataset.hh || `${pad(orig.getHours())}:${String(orig.getMinutes()).padStart(2,'0')}`;\r\n \r\n         const payload = {};\r\n         if (slot.dataset.profissionalId) payload.profissionalId = slot.dataset.profissionalId;\r\n \r\n"
                },
                {
                    "date": 1757621236542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -798,17 +798,12 @@\n       title.className = `flex items-center justify-between text-[11px] ${inMonth?'text-slate-700':'text-slate-400'}`;\r\n       const dayNum = new Date(d+'T00:00:00').getDate();\r\n       title.innerHTML = `<span class=\"font-semibold\">${String(dayNum).padStart(2,'0')}</span>`;\r\n \r\n-      // célula do dia (container) vira droppable e carrega a data ISO completa\r\n-      // y = ano corrente do calendário; m = mês (0-based); d = dia (1-31) já existentes no escopo\r\n-      const dayISO = `${y}-${String(m + 1).padStart(2,'0')}-${String(d).padStart(2,'0')}`;\r\n-      dayEl.classList.add('agenda-slot');     // toda a célula aceita drop\r\n-      dayEl.dataset.day = dayISO;\r\n-\r\n-      // lista de cards do dia (apenas visual)\r\n       const list = document.createElement('div');\r\n-      list.className = 'mt-1 space-y-1';\r\n+      // droppable por dia no mensal\r\n+      list.className = 'mt-1 space-y-1 agenda-slot';\r\n+      list.dataset.day = d;\r\n \r\n       const itemsDay = byDay.get(d) || [];\r\n       itemsDay.forEach((a, idx)=>{\r\n         const meta = statusMeta(a.status);\r\n@@ -1706,26 +1701,25 @@\n         if (!slot) return;\r\n         slot.classList.remove('agenda-drop-target');\r\n       });\r\n \r\n-      // DROP: usa sempre a data do alvo (Mensal = só data; Semanal/Diário = data+hora)\r\n+      // DROP: adapta à visão atual\r\n       body.addEventListener('drop', async (ev) => {\r\n-        const slot = ev.target?.closest?.('[data-day]'); // pega célula ou lista\r\n+        const slot = ev.target?.closest?.('.agenda-slot');\r\n         if (!slot) return;\r\n         ev.preventDefault();\r\n \r\n         const id = ev.dataTransfer?.getData('text/plain');\r\n         if (!id) return;\r\n \r\n+        // Objeto original para preservar minutos no mensal\r\n         const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n         if (!item) return;\r\n-\r\n         const orig = new Date(item.h || item.scheduledAt);\r\n \r\n-        // day SEMPRE em YYYY-MM-DD vindo do atributo data-day da célula\r\n-        const day = slot.dataset.day;\r\n-        // Semanal/Diário informam hh no slot; Mensal não -> mantém hora original\r\n-        const hh = slot.dataset.hh || `${pad(orig.getHours())}:${String(orig.getMinutes()).padStart(2,'0')}`;\r\n+        // Semanal: tem day + hh. Mensal: só day; mantém HH:MM original\r\n+        const day = slot.dataset.day || normalizeDate(dateInput?.value || todayStr());\r\n+        const hh  = slot.dataset.hh || `${pad(orig.getHours())}:${String(orig.getMinutes()).padStart(2,'0')}`;\r\n \r\n         const payload = {};\r\n         if (slot.dataset.profissionalId) payload.profissionalId = slot.dataset.profissionalId;\r\n \r\n"
                },
                {
                    "date": 1757628164606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1755,8 +1755,19 @@\n \r\n         const id = card.getAttribute('data-appointment-id') || '';\r\n         if (!id) return;\r\n \r\n+        // Bloqueia início do arrasto se faturado e sem permissão\r\n+        try {\r\n+          const item = (state.agendamentos || []).find(x => String(x._id) === String(id));\r\n+          if (item && (item.pago || item.codigoVenda) && !isPrivilegedRole()) {\r\n+            ev.preventDefault();\r\n+            ev.stopPropagation();\r\n+            alert('Agendamento faturado: não é possível mover. (Somente Admin/Admin Master)');\r\n+            return;\r\n+          }\r\n+        } catch (_) {}\r\n+\r\n         try { ev.dataTransfer.setData('text/plain', id); } catch (_) {}\r\n         try { ev.dataTransfer.setDragImage(card, 10, 10); } catch (_) {}\r\n         ev.dataTransfer.effectAllowed = 'move';\r\n         card.classList.add('is-dragging');\r\n@@ -2022,35 +2033,45 @@\n   modalDelete?.addEventListener('click', handleDelete);\r\n \r\n   // Ações rápidas nos cartões (delegação no container da agenda)\r\n   agendaList?.addEventListener('click', (ev) => {\r\n-    // toggle do menu mobile\r\n-    const more = ev.target.closest('.agenda-card__more');\r\n-    if (more) {\r\n-      const holder = more.parentElement?.querySelector('.agenda-card__actions');\r\n-      if (holder) holder.classList.toggle('hidden');\r\n-      return;\r\n-    }\r\n+      // toggle do menu mobile\r\n+      const more = ev.target.closest('.agenda-card__more');\r\n+      if (more) {\r\n+        const holder = more.parentElement?.querySelector('.agenda-card__actions');\r\n+        if (holder) holder.classList.toggle('hidden');\r\n+        return;\r\n+      }\r\n \r\n-    const btn = ev.target.closest('.agenda-action');\r\n-    if (!btn) return;\r\n-    const id = btn.getAttribute('data-id');\r\n-    if (!id) return;\r\n+      const btn = ev.target.closest('.agenda-action');\r\n+      if (!btn) return;\r\n+      const id = btn.getAttribute('data-id');\r\n+      if (!id) return;\r\n \r\n-    if (btn.classList.contains('edit')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      if (item) openEditModal(item);\r\n-    } else if (btn.classList.contains('status')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n-      const cur = (item && item.status) || 'agendado';\r\n-      const next = chain[(chain.indexOf(cur) + 1) % chain.length];\r\n-      updateStatusQuick(id, next);\r\n-    } else if (btn.classList.contains('cobrar')) {\r\n-      const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n-      if (item) openEditModal(item); // reaproveite seu modal/fluxo de cobrança\r\n-    }\r\n-  });\r\n+      if (btn.classList.contains('edit')) {\r\n+        const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+        if (!item) return;\r\n+        if ((item.pago || item.codigoVenda) && !isPrivilegedRole()) {\r\n+          alert('Este agendamento já foi faturado. Apenas Admin/Admin Master podem editar.');\r\n+          return;\r\n+        }\r\n+        openEditModal(item);\r\n+      } else if (btn.classList.contains('status')) {\r\n+        const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+        const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\r\n+        const cur = (item && item.status) || 'agendado';\r\n+        const next = chain[(chain.indexOf(cur) + 1) % chain.length];\r\n+        updateStatusQuick(id, next);\r\n+      } else if (btn.classList.contains('cobrar')) {\r\n+        const item = state.agendamentos.find(x => String(x._id) === String(id));\r\n+        if (!item) return;\r\n+        if (item.pago || item.codigoVenda) {\r\n+          alert('Este agendamento já possui código de venda registrado.');\r\n+          return;\r\n+        }\r\n+        openVendaModal(item);\r\n+      }\r\n+    });\r\n \r\n   storeSelect?.addEventListener('change', async () => {\r\n     state.selectedStoreId = storeSelect.value;\r\n     updateStoreLabel();\r\n"
                }
            ],
            "date": 1757167909223,
            "name": "Commit-0",
            "content": "(function () {\r\n  const listEl = document.getElementById('agenda-list');\r\n  const dateInput = document.getElementById('agenda-date');\r\n  const dateLabel = document.getElementById('agenda-date-label');\r\n  const addBtn = document.getElementById('add-service-btn');\r\n\r\n  if (!listEl || !dateInput || !dateLabel) return;\r\n\r\n  // Define a data inicial como \"hoje\" no fuso do browser\r\n  const todayISO = new Date().toISOString().slice(0, 10);\r\n  if (!dateInput.value) dateInput.value = todayISO;\r\n\r\n  function formatPtBr(d) {\r\n    return d.toLocaleDateString('pt-BR', { weekday: 'long', day: '2-digit', month: '2-digit', year: 'numeric' });\r\n  }\r\n\r\n  function getDateFromInput() {\r\n    const [y, m, d] = (dateInput.value || todayISO).split('-').map(Number);\r\n    return new Date(y, (m - 1), d);\r\n  }\r\n\r\n  function renderAgenda() {\r\n    const date = getDateFromInput();\r\n    dateLabel.textContent = `(${formatPtBr(date)})`;\r\n\r\n    // Limpa a lista\r\n    listEl.innerHTML = '';\r\n\r\n    // Cria 24 linhas (00:00 a 23:00)\r\n    for (let h = 0; h < 24; h++) {\r\n      const hh = String(h).padStart(2, '0');\r\n      const li = document.createElement('li');\r\n      li.className = 'grid grid-cols-12 hover:bg-gray-50';\r\n\r\n      const hourCol = document.createElement('div');\r\n      hourCol.className = 'col-span-3 md:col-span-2 lg:col-span-1 px-4 py-3 text-sm font-semibold text-gray-500';\r\n      hourCol.textContent = `${hh}:00`;\r\n\r\n      const itemsCol = document.createElement('div');\r\n      itemsCol.className = 'col-span-9 md:col-span-10 lg:col-span-11 px-4 py-3';\r\n      itemsCol.setAttribute('data-timeslot', `${hh}:00`);\r\n\r\n      // placeholder vazio (a lista fica pronta para receber cards de agendamentos futuramente)\r\n      const empty = document.createElement('div');\r\n      empty.className = 'text-gray-400 text-sm italic';\r\n      empty.textContent = 'Sem agendamentos';\r\n      itemsCol.appendChild(empty);\r\n\r\n      li.appendChild(hourCol);\r\n      li.appendChild(itemsCol);\r\n      listEl.appendChild(li);\r\n    }\r\n  }\r\n\r\n  // Ações\r\n  dateInput.addEventListener('change', renderAgenda);\r\n\r\n  if (addBtn) {\r\n    addBtn.addEventListener('click', () => {\r\n      // Integração futura com modal/CRUD.\r\n      // Por ora, apenas informa que a ação será implementada.\r\n      alert('Adicionar Serviços: em construção.');\r\n    });\r\n  }\r\n\r\n  // Primeira renderização\r\n  renderAgenda();\r\n})();"
        }
    ]
}