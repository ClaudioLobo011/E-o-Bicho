{
    "sourceFile": "scripts/funcionarios/vet/ficha-clinica.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1757952220768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757952619748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n     hideSugestoes();\r\n \r\n     // preenche card do tutor\r\n     if (els.tutorNome) els.tutorNome.textContent = cli?.nome || '—';\r\n-    if (els.tutorEmail) els.tutorEmail.textContent = (cli?.email || '').trim() ? `${cli.email} · E-mail` : '—';\r\n+    if (els.tutorEmail) els.tutorEmail.textContent = (cli?.email || '').trim() ? `${cli.email}` : '—';\r\n     // telefone não vem no endpoint /buscar; mantemos placeholder se não houver\r\n     if (els.tutorTelefone && (!els.tutorTelefone.textContent || els.tutorTelefone.textContent.includes('(##)'))) {\r\n       els.tutorTelefone.textContent = '—';\r\n     }\r\n"
                },
                {
                    "date": 1757953229768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,13 +56,13 @@\n       const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n       const list = await resp.json().catch(() => []);\r\n       if (!Array.isArray(list) || !els.cliSug) return;\r\n \r\n-      els.cliSug.innerHTML = list.map(u => `\r\n-        <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\" data-email=\"${u.email||''}\">\r\n-          <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n-          <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n-        </li>`).join('');\r\n+els.cliSug.innerHTML = list.map(u => `\r\n+  <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\" data-email=\"${u.email||''}\" data-celular=\"${u.celular||''}\">\r\n+    <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n+    <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n+  </li>`).join('');\r\n       els.cliSug.classList.remove('hidden');\r\n \r\n       Array.from(els.cliSug.querySelectorAll('li')).forEach(li => {\r\n         li.addEventListener('click', () => onSelectCliente({\r\n"
                },
                {
                    "date": 1757953334367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,14 @@\n       clearTimeout(t);\r\n       t = setTimeout(() => fn.apply(this, args), wait);\r\n     };\r\n   }\r\n+    function formatPhone(v) {\r\n+    const d = String(v || '').replace(/\\D/g, '');\r\n+    if (d.length >= 11) return `(${d.slice(0,2)}) ${d.slice(2,7)}-${d.slice(7,11)}`;\r\n+    if (d.length >= 10) return `(${d.slice(0,2)}) ${d.slice(2,6)}-${d.slice(6,10)}`;\r\n+    return d || '';\r\n+    }\r\n \r\n   // --- elementos da página ---\r\n   const els = {\r\n     cliInput: document.getElementById('vet-cli-input'),\r\n@@ -56,22 +62,23 @@\n       const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n       const list = await resp.json().catch(() => []);\r\n       if (!Array.isArray(list) || !els.cliSug) return;\r\n \r\n-els.cliSug.innerHTML = list.map(u => `\r\n-  <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\" data-email=\"${u.email||''}\" data-celular=\"${u.celular||''}\">\r\n-    <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n-    <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n-  </li>`).join('');\r\n+    els.cliSug.innerHTML = list.map(u => `\r\n+    <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\" data-email=\"${u.email||''}\" data-celular=\"${u.celular||''}\">\r\n+        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n+        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n+    </li>`).join('');\r\n       els.cliSug.classList.remove('hidden');\r\n \r\n-      Array.from(els.cliSug.querySelectorAll('li')).forEach(li => {\r\n-        li.addEventListener('click', () => onSelectCliente({\r\n-          _id: li.dataset.id,\r\n-          nome: li.dataset.nome,\r\n-          email: li.dataset.email || ''\r\n-        }));\r\n-      });\r\n+        Array.from(els.cliSug.querySelectorAll('li')).forEach(li => {\r\n+            li.addEventListener('click', () => onSelectCliente({\r\n+                _id: li.dataset.id,\r\n+                nome: li.dataset.nome,\r\n+                email: li.dataset.email || '',\r\n+                celular: li.dataset.celular || ''\r\n+            }));\r\n+        });\r\n     } catch (e) {\r\n       // silencioso\r\n     }\r\n   }\r\n@@ -90,12 +97,11 @@\n \r\n     // preenche card do tutor\r\n     if (els.tutorNome) els.tutorNome.textContent = cli?.nome || '—';\r\n     if (els.tutorEmail) els.tutorEmail.textContent = (cli?.email || '').trim() ? `${cli.email}` : '—';\r\n-    // telefone não vem no endpoint /buscar; mantemos placeholder se não houver\r\n-    if (els.tutorTelefone && (!els.tutorTelefone.textContent || els.tutorTelefone.textContent.includes('(##)'))) {\r\n-      els.tutorTelefone.textContent = '—';\r\n-    }\r\n+    if (els.tutorTelefone) els.tutorTelefone.textContent = (cli?.celular || '').trim()\r\n+    ? formatPhone(cli.celular)\r\n+    : '—';\r\n \r\n     // carrega pets do tutor e popular select\r\n     try {\r\n       if (els.petSelect) {\r\n"
                },
                {
                    "date": 1757953421905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,171 +1,171 @@\n // scripts/funcionarios/vet/ficha-clinica.js\r\n // Busca de Tutor/Pet igual à Agenda e autopreenchimento na Ficha Clínica\r\n \r\n (function () {\r\n-  // --- helpers de auth/API, mantendo padrão da Agenda ---\r\n-  let token = null;\r\n-  try {\r\n-    const u = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n-    token = u?.token || null;\r\n-  } catch {}\r\n+    // --- helpers de auth/API, mantendo padrão da Agenda ---\r\n+    let token = null;\r\n+    try {\r\n+        const u = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n+        token = u?.token || null;\r\n+    } catch { }\r\n \r\n-  function api(path, opts = {}) {\r\n-    return fetch(`${API_CONFIG.BASE_URL}${path}`, {\r\n-      ...opts,\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        ...(opts.headers || {}),\r\n-        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n-      }\r\n-    });\r\n-  }\r\n+    function api(path, opts = {}) {\r\n+        return fetch(`${API_CONFIG.BASE_URL}${path}`, {\r\n+            ...opts,\r\n+            headers: {\r\n+                'Content-Type': 'application/json',\r\n+                ...(opts.headers || {}),\r\n+                ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n+            }\r\n+        });\r\n+    }\r\n \r\n-  // --- debounce simples (mesmo comportamento da Agenda) ---\r\n-  function debounce(fn, wait) {\r\n-    let t;\r\n-    return function (...args) {\r\n-      clearTimeout(t);\r\n-      t = setTimeout(() => fn.apply(this, args), wait);\r\n-    };\r\n-  }\r\n+    // --- debounce simples (mesmo comportamento da Agenda) ---\r\n+    function debounce(fn, wait) {\r\n+        let t;\r\n+        return function (...args) {\r\n+            clearTimeout(t);\r\n+            t = setTimeout(() => fn.apply(this, args), wait);\r\n+        };\r\n+    }\r\n     function formatPhone(v) {\r\n-    const d = String(v || '').replace(/\\D/g, '');\r\n-    if (d.length >= 11) return `(${d.slice(0,2)}) ${d.slice(2,7)}-${d.slice(7,11)}`;\r\n-    if (d.length >= 10) return `(${d.slice(0,2)}) ${d.slice(2,6)}-${d.slice(6,10)}`;\r\n-    return d || '';\r\n+        const d = String(v || '').replace(/\\D/g, '');\r\n+        if (d.length >= 11) return `(${d.slice(0, 2)}) ${d.slice(2, 7)}-${d.slice(7, 11)}`;\r\n+        if (d.length >= 10) return `(${d.slice(0, 2)}) ${d.slice(2, 6)}-${d.slice(6, 10)}`;\r\n+        return d || '';\r\n     }\r\n \r\n-  // --- elementos da página ---\r\n-  const els = {\r\n-    cliInput: document.getElementById('vet-cli-input'),\r\n-    cliSug: document.getElementById('vet-cli-sug'),\r\n-    cliClear: document.getElementById('vet-cli-clear'),\r\n-    petSelect: document.getElementById('vet-pet-select'),\r\n-    petClear: document.getElementById('vet-pet-clear'),\r\n-    tutorNome: document.getElementById('vet-tutor-nome'),\r\n-    tutorEmail: document.getElementById('vet-tutor-email'),\r\n-    tutorTelefone: document.getElementById('vet-tutor-telefone')\r\n-  };\r\n+    // --- elementos da página ---\r\n+    const els = {\r\n+        cliInput: document.getElementById('vet-cli-input'),\r\n+        cliSug: document.getElementById('vet-cli-sug'),\r\n+        cliClear: document.getElementById('vet-cli-clear'),\r\n+        petSelect: document.getElementById('vet-pet-select'),\r\n+        petClear: document.getElementById('vet-pet-clear'),\r\n+        tutorNome: document.getElementById('vet-tutor-nome'),\r\n+        tutorEmail: document.getElementById('vet-tutor-email'),\r\n+        tutorTelefone: document.getElementById('vet-tutor-telefone')\r\n+    };\r\n \r\n-  const state = {\r\n-    selectedCliente: null,\r\n-    selectedPetId: null,\r\n-  };\r\n+    const state = {\r\n+        selectedCliente: null,\r\n+        selectedPetId: null,\r\n+    };\r\n \r\n-  // --- busca clientes (igual fluxo da Agenda) ---\r\n-  async function searchClientes(term) {\r\n-    if (!term || term.trim().length < 2) {\r\n-      hideSugestoes();\r\n-      return;\r\n-    }\r\n-    try {\r\n-      const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n-      const list = await resp.json().catch(() => []);\r\n-      if (!Array.isArray(list) || !els.cliSug) return;\r\n+    // --- busca clientes (igual fluxo da Agenda) ---\r\n+    async function searchClientes(term) {\r\n+        if (!term || term.trim().length < 2) {\r\n+            hideSugestoes();\r\n+            return;\r\n+        }\r\n+        try {\r\n+            const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n+            const list = await resp.json().catch(() => []);\r\n+            if (!Array.isArray(list) || !els.cliSug) return;\r\n \r\n-    els.cliSug.innerHTML = list.map(u => `\r\n-    <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\" data-email=\"${u.email||''}\" data-celular=\"${u.celular||''}\">\r\n-        <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n-        <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n-    </li>`).join('');\r\n-      els.cliSug.classList.remove('hidden');\r\n+            els.cliSug.innerHTML = list.map(u => `\r\n+        <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\" data-email=\"${u.email || ''}\" data-celular=\"${u.celular || ''}\">\r\n+            <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n+            <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n+        </li>`).join('');\r\n+            els.cliSug.classList.remove('hidden');\r\n \r\n-        Array.from(els.cliSug.querySelectorAll('li')).forEach(li => {\r\n-            li.addEventListener('click', () => onSelectCliente({\r\n-                _id: li.dataset.id,\r\n-                nome: li.dataset.nome,\r\n-                email: li.dataset.email || '',\r\n-                celular: li.dataset.celular || ''\r\n-            }));\r\n-        });\r\n-    } catch (e) {\r\n-      // silencioso\r\n+            Array.from(els.cliSug.querySelectorAll('li')).forEach(li => {\r\n+                li.addEventListener('click', () => onSelectCliente({\r\n+                    _id: li.dataset.id,\r\n+                    nome: li.dataset.nome,\r\n+                    email: li.dataset.email || '',\r\n+                    celular: li.dataset.celular || ''\r\n+                }));\r\n+            });\r\n+        } catch (e) {\r\n+            // silencioso\r\n+        }\r\n     }\r\n-  }\r\n \r\n-  function hideSugestoes() {\r\n-    if (els.cliSug) {\r\n-      els.cliSug.innerHTML = '';\r\n-      els.cliSug.classList.add('hidden');\r\n+    function hideSugestoes() {\r\n+        if (els.cliSug) {\r\n+            els.cliSug.innerHTML = '';\r\n+            els.cliSug.classList.add('hidden');\r\n+        }\r\n     }\r\n-  }\r\n \r\n-  async function onSelectCliente(cli) {\r\n-    state.selectedCliente = cli || null;\r\n-    if (els.cliInput) els.cliInput.value = cli?.nome || '';\r\n-    hideSugestoes();\r\n+    async function onSelectCliente(cli) {\r\n+        state.selectedCliente = cli || null;\r\n+        if (els.cliInput) els.cliInput.value = cli?.nome || '';\r\n+        hideSugestoes();\r\n \r\n-    // preenche card do tutor\r\n-    if (els.tutorNome) els.tutorNome.textContent = cli?.nome || '—';\r\n-    if (els.tutorEmail) els.tutorEmail.textContent = (cli?.email || '').trim() ? `${cli.email}` : '—';\r\n-    if (els.tutorTelefone) els.tutorTelefone.textContent = (cli?.celular || '').trim()\r\n-    ? formatPhone(cli.celular)\r\n-    : '—';\r\n+        // preenche card do tutor\r\n+        if (els.tutorNome) els.tutorNome.textContent = cli?.nome || '—';\r\n+        if (els.tutorEmail) els.tutorEmail.textContent = (cli?.email || '').trim() ? `${cli.email}` : '—';\r\n+        if (els.tutorTelefone) els.tutorTelefone.textContent = (cli?.celular || '').trim()\r\n+            ? formatPhone(cli.celular)\r\n+            : '—';\r\n \r\n-    // carrega pets do tutor e popular select\r\n-    try {\r\n-      if (els.petSelect) {\r\n-        els.petSelect.innerHTML = `<option value=\"\">Carregando pets…</option>`;\r\n-      }\r\n-      const resp = await api(`/func/clientes/${cli._id}/pets`);\r\n-      const pets = await resp.json().catch(() => []);\r\n-      if (els.petSelect) {\r\n-        if (Array.isArray(pets) && pets.length) {\r\n-          els.petSelect.innerHTML = [`<option value=\"\">Selecione o pet</option>`]\r\n-            .concat(pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`))\r\n-            .join('');\r\n-          // se só houver 1 pet, selecionar automaticamente\r\n-          if (pets.length === 1) {\r\n-            els.petSelect.value = pets[0]._id;\r\n-            onSelectPet(pets[0]._id);\r\n-          }\r\n-        } else {\r\n-          els.petSelect.innerHTML = `<option value=\"\">Nenhum pet encontrado</option>`;\r\n+        // carrega pets do tutor e popular select\r\n+        try {\r\n+            if (els.petSelect) {\r\n+                els.petSelect.innerHTML = `<option value=\"\">Carregando pets…</option>`;\r\n+            }\r\n+            const resp = await api(`/func/clientes/${cli._id}/pets`);\r\n+            const pets = await resp.json().catch(() => []);\r\n+            if (els.petSelect) {\r\n+                if (Array.isArray(pets) && pets.length) {\r\n+                    els.petSelect.innerHTML = [`<option value=\"\">Selecione o pet</option>`]\r\n+                        .concat(pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`))\r\n+                        .join('');\r\n+                    // se só houver 1 pet, selecionar automaticamente\r\n+                    if (pets.length === 1) {\r\n+                        els.petSelect.value = pets[0]._id;\r\n+                        onSelectPet(pets[0]._id);\r\n+                    }\r\n+                } else {\r\n+                    els.petSelect.innerHTML = `<option value=\"\">Nenhum pet encontrado</option>`;\r\n+                }\r\n+            }\r\n+        } catch { }\r\n+    }\r\n+\r\n+    function onSelectPet(petId) {\r\n+        state.selectedPetId = petId || null;\r\n+        // aqui poderemos preencher outros campos específicos do pet, caso a página venha a ter (ex.: raça/porte).\r\n+        // por enquanto, mantemos o comportamento: seleção do pet no topo + tutor no card.\r\n+    }\r\n+\r\n+    function clearCliente() {\r\n+        state.selectedCliente = null;\r\n+        if (els.cliInput) els.cliInput.value = '';\r\n+        hideSugestoes();\r\n+        if (els.petSelect) {\r\n+            els.petSelect.innerHTML = `<option value=\"\">Selecione o tutor para listar os pets</option>`;\r\n         }\r\n-      }\r\n-    } catch {}\r\n-  }\r\n+        if (els.tutorNome) els.tutorNome.textContent = 'Nome Tutor';\r\n+        if (els.tutorEmail) els.tutorEmail.textContent = '—';\r\n+        // não forçamos limpar telefone se a UI já tiver valor útil\r\n+    }\r\n \r\n-  function onSelectPet(petId) {\r\n-    state.selectedPetId = petId || null;\r\n-    // aqui poderemos preencher outros campos específicos do pet, caso a página venha a ter (ex.: raça/porte).\r\n-    // por enquanto, mantemos o comportamento: seleção do pet no topo + tutor no card.\r\n-  }\r\n+    function clearPet() {\r\n+        state.selectedPetId = null;\r\n+        if (els.petSelect) els.petSelect.value = '';\r\n+    }\r\n \r\n-  function clearCliente() {\r\n-    state.selectedCliente = null;\r\n-    if (els.cliInput) els.cliInput.value = '';\r\n-    hideSugestoes();\r\n+    // --- eventos ---\r\n+    if (els.cliInput) {\r\n+        els.cliInput.addEventListener('input', debounce(e => searchClientes(e.target.value), 300));\r\n+        // esconder sugestões clicando fora\r\n+        document.addEventListener('click', (ev) => {\r\n+            if (!els.cliSug || els.cliSug.classList.contains('hidden')) return;\r\n+            const within = ev.target === els.cliInput || els.cliSug.contains(ev.target);\r\n+            if (!within) hideSugestoes();\r\n+        });\r\n+    }\r\n+    if (els.cliClear) {\r\n+        els.cliClear.addEventListener('click', (e) => { e.preventDefault(); clearCliente(); });\r\n+    }\r\n     if (els.petSelect) {\r\n-      els.petSelect.innerHTML = `<option value=\"\">Selecione o tutor para listar os pets</option>`;\r\n+        els.petSelect.addEventListener('change', (e) => onSelectPet(e.target.value));\r\n     }\r\n-    if (els.tutorNome) els.tutorNome.textContent = 'Nome Tutor';\r\n-    if (els.tutorEmail) els.tutorEmail.textContent = '—';\r\n-    // não forçamos limpar telefone se a UI já tiver valor útil\r\n-  }\r\n-\r\n-  function clearPet() {\r\n-    state.selectedPetId = null;\r\n-    if (els.petSelect) els.petSelect.value = '';\r\n-  }\r\n-\r\n-  // --- eventos ---\r\n-  if (els.cliInput) {\r\n-    els.cliInput.addEventListener('input', debounce(e => searchClientes(e.target.value), 300));\r\n-    // esconder sugestões clicando fora\r\n-    document.addEventListener('click', (ev) => {\r\n-      if (!els.cliSug || els.cliSug.classList.contains('hidden')) return;\r\n-      const within = ev.target === els.cliInput || els.cliSug.contains(ev.target);\r\n-      if (!within) hideSugestoes();\r\n-    });\r\n-  }\r\n-  if (els.cliClear) {\r\n-    els.cliClear.addEventListener('click', (e) => { e.preventDefault(); clearCliente(); });\r\n-  }\r\n-  if (els.petSelect) {\r\n-    els.petSelect.addEventListener('change', (e) => onSelectPet(e.target.value));\r\n-  }\r\n-  if (els.petClear) {\r\n-    els.petClear.addEventListener('click', (e) => { e.preventDefault(); clearPet(); });\r\n-  }\r\n+    if (els.petClear) {\r\n+        els.petClear.addEventListener('click', (e) => { e.preventDefault(); clearPet(); });\r\n+    }\r\n })();\r\n"
                }
            ],
            "date": 1757952220768,
            "name": "Commit-0",
            "content": "// scripts/funcionarios/vet/ficha-clinica.js\r\n// Busca de Tutor/Pet igual à Agenda e autopreenchimento na Ficha Clínica\r\n\r\n(function () {\r\n  // --- helpers de auth/API, mantendo padrão da Agenda ---\r\n  let token = null;\r\n  try {\r\n    const u = JSON.parse(localStorage.getItem('loggedInUser') || 'null');\r\n    token = u?.token || null;\r\n  } catch {}\r\n\r\n  function api(path, opts = {}) {\r\n    return fetch(`${API_CONFIG.BASE_URL}${path}`, {\r\n      ...opts,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...(opts.headers || {}),\r\n        ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n      }\r\n    });\r\n  }\r\n\r\n  // --- debounce simples (mesmo comportamento da Agenda) ---\r\n  function debounce(fn, wait) {\r\n    let t;\r\n    return function (...args) {\r\n      clearTimeout(t);\r\n      t = setTimeout(() => fn.apply(this, args), wait);\r\n    };\r\n  }\r\n\r\n  // --- elementos da página ---\r\n  const els = {\r\n    cliInput: document.getElementById('vet-cli-input'),\r\n    cliSug: document.getElementById('vet-cli-sug'),\r\n    cliClear: document.getElementById('vet-cli-clear'),\r\n    petSelect: document.getElementById('vet-pet-select'),\r\n    petClear: document.getElementById('vet-pet-clear'),\r\n    tutorNome: document.getElementById('vet-tutor-nome'),\r\n    tutorEmail: document.getElementById('vet-tutor-email'),\r\n    tutorTelefone: document.getElementById('vet-tutor-telefone')\r\n  };\r\n\r\n  const state = {\r\n    selectedCliente: null,\r\n    selectedPetId: null,\r\n  };\r\n\r\n  // --- busca clientes (igual fluxo da Agenda) ---\r\n  async function searchClientes(term) {\r\n    if (!term || term.trim().length < 2) {\r\n      hideSugestoes();\r\n      return;\r\n    }\r\n    try {\r\n      const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\r\n      const list = await resp.json().catch(() => []);\r\n      if (!Array.isArray(list) || !els.cliSug) return;\r\n\r\n      els.cliSug.innerHTML = list.map(u => `\r\n        <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\" data-email=\"${u.email||''}\">\r\n          <div class=\"font-medium text-gray-900\">${u.nome}</div>\r\n          <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\r\n        </li>`).join('');\r\n      els.cliSug.classList.remove('hidden');\r\n\r\n      Array.from(els.cliSug.querySelectorAll('li')).forEach(li => {\r\n        li.addEventListener('click', () => onSelectCliente({\r\n          _id: li.dataset.id,\r\n          nome: li.dataset.nome,\r\n          email: li.dataset.email || ''\r\n        }));\r\n      });\r\n    } catch (e) {\r\n      // silencioso\r\n    }\r\n  }\r\n\r\n  function hideSugestoes() {\r\n    if (els.cliSug) {\r\n      els.cliSug.innerHTML = '';\r\n      els.cliSug.classList.add('hidden');\r\n    }\r\n  }\r\n\r\n  async function onSelectCliente(cli) {\r\n    state.selectedCliente = cli || null;\r\n    if (els.cliInput) els.cliInput.value = cli?.nome || '';\r\n    hideSugestoes();\r\n\r\n    // preenche card do tutor\r\n    if (els.tutorNome) els.tutorNome.textContent = cli?.nome || '—';\r\n    if (els.tutorEmail) els.tutorEmail.textContent = (cli?.email || '').trim() ? `${cli.email} · E-mail` : '—';\r\n    // telefone não vem no endpoint /buscar; mantemos placeholder se não houver\r\n    if (els.tutorTelefone && (!els.tutorTelefone.textContent || els.tutorTelefone.textContent.includes('(##)'))) {\r\n      els.tutorTelefone.textContent = '—';\r\n    }\r\n\r\n    // carrega pets do tutor e popular select\r\n    try {\r\n      if (els.petSelect) {\r\n        els.petSelect.innerHTML = `<option value=\"\">Carregando pets…</option>`;\r\n      }\r\n      const resp = await api(`/func/clientes/${cli._id}/pets`);\r\n      const pets = await resp.json().catch(() => []);\r\n      if (els.petSelect) {\r\n        if (Array.isArray(pets) && pets.length) {\r\n          els.petSelect.innerHTML = [`<option value=\"\">Selecione o pet</option>`]\r\n            .concat(pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`))\r\n            .join('');\r\n          // se só houver 1 pet, selecionar automaticamente\r\n          if (pets.length === 1) {\r\n            els.petSelect.value = pets[0]._id;\r\n            onSelectPet(pets[0]._id);\r\n          }\r\n        } else {\r\n          els.petSelect.innerHTML = `<option value=\"\">Nenhum pet encontrado</option>`;\r\n        }\r\n      }\r\n    } catch {}\r\n  }\r\n\r\n  function onSelectPet(petId) {\r\n    state.selectedPetId = petId || null;\r\n    // aqui poderemos preencher outros campos específicos do pet, caso a página venha a ter (ex.: raça/porte).\r\n    // por enquanto, mantemos o comportamento: seleção do pet no topo + tutor no card.\r\n  }\r\n\r\n  function clearCliente() {\r\n    state.selectedCliente = null;\r\n    if (els.cliInput) els.cliInput.value = '';\r\n    hideSugestoes();\r\n    if (els.petSelect) {\r\n      els.petSelect.innerHTML = `<option value=\"\">Selecione o tutor para listar os pets</option>`;\r\n    }\r\n    if (els.tutorNome) els.tutorNome.textContent = 'Nome Tutor';\r\n    if (els.tutorEmail) els.tutorEmail.textContent = '—';\r\n    // não forçamos limpar telefone se a UI já tiver valor útil\r\n  }\r\n\r\n  function clearPet() {\r\n    state.selectedPetId = null;\r\n    if (els.petSelect) els.petSelect.value = '';\r\n  }\r\n\r\n  // --- eventos ---\r\n  if (els.cliInput) {\r\n    els.cliInput.addEventListener('input', debounce(e => searchClientes(e.target.value), 300));\r\n    // esconder sugestões clicando fora\r\n    document.addEventListener('click', (ev) => {\r\n      if (!els.cliSug || els.cliSug.classList.contains('hidden')) return;\r\n      const within = ev.target === els.cliInput || els.cliSug.contains(ev.target);\r\n      if (!within) hideSugestoes();\r\n    });\r\n  }\r\n  if (els.cliClear) {\r\n    els.cliClear.addEventListener('click', (e) => { e.preventDefault(); clearCliente(); });\r\n  }\r\n  if (els.petSelect) {\r\n    els.petSelect.addEventListener('change', (e) => onSelectPet(e.target.value));\r\n  }\r\n  if (els.petClear) {\r\n    els.petClear.addEventListener('click', (e) => { e.preventDefault(); clearPet(); });\r\n  }\r\n})();\r\n"
        }
    ]
}