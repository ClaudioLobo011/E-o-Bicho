{
    "sourceFile": "scripts/funcionarios/banhoetosa/modal.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1757638307996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757638334220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,18 @@\n let __vendaLastFocus = null;\n \n export function openVendaModal(item) {\n   __vendaTargetId = item?._id || null;\n+\n   const m = document.getElementById('venda-modal');\n   const input = document.getElementById('venda-codigo-input');\n   const lab = document.getElementById('venda-modal-title');\n   if (!m || !input) return;\n+\n+  // salva o elemento atualmente focado para restaurar após o fechamento\n+  __vendaLastFocus = document.activeElement;\n+\n+  // se a modal de \"Adicionar Serviço\" estiver aberta, fecha para não ter duas sobrepostas\n   try {\n     const modalAdd = document.getElementById('modal-add-servico');\n     if (modalAdd && !modalAdd.classList.contains('hidden')) {\n       modalAdd.classList.add('hidden');\n@@ -22,26 +28,34 @@\n       modalAdd.style.display = 'none';\n       modalAdd.setAttribute('aria-hidden', 'true');\n     }\n   } catch {}\n+\n   if (lab) lab.textContent = `Registrar venda — ${item?.clienteNome || ''} | ${item?.pet || ''}`;\n   input.value = item?.codigoVenda || '';\n+\n+  // mostra a modal\n   m.classList.remove('hidden');\n   m.classList.add('flex');\n+\n   try {\n-    if (m.parentElement !== document.body) { document.body.appendChild(m); }\n-    else { document.body.appendChild(m); }\n-  } catch {}\n-  try {\n+    if (m.parentElement !== document.body) document.body.appendChild(m);\n     m.style.display = 'flex';\n     m.style.visibility = 'visible';\n     m.style.opacity = '1';\n     m.style.position = 'fixed';\n     m.style.zIndex = '2147483647';\n     m.style.pointerEvents = 'auto';\n+\n+    // acessibilidade\n+    m.removeAttribute('inert');\n+    m.setAttribute('role', 'dialog');\n+    m.setAttribute('aria-modal', 'true');\n     m.setAttribute('aria-hidden', 'false');\n   } catch {}\n-  requestAnimationFrame(() => { try { m.style.display = 'flex'; input.focus(); } catch{} });\n+\n+  // foca o primeiro campo interativo\n+  requestAnimationFrame(() => { try { input.focus(); } catch {} });\n }\n \n export function closeVendaModal() {\n   __vendaTargetId = null;\n"
                },
                {
                    "date": 1757638366547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,36 @@\n \n export function closeVendaModal() {\n   __vendaTargetId = null;\n   const m = document.getElementById('venda-modal');\n-  if (m) { m.classList.add('hidden'); try { m.style.display='none'; m.style.visibility='hidden'; m.setAttribute('aria-hidden','true'); } catch{} }\n-}\n+  if (!m) return;\n \n+  // 1) tirar o foco de dentro da modal ANTES de aplicar aria-hidden\n+  const active = document.activeElement;\n+  const restore =\n+    (__vendaLastFocus && document.contains(__vendaLastFocus))\n+      ? __vendaLastFocus\n+      : document.body; // fallback seguro\n+\n+  if (m.contains(active)) {\n+    try { restore.focus?.(); } catch { try { active.blur?.(); } catch {} }\n+  }\n+\n+  // 2) ocultar e bloquear interação\n+  m.classList.add('hidden');\n+  m.classList.remove('flex');\n+  try {\n+    m.style.display = 'none';\n+    m.style.visibility = 'hidden';\n+    m.style.pointerEvents = 'none';\n+    m.setAttribute('aria-hidden', 'true');\n+    m.setAttribute('inert', ''); // impede foco/interação no subtree\n+  } catch {}\n+\n+  // 3) limpar referência de foco\n+  __vendaLastFocus = null;\n+}}\n+\n function bindVendaModalOnce(){\n   if (document.__bindVendaModalApplied) return;\n   document.__bindVendaModalApplied = true;\n   const cancel = document.getElementById('venda-cancel-btn');\n"
                },
                {
                    "date": 1757638374219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n   } catch {}\n \n   // 3) limpar referência de foco\n   __vendaLastFocus = null;\n-}}\n+}\n \n function bindVendaModalOnce(){\n   if (document.__bindVendaModalApplied) return;\n   document.__bindVendaModalApplied = true;\n"
                }
            ],
            "date": 1757638307996,
            "name": "Commit-0",
            "content": "import { api, els, state, money, debounce, todayStr, pad, buildLocalDateTime, isPrivilegedRole } from './core.js';\nimport { populateModalProfissionais } from './profissionais.js';\nimport { loadAgendamentos } from './agendamentos.js';\nimport { renderKpis, renderFilters } from './filters.js';\nimport { renderGrid } from './grid.js';\nimport { enhanceAgendaUI } from './ui.js';\n\nlet __vendaTargetId = null;\nlet __vendaLastFocus = null;\n\nexport function openVendaModal(item) {\n  __vendaTargetId = item?._id || null;\n  const m = document.getElementById('venda-modal');\n  const input = document.getElementById('venda-codigo-input');\n  const lab = document.getElementById('venda-modal-title');\n  if (!m || !input) return;\n  try {\n    const modalAdd = document.getElementById('modal-add-servico');\n    if (modalAdd && !modalAdd.classList.contains('hidden')) {\n      modalAdd.classList.add('hidden');\n      modalAdd.classList.remove('flex');\n      modalAdd.style.display = 'none';\n      modalAdd.setAttribute('aria-hidden', 'true');\n    }\n  } catch {}\n  if (lab) lab.textContent = `Registrar venda — ${item?.clienteNome || ''} | ${item?.pet || ''}`;\n  input.value = item?.codigoVenda || '';\n  m.classList.remove('hidden');\n  m.classList.add('flex');\n  try {\n    if (m.parentElement !== document.body) { document.body.appendChild(m); }\n    else { document.body.appendChild(m); }\n  } catch {}\n  try {\n    m.style.display = 'flex';\n    m.style.visibility = 'visible';\n    m.style.opacity = '1';\n    m.style.position = 'fixed';\n    m.style.zIndex = '2147483647';\n    m.style.pointerEvents = 'auto';\n    m.setAttribute('aria-hidden', 'false');\n  } catch {}\n  requestAnimationFrame(() => { try { m.style.display = 'flex'; input.focus(); } catch{} });\n}\n\nexport function closeVendaModal() {\n  __vendaTargetId = null;\n  const m = document.getElementById('venda-modal');\n  if (m) { m.classList.add('hidden'); try { m.style.display='none'; m.style.visibility='hidden'; m.setAttribute('aria-hidden','true'); } catch{} }\n}\n\nfunction bindVendaModalOnce(){\n  if (document.__bindVendaModalApplied) return;\n  document.__bindVendaModalApplied = true;\n  const cancel = document.getElementById('venda-cancel-btn');\n  const closeX = document.getElementById('venda-close-btn');\n  const save = document.getElementById('venda-save-btn');\n  cancel?.addEventListener('click', closeVendaModal);\n  closeX?.addEventListener('click', closeVendaModal);\n  save?.addEventListener('click', async () => {\n    const input = document.getElementById('venda-codigo-input');\n    const code = String(input?.value || '').trim();\n    if (!__vendaTargetId) { alert('Agendamento inválido.'); return; }\n    if (!code) { alert('Informe o código da venda.'); return; }\n    try {\n      const resp = await api(`/func/agendamentos/${__vendaTargetId}`, { method: 'PUT', body: JSON.stringify({ codigoVenda: code, pago: true }) });\n      if (!resp.ok) {\n        const err = await resp.json().catch(() => ({}));\n        throw new Error(err.message || 'Falha ao registrar o código de venda.');\n      }\n      closeVendaModal();\n      await loadAgendamentos();\n      renderKpis();\n      renderFilters();\n      renderGrid();\n      enhanceAgendaUI();\n    } catch (e) {\n      console.error('venda-save', e);\n      alert(e.message || 'Não foi possível registrar o código de venda.');\n    }\n  });\n}\n\n// expose for external triggers, keeping backward-compat\nwindow.openVendaModal = openVendaModal;\nwindow.closeVendaModal = closeVendaModal;\n// Bridges globais para facilitar chamadas diretas a partir do UI sem import circular\nwindow.__openEditFromUI = (item) => openEditModal(item);\nwindow.__updateStatusQuick = (id, status) => updateStatusQuick(id, status);\n\nexport function openAddModal() {\n  state.editing = null;\n  if (!els.modal) { console.warn('Modal #modal-add-servico não encontrado'); return; }\n  state.tempServicos = [];\n  renderServicosLista();\n  if (els.addServAddBtn) els.addServAddBtn.classList.remove('hidden');\n  [els.cliInput, els.servInput, els.valorInput, els.petSelect].forEach(el => { if (el) el.disabled = false; });\n  state.selectedCliente = null;\n  state.selectedServico = null;\n  if (els.cliInput) { els.cliInput.value = ''; }\n  if (els.cliSug) { els.cliSug.innerHTML = ''; els.cliSug.classList.add('hidden'); }\n  if (els.servInput) { els.servInput.value = ''; }\n  if (els.servSug) { els.servSug.innerHTML = ''; els.servSug.classList.add('hidden'); }\n  if (els.valorInput) { els.valorInput.value = ''; }\n  if (els.petSelect) { els.petSelect.innerHTML = ''; }\n  if (els.obsInput) { els.obsInput.value = ''; }\n  if (els.addStoreSelect) {\n    if (els.storeSelect && els.storeSelect.options.length) {\n      els.addStoreSelect.innerHTML = els.storeSelect.innerHTML;\n    } else if (state.stores?.length) {\n      els.addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\n    }\n    const sid = state.selectedStoreId || els.storeSelect?.value || '';\n    els.addStoreSelect.value = sid;\n    try { if (sid) { populateModalProfissionais(sid); } } catch{}\n  }\n  if (els.addDateInput) {\n    const date = (els.dateInput?.value) || todayStr();\n    els.addDateInput.value = date;\n  }\n  const now = new Date();\n  const hh = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\n  if (els.horaInput) els.horaInput.value = hh;\n  if (els.obsInput) { els.obsInput.value = ''; }\n  if (els.statusSelect) els.statusSelect.value = 'agendado';\n  if (els.modalDelete) els.modalDelete.classList.add('hidden');\n  els.modal.classList.remove('hidden');\n  els.modal.classList.add('flex');\n  els.cliInput?.focus();\n}\n\nexport function closeModal() {\n  if (!els.modal) return;\n  els.modal.classList.add('hidden');\n  els.modal.classList.remove('flex');\n  state.editing = null;\n  [els.cliInput, els.servInput, els.valorInput, els.petSelect].forEach(el => { if (el) el.disabled = false; });\n}\n\nexport function toDateInputValueFromISO(isoStr) {\n  const d = new Date(isoStr);\n  if (isNaN(d.getTime())) return todayStr();\n  const yyyy = d.getFullYear();\n  const mm = String(d.getMonth() + 1).padStart(2, '0');\n  const dd = String(d.getDate()).padStart(2, '0');\n  return `${yyyy}-${mm}-${dd}`;\n}\n\nexport function openEditModal(a) {\n  state.editing = a || null;\n  if (!els.modal || !state.editing) return;\n  state.tempServicos = Array.isArray(a.servicos)\n    ? a.servicos.map(x => ({ _id: x._id, nome: x.nome, valor: Number(x.valor || 0) }))\n    : (a.servico ? [{ _id: null, nome: a.servico, valor: Number(a.valor || 0) }] : []);\n  renderServicosLista();\n  state.selectedServico = null;\n  if (els.servInput) { els.servInput.value = ''; els.servInput.disabled = false; }\n  if (els.servSug)   { els.servSug.innerHTML = ''; els.servSug.classList.add('hidden'); }\n  if (els.valorInput){ els.valorInput.value = ''; els.valorInput.disabled = false; }\n  if (els.addServAddBtn) els.addServAddBtn.classList.remove('hidden');\n  if (els.addStoreSelect) {\n    if (els.storeSelect && els.storeSelect.options.length) {\n      els.addStoreSelect.innerHTML = els.storeSelect.innerHTML;\n    } else if (state.stores?.length) {\n      els.addStoreSelect.innerHTML = state.stores.map(s => `<option value=\"${s._id}\">${s.nome}</option>`).join('');\n    }\n    els.addStoreSelect.value = a.storeId || state.selectedStoreId || els.storeSelect?.value || '';\n    els.addStoreSelect.disabled = false;\n  }\n  if (els.addDateInput) {\n    const iso = a.h || a.scheduledAt || new Date().toISOString();\n    els.addDateInput.value = toDateInputValueFromISO(iso);\n  }\n  const d = new Date((a.h || a.scheduledAt) || new Date());\n  const hh = `${pad(d.getHours())}:${pad(d.getMinutes())}`;\n  if (els.horaInput) els.horaInput.value = hh;\n  let profId = a.profissionalId ? String(a.profissionalId) : null;\n  if (!profId && typeof a.profissional === 'string') {\n    const key = a.profissional.trim().toLowerCase();\n    const match = state.profissionais.find(p => String(p.nome || '').trim().toLowerCase() === key);\n    if (match) profId = String(match._id);\n  }\n  if (els.profSelect && profId) els.profSelect.value = profId;\n  try {\n    const sid = els.addStoreSelect?.value || a.storeId || '';\n    if (sid) { populateModalProfissionais(sid, profId); }\n  } catch {}\n  if (els.statusSelect) {\n    const keyRaw = String(a.status || 'agendado')\n      .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n      .trim().toLowerCase().replace(/[-\\s]+/g, '_');\n    const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\n    els.statusSelect.value = allowed.includes(keyRaw) ? keyRaw : 'agendado';\n  }\n  if (els.obsInput) { els.obsInput.value = (a.observacoes || '').trim(); }\n  if (els.cliInput) { els.cliInput.value = (a.clienteNome || ''); els.cliInput.disabled = true; }\n  if (els.petSelect) {\n    els.petSelect.innerHTML = '';\n    try {\n      const clienteId = a.clienteId || (a.cliente && a.cliente._id) || null;\n      if (clienteId) {\n        api(`/func/clientes/${clienteId}/pets`).then(r => r.json().catch(() => []))\n          .then(pets => {\n            els.petSelect.innerHTML = (Array.isArray(pets) ? pets : []).map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\n            const currentPetId = a.petId || (a.pet && a.pet._id) || '';\n            if (currentPetId) els.petSelect.value = String(currentPetId);\n          });\n      }\n    } catch {}\n  }\n  if (els.servInput) { els.servInput.value = ''; els.servInput.disabled = false; }\n  if (els.valorInput) { els.valorInput.value = ''; els.valorInput.disabled = false; }\n  if (els.modalDelete) els.modalDelete.classList.remove('hidden');\n  els.modal.classList.remove('hidden');\n  els.modal.classList.add('flex');\n}\n\nexport async function searchClientes(term) {\n  if (!term || term.length < 2) {\n    if (els.cliSug) { els.cliSug.innerHTML = ''; els.cliSug.classList.add('hidden'); }\n    return;\n  }\n  const resp = await api(`/func/clientes/buscar?q=${encodeURIComponent(term)}&limit=8`);\n  const list = await resp.json().catch(() => []);\n  if (!els.cliSug) return;\n  els.cliSug.innerHTML = list.map(u => `\n    <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${u._id}\" data-nome=\"${u.nome}\">\n      <div class=\"font-medium text-gray-900\">${u.nome}</div>\n      <div class=\"text-xs text-gray-500\">${u.email || ''}</div>\n    </li>`).join('');\n  els.cliSug.classList.remove('hidden');\n  els.cliSug.querySelectorAll('li').forEach(li => {\n    li.addEventListener('click', async () => {\n      state.selectedCliente = { _id: li.dataset.id, nome: li.dataset.nome };\n      if (els.cliInput) els.cliInput.value = li.dataset.nome;\n      els.cliSug.classList.add('hidden');\n      const resp = await api(`/func/clientes/${state.selectedCliente._id}/pets`);\n      const pets = await resp.json().catch(() => []);\n      if (els.petSelect) {\n        els.petSelect.innerHTML = pets.map(p => `<option value=\"${p._id}\">${p.nome}</option>`).join('');\n      }\n    });\n  });\n}\n\nexport async function searchServicos(term) {\n  if (!term || term.length < 2) {\n    if (els.servSug) { els.servSug.innerHTML = ''; els.servSug.classList.add('hidden'); }\n    return;\n  }\n  const resp = await api(`/func/servicos/buscar?q=${encodeURIComponent(term)}`);\n  const list = await resp.json().catch(() => []);\n  if (!els.servSug) return;\n  els.servSug.innerHTML = list.map(s => `\n    <li class=\"px-3 py-2 hover:bg-gray-50 cursor-pointer\" data-id=\"${s._id}\" data-nome=\"${s.nome}\" data-valor=\"${s.valor}\">\n      <div class=\"font-medium text-gray-900\">${s.nome}</div>\n      <div class=\"text-xs text-gray-500\">${money(s.valor)}</div>\n    </li>`).join('');\n  els.servSug.classList.remove('hidden');\n  els.servSug.querySelectorAll('li').forEach(li => {\n    li.addEventListener('click', () => {\n      state.selectedServico = { _id: li.dataset.id, nome: li.dataset.nome, valor: Number(li.dataset.valor || 0) };\n      if (els.servInput) els.servInput.value = state.selectedServico.nome;\n      if (els.valorInput) els.valorInput.value = state.selectedServico.valor.toFixed(2);\n      els.servSug.classList.add('hidden');\n    });\n  });\n}\n\nexport function renderServicosLista() {\n  if (!els.servListUL || !els.servTotalEl) return;\n  const items = state.tempServicos || [];\n  els.servListUL.innerHTML = items.map((it, idx) => `\n    <li class=\"flex items-center justify-between px-3 py-2 text-sm\">\n      <div class=\"flex items-center gap-3\">\n        <span class=\"w-20 text-right tabular-nums\">${money(Number(it.valor || 0))}</span>\n        <span class=\"text-gray-700\">${it.nome || ''}</span>\n      </div>\n      <button data-idx=\"${idx}\" class=\"remove-serv px-2 py-1 rounded-md border text-gray-600 hover:bg-gray-50\">Remover</button>\n    </li>\n  `).join('');\n  const total = items.reduce((s, x) => s + Number(x.valor || 0), 0);\n  els.servTotalEl.textContent = money(total);\n  els.servListUL.querySelectorAll('.remove-serv').forEach(btn => {\n    btn.addEventListener('click', () => {\n      const i = parseInt(btn.getAttribute('data-idx'), 10);\n      if (!isNaN(i)) {\n        state.tempServicos.splice(i, 1);\n        renderServicosLista();\n      }\n    });\n  });\n}\n\nexport async function saveAgendamento() {\n  try {\n    const dateRaw = (els.addDateInput?.value) || (els.dateInput?.value) || todayStr();\n    const storeIdSelected = (els.addStoreSelect?.value) || state.selectedStoreId || els.storeSelect?.value;\n    const hora = els.horaInput?.value;\n    const profissionalId = els.profSelect?.value;\n    const status = (els.statusSelect?.value) || 'agendado';\n    if (!hora || !profissionalId) { alert('Preencha hora e profissional.'); return; }\n    if (!storeIdSelected) { alert('Selecione a empresa.'); return; }\n    const scheduledAt = buildLocalDateTime(dateRaw, hora).toISOString();\n    if (state.editing && state.editing._id) {\n      const id = state.editing._id;\n      const items = Array.isArray(state.tempServicos) ? state.tempServicos : [];\n      if (!items.length) { alert('Adicione pelo menos 1 serviço ao agendamento.'); return; }\n      const body = {\n        storeId: storeIdSelected,\n        profissionalId,\n        scheduledAt,\n        status,\n        observacoes: (els.obsInput?.value || '').trim(),\n        servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\n        ...(state.editing.clienteId ? { clienteId: state.editing.clienteId } : {}),\n        ...(els.petSelect?.value ? { petId: els.petSelect.value } : (state.editing.petId ? { petId: state.editing.petId } : {})),\n        ...(typeof state.editing.pago !== 'undefined' ? { pago: state.editing.pago } : {})\n      };\n      const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify(body) });\n      if (!resp.ok) {\n        const err = await resp.json().catch(() => ({}));\n        alert(err.message || 'Erro ao atualizar agendamento.');\n        return;\n      }\n      await loadAgendamentos();\n      renderKpis();\n      renderFilters();\n      closeModal();\n      renderGrid();\n      enhanceAgendaUI();\n      return;\n    }\n    const clienteId = state.selectedCliente?._id;\n    const petId = els.petSelect?.value;\n    const items = state.tempServicos || [];\n    if (!(clienteId && petId && items.length)) { alert('Preencha cliente, pet e adicione pelo menos 1 serviço.'); return; }\n    const body = {\n      storeId: storeIdSelected,\n      clienteId, petId,\n      servicos: items.map(x => ({ servicoId: x._id, valor: Number(x.valor || 0) })),\n      profissionalId, scheduledAt,\n      status,\n      observacoes: (els.obsInput?.value || '').trim(),\n      pago: false\n    };\n    const resp = await api('/func/agendamentos', { method: 'POST', body: JSON.stringify(body) });\n    if (!resp.ok) {\n      const err = await resp.json().catch(() => ({}));\n      throw new Error(err.message || 'Erro ao salvar');\n    }\n    await loadAgendamentos();\n    renderKpis();\n    renderFilters();\n    closeModal();\n    renderGrid();\n    enhanceAgendaUI();\n  } catch (e) {\n    console.error(e);\n    alert(e.message || 'Erro ao salvar');\n  }\n}\n\nexport async function handleDelete() {\n  const id = state.editing && state.editing._id ? String(state.editing._id) : null;\n  if (!id) return;\n  const ok = await confirmAsync('Excluir atendimento', 'Tem certeza que deseja excluir este atendimento? Esta ação não pode ser desfeita.', { confirmText: 'Excluir', cancelText: 'Cancelar' });\n  if (!ok) return;\n  const resp = await api(`/func/agendamentos/${id}`, { method: 'DELETE' });\n  if (!resp.ok) {\n    const err = await resp.json().catch(() => ({}));\n    alert(err.message || 'Erro ao excluir agendamento');\n    return;\n  }\n  await loadAgendamentos();\n  renderKpis();\n  renderFilters();\n  closeModal();\n  renderGrid();\n  enhanceAgendaUI();\n}\n\nexport function confirmAsync(title, message, opts = {}) {\n  const confirmText = opts.confirmText || 'Excluir';\n  const cancelText  = opts.cancelText  || 'Cancelar';\n  if (typeof window.showModal === 'function') {\n    return new Promise((resolve) => {\n      const prevVis = els.modal ? els.modal.style.visibility : '';\n      const prevPe  = els.modal ? els.modal.style.pointerEvents : '';\n      if (els.modal) { els.modal.style.visibility = 'hidden'; els.modal.style.pointerEvents = 'none'; }\n      window.showModal({\n        title: title || 'Confirmação', message: message || 'Deseja prosseguir?', confirmText, cancelText,\n        onConfirm: () => { restore(); resolve(true); },\n        onCancel : () => { restore(); resolve(false); }\n      });\n      const bump = () => {\n        try {\n          const all = Array.from(document.querySelectorAll('body *'));\n          const overlays = all.filter(el => { const cs = getComputedStyle(el); if (cs.position !== 'fixed') return false; const r = el.getBoundingClientRect(); return r.width >= window.innerWidth * 0.95 && r.height >= window.innerHeight * 0.95; });\n          const overlay = overlays.at(-1);\n          if (overlay) { overlay.style.zIndex = '9999'; overlay.style.pointerEvents = 'auto'; }\n        } catch {}\n      };\n      requestAnimationFrame(bump);\n      setTimeout(bump, 0);\n      function restore() { if (els.modal) { els.modal.style.visibility = prevVis || ''; els.modal.style.pointerEvents = prevPe || ''; } }\n    });\n  }\n  const ok = window.confirm(message || title || 'Confirmar?');\n  return Promise.resolve(!!ok);\n}\n\nexport function bindModalAndActionsEvents() {\n  bindVendaModalOnce();\n  els.addServAddBtn?.addEventListener('click', (e) => {\n    e.preventDefault();\n    const s = state.selectedServico;\n    const v = Number(els.valorInput?.value || 0);\n    if (!s || !s._id) { alert('Escolha um serviço na busca.'); return; }\n    if (!(v >= 0)) { alert('Valor inválido.'); return; }\n    state.tempServicos.push({ _id: s._id, nome: s.nome, valor: v });\n    state.selectedServico = null;\n    if (els.servInput)  els.servInput.value = '';\n    if (els.valorInput) els.valorInput.value = '';\n    renderServicosLista();\n  });\n  els.modalDelete?.addEventListener('click', handleDelete);\n  // Use capture phase to avoid being blocked by other handlers\n  if (false) els.actionsRoot?.addEventListener('click', (ev) => {\n    const more = ev.target.closest?.('.agenda-card__more');\n    if (more) { const holder = more.parentElement?.querySelector('.agenda-card__actions'); if (holder) holder.classList.toggle('hidden'); return; }\n    const btn = ev.target.closest?.('.agenda-action');\n    if (!btn) return;\n    ev.preventDefault(); ev.stopPropagation();\n    if (typeof ev.stopImmediatePropagation === 'function') ev.stopImmediatePropagation();\n    const id = btn.getAttribute('data-id'); if (!id) return;\n    if (btn.classList.contains('edit')) {\n      // Se a modal de venda estiver aberta, não abrir edição\n      const vendaOpen = !document.getElementById('venda-modal')?.classList.contains('hidden');\n      if (vendaOpen) return;\n      const item = state.agendamentos.find(x => String(x._id) === String(id));\n      if (!item) return;\n      if ((item.pago || item.codigoVenda) && !isPrivilegedRole()) { alert('Este agendamento já foi faturado. Apenas Admin/Admin Master podem editar.'); return; }\n      openEditModal(item);\n    } else if (btn.classList.contains('status')) {\n      const item = state.agendamentos.find(x => String(x._id) === String(id));\n      const chain = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\n      const cur = (item && item.status) || 'agendado';\n      const next = chain[(chain.indexOf(cur) + 1) % chain.length];\n      updateStatusQuick(id, next);\n    } else if (btn.classList.contains('cobrar')) {\n      const item = state.agendamentos.find(x => String(x._id) === String(id));\n      if (!item) return;\n      if (item.pago || item.codigoVenda) { alert('Este agendamento já possui código de venda registrado.'); return; }\n      requestAnimationFrame(() => (window.openVendaModal || openVendaModal)(item));\n    }\n  }, true);\n  // disabled: usando handlers diretos nos botões em ui.js\n\n  // Captura adicional a nível de documento para garantir o clique no botão $\n  const docChargeHandler = (ev) => { if (window.__forceDirectHandlers) return;\n    const btn = ev.target?.closest?.('.agenda-action.cobrar');\n    if (!btn) return;\n    ev.preventDefault();\n    if (typeof ev.stopImmediatePropagation === 'function') ev.stopImmediatePropagation();\n    ev.stopPropagation();\n    const id = btn.getAttribute('data-id');\n    if (!id) return;\n    const item = state.agendamentos.find(x => String(x._id) === String(id));\n    if (!item) return;\n    if (item.pago || item.codigoVenda) { alert('Este agendamento já possui código de venda registrado.'); return; }\n    // Fecha a de edição, se aberta\n    try {\n      const modalAdd = document.getElementById('modal-add-servico');\n      if (modalAdd && !modalAdd.classList.contains('hidden')) {\n        modalAdd.classList.add('hidden');\n        modalAdd.classList.remove('flex');\n        modalAdd.style.display = 'none';\n        modalAdd.setAttribute('aria-hidden', 'true');\n      }\n    } catch {}\n    requestAnimationFrame(() => (window.openVendaModal || openVendaModal)(item));\n  };\n  document.addEventListener('click', docChargeHandler, true);\n  els.cliInput?.addEventListener('input', debounce((e) => searchClientes(e.target.value), 300));\n  els.servInput?.addEventListener('input', debounce((e) => searchServicos(e.target.value), 300));\n}\n\nexport async function updateStatusQuick(id, status) {\n  try {\n    const resp = await api(`/func/agendamentos/${id}`, { method: 'PUT', body: JSON.stringify({ status }) });\n    if (!resp.ok) {\n      const err = await resp.json().catch(() => ({}));\n      throw new Error(err.message || 'Erro ao mudar status');\n    }\n    await loadAgendamentos();\n    renderKpis();\n    renderFilters();\n    renderGrid();\n    enhanceAgendaUI();\n  } catch (e) {\n    console.error('updateStatusQuick', e);\n    alert(e.message || 'Erro ao mudar status');\n  }\n}\n"
        }
    ]
}