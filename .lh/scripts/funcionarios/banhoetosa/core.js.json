{
    "sourceFile": "scripts/funcionarios/banhoetosa/core.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1757801670638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757801692552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,48 +185,65 @@\n }\n export function getFilteredAgendamentos() {\n   const hasStatus = state.filters.statuses.size > 0;\n   const hasProf   = state.filters.profIds.size   > 0;\n-  if (!hasStatus && !hasProf) return state.agendamentos || [];\n+  const hasTipo   = !!state.filters.profTipo;\n \n+  // se nenhum filtro ativo, retorna tudo\n+  if (!hasStatus && !hasProf && !hasTipo) return state.agendamentos || [];\n+\n+  // mapa nome -> id (fallback para agendamentos antigos que vêm só com nome)\n   const byNameAll = new Map(\n     (state.profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\n   );\n \n+  // conjunto de ids do tipo selecionado (quando houver)\n+  const idsTipo = hasTipo\n+    ? new Set(\n+        (state.profissionais || [])\n+          .filter(p => (p.tipo || 'esteticista') === state.filters.profTipo)\n+          .map(p => String(p._id))\n+      )\n+    : null;\n+\n   return (state.agendamentos || []).filter(a => {\n     let ok = true;\n-    if (hasStatus) ok = ok && state.filters.statuses.has(normalizeStatus(a.status));\n-    if (hasProf) {\n+\n+    // status\n+    if (hasStatus) {\n+      ok = ok && state.filters.statuses.has(normalizeStatus(a.status));\n+      if (!ok) return false;\n+    }\n+\n+    // resolve o profissional do agendamento pra um id\n+    const resolveProfId = () => {\n       let pid = a.profissionalId ? String(a.profissionalId) : null;\n       if (!pid) {\n         let nc = '';\n         if (typeof a.profissional === 'string') nc = a.profissional;\n         else if (a.profissional && typeof a.profissional === 'object') {\n           nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\n-              a.profissional.razaoSocial || a.profissional.nome || '';\n+               a.profissional.razaoSocial || a.profissional.nome || '';\n         }\n         pid = byNameAll.get(String(nc).trim().toLowerCase()) || null;\n       }\n-      ok = ok && pid && state.filters.profIds.has(String(pid));\n+      return pid;\n+    };\n+\n+    // por id específico (chips de profissionais)\n+    if (hasProf) {\n+      const pid = resolveProfId();\n+      ok = ok && !!pid && state.filters.profIds.has(pid);\n+      if (!ok) return false;\n     }\n-    if (ok && state.filters.profTipo) {\n-      // limita a profissionais do tipo selecionado\n-      const tipoSel = state.filters.profTipo;\n-      const idsTipo = new Set((state.profissionais || [])\n-        .filter(p => (p.tipo || 'esteticista') === tipoSel)\n-        .map(p => String(p._id)));\n-      let pid2 = a.profissionalId ? String(a.profissionalId) : null;\n-      if (!pid2) {\n-        let nc = '';\n-        if (typeof a.profissional === 'string') nc = a.profissional;\n-        else if (a.profissional && typeof a.profissional === 'object') {\n-          nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\n-              a.profissional.razaoSocial || a.profissional.nome || '';\n-        }\n-        pid2 = byNameAll.get(String(nc).trim().toLowerCase()) || null;\n-      }\n-      ok = ok && pid2 && idsTipo.has(String(pid2));\n+\n+    // por tipo (Esteticista, Veterinário, etc.)\n+    if (hasTipo) {\n+      const pid = resolveProfId();\n+      ok = ok && !!pid && idsTipo.has(pid);\n+      if (!ok) return false;\n     }\n+\n     return ok;\n   });\n }\n export function getVisibleProfissionais() {\n"
                }
            ],
            "date": 1757801670638,
            "name": "Commit-0",
            "content": "// Core/shared state and helpers for Banho e Tosa agenda\n// ES module used by other parts of the feature.\n\n// ----- Auth/API helpers -----\nconst _cachedUser = (() => {\n  try { return JSON.parse(localStorage.getItem('loggedInUser') || 'null') || null; } catch { return null; }\n})();\nexport const token = _cachedUser?.token || null;\n\nexport function api(path, opts = {}) {\n  return fetch(`${API_CONFIG.BASE_URL}${path}`, {\n    ...opts,\n    headers: {\n      'Content-Type': 'application/json',\n      ...(opts.headers || {}),\n      ...(token ? { Authorization: `Bearer ${token}` } : {})\n    }\n  });\n}\n\nexport function getCurrentRole() {\n  try {\n    return JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.role || 'cliente';\n  } catch {\n    return 'cliente';\n  }\n}\nexport function isPrivilegedRole() {\n  const r = getCurrentRole();\n  return r === 'admin' || r === 'admin_master';\n}\n\n// ----- Elements -----\nexport const els = {\n  agendaList: document.getElementById('agenda-list'),\n  actionsRoot: document.getElementById('agenda-wrapper') || document.body,\n  dateInput: document.getElementById('agenda-date'),\n  dateLabelVisible: document.getElementById('agenda-date-label-visible'),\n  viewSelect: document.getElementById('agenda-view'),\n  addBtn: document.getElementById('add-service-btn'),\n  storeSelect: document.getElementById('agenda-store'),\n  storeLabelVisible: document.getElementById('agenda-store-label-visible'),\n\n  // Modal add/editar\n  modal: document.getElementById('modal-add-servico'),\n  modalClose: document.getElementById('modal-add-close'),\n  modalCancel: document.getElementById('modal-add-cancel'),\n  modalSave: document.getElementById('modal-add-save'),\n  modalDelete: document.getElementById('modal-add-delete'),\n\n  addStoreSelect: document.getElementById('add-store-select'),\n  addDateInput: document.getElementById('add-date'),\n  statusSelect: document.getElementById('add-status'),\n  cliInput: document.getElementById('add-cli-input'),\n  cliSug: document.getElementById('add-cli-sug'),\n  petSelect: document.getElementById('add-pet-select'),\n  servInput: document.getElementById('add-serv-input'),\n  servSug: document.getElementById('add-serv-sug'),\n  valorInput: document.getElementById('add-valor'),\n  addServAddBtn: document.getElementById('add-serv-add-btn'),\n  servListUL: document.getElementById('add-serv-list'),\n  servTotalEl: document.getElementById('add-serv-total'),\n  obsInput: document.getElementById('add-observacoes'),\n  horaInput: document.getElementById('add-hora'),\n  profSelect: document.getElementById('add-prof-select'),\n};\n\n// ----- State -----\nexport const FILTER_STORAGE_KEY = 'agenda_filters_v1';\nexport const state = {\n  stores: [],\n  profissionais: [],\n  agendamentos: [],\n  selectedStoreId: null,\n  selectedCliente: null,\n  selectedServico: null,\n  tempServicos: [],\n  editing: null,\n  lastSnapshotHash: '',\n  __didInitialScroll: false,\n  view: 'day',\n  filters: {\n    statuses: new Set(),\n    profIds: new Set(),\n    profTipo: '', // 'esteticista' | 'veterinario' | ''\n  },\n};\n\n// ----- Date/time utils -----\nexport function todayStr() {\n  const d = new Date();\n  d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\n  return d.toISOString().slice(0, 10);\n}\nexport function pad(n) { return n < 10 ? '0' + n : '' + n; }\nexport function buildLocalDateTime(dateStr, hhmm) {\n  let y, m, d;\n  if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateStr)) { [d, m, y] = dateStr.split('/').map(Number); }\n  else { [y, m, d] = dateStr.split('-').map(Number); }\n  const [hh, mm] = (hhmm || '00:00').split(':').map(Number);\n  return new Date(y, m - 1, d, hh, mm, 0, 0);\n}\nexport function normalizeDate(v) {\n  if (!v) return todayStr();\n  if (/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(v)) { const [dd, mm, yyyy] = v.split('/'); return `${yyyy}-${mm}-${dd}`; }\n  return v;\n}\nexport function startOfWeek(dateStr) {\n  const d = new Date(dateStr + 'T00:00:00');\n  const dow = (d.getDay() + 6) % 7;\n  d.setDate(d.getDate() - dow);\n  d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\n  return d.toISOString().slice(0, 10);\n}\nexport function addDays(dateStr, n) {\n  const d = new Date(dateStr + 'T00:00:00');\n  d.setDate(d.getDate() + n);\n  d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\n  return d.toISOString().slice(0, 10);\n}\nexport function startOfMonth(dateStr) {\n  const d = new Date(dateStr + 'T00:00:00');\n  d.setDate(1);\n  d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\n  return d.toISOString().slice(0, 10);\n}\nexport function startOfNextMonth(dateStr) {\n  const d = new Date(dateStr + 'T00:00:00');\n  d.setDate(1);\n  d.setMonth(d.getMonth() + 1);\n  d.setMinutes(d.getMinutes() - d.getTimezoneOffset());\n  return d.toISOString().slice(0, 10);\n}\nexport function updateHeaderLabel() {\n  const base = normalizeDate(els.dateInput?.value || todayStr());\n  if (!els.dateLabelVisible) return;\n  if (state.view === 'week') {\n    const ini = startOfWeek(base);\n    const fim = addDays(ini, 6);\n    const li = new Date(ini + 'T00:00:00').toLocaleDateString('pt-BR');\n    const lf = new Date(fim + 'T00:00:00').toLocaleDateString('pt-BR');\n    els.dateLabelVisible.textContent = `${li} a ${lf}`;\n  } else if (state.view === 'month') {\n    const m0 = startOfMonth(base);\n    const dt = new Date(m0 + 'T00:00:00');\n    const label = dt.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });\n    els.dateLabelVisible.textContent = label.charAt(0).toUpperCase() + label.slice(1);\n  } else {\n    els.dateLabelVisible.textContent = new Date(base + 'T00:00:00').toLocaleDateString('pt-BR');\n  }\n}\nexport function localDateStr(d) {\n  const y = d.getFullYear();\n  const m = String(d.getMonth() + 1).padStart(2, '0');\n  const dd = String(d.getDate()).padStart(2, '0');\n  return `${y}-${m}-${dd}`;\n}\n\n// ----- Names / text helpers -----\nexport function shortTutorName(name) {\n  if (!name) return '';\n  const parts = String(name).trim().split(/\\s+/);\n  const cap = s => s ? (s[0].toUpperCase() + s.slice(1).toLowerCase()) : '';\n  const preps = new Set(['da','de','do','das','dos','e']);\n  const first = cap(parts[0] || '');\n  let second = '';\n  for (let i = 1; i < parts.length; i++) {\n    const w = parts[i];\n    if (!preps.has(w.toLowerCase())) { second = w; break; }\n  }\n  const secondAbbr = second ? cap(second).slice(0, 3) : '';\n  return secondAbbr ? `${first} ${secondAbbr}..` : first;\n}\n\n// ----- Generic helpers -----\nexport function money(v) { return (v || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }\nexport function clearChildren(el) { while (el && el.firstChild) el.removeChild(el.firstChild); }\nexport function debounce(fn, delay = 250) { let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); }; }\n\n// ----- Filtering helpers -----\nexport function normalizeStatus(s) {\n  return String(s || 'agendado')\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n    .trim().toLowerCase().replace(/[-\\s]+/g,'_');\n}\nexport function getFilteredAgendamentos() {\n  const hasStatus = state.filters.statuses.size > 0;\n  const hasProf   = state.filters.profIds.size   > 0;\n  if (!hasStatus && !hasProf) return state.agendamentos || [];\n\n  const byNameAll = new Map(\n    (state.profissionais || []).map(p => [String(p.nome || '').trim().toLowerCase(), String(p._id)])\n  );\n\n  return (state.agendamentos || []).filter(a => {\n    let ok = true;\n    if (hasStatus) ok = ok && state.filters.statuses.has(normalizeStatus(a.status));\n    if (hasProf) {\n      let pid = a.profissionalId ? String(a.profissionalId) : null;\n      if (!pid) {\n        let nc = '';\n        if (typeof a.profissional === 'string') nc = a.profissional;\n        else if (a.profissional && typeof a.profissional === 'object') {\n          nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\n              a.profissional.razaoSocial || a.profissional.nome || '';\n        }\n        pid = byNameAll.get(String(nc).trim().toLowerCase()) || null;\n      }\n      ok = ok && pid && state.filters.profIds.has(String(pid));\n    }\n    if (ok && state.filters.profTipo) {\n      // limita a profissionais do tipo selecionado\n      const tipoSel = state.filters.profTipo;\n      const idsTipo = new Set((state.profissionais || [])\n        .filter(p => (p.tipo || 'esteticista') === tipoSel)\n        .map(p => String(p._id)));\n      let pid2 = a.profissionalId ? String(a.profissionalId) : null;\n      if (!pid2) {\n        let nc = '';\n        if (typeof a.profissional === 'string') nc = a.profissional;\n        else if (a.profissional && typeof a.profissional === 'object') {\n          nc = a.profissional.nomeCompleto || a.profissional.nomeContato ||\n              a.profissional.razaoSocial || a.profissional.nome || '';\n        }\n        pid2 = byNameAll.get(String(nc).trim().toLowerCase()) || null;\n      }\n      ok = ok && pid2 && idsTipo.has(String(pid2));\n    }\n    return ok;\n  });\n}\nexport function getVisibleProfissionais() {\n  let profs = state.profissionais || [];\n\n  // 1) Filtra por tipo (Esteticista, Veterinário, etc.) se houver\n  const tipoSel = String(state.filters.profTipo || '').trim();\n  if (tipoSel) {\n    profs = profs.filter(p => String(p.tipo || 'esteticista') === tipoSel);\n  }\n\n  // 2) Filtra por profissionais específicos, se houver chips selecionados\n  if (state.filters.profIds && state.filters.profIds.size) {\n    profs = profs.filter(p => state.filters.profIds.has(String(p._id)));\n  }\n\n  return profs;\n}\n\n// ----- Status styles -----\nexport function statusMeta(s) {\n  const keyRaw = String(s || 'agendado')\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n    .trim().toLowerCase().replace(/[-\\s]+/g, '_');\n  const allowed = ['agendado', 'em_espera', 'em_atendimento', 'finalizado'];\n  const k = allowed.includes(keyRaw) ? keyRaw : 'agendado';\n  const map = {\n    agendado: {\n      label: 'Agendado', short: 'Agend.', stripe: '#64748B', text: '#0F172A',\n      badgeClass: 'bg-slate-100 text-slate-700 border border-slate-200', borderClass: 'border-slate-300'\n    },\n    em_espera: {\n      label: 'Em espera', short: 'Espera', stripe: '#B45309', text: '#1F2937',\n      badgeClass: 'bg-amber-50 text-amber-800 border border-amber-200', borderClass: 'border-amber-400'\n    },\n    em_atendimento: {\n      label: 'Em atendimento', short: 'Atend.', stripe: '#1D4ED8', text: '#0B1235',\n      badgeClass: 'bg-blue-50 text-blue-800 border border-blue-200', borderClass: 'border-blue-500'\n    },\n    finalizado: {\n      label: 'Finalizado', short: 'Fim.', stripe: '#16A34A', text: '#052E16',\n      badgeClass: 'bg-green-50 text-green-800 border border-green-200', borderClass: 'border-green-500'\n    }\n  };\n  return map[k];\n}\nexport function renderStatusBadge(s) {\n  const { label, badgeClass } = statusMeta(s);\n  return `<span class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium whitespace-nowrap ${badgeClass}\">${label}</span>`;\n}\n"
        }
    ]
}