{
    "sourceFile": "scripts/cartManager.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1756581934540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756582769815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,13 +8,30 @@\n     },\r\n \r\n     getCart: async function() {\r\n         const userId = this.getUserId();\r\n-        if (!userId) return []; // Se não há utilizador, o carrinho está vazio\r\n+        if (!userId) return [];\r\n \r\n         try {\r\n-            const response = await fetch(`${API_CONFIG.BASE_URL}/cart/${userId}`);\r\n-            return await response.json();\r\n+            const token = localStorage.getItem('authToken'); // <-- pega o token salvo no login\r\n+            const response = await fetch(`${API_CONFIG.BASE_URL}/cart/${userId}`, {\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`,   // <-- adiciona o token aqui\r\n+                    'Content-Type': 'application/json'\r\n+                }\r\n+            });\r\n+\r\n+            if (!response.ok) {\r\n+                console.error(\"Erro na resposta do servidor:\", response.status);\r\n+                return [];\r\n+            }\r\n+\r\n+            const data = await response.json();\r\n+            if (!Array.isArray(data)) {\r\n+                console.error(\"Formato inesperado do carrinho:\", data);\r\n+                return [];\r\n+            }\r\n+            return data;\r\n         } catch (error) {\r\n             console.error(\"Erro ao buscar carrinho:\", error);\r\n             return [];\r\n         }\r\n"
                },
                {
                    "date": 1756586375217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,24 @@\n const CartManager = {\r\n     getToken: function() {\r\n-        return localStorage.getItem('authToken');\r\n+        const user = JSON.parse(localStorage.getItem('loggedInUser'));\r\n+        return user ? user.token : null;\r\n     },\r\n+\r\n     getUserId: function() {\r\n         const user = JSON.parse(localStorage.getItem('loggedInUser'));\r\n         return user ? user.id : null;\r\n     },\r\n \r\n     getCart: async function() {\r\n         const userId = this.getUserId();\r\n-        if (!userId) return [];\r\n+        const token = this.getToken();\r\n+        if (!userId || !token) return [];\r\n \r\n         try {\r\n-            const token = localStorage.getItem('authToken'); // <-- pega o token salvo no login\r\n             const response = await fetch(`${API_CONFIG.BASE_URL}/cart/${userId}`, {\r\n                 headers: {\r\n-                    'Authorization': `Bearer ${token}`,   // <-- adiciona o token aqui\r\n+                    'Authorization': `Bearer ${token}`,\r\n                     'Content-Type': 'application/json'\r\n                 }\r\n             });\r\n \r\n@@ -38,18 +40,21 @@\n     },\r\n \r\n     addItem: async function(productId, quantity = 1) {\r\n         const userId = this.getUserId();\r\n-        if (!userId) {\r\n-            // Se não estiver logado, redireciona para a página de login\r\n+        const token = this.getToken();\r\n+        if (!userId || !token) {\r\n             window.location.href = `${basePath}pages/login.html`;\r\n             return;\r\n         }\r\n \r\n         try {\r\n             await fetch(`${API_CONFIG.BASE_URL}/cart/${userId}`, {\r\n                 method: 'POST',\r\n-                headers: { 'Content-Type': 'application/json' },\r\n+                headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n                 body: JSON.stringify({ productId, quantity })\r\n             });\r\n             this.updateCartCount();\r\n         } catch (error) {\r\n@@ -58,13 +63,18 @@\n     },\r\n \r\n     updateQuantity: async function(productId, newQuantity) {\r\n         const userId = this.getUserId();\r\n-        if (!userId) return;\r\n+        const token = this.getToken();\r\n+        if (!userId || !token) return;\r\n+\r\n         try {\r\n             const response = await fetch(`${API_CONFIG.BASE_URL}/cart/${userId}/${productId}`, {\r\n                 method: 'PUT',\r\n-                headers: { 'Content-Type': 'application/json' },\r\n+                headers: { \r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n                 body: JSON.stringify({ quantity: newQuantity })\r\n             });\r\n             await this.updateCartCount();\r\n             return await response.json();\r\n@@ -74,13 +84,17 @@\n     },\r\n \r\n     removeItem: async function(productId) {\r\n         const userId = this.getUserId();\r\n-        if (!userId) return; \r\n+        const token = this.getToken();\r\n+        if (!userId || !token) return; \r\n \r\n         try {\r\n             await fetch(`${API_CONFIG.BASE_URL}/cart/${userId}/${productId}`, {\r\n-                method: 'DELETE'\r\n+                method: 'DELETE',\r\n+                headers: {\r\n+                    'Authorization': `Bearer ${token}`\r\n+                }\r\n             });\r\n             await this.updateCartCount();\r\n         } catch (error) {\r\n             console.error(\"Erro ao remover item:\", error);\r\n@@ -88,16 +102,21 @@\n     },\r\n \r\n     updateSubscription: async function(productId, isSubscribed) {\r\n         const userId = this.getUserId();\r\n-        if (!userId) return;\r\n+        const token = this.getToken();\r\n+        if (!userId || !token) return;\r\n+\r\n         try {\r\n             const response = await fetch(`${API_CONFIG.BASE_URL}/cart/${userId}/${productId}/subscribe`, {\r\n                 method: 'PUT',\r\n-                headers: { 'Content-Type': 'application/json' },\r\n+                headers: { \r\n+                    'Content-Type': 'application/json',\r\n+                    'Authorization': `Bearer ${token}`\r\n+                },\r\n                 body: JSON.stringify({ isSubscribed: isSubscribed })\r\n             });\r\n-            await this.updateCartCount(); // Atualiza a contagem caso a assinatura mude o total de itens\r\n+            await this.updateCartCount();\r\n             return await response.json();\r\n         } catch (error) {\r\n             console.error(\"Erro ao atualizar o estado da assinatura:\", error);\r\n         }\r\n@@ -122,5 +141,5 @@\n     }\r\n };\r\n \r\n // Atualiza a contagem quando a página é carregada\r\n-document.addEventListener('DOMContentLoaded', () => CartManager.updateCartCount());\n\\ No newline at end of file\n+document.addEventListener('DOMContentLoaded', () => CartManager.updateCartCount());\r\n"
                }
            ],
            "date": 1756581934540,
            "name": "Commit-0",
            "content": "const CartManager = {\r\n    getToken: function() {\r\n        return localStorage.getItem('authToken');\r\n    },\r\n    getUserId: function() {\r\n        const user = JSON.parse(localStorage.getItem('loggedInUser'));\r\n        return user ? user.id : null;\r\n    },\r\n\r\n    getCart: async function() {\r\n        const userId = this.getUserId();\r\n        if (!userId) return []; // Se não há utilizador, o carrinho está vazio\r\n\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.BASE_URL}/cart/${userId}`);\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error(\"Erro ao buscar carrinho:\", error);\r\n            return [];\r\n        }\r\n    },\r\n\r\n    addItem: async function(productId, quantity = 1) {\r\n        const userId = this.getUserId();\r\n        if (!userId) {\r\n            // Se não estiver logado, redireciona para a página de login\r\n            window.location.href = `${basePath}pages/login.html`;\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await fetch(`${API_CONFIG.BASE_URL}/cart/${userId}`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ productId, quantity })\r\n            });\r\n            this.updateCartCount();\r\n        } catch (error) {\r\n            console.error(\"Erro ao adicionar item:\", error);\r\n        }\r\n    },\r\n\r\n    updateQuantity: async function(productId, newQuantity) {\r\n        const userId = this.getUserId();\r\n        if (!userId) return;\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.BASE_URL}/cart/${userId}/${productId}`, {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ quantity: newQuantity })\r\n            });\r\n            await this.updateCartCount();\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error(\"Erro ao atualizar quantidade:\", error);\r\n        }\r\n    },\r\n\r\n    removeItem: async function(productId) {\r\n        const userId = this.getUserId();\r\n        if (!userId) return; \r\n\r\n        try {\r\n            await fetch(`${API_CONFIG.BASE_URL}/cart/${userId}/${productId}`, {\r\n                method: 'DELETE'\r\n            });\r\n            await this.updateCartCount();\r\n        } catch (error) {\r\n            console.error(\"Erro ao remover item:\", error);\r\n        }\r\n    },\r\n\r\n    updateSubscription: async function(productId, isSubscribed) {\r\n        const userId = this.getUserId();\r\n        if (!userId) return;\r\n        try {\r\n            const response = await fetch(`${API_CONFIG.BASE_URL}/cart/${userId}/${productId}/subscribe`, {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ isSubscribed: isSubscribed })\r\n            });\r\n            await this.updateCartCount(); // Atualiza a contagem caso a assinatura mude o total de itens\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error(\"Erro ao atualizar o estado da assinatura:\", error);\r\n        }\r\n    },\r\n\r\n    updateCartCount: async function() {\r\n        const userId = this.getUserId();\r\n        const cartCountElement = document.getElementById('cart-count');\r\n        if (!cartCountElement) return;\r\n\r\n        if (!userId) {\r\n            cartCountElement.textContent = 0;\r\n            cartCountElement.classList.add('hidden');\r\n            return;\r\n        }\r\n\r\n        const cart = await this.getCart();\r\n        const count = cart.reduce((total, item) => total + item.quantity, 0);\r\n\r\n        cartCountElement.textContent = count;\r\n        cartCountElement.classList.toggle('hidden', count === 0);\r\n    }\r\n};\r\n\r\n// Atualiza a contagem quando a página é carregada\r\ndocument.addEventListener('DOMContentLoaded', () => CartManager.updateCartCount());"
        }
    ]
}