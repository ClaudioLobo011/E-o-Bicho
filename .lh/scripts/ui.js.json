{
    "sourceFile": "scripts/ui.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1756846017607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756846836528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,5 +265,20 @@\n   // Garante que roda quando os componentes forem injetados\r\n   document.addEventListener('components:ready', initUserMenu);\r\n   document.addEventListener('DOMContentLoaded', initUserMenu);\r\n \r\n+  // Delegação global de logout (garantia)\r\n+  document.addEventListener('click', (e) => {\r\n+    const btn = e.target.closest('#logout-btn');\r\n+    if (!btn) return;\r\n+    e.preventDefault();\r\n+    // Se existir função oficial de logout, usa; senão, fallback simples\r\n+    if (typeof window.logout === 'function') {\r\n+      window.logout();\r\n+    } else {\r\n+      try { localStorage.removeItem('auth_token'); } catch(_) {}\r\n+      try { localStorage.removeItem('user'); } catch(_) {}\r\n+      window.location.href = '/pages/login.html';\r\n+    }\r\n+  });\r\n+\r\n })();\r\n"
                },
                {
                    "date": 1756847257986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,54 +225,43 @@\n       infoModal.classList.add('hidden');\r\n     }\r\n   });\r\n \r\n-  // === User menu (header) - abre no hover (CSS) e no clique (mobile) ===\r\n+  // Alterna visões logado/deslogado pela presença de token/usuário\r\n+  function syncUserViews() {\r\n+    let isLogged = false;\r\n+    try {\r\n+      const token = localStorage.getItem('auth_token');\r\n+      const user  = localStorage.getItem('user');\r\n+      isLogged = !!(token || user);\r\n+    } catch(_) {}\r\n+\r\n+    document.querySelectorAll('.user-logged-in-view')\r\n+      .forEach(el => el.classList.toggle('hidden', !isLogged));\r\n+    document.querySelectorAll('.user-logged-out-view')\r\n+      .forEach(el => el.classList.toggle('hidden', isLogged));\r\n+  }\r\n+\r\n+  // Menu do usuário (abre no clique; hover já funciona via CSS)\r\n   function initUserMenu() {\r\n     const wrap  = document.getElementById('user-menu-wrapper');\r\n     const btn   = document.getElementById('user-menu-trigger');\r\n     const panel = document.getElementById('user-menu-panel');\r\n     if (!wrap || !btn || !panel) return;\r\n \r\n-    const open = () => {\r\n-      wrap.classList.add('open');\r\n-      btn.setAttribute('aria-expanded', 'true');\r\n-      panel.classList.remove('pointer-events-none', 'opacity-0');\r\n-    };\r\n+    const open = () => { wrap.classList.add('open'); btn.setAttribute('aria-expanded', 'true'); };\r\n+    const close = () => { wrap.classList.remove('open'); btn.setAttribute('aria-expanded', 'false'); };\r\n \r\n-    const close = () => {\r\n-      wrap.classList.remove('open');\r\n-      btn.setAttribute('aria-expanded', 'false');\r\n-      panel.classList.add('pointer-events-none', 'opacity-0');\r\n-    };\r\n-\r\n-    // Clique/tap no botão (mobile)\r\n-    btn.addEventListener('click', (e) => {\r\n-      e.preventDefault();\r\n-      if (wrap.classList.contains('open')) close(); else open();\r\n-    });\r\n-\r\n-    // Fechar clicando fora\r\n-    document.addEventListener('click', (e) => {\r\n-      if (!wrap.contains(e.target)) close();\r\n-    });\r\n-\r\n-    // Esc fecha\r\n-    document.addEventListener('keydown', (e) => {\r\n-      if (e.key === 'Escape') close();\r\n-    });\r\n+    btn.addEventListener('click', (e) => { e.preventDefault(); wrap.classList.contains('open') ? close() : open(); });\r\n+    document.addEventListener('click', (e) => { if (!wrap.contains(e.target)) close(); });\r\n+    document.addEventListener('keydown', (e) => { if (e.key === 'Escape') close(); });\r\n   }\r\n \r\n-  // Garante que roda quando os componentes forem injetados\r\n-  document.addEventListener('components:ready', initUserMenu);\r\n-  document.addEventListener('DOMContentLoaded', initUserMenu);\r\n-\r\n-  // Delegação global de logout (garantia)\r\n+  // Delegação global do logout (garantia)\r\n   document.addEventListener('click', (e) => {\r\n     const btn = e.target.closest('#logout-btn');\r\n     if (!btn) return;\r\n     e.preventDefault();\r\n-    // Se existir função oficial de logout, usa; senão, fallback simples\r\n     if (typeof window.logout === 'function') {\r\n       window.logout();\r\n     } else {\r\n       try { localStorage.removeItem('auth_token'); } catch(_) {}\r\n@@ -280,5 +269,12 @@\n       window.location.href = '/pages/login.html';\r\n     }\r\n   });\r\n \r\n+  // Rodar nos momentos certos\r\n+  document.addEventListener('DOMContentLoaded', () => { initUserMenu(); syncUserViews(); });\r\n+  document.addEventListener('components:ready', () => { initUserMenu(); syncUserViews(); });\r\n+  // Atualiza se outro tab fizer login/logout\r\n+  window.addEventListener('storage', (e) => { if (['auth_token','user'].includes(e.key)) syncUserViews(); });\r\n+\r\n+\r\n })();\r\n"
                }
            ],
            "date": 1756846017607,
            "name": "Commit-0",
            "content": "/* ============================================================================\r\n * scripts/ui.js  —  Utilitários de UI do site\r\n * Compatível com os componentes:\r\n *   - components/info-modal.html          (id=\"info-modal\")\r\n *   - components/confirm-modal.html       (id=\"confirm-modal\")\r\n *\r\n * Este arquivo expõe:\r\n *   - ensureModalReady(isConfirm: boolean) -> Promise<HTMLElement|null>\r\n *   - showModal({ title, message, confirmText, onConfirm, cancelText, onCancel })\r\n *   - showToast(message, type='info', timeout=3000)\r\n *   - loadIcons()  // carrega SVGs em elementos com [data-icon]\r\n * ========================================================================== */\r\n\r\n(function () {\r\n  // Base para caminhos relativos (ex.: '../' dentro de /pages)\r\n  const BASE = (typeof window.basePath !== 'undefined') ? window.basePath : './';\r\n  const ICON_BASE = `${BASE}public/icons/`;\r\n\r\n  /* ------------------------------------------------------------------------\r\n   * Helpers DOM\r\n   * ---------------------------------------------------------------------- */\r\n  function qs(sel, root = document) { return root.querySelector(sel); }\r\n  function qsa(sel, root = document) { return Array.from(root.querySelectorAll(sel)); }\r\n  function noop() {}\r\n\r\n  /* ------------------------------------------------------------------------\r\n   * Garantir que o HTML do modal esteja no DOM\r\n   * - Tenta pegar pelo ID\r\n   * - Tenta dentro do placeholder correspondente\r\n   * - Pede para o main.js injetar (loadComponents), se existir\r\n   * - Fallback: busca o HTML do componente e injeta no placeholder\r\n   * ---------------------------------------------------------------------- */\r\n  async function ensureModalReady(isConfirm) {\r\n    const id = isConfirm ? 'confirm-modal' : 'info-modal';\r\n    let el = document.getElementById(id);\r\n    if (el) return el;\r\n\r\n    const phId = isConfirm ? 'confirm-modal-placeholder' : 'modal-placeholder';\r\n    let ph = document.getElementById(phId);\r\n    if (ph) {\r\n      el = ph.querySelector('#' + id);\r\n      if (el) return el;\r\n    }\r\n\r\n    // tenta pedir pro main.js injetar componentes\r\n    if (typeof window.loadComponents === 'function') {\r\n      try {\r\n        await window.loadComponents();\r\n        ph = document.getElementById(phId);\r\n        if (ph) {\r\n          el = ph.querySelector('#' + id);\r\n          if (el) return el;\r\n        }\r\n      } catch (_) { /* ignora */ }\r\n    }\r\n\r\n    // fallback final: injeta diretamente o componente\r\n    if (!ph) {\r\n      ph = document.createElement('div');\r\n      ph.id = phId;\r\n      document.body.appendChild(ph);\r\n    }\r\n\r\n    const path = `${BASE}components/${isConfirm ? 'confirm-modal' : 'info-modal'}.html`;\r\n    try {\r\n      const res = await fetch(path, { cache: 'no-cache' });\r\n      if (res.ok) {\r\n        ph.innerHTML = await res.text();\r\n        el = ph.querySelector('#' + id);\r\n        if (el) return el;\r\n      }\r\n    } catch (_) { /* ignora */ }\r\n\r\n    return null;\r\n  }\r\n  // expõe global para uso opcional\r\n  window.ensureModalReady = ensureModalReady;\r\n\r\n  /* ------------------------------------------------------------------------\r\n   * showModal — modal unificado (info/confirm)\r\n   * - Usa os componentes já existentes do projeto\r\n   * - Se não houver HTML ainda, injeta/espera; se falhar, usa alert()\r\n   * ---------------------------------------------------------------------- */\r\n  async function showModal({ title, message, confirmText = 'OK', onConfirm, cancelText, onCancel }) {\r\n    const isConfirm = !!cancelText;\r\n    const modal = await ensureModalReady(isConfirm);\r\n\r\n    // Sem HTML disponível: fallback silencioso\r\n    if (!modal) {\r\n      console.warn('Modal HTML não encontrado; usando alert() como fallback.');\r\n      if (message) alert(message);\r\n      (onConfirm || noop)();\r\n      return;\r\n    }\r\n\r\n    // INFO (um botão)\r\n    if (!isConfirm) {\r\n      const msgEl = qs('#info-modal-message', modal);\r\n      const okBtn = qs('#info-modal-btn', modal) || qs('button', modal);\r\n\r\n      if (msgEl) msgEl.textContent = message || '';\r\n      if (okBtn) okBtn.textContent = confirmText || 'OK';\r\n\r\n      modal.classList.remove('hidden');\r\n\r\n      if (okBtn) {\r\n        okBtn.onclick = () => {\r\n          modal.classList.add('hidden');\r\n          (onConfirm || noop)();\r\n        };\r\n      }\r\n      return;\r\n    }\r\n\r\n    // CONFIRM (dois botões)\r\n    const titleEl   = qs('#confirm-modal-title', modal) || qs('h2', modal);\r\n    const msgEl     = qs('#confirm-modal-message', modal);\r\n    const btnCancel = qs('#confirm-modal-cancel-btn', modal);\r\n    const btnOk     = qs('#confirm-modal-confirm-btn', modal);\r\n\r\n    if (titleEl) titleEl.textContent = title || 'Atenção';\r\n    if (msgEl)   msgEl.textContent   = message || '';\r\n    if (btnOk)   btnOk.textContent   = confirmText || 'Confirmar';\r\n    if (btnCancel) btnCancel.textContent = cancelText || 'Cancelar';\r\n\r\n    modal.classList.remove('hidden');\r\n\r\n    if (btnCancel) {\r\n      btnCancel.onclick = () => {\r\n        modal.classList.add('hidden');\r\n        (onCancel || noop)();\r\n      };\r\n    }\r\n    if (btnOk) {\r\n      btnOk.onclick = () => {\r\n        modal.classList.add('hidden');\r\n        (onConfirm || noop)();\r\n      };\r\n    }\r\n  }\r\n  // expõe global\r\n  window.showModal = showModal;\r\n\r\n  /* ------------------------------------------------------------------------\r\n   * Toast simples (não depende dos modais)\r\n   * - type: 'info' | 'success' | 'error' | 'warning'\r\n   * ---------------------------------------------------------------------- */\r\n  function showToast(message, type = 'info', timeout = 3000) {\r\n    let container = document.getElementById('toast-container');\r\n    if (!container) {\r\n      container = document.createElement('div');\r\n      container.id = 'toast-container';\r\n      container.className = 'fixed top-4 right-4 z-[9999] space-y-2';\r\n      document.body.appendChild(container);\r\n    }\r\n\r\n    const base =\r\n      'px-4 py-2 rounded shadow text-sm text-white transition transform';\r\n    const color = {\r\n      info:    'bg-slate-700',\r\n      success: 'bg-green-600',\r\n      error:   'bg-red-600',\r\n      warning: 'bg-yellow-600'\r\n    }[type] || 'bg-slate-700';\r\n\r\n    const el = document.createElement('div');\r\n    el.className = `${base} ${color} opacity-0 translate-y-2`;\r\n    el.textContent = message || '';\r\n    container.appendChild(el);\r\n\r\n    // animação simples\r\n    requestAnimationFrame(() => {\r\n      el.classList.remove('opacity-0', 'translate-y-2');\r\n      el.classList.add('opacity-100', 'translate-y-0');\r\n    });\r\n\r\n    setTimeout(() => {\r\n      el.classList.remove('opacity-100', 'translate-y-0');\r\n      el.classList.add('opacity-0', 'translate-y-2');\r\n      setTimeout(() => el.remove(), 200);\r\n    }, Math.max(1200, timeout | 0));\r\n  }\r\n  window.showToast = showToast;\r\n\r\n  /* ------------------------------------------------------------------------\r\n   * loadIcons — injeta SVGs em elementos com [data-icon=\"nome\"]\r\n   * Busca em `${BASE}public/icons/<nome>.svg`\r\n   * ---------------------------------------------------------------------- */\r\n  async function loadIcons() {\r\n    const nodes = qsa('[data-icon]');\r\n    if (!nodes.length) return;\r\n\r\n    const jobs = nodes.map(async (el) => {\r\n      const iconName = (el.getAttribute('data-icon') || '').trim();\r\n      if (!iconName) return;\r\n\r\n      try {\r\n        const res = await fetch(`${ICON_BASE}${iconName}.svg`, { cache: 'no-cache' });\r\n        if (!res.ok) throw new Error(`Ícone não encontrado: ${iconName}`);\r\n        el.innerHTML = await res.text();\r\n      } catch (err) {\r\n        console.error(`Falha ao carregar o ícone: ${iconName}`, err);\r\n        el.innerHTML = '';\r\n      }\r\n    });\r\n\r\n    await Promise.all(jobs);\r\n  }\r\n  window.loadIcons = loadIcons;\r\n\r\n  /* ------------------------------------------------------------------------\r\n   * Fechar modais com ESC (se estiverem visíveis)\r\n   * ---------------------------------------------------------------------- */\r\n  document.addEventListener('keydown', (e) => {\r\n    if (e.key !== 'Escape') return;\r\n    const confirmModal = document.getElementById('confirm-modal');\r\n    const infoModal = document.getElementById('info-modal');\r\n    let closed = false;\r\n\r\n    if (confirmModal && !confirmModal.classList.contains('hidden')) {\r\n      confirmModal.classList.add('hidden');\r\n      closed = true;\r\n    }\r\n    if (!closed && infoModal && !infoModal.classList.contains('hidden')) {\r\n      infoModal.classList.add('hidden');\r\n    }\r\n  });\r\n\r\n  // === User menu (header) - abre no hover (CSS) e no clique (mobile) ===\r\n  function initUserMenu() {\r\n    const wrap  = document.getElementById('user-menu-wrapper');\r\n    const btn   = document.getElementById('user-menu-trigger');\r\n    const panel = document.getElementById('user-menu-panel');\r\n    if (!wrap || !btn || !panel) return;\r\n\r\n    const open = () => {\r\n      wrap.classList.add('open');\r\n      btn.setAttribute('aria-expanded', 'true');\r\n      panel.classList.remove('pointer-events-none', 'opacity-0');\r\n    };\r\n\r\n    const close = () => {\r\n      wrap.classList.remove('open');\r\n      btn.setAttribute('aria-expanded', 'false');\r\n      panel.classList.add('pointer-events-none', 'opacity-0');\r\n    };\r\n\r\n    // Clique/tap no botão (mobile)\r\n    btn.addEventListener('click', (e) => {\r\n      e.preventDefault();\r\n      if (wrap.classList.contains('open')) close(); else open();\r\n    });\r\n\r\n    // Fechar clicando fora\r\n    document.addEventListener('click', (e) => {\r\n      if (!wrap.contains(e.target)) close();\r\n    });\r\n\r\n    // Esc fecha\r\n    document.addEventListener('keydown', (e) => {\r\n      if (e.key === 'Escape') close();\r\n    });\r\n  }\r\n\r\n  // Garante que roda quando os componentes forem injetados\r\n  document.addEventListener('components:ready', initUserMenu);\r\n  document.addEventListener('DOMContentLoaded', initUserMenu);\r\n\r\n})();\r\n"
        }
    ]
}