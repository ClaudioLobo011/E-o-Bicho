{
    "sourceFile": "scripts/product/product.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 33,
            "patches": [
                {
                    "date": 1757086945823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757086973710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,9 @@\n     priceContainer.innerHTML = priceHtml;\r\n     // --- FIM DA LÓGICA DE PREÇO CORRIGIDA ---\r\n \r\n     document.getElementById('product-description').innerHTML = product.descricao || 'Este produto não possui uma descrição detalhada.';\r\n+    renderProductSpecifications(product);\r\n \r\n     const stockStatusEl = document.getElementById('stock-status');\r\n     if (product.stock > 0) {\r\n         stockStatusEl.className = 'flex items-center space-x-2 text-green-600 font-semibold text-sm';\r\n"
                },
                {
                    "date": 1757091199672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -288,60 +288,59 @@\n  * Campos: Idade[], Pet[], Porte[], Apresentação (texto), EAN (codbarras)\r\n  */\r\n function renderProductSpecifications(product) {\r\n   const section = document.getElementById('product-specs-section');\r\n-  const list = document.getElementById('product-specs-list');\r\n-  if (!section || !list) return;\r\n+  const svg = document.getElementById('svg-especificacoes');\r\n+  if (!section || !svg) return;\r\n \r\n   const espec = product?.especificacoes || {};\r\n-  const uniq = (arr) => [...new Set((Array.isArray(arr) ? arr : []).map(v => String(v || '').trim()).filter(Boolean))];\r\n+  const uniq = (arr) => [...new Set((Array.isArray(arr) ? arr : [arr]).map(v => String(v || '').trim()).filter(Boolean))];\r\n \r\n-  const rows = [];\r\n+  const lines = [];\r\n \r\n-  const pushIf = (rotulo, valor) => {\r\n-    let show = false;\r\n-    let texto = '';\r\n-\r\n+  const pushLine = (rotulo, valor) => {\r\n     if (Array.isArray(valor)) {\r\n       const arr = uniq(valor);\r\n-      if (arr.length) {\r\n-        show = true;\r\n-        texto = arr.join(', ');\r\n-      }\r\n-    } else if (typeof valor === 'string') {\r\n-      const v = valor.trim();\r\n-      if (v) {\r\n-        show = true;\r\n-        texto = v;\r\n-      }\r\n+      if (arr.length) lines.push(`${rotulo}: ${arr.join(', ')}`);\r\n+    } else {\r\n+      const v = String(valor || '').trim();\r\n+      if (v) lines.push(`${rotulo}: ${v}`);\r\n     }\r\n-\r\n-    if (show) {\r\n-      rows.push(\r\n-        `<li class=\"flex items-start\">\r\n-          <span class=\"w-28 min-w-28 text-gray-500\">${rotulo}</span>\r\n-          <span class=\"flex-1 font-medium\">${texto}</span>\r\n-        </li>`\r\n-      );\r\n-    }\r\n   };\r\n \r\n-  // Campos vindos do admin\r\n-  pushIf('Idade', espec.idade);\r\n-  pushIf('Pet', espec.pet);\r\n-  pushIf('Porte', espec.porteRaca);\r\n-  pushIf('Apresentação', espec.apresentacao);\r\n+  // Monta as linhas visíveis\r\n+  pushLine('Idade', espec.idade);\r\n+  pushLine('Pet', espec.pet);\r\n+  pushLine('Porte', espec.porte);\r\n+  pushLine('Apresentação', espec.apresentacao);\r\n+  if (product?.codbarras) pushLine('EAN', String(product.codbarras));\r\n \r\n-  // EAN (do próprio produto)\r\n-  if (product?.codbarras && String(product.codbarras).trim()) {\r\n-    pushIf('EAN', String(product.codbarras).trim());\r\n+  if (lines.length === 0) {\r\n+    section.classList.add('hidden');\r\n+    return;\r\n   }\r\n+  section.classList.remove('hidden');\r\n \r\n-  if (rows.length === 0) {\r\n-    // sem dados → some com o bloco\r\n-    section.classList.add('hidden');\r\n-    list.innerHTML = '';\r\n-  } else {\r\n-    section.classList.remove('hidden');\r\n-    list.innerHTML = rows.join('');\r\n-  }\r\n+  // Reposiciona e preenche os textos do SVG, sem deixar \"buracos\"\r\n+  const ids = ['svg-spec-idade','svg-spec-pet','svg-spec-porte','svg-spec-apresentacao','svg-spec-ean'];\r\n+  const startY = 110;\r\n+  const step = 40;\r\n+\r\n+  // Limpa todos\r\n+  ids.forEach((id) => {\r\n+    const el = document.getElementById(id);\r\n+    if (el) {\r\n+      el.textContent = '';\r\n+      el.setAttribute('display', 'none');\r\n+    }\r\n+  });\r\n+\r\n+  // Preenche só os necessários\r\n+  lines.forEach((txt, idx) => {\r\n+    const el = document.getElementById(ids[idx]);\r\n+    if (el) {\r\n+      el.textContent = txt;\r\n+      el.setAttribute('y', String(startY + idx * step));\r\n+      el.removeAttribute('display');\r\n+    }\r\n+  });\r\n }\r\n"
                },
                {
                    "date": 1757105187252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,58 +289,59 @@\n  */\r\n function renderProductSpecifications(product) {\r\n   const section = document.getElementById('product-specs-section');\r\n   const svg = document.getElementById('svg-especificacoes');\r\n+  const listFallback = document.getElementById('product-specs-list'); // mantido para compatibilidade\r\n   if (!section || !svg) return;\r\n \r\n   const espec = product?.especificacoes || {};\r\n-  const uniq = (arr) => [...new Set((Array.isArray(arr) ? arr : [arr]).map(v => String(v || '').trim()).filter(Boolean))];\r\n \r\n-  const lines = [];\r\n+  // Normaliza valores, remove vazios e duplicados\r\n+  const norm = (val) => {\r\n+    if (Array.isArray(val)) return [...new Set(val.map(v => String(v || '').trim()).filter(Boolean))];\r\n+    const s = String(val || '').trim();\r\n+    return s ? [s] : [];\r\n+  };\r\n \r\n-  const pushLine = (rotulo, valor) => {\r\n-    if (Array.isArray(valor)) {\r\n-      const arr = uniq(valor);\r\n-      if (arr.length) lines.push(`${rotulo}: ${arr.join(', ')}`);\r\n-    } else {\r\n-      const v = String(valor || '').trim();\r\n-      if (v) lines.push(`${rotulo}: ${v}`);\r\n-    }\r\n+  const linhas = [];\r\n+  const add = (rotulo, valor) => {\r\n+    const arr = norm(valor);\r\n+    if (arr.length) linhas.push(`${rotulo}: ${arr.join(', ')}`);\r\n   };\r\n \r\n-  // Monta as linhas visíveis\r\n-  pushLine('Idade', espec.idade);\r\n-  pushLine('Pet', espec.pet);\r\n-  pushLine('Porte', espec.porte);\r\n-  pushLine('Apresentação', espec.apresentacao);\r\n-  if (product?.codbarras) pushLine('EAN', String(product.codbarras));\r\n+  add('Idade', espec.idade);\r\n+  add('Pet', espec.pet);\r\n+  add('Porte', espec.porte);\r\n+  add('Apresentação', espec.apresentacao);\r\n+  if (product?.codbarras) add('EAN', product.codbarras);\r\n \r\n-  if (lines.length === 0) {\r\n+  if (linhas.length === 0) {\r\n+    // sem dados → some com o bloco\r\n     section.classList.add('hidden');\r\n+    if (listFallback) listFallback.innerHTML = '';\r\n     return;\r\n   }\r\n   section.classList.remove('hidden');\r\n \r\n-  // Reposiciona e preenche os textos do SVG, sem deixar \"buracos\"\r\n-  const ids = ['svg-spec-idade','svg-spec-pet','svg-spec-porte','svg-spec-apresentacao','svg-spec-ean'];\r\n+  // IDs disponíveis no SVG (até 5 linhas)\r\n+  const ids = ['svg-spec-idade', 'svg-spec-pet', 'svg-spec-porte', 'svg-spec-apresentacao', 'svg-spec-ean'];\r\n   const startY = 110;\r\n   const step = 40;\r\n \r\n-  // Limpa todos\r\n+  // Limpa tudo\r\n   ids.forEach((id) => {\r\n     const el = document.getElementById(id);\r\n     if (el) {\r\n       el.textContent = '';\r\n       el.setAttribute('display', 'none');\r\n     }\r\n   });\r\n \r\n-  // Preenche só os necessários\r\n-  lines.forEach((txt, idx) => {\r\n-    const el = document.getElementById(ids[idx]);\r\n-    if (el) {\r\n-      el.textContent = txt;\r\n-      el.setAttribute('y', String(startY + idx * step));\r\n-      el.removeAttribute('display');\r\n-    }\r\n+  // Preenche apenas o que existe e reposiciona sem deixar “buracos”\r\n+  linhas.slice(0, ids.length).forEach((texto, i) => {\r\n+    const el = document.getElementById(ids[i]);\r\n+    if (!el) return;\r\n+    el.textContent = texto;\r\n+    el.setAttribute('y', String(startY + i * step));\r\n+    el.removeAttribute('display');\r\n   });\r\n }\r\n"
                },
                {
                    "date": 1757107028468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,27 @@\n document.addEventListener('DOMContentLoaded', () => {\r\n     initializeProductPage();\r\n });\r\n \r\n+// Carrega o SVG de especificações uma única vez e o injeta no DOM.\r\n+let _specsSvgPromise = null;\r\n+function loadSpecsSvg() {\r\n+  if (_specsSvgPromise) return _specsSvgPromise;\r\n+\r\n+  _specsSvgPromise = (async () => {\r\n+    const container = document.getElementById('product-specs-svg-container');\r\n+    if (!container) return; // página sem o bloco\r\n+\r\n+    const resp = await fetch('/public/icons/especificacoes.svg');\r\n+    if (!resp.ok) throw new Error('Não foi possível carregar especificações.svg');\r\n+\r\n+    const svgMarkup = await resp.text();\r\n+    container.innerHTML = svgMarkup; // injeta o <svg id=\"svg-especificacoes\"> no DOM\r\n+  })();\r\n+\r\n+  return _specsSvgPromise;\r\n+}\r\n+\r\n async function initializeProductPage() {\r\n     const urlParams = new URLSearchParams(window.location.search);\r\n     const productId = urlParams.get('id');\r\n \r\n"
                },
                {
                    "date": 1757107101964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n  * Preenche a página com os detalhes do produto recebido da API.\r\n  * (VERSÃO ATUALIZADA COM LÓGICA DE PREÇO PROMOCIONAL E PREÇO DO CLUBE)\r\n  * @param {object} product - O objeto do produto.\r\n  */\r\n-function renderProductDetails(product) {\r\n+async function renderProductDetails(product) {\r\n     document.title = `${product.nome} - E o Bicho`;\r\n \r\n     document.getElementById('product-title').textContent = product.nome;\r\n     document.getElementById('product-sku').textContent = `Cód. Item ${product.cod}`;\r\n@@ -120,8 +120,9 @@\n     priceContainer.innerHTML = priceHtml;\r\n     // --- FIM DA LÓGICA DE PREÇO CORRIGIDA ---\r\n \r\n     document.getElementById('product-description').innerHTML = product.descricao || 'Este produto não possui uma descrição detalhada.';\r\n+    await loadSpecsSvg();\r\n     renderProductSpecifications(product);\r\n \r\n     const stockStatusEl = document.getElementById('stock-status');\r\n     if (product.stock > 0) {\r\n"
                },
                {
                    "date": 1757107134893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n             throw new Error('Produto não encontrado.');\r\n         }\r\n         const product = await response.json();\r\n         \r\n-        renderProductDetails(product);\r\n+        await renderProductDetails(product);\r\n         \r\n         // A chamada à função de breadcrumb agora usa o array 'categorias'\r\n         renderBreadcrumb(product.breadcrumbPath); \r\n         renderPromotionsPanel(product);\r\n"
                },
                {
                    "date": 1757110190870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,20 +342,18 @@\n   }\r\n   section.classList.remove('hidden');\r\n \r\n   // IDs disponíveis no SVG (até 5 linhas)\r\n-  const ids = ['svg-spec-idade', 'svg-spec-pet', 'svg-spec-porte', 'svg-spec-apresentacao', 'svg-spec-ean'];\r\n-  const startY = 110;\r\n-  const step = 40;\r\n+const ids = ['idade','pet','porte','apresentacao','ean'];\r\n+const baseY = 220, step = 35;\r\n \r\n-  // Limpa tudo\r\n-  ids.forEach((id) => {\r\n-    const el = document.getElementById(id);\r\n-    if (el) {\r\n-      el.textContent = '';\r\n-      el.setAttribute('display', 'none');\r\n-    }\r\n-  });\r\n+ids.forEach((k, i) => {\r\n+  const el = document.getElementById('svg-spec-' + k);\r\n+  if (!el) return;\r\n+  el.setAttribute('text-anchor', 'middle');\r\n+  el.setAttribute('x', '400');             // meio do conteúdo\r\n+  el.setAttribute('y', String(baseY + step * i));\r\n+});\r\n \r\n   // Preenche apenas o que existe e reposiciona sem deixar “buracos”\r\n   linhas.slice(0, ids.length).forEach((texto, i) => {\r\n     const el = document.getElementById(ids[i]);\r\n"
                },
                {
                    "date": 1757110204048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,18 +342,20 @@\n   }\r\n   section.classList.remove('hidden');\r\n \r\n   // IDs disponíveis no SVG (até 5 linhas)\r\n-const ids = ['idade','pet','porte','apresentacao','ean'];\r\n-const baseY = 220, step = 35;\r\n+  const ids = ['svg-spec-idade', 'svg-spec-pet', 'svg-spec-porte', 'svg-spec-apresentacao', 'svg-spec-ean'];\r\n+  const startY = 110;\r\n+  const step = 40;\r\n \r\n-ids.forEach((k, i) => {\r\n-  const el = document.getElementById('svg-spec-' + k);\r\n-  if (!el) return;\r\n-  el.setAttribute('text-anchor', 'middle');\r\n-  el.setAttribute('x', '400');             // meio do conteúdo\r\n-  el.setAttribute('y', String(baseY + step * i));\r\n-});\r\n+  // Limpa tudo\r\n+  ids.forEach((id) => {\r\n+    const el = document.getElementById(id);\r\n+    if (el) {\r\n+      el.textContent = '';\r\n+      el.setAttribute('display', 'none');\r\n+    }\r\n+  });\r\n \r\n   // Preenche apenas o que existe e reposiciona sem deixar “buracos”\r\n   linhas.slice(0, ids.length).forEach((texto, i) => {\r\n     const el = document.getElementById(ids[i]);\r\n"
                },
                {
                    "date": 1757110541100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,13 +10,24 @@\n   _specsSvgPromise = (async () => {\r\n     const container = document.getElementById('product-specs-svg-container');\r\n     if (!container) return; // página sem o bloco\r\n \r\n-    const resp = await fetch('/public/icons/especificacoes.svg');\r\n-    if (!resp.ok) throw new Error('Não foi possível carregar especificações.svg');\r\n+    const tryFetch = async (url) => {\r\n+      const resp = await fetch(url);\r\n+      if (!resp.ok) throw new Error(`Falha ao buscar: ${url}`);\r\n+      return resp.text();\r\n+    };\r\n \r\n-    const svgMarkup = await resp.text();\r\n-    container.innerHTML = svgMarkup; // injeta o <svg id=\"svg-especificacoes\"> no DOM\r\n+    let svgMarkup;\r\n+    try {\r\n+      // 1ª opção: arquivo novo com os IDs (recomendado)\r\n+      svgMarkup = await tryFetch('/public/icons/especificacoes-pet.svg');\r\n+    } catch {\r\n+      // fallback: mantém compatibilidade se o arquivo antigo ainda existir\r\n+      svgMarkup = await tryFetch('/public/icons/especificacoes.svg');\r\n+    }\r\n+\r\n+    container.innerHTML = svgMarkup; // injeta o <svg ...> no DOM\r\n   })();\r\n \r\n   return _specsSvgPromise;\r\n }\r\n@@ -363,5 +374,55 @@\n     el.textContent = texto;\r\n     el.setAttribute('y', String(startY + i * step));\r\n     el.removeAttribute('display');\r\n   });\r\n+  centerAndStyleSpecs(ids);\r\n }\r\n+\r\n+function centerAndStyleSpecs(ids) {\r\n+  // Medidas da área de conteúdo do SVG\r\n+  const CONTENT_X = 56;\r\n+  const CONTENT_Y = 112;\r\n+  const CONTENT_W = 688;\r\n+  const CONTENT_H = 340;\r\n+\r\n+  const CENTER_X = CONTENT_X + CONTENT_W / 2;\r\n+\r\n+  // Estética do texto\r\n+  const STEP = 36;          // espaço entre linhas\r\n+  const FONT_SIZE = 18;     // px\r\n+  const FONT_WEIGHT = 600;  // semibold\r\n+  const BASELINE_TWEAK = 4; // compensação do baseline para ficar visualmente central\r\n+\r\n+  // Coleta apenas as linhas que têm conteúdo\r\n+  const nodes = ids\r\n+    .map((id) => document.getElementById(id))\r\n+    .filter((el) => el && el.textContent.trim().length > 0);\r\n+\r\n+  // Se não tem nada para mostrar, esconde o grupo e cai fora\r\n+  const group = document.getElementById('svg-spec-content');\r\n+  if (!nodes.length) {\r\n+    if (group) group.setAttribute('display', 'none');\r\n+    return;\r\n+  }\r\n+  if (group) group.removeAttribute('display');\r\n+\r\n+  // Cálculo para centralizar vertical:\r\n+  // altura ocupada pelas linhas (sem incluir a “altura” da fonte – baseline fica bom com BASELINE_TWEAK)\r\n+  const totalSpan = (nodes.length - 1) * STEP;\r\n+  const firstY = CONTENT_Y + (CONTENT_H - totalSpan) / 2 + BASELINE_TWEAK;\r\n+\r\n+  // Aplica estilo + posição em cada linha\r\n+  nodes.forEach((el, i) => {\r\n+    el.setAttribute('display', '');           // garante visível\r\n+    el.setAttribute('text-anchor', 'middle'); // centraliza horizontal\r\n+    el.setAttribute('x', String(CENTER_X));\r\n+    el.setAttribute('y', String(firstY + i * STEP));\r\n+\r\n+    // estilo direto no elemento para não depender de CSS externo\r\n+    el.style.fontSize = FONT_SIZE + 'px';\r\n+    el.style.fontWeight = String(FONT_WEIGHT);\r\n+    el.style.fontFamily =\r\n+      'Inter, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif';\r\n+    el.style.fill = 'var(--_dark)'; // usa a cor do tema definida no próprio SVG\r\n+  });\r\n+}\r\n"
                },
                {
                    "date": 1757110562655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,9 +388,9 @@\n   const CENTER_X = CONTENT_X + CONTENT_W / 2;\r\n \r\n   // Estética do texto\r\n   const STEP = 36;          // espaço entre linhas\r\n-  const FONT_SIZE = 18;     // px\r\n+  const FONT_SIZE = 32;     // px\r\n   const FONT_WEIGHT = 600;  // semibold\r\n   const BASELINE_TWEAK = 4; // compensação do baseline para ficar visualmente central\r\n \r\n   // Coleta apenas as linhas que têm conteúdo\r\n"
                },
                {
                    "date": 1757110574135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,9 +388,9 @@\n   const CENTER_X = CONTENT_X + CONTENT_W / 2;\r\n \r\n   // Estética do texto\r\n   const STEP = 36;          // espaço entre linhas\r\n-  const FONT_SIZE = 32;     // px\r\n+  const FONT_SIZE = 20;     // px\r\n   const FONT_WEIGHT = 600;  // semibold\r\n   const BASELINE_TWEAK = 4; // compensação do baseline para ficar visualmente central\r\n \r\n   // Coleta apenas as linhas que têm conteúdo\r\n"
                },
                {
                    "date": 1757110580041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,9 +388,9 @@\n   const CENTER_X = CONTENT_X + CONTENT_W / 2;\r\n \r\n   // Estética do texto\r\n   const STEP = 36;          // espaço entre linhas\r\n-  const FONT_SIZE = 20;     // px\r\n+  const FONT_SIZE = 25;     // px\r\n   const FONT_WEIGHT = 600;  // semibold\r\n   const BASELINE_TWEAK = 4; // compensação do baseline para ficar visualmente central\r\n \r\n   // Coleta apenas as linhas que têm conteúdo\r\n"
                },
                {
                    "date": 1757110721308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -374,55 +374,49 @@\n     el.textContent = texto;\r\n     el.setAttribute('y', String(startY + i * step));\r\n     el.removeAttribute('display');\r\n   });\r\n-  centerAndStyleSpecs(ids);\r\n+ layoutSpecs(ids, { align: 'right' }); \r\n }\r\n \r\n-function centerAndStyleSpecs(ids) {\r\n-  // Medidas da área de conteúdo do SVG\r\n-  const CONTENT_X = 56;\r\n-  const CONTENT_Y = 112;\r\n-  const CONTENT_W = 688;\r\n-  const CONTENT_H = 340;\r\n+function layoutSpecs(ids, { align = 'center' } = {}) {\r\n+  // Medidas da área de conteúdo do SVG (batem com o arquivo que você está usando)\r\n+  const CONTENT_X = 56, CONTENT_Y = 112, CONTENT_W = 688, CONTENT_H = 340;\r\n \r\n-  const CENTER_X = CONTENT_X + CONTENT_W / 2;\r\n+  // paddings internos para não colar na borda\r\n+  const PAD_L = 32, PAD_R = 32;\r\n \r\n+  // define o ponto de ancoragem em X e o anchor conforme o alinhamento desejado\r\n+  let anchorX = CONTENT_X + CONTENT_W / 2;\r\n+  let anchor = 'middle';\r\n+  if (align === 'right') { anchorX = CONTENT_X + CONTENT_W - PAD_R; anchor = 'end'; }\r\n+  if (align === 'left')  { anchorX = CONTENT_X + PAD_L;           anchor = 'start'; }\r\n+\r\n   // Estética do texto\r\n-  const STEP = 36;          // espaço entre linhas\r\n-  const FONT_SIZE = 25;     // px\r\n-  const FONT_WEIGHT = 600;  // semibold\r\n-  const BASELINE_TWEAK = 4; // compensação do baseline para ficar visualmente central\r\n+  const STEP = 38;         // espaço entre linhas\r\n+  const FONT_SIZE = 20;    // px\r\n+  const FONT_WEIGHT = 600; // semibold\r\n+  const BASELINE_TWEAK = 4;\r\n \r\n-  // Coleta apenas as linhas que têm conteúdo\r\n-  const nodes = ids\r\n-    .map((id) => document.getElementById(id))\r\n-    .filter((el) => el && el.textContent.trim().length > 0);\r\n+  // coleta só as linhas com conteúdo\r\n+  const nodes = ids.map(id => document.getElementById(id))\r\n+                   .filter(el => el && el.textContent.trim().length > 0);\r\n \r\n-  // Se não tem nada para mostrar, esconde o grupo e cai fora\r\n   const group = document.getElementById('svg-spec-content');\r\n-  if (!nodes.length) {\r\n-    if (group) group.setAttribute('display', 'none');\r\n-    return;\r\n-  }\r\n+  if (!nodes.length) { if (group) group.setAttribute('display', 'none'); return; }\r\n   if (group) group.removeAttribute('display');\r\n \r\n-  // Cálculo para centralizar vertical:\r\n-  // altura ocupada pelas linhas (sem incluir a “altura” da fonte – baseline fica bom com BASELINE_TWEAK)\r\n+  // centraliza VERTICALMENTE o bloco de linhas\r\n   const totalSpan = (nodes.length - 1) * STEP;\r\n   const firstY = CONTENT_Y + (CONTENT_H - totalSpan) / 2 + BASELINE_TWEAK;\r\n \r\n-  // Aplica estilo + posição em cada linha\r\n   nodes.forEach((el, i) => {\r\n-    el.setAttribute('display', '');           // garante visível\r\n-    el.setAttribute('text-anchor', 'middle'); // centraliza horizontal\r\n-    el.setAttribute('x', String(CENTER_X));\r\n+    el.setAttribute('display', '');\r\n+    el.setAttribute('text-anchor', anchor);\r\n+    el.setAttribute('x', String(anchorX));\r\n     el.setAttribute('y', String(firstY + i * STEP));\r\n-\r\n-    // estilo direto no elemento para não depender de CSS externo\r\n     el.style.fontSize = FONT_SIZE + 'px';\r\n     el.style.fontWeight = String(FONT_WEIGHT);\r\n-    el.style.fontFamily =\r\n-      'Inter, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif';\r\n-    el.style.fill = 'var(--_dark)'; // usa a cor do tema definida no próprio SVG\r\n+    el.style.fontFamily = 'Inter, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif';\r\n+    el.style.fill = 'var(--_dark)';\r\n   });\r\n }\r\n"
                },
                {
                    "date": 1757110739415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -374,9 +374,9 @@\n     el.textContent = texto;\r\n     el.setAttribute('y', String(startY + i * step));\r\n     el.removeAttribute('display');\r\n   });\r\n- layoutSpecs(ids, { align: 'right' }); \r\n+ layoutSpecs(ids, { align: 'left' }); \r\n }\r\n \r\n function layoutSpecs(ids, { align = 'center' } = {}) {\r\n   // Medidas da área de conteúdo do SVG (batem com o arquivo que você está usando)\r\n"
                },
                {
                    "date": 1757110750440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,9 +392,9 @@\n   if (align === 'left')  { anchorX = CONTENT_X + PAD_L;           anchor = 'start'; }\r\n \r\n   // Estética do texto\r\n   const STEP = 38;         // espaço entre linhas\r\n-  const FONT_SIZE = 20;    // px\r\n+  const FONT_SIZE = 22;    // px\r\n   const FONT_WEIGHT = 600; // semibold\r\n   const BASELINE_TWEAK = 4;\r\n \r\n   // coleta só as linhas com conteúdo\r\n"
                },
                {
                    "date": 1757110993886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -377,37 +377,37 @@\n   });\r\n  layoutSpecs(ids, { align: 'left' }); \r\n }\r\n \r\n-function layoutSpecs(ids, { align = 'center' } = {}) {\r\n-  // Medidas da área de conteúdo do SVG (batem com o arquivo que você está usando)\r\n-  const CONTENT_X = 56, CONTENT_Y = 112, CONTENT_W = 688, CONTENT_H = 340;\r\n-\r\n-  // paddings internos para não colar na borda\r\n+function layoutSvgGroup(ids, {\r\n+  groupId,\r\n+  align = 'left',        // 'left' | 'center' | 'right'\r\n+  content = { x:56, y:112, w:688, h:340 },\r\n+  stepByCount = (n) => (n <= 5 ? 38 : n <= 8 ? 34 : 28),\r\n+  fontSizeByCount = (n) => (n <= 5 ? 20 : n <= 8 ? 18 : 16),\r\n+} = {}) {\r\n+  const CONTENT_X = content.x, CONTENT_Y = content.y, CONTENT_W = content.w, CONTENT_H = content.h;\r\n   const PAD_L = 32, PAD_R = 32;\r\n \r\n-  // define o ponto de ancoragem em X e o anchor conforme o alinhamento desejado\r\n-  let anchorX = CONTENT_X + CONTENT_W / 2;\r\n-  let anchor = 'middle';\r\n-  if (align === 'right') { anchorX = CONTENT_X + CONTENT_W - PAD_R; anchor = 'end'; }\r\n-  if (align === 'left')  { anchorX = CONTENT_X + PAD_L;           anchor = 'start'; }\r\n+  let anchor, anchorX;\r\n+  if (align === 'right') { anchor = 'end';   anchorX = CONTENT_X + CONTENT_W - PAD_R; }\r\n+  else if (align === 'center') { anchor = 'middle'; anchorX = CONTENT_X + CONTENT_W / 2; }\r\n+  else { anchor = 'start'; anchorX = CONTENT_X + PAD_L; } // left\r\n \r\n-  // Estética do texto\r\n-  const STEP = 38;         // espaço entre linhas\r\n-  const FONT_SIZE = 22;    // px\r\n-  const FONT_WEIGHT = 600; // semibold\r\n-  const BASELINE_TWEAK = 4;\r\n-\r\n-  // coleta só as linhas com conteúdo\r\n   const nodes = ids.map(id => document.getElementById(id))\r\n                    .filter(el => el && el.textContent.trim().length > 0);\r\n \r\n-  const group = document.getElementById('svg-spec-content');\r\n+  const group = document.getElementById(groupId);\r\n   if (!nodes.length) { if (group) group.setAttribute('display', 'none'); return; }\r\n   if (group) group.removeAttribute('display');\r\n \r\n-  // centraliza VERTICALMENTE o bloco de linhas\r\n-  const totalSpan = (nodes.length - 1) * STEP;\r\n+  const n = nodes.length;\r\n+  const STEP = stepByCount(n);\r\n+  const FONT_SIZE = fontSizeByCount(n);\r\n+  const FONT_WEIGHT = 600;\r\n+  const BASELINE_TWEAK = 4;\r\n+\r\n+  const totalSpan = (n - 1) * STEP;\r\n   const firstY = CONTENT_Y + (CONTENT_H - totalSpan) / 2 + BASELINE_TWEAK;\r\n \r\n   nodes.forEach((el, i) => {\r\n     el.setAttribute('display', '');\r\n"
                },
                {
                    "date": 1757111119936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,10 @@\n     }\r\n     priceContainer.innerHTML = priceHtml;\r\n     // --- FIM DA LÓGICA DE PREÇO CORRIGIDA ---\r\n \r\n-    document.getElementById('product-description').innerHTML = product.descricao || 'Este produto não possui uma descrição detalhada.';\r\n+    await loadDescSvg();\r\n+    renderProductDescription(product);\r\n     await loadSpecsSvg();\r\n     renderProductSpecifications(product);\r\n \r\n     const stockStatusEl = document.getElementById('stock-status');\r\n@@ -419,4 +420,61 @@\n     el.style.fontFamily = 'Inter, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif';\r\n     el.style.fill = 'var(--_dark)';\r\n   });\r\n }\r\n+\r\n+function renderProductDescription(product) {\r\n+  const descContainer = document.getElementById('product-desc-svg-container');\r\n+  const htmlFallback = document.getElementById('product-description'); // mantém compatibilidade\r\n+  if (!descContainer) return;\r\n+\r\n+  // 1) Normaliza/limpa a descrição: remove HTML e quebra em linhas\r\n+  const raw = String(product?.descricao || '').trim();\r\n+  if (!raw) {\r\n+    // sem descrição -> esconde SVG e mostra fallback vazio\r\n+    if (htmlFallback) htmlFallback.textContent = '';\r\n+    return;\r\n+  }\r\n+\r\n+  // Converte HTML em texto (preserva quebras <br>)\r\n+  const tmp = document.createElement('div');\r\n+  tmp.innerHTML = raw.replace(/<br\\s*\\/?>/gi, '\\n');\r\n+  const plain = tmp.textContent || tmp.innerText || '';\r\n+\r\n+  // Heurística de bullet points:\r\n+  // - quebra por linhas\r\n+  // - remove prefixos como \"-\", \"•\", \"–\"\r\n+  const lines = plain\r\n+    .split(/\\r?\\n/)\r\n+    .map(s => s.replace(/^\\s*[-•–]\\s*/, '').trim())\r\n+    .filter(Boolean);\r\n+\r\n+  // Fallback: se vier tudo em um parágrafo, tenta dividir por \" ; \" ou \". \"\r\n+  let parts = lines;\r\n+  if (parts.length <= 1) {\r\n+    parts = plain.split(/(?:;|\\.\\s+|- )/).map(s => s.trim()).filter(Boolean);\r\n+  }\r\n+\r\n+  // 2) Preenche nos <text id=\"svg-desc-#\">\r\n+  const ids = Array.from({ length: 12 }, (_, i) => `svg-desc-${i + 1}`);\r\n+\r\n+  // limpa\r\n+  ids.forEach(id => {\r\n+    const el = document.getElementById(id);\r\n+    if (el) { el.textContent = ''; el.setAttribute('display', 'none'); }\r\n+  });\r\n+\r\n+  // Limita para caber; o layout ajusta fonte/step pelo total\r\n+  parts.slice(0, ids.length).forEach((texto, i) => {\r\n+    const el = document.getElementById(ids[i]);\r\n+    if (!el) return;\r\n+    el.textContent = texto;\r\n+    el.removeAttribute('display');\r\n+  });\r\n+\r\n+  // 3) Alinha (mesma lógica do quadro de especificações)\r\n+  // Quer igual ao que você pediu lá (lado direito)? use align: 'right'\r\n+  layoutSvgGroup(ids, { groupId: 'svg-desc-content', align: 'right' });\r\n+\r\n+  // 4) Esconde o fallback HTML (mantido por segurança)\r\n+  if (htmlFallback) htmlFallback.classList.add('hidden');\r\n+}\r\n"
                },
                {
                    "date": 1757111331309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,26 @@\n \r\n   return _specsSvgPromise;\r\n }\r\n \r\n+let _descSvgPromise = null;\r\n+function loadDescSvg() {\r\n+  if (_descSvgPromise) return _descSvgPromise;\r\n+\r\n+  _descSvgPromise = (async () => {\r\n+    const container = document.getElementById('product-desc-svg-container');\r\n+    if (!container) return; // página sem o bloco\r\n+\r\n+    const resp = await fetch('/public/icons/descricao-pet.svg');\r\n+    if (!resp.ok) throw new Error('Não foi possível carregar descricao-pet.svg');\r\n+\r\n+    const svgMarkup = await resp.text();\r\n+    container.innerHTML = svgMarkup; // injeta o <svg id=\"svg-descricao\"> no DOM\r\n+  })();\r\n+\r\n+  return _descSvgPromise;\r\n+}\r\n+\r\n async function initializeProductPage() {\r\n     const urlParams = new URLSearchParams(window.location.search);\r\n     const productId = urlParams.get('id');\r\n \r\n"
                },
                {
                    "date": 1757111478771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -393,9 +393,9 @@\n     el.textContent = texto;\r\n     el.setAttribute('y', String(startY + i * step));\r\n     el.removeAttribute('display');\r\n   });\r\n- layoutSpecs(ids, { align: 'left' }); \r\n+ layoutSvgGroup(ids, { groupId: 'svg-desc-content', align: 'left' }); \r\n }\r\n \r\n function layoutSvgGroup(ids, {\r\n   groupId,\r\n"
                },
                {
                    "date": 1757111492974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -393,9 +393,9 @@\n     el.textContent = texto;\r\n     el.setAttribute('y', String(startY + i * step));\r\n     el.removeAttribute('display');\r\n   });\r\n- layoutSvgGroup(ids, { groupId: 'svg-desc-content', align: 'left' }); \r\n+ layoutSvgGroup(ids, { groupId: 'svg-desc-content', align: 'right' }); \r\n }\r\n \r\n function layoutSvgGroup(ids, {\r\n   groupId,\r\n"
                },
                {
                    "date": 1757111517265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -393,9 +393,9 @@\n     el.textContent = texto;\r\n     el.setAttribute('y', String(startY + i * step));\r\n     el.removeAttribute('display');\r\n   });\r\n- layoutSvgGroup(ids, { groupId: 'svg-desc-content', align: 'right' }); \r\n+  layoutSvgGroup(ids, { groupId: 'svg-desc-content', align: 'left' });\r\n }\r\n \r\n function layoutSvgGroup(ids, {\r\n   groupId,\r\n"
                },
                {
                    "date": 1757111529185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -398,9 +398,9 @@\n }\r\n \r\n function layoutSvgGroup(ids, {\r\n   groupId,\r\n-  align = 'left',        // 'left' | 'center' | 'right'\r\n+  align = 'right',        // 'left' | 'center' | 'right'\r\n   content = { x:56, y:112, w:688, h:340 },\r\n   stepByCount = (n) => (n <= 5 ? 38 : n <= 8 ? 34 : 28),\r\n   fontSizeByCount = (n) => (n <= 5 ? 20 : n <= 8 ? 18 : 16),\r\n } = {}) {\r\n"
                },
                {
                    "date": 1757111716984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -396,29 +396,38 @@\n   });\r\n   layoutSvgGroup(ids, { groupId: 'svg-desc-content', align: 'left' });\r\n }\r\n \r\n-function layoutSvgGroup(ids, {\r\n-  groupId,\r\n-  align = 'right',        // 'left' | 'center' | 'right'\r\n-  content = { x:56, y:112, w:688, h:340 },\r\n-  stepByCount = (n) => (n <= 5 ? 38 : n <= 8 ? 34 : 28),\r\n-  fontSizeByCount = (n) => (n <= 5 ? 20 : n <= 8 ? 18 : 16),\r\n-} = {}) {\r\n+function layoutSvgGroup(\r\n+  ids,\r\n+  {\r\n+    groupId,\r\n+    align = 'right',        // 'left' | 'center' | 'right'\r\n+    content = { x: 56, y: 112, w: 688, h: 340 },\r\n+    stepByCount = (n) => (n <= 5 ? 38 : n <= 8 ? 34 : 28),\r\n+    fontSizeByCount = (n) => (n <= 5 ? 20 : n <= 8 ? 18 : 16),\r\n+  } = {}\r\n+) {\r\n   const CONTENT_X = content.x, CONTENT_Y = content.y, CONTENT_W = content.w, CONTENT_H = content.h;\r\n   const PAD_L = 32, PAD_R = 32;\r\n \r\n   let anchor, anchorX;\r\n-  if (align === 'right') { anchor = 'end';   anchorX = CONTENT_X + CONTENT_W - PAD_R; }\r\n+  if (align === 'right') { anchor = 'end';    anchorX = CONTENT_X + CONTENT_W - PAD_R; }\r\n   else if (align === 'center') { anchor = 'middle'; anchorX = CONTENT_X + CONTENT_W / 2; }\r\n   else { anchor = 'start'; anchorX = CONTENT_X + PAD_L; } // left\r\n \r\n+  // pega só as linhas com conteúdo\r\n   const nodes = ids.map(id => document.getElementById(id))\r\n                    .filter(el => el && el.textContent.trim().length > 0);\r\n \r\n   const group = document.getElementById(groupId);\r\n   if (!nodes.length) { if (group) group.setAttribute('display', 'none'); return; }\r\n-  if (group) group.removeAttribute('display');\r\n+  if (group) {\r\n+    group.removeAttribute('display');\r\n+    // força o anchor também no grupo (propriedade herdável)\r\n+    group.removeAttribute('text-anchor');\r\n+    group.setAttribute('text-anchor', anchor);\r\n+  }\r\n \r\n   const n = nodes.length;\r\n   const STEP = stepByCount(n);\r\n   const FONT_SIZE = fontSizeByCount(n);\r\n@@ -429,8 +438,10 @@\n   const firstY = CONTENT_Y + (CONTENT_H - totalSpan) / 2 + BASELINE_TWEAK;\r\n \r\n   nodes.forEach((el, i) => {\r\n     el.setAttribute('display', '');\r\n+    // remove qualquer anchor antigo e seta o novo\r\n+    el.removeAttribute('text-anchor');\r\n     el.setAttribute('text-anchor', anchor);\r\n     el.setAttribute('x', String(anchorX));\r\n     el.setAttribute('y', String(firstY + i * STEP));\r\n     el.style.fontSize = FONT_SIZE + 'px';\r\n"
                },
                {
                    "date": 1757111808305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n   _descSvgPromise = (async () => {\r\n     const container = document.getElementById('product-desc-svg-container');\r\n     if (!container) return; // página sem o bloco\r\n \r\n-    const resp = await fetch('/public/icons/descricao-pet.svg');\r\n+    const resp = await fetch('/public/icons/descricao-pet.svg?v=2');\r\n     if (!resp.ok) throw new Error('Não foi possível carregar descricao-pet.svg');\r\n \r\n     const svgMarkup = await resp.text();\r\n     container.innerHTML = svgMarkup; // injeta o <svg id=\"svg-descricao\"> no DOM\r\n"
                },
                {
                    "date": 1757111820919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -501,9 +501,9 @@\n   });\r\n \r\n   // 3) Alinha (mesma lógica do quadro de especificações)\r\n   // Quer igual ao que você pediu lá (lado direito)? use align: 'right'\r\n-  layoutSvgGroup(ids, { groupId: 'svg-desc-content', align: 'right' });\r\n+  layoutSvgGroup(ids, { groupId: 'svg-desc-content', align: 'left' });\r\n \r\n   // 4) Esconde o fallback HTML (mantido por segurança)\r\n   if (htmlFallback) htmlFallback.classList.add('hidden');\r\n }\r\n"
                },
                {
                    "date": 1757111838555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -400,9 +400,9 @@\n function layoutSvgGroup(\r\n   ids,\r\n   {\r\n     groupId,\r\n-    align = 'right',        // 'left' | 'center' | 'right'\r\n+    align = 'left',        // 'left' | 'center' | 'right'\r\n     content = { x: 56, y: 112, w: 688, h: 340 },\r\n     stepByCount = (n) => (n <= 5 ? 38 : n <= 8 ? 34 : 28),\r\n     fontSizeByCount = (n) => (n <= 5 ? 20 : n <= 8 ? 18 : 16),\r\n   } = {}\r\n"
                },
                {
                    "date": 1757112065817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -394,8 +394,9 @@\n     el.setAttribute('y', String(startY + i * step));\r\n     el.removeAttribute('display');\r\n   });\r\n   layoutSvgGroup(ids, { groupId: 'svg-desc-content', align: 'left' });\r\n+  document.getElementById('product-desc-heading')?.classList.add('hidden');\r\n }\r\n \r\n function layoutSvgGroup(\r\n   ids,\r\n@@ -457,13 +458,13 @@\n   if (!descContainer) return;\r\n \r\n   // 1) Normaliza/limpa a descrição: remove HTML e quebra em linhas\r\n   const raw = String(product?.descricao || '').trim();\r\n-  if (!raw) {\r\n-    // sem descrição -> esconde SVG e mostra fallback vazio\r\n+    if (!raw) {\r\n     if (htmlFallback) htmlFallback.textContent = '';\r\n+    document.getElementById('product-desc-heading')?.classList.remove('hidden');\r\n     return;\r\n-  }\r\n+    }\r\n \r\n   // Converte HTML em texto (preserva quebras <br>)\r\n   const tmp = document.createElement('div');\r\n   tmp.innerHTML = raw.replace(/<br\\s*\\/?>/gi, '\\n');\r\n"
                },
                {
                    "date": 1757112116053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -458,13 +458,13 @@\n   if (!descContainer) return;\r\n \r\n   // 1) Normaliza/limpa a descrição: remove HTML e quebra em linhas\r\n   const raw = String(product?.descricao || '').trim();\r\n-    if (!raw) {\r\n+  if (!raw) {\r\n     if (htmlFallback) htmlFallback.textContent = '';\r\n     document.getElementById('product-desc-heading')?.classList.remove('hidden');\r\n     return;\r\n-    }\r\n+  }\r\n \r\n   // Converte HTML em texto (preserva quebras <br>)\r\n   const tmp = document.createElement('div');\r\n   tmp.innerHTML = raw.replace(/<br\\s*\\/?>/gi, '\\n');\r\n"
                },
                {
                    "date": 1757113348786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,9 +447,9 @@\n     el.setAttribute('y', String(firstY + i * STEP));\r\n     el.style.fontSize = FONT_SIZE + 'px';\r\n     el.style.fontWeight = String(FONT_WEIGHT);\r\n     el.style.fontFamily = 'Inter, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif';\r\n-    el.style.fill = 'var(--_dark)';\r\n+    el.style.fill = 'var(--color-dark)';\r\n   });\r\n }\r\n \r\n function renderProductDescription(product) {\r\n"
                },
                {
                    "date": 1757114370679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -401,9 +401,9 @@\n function layoutSvgGroup(\r\n   ids,\r\n   {\r\n     groupId,\r\n-    align = 'left',        // 'left' | 'center' | 'right'\r\n+    align = 'Center',        // 'left' | 'center' | 'right'\r\n     content = { x: 56, y: 112, w: 688, h: 340 },\r\n     stepByCount = (n) => (n <= 5 ? 38 : n <= 8 ? 34 : 28),\r\n     fontSizeByCount = (n) => (n <= 5 ? 20 : n <= 8 ? 18 : 16),\r\n   } = {}\r\n"
                },
                {
                    "date": 1757114379659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -401,9 +401,9 @@\n function layoutSvgGroup(\r\n   ids,\r\n   {\r\n     groupId,\r\n-    align = 'Center',        // 'left' | 'center' | 'right'\r\n+    align = 'center',        // 'left' | 'center' | 'right'\r\n     content = { x: 56, y: 112, w: 688, h: 340 },\r\n     stepByCount = (n) => (n <= 5 ? 38 : n <= 8 ? 34 : 28),\r\n     fontSizeByCount = (n) => (n <= 5 ? 20 : n <= 8 ? 18 : 16),\r\n   } = {}\r\n"
                },
                {
                    "date": 1757114393715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -393,9 +393,9 @@\n     el.textContent = texto;\r\n     el.setAttribute('y', String(startY + i * step));\r\n     el.removeAttribute('display');\r\n   });\r\n-  layoutSvgGroup(ids, { groupId: 'svg-desc-content', align: 'left' });\r\n+  layoutSvgGroup(ids, { groupId: 'svg-desc-content', align: 'center' });\r\n   document.getElementById('product-desc-heading')?.classList.add('hidden');\r\n }\r\n \r\n function layoutSvgGroup(\r\n"
                },
                {
                    "date": 1757114449561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -502,9 +502,9 @@\n   });\r\n \r\n   // 3) Alinha (mesma lógica do quadro de especificações)\r\n   // Quer igual ao que você pediu lá (lado direito)? use align: 'right'\r\n-  layoutSvgGroup(ids, { groupId: 'svg-desc-content', align: 'left' });\r\n+  layoutSvgGroup(ids, { groupId: 'svg-desc-content', align: 'center' });\r\n \r\n   // 4) Esconde o fallback HTML (mantido por segurança)\r\n   if (htmlFallback) htmlFallback.classList.add('hidden');\r\n }\r\n"
                }
            ],
            "date": 1757086945823,
            "name": "Commit-0",
            "content": "document.addEventListener('DOMContentLoaded', () => {\r\n    initializeProductPage();\r\n});\r\n\r\nasync function initializeProductPage() {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const productId = urlParams.get('id');\r\n\r\n    if (!productId) {\r\n        document.getElementById('product-details-container').innerHTML = \r\n            '<p class=\"text-center text-red-500 font-bold\">Erro: ID do produto não encontrado na URL.</p>';\r\n        return;\r\n    }\r\n\r\n    fetchProductDetails(productId);\r\n\r\n    const favButton = document.getElementById('add-to-wishlist-btn');\r\n    if (!favButton) return;\r\n\r\n    const heartIconEmpty = `<svg class=\"h-7 w-7 text-gray-400 hover:text-red-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.318 6.318a4.5 4.5 0 016.364 0L12 7.636l1.318-1.318a4.5 4.5 0 116.364 6.364L12 20.364l-7.682-7.682a4.5 4.5 0 010-6.364z\" /></svg>`;\r\n    const heartIconFilled = `<svg class=\"h-7 w-7 text-red-500\" fill=\"currentColor\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.318 6.318a4.5 4.5 0 016.364 0L12 7.636l1.318-1.318a4.5 4.5 0 116.364 6.364L12 20.364l-7.682-7.682a4.5 4.5 0 010-6.364z\" /></svg>`;\r\n\r\n    // Função para atualizar o estado visual do botão\r\n    const updateButtonState = async () => {\r\n        const isFav = await FavoritesManager.isFavorite(productId);\r\n        favButton.innerHTML = isFav ? heartIconFilled : heartIconEmpty;\r\n        favButton.dataset.favorited = isFav;\r\n    };\r\n\r\n    favButton.addEventListener('click', async () => {\r\n        const isCurrentlyFavorited = favButton.dataset.favorited === 'true';\r\n        if (isCurrentlyFavorited) {\r\n            await FavoritesManager.removeFavorite(productId);\r\n        } else {\r\n            await FavoritesManager.addFavorite(productId);\r\n        }\r\n        await updateButtonState();\r\n    });\r\n\r\n    await updateButtonState(); // Define o estado inicial\r\n}\r\n\r\nasync function fetchProductDetails(productId) {\r\n    try {\r\n        const response = await fetch(`${API_CONFIG.BASE_URL}/products/${productId}`);\r\n        if (!response.ok) {\r\n            throw new Error('Produto não encontrado.');\r\n        }\r\n        const product = await response.json();\r\n        \r\n        renderProductDetails(product);\r\n        \r\n        // A chamada à função de breadcrumb agora usa o array 'categorias'\r\n        renderBreadcrumb(product.breadcrumbPath); \r\n        renderPromotionsPanel(product);\r\n\r\n    } catch (error) {\r\n        console.error('Erro ao buscar detalhes do produto:', error);\r\n        document.getElementById('product-details-container').innerHTML =\r\n             `<p class=\"text-center text-red-500 font-bold\">${error.message}</p>`;\r\n    }\r\n}\r\n\r\n/**\r\n * Preenche a página com os detalhes do produto recebido da API.\r\n * (VERSÃO ATUALIZADA COM LÓGICA DE PREÇO PROMOCIONAL E PREÇO DO CLUBE)\r\n * @param {object} product - O objeto do produto.\r\n */\r\nfunction renderProductDetails(product) {\r\n    document.title = `${product.nome} - E o Bicho`;\r\n\r\n    document.getElementById('product-title').textContent = product.nome;\r\n    document.getElementById('product-sku').textContent = `Cód. Item ${product.cod}`;\r\n    document.getElementById('product-brand').textContent = `Marca: ${product.marca || 'Não informada'}`;\r\n    \r\n    // --- INÍCIO DA LÓGICA DE PREÇO CORRIGIDA ---\r\n    const priceContainer = document.getElementById('product-price');\r\n    let priceHtml = '';\r\n\r\n    // 1. Verifica a Promoção Individual (desconto direto)\r\n    // Esta é a ÚNICA condição que mostra um preço cortado no painel principal.\r\n    if (product.promocao && product.promocao.ativa && product.promocao.porcentagem > 0) {\r\n        const discountedPrice = product.venda * (1 - product.promocao.porcentagem / 100);\r\n        priceHtml = `\r\n            <div class=\"flex items-end space-x-3\">\r\n                <span class=\"text-4xl font-bold text-primary\">R$ ${discountedPrice.toFixed(2).replace('.', ',')}</span>\r\n                <div class=\"bg-primary text-white font-bold text-sm px-2 py-1 rounded-md mb-1\">\r\n                    -${product.promocao.porcentagem}% OFF\r\n                </div>\r\n            </div>\r\n            <div class=\"mt-1\">\r\n                <span class=\"text-gray-500 text-lg line-through\">R$ ${product.venda.toFixed(2).replace('.', ',')}</span>\r\n            </div>\r\n        `;\r\n    } \r\n    // 2. Para TODOS os outros casos (com ou sem Preço Club), o preço principal é o de venda normal.\r\n    // A vantagem do Preço Club será mostrada apenas no painel de promoções.\r\n    else {\r\n        priceHtml = `<span class=\"text-4xl font-bold text-primary\">R$ ${product.venda.toFixed(2).replace('.', ',')}</span>`;\r\n    }\r\n    priceContainer.innerHTML = priceHtml;\r\n    // --- FIM DA LÓGICA DE PREÇO CORRIGIDA ---\r\n\r\n    document.getElementById('product-description').innerHTML = product.descricao || 'Este produto não possui uma descrição detalhada.';\r\n\r\n    const stockStatusEl = document.getElementById('stock-status');\r\n    if (product.stock > 0) {\r\n        stockStatusEl.className = 'flex items-center space-x-2 text-green-600 font-semibold text-sm';\r\n        stockStatusEl.innerHTML = `<div class=\"w-3 h-3 bg-green-500 rounded-full\"></div><span>Em Estoque</span>`;\r\n    } else {\r\n        stockStatusEl.className = 'flex items-center space-x-2 text-red-500 font-semibold text-sm';\r\n        stockStatusEl.innerHTML = `<div class=\"w-3 h-3 bg-red-500 rounded-full\"></div><span>Indisponível</span>`;\r\n    }\r\n\r\n    const mainImage = document.getElementById('main-product-image');\r\n    const thumbnailGallery = document.getElementById('thumbnail-gallery');\r\n    \r\n    mainImage.src = `${API_CONFIG.SERVER_URL}${product.imagemPrincipal}`;\r\n    thumbnailGallery.innerHTML = ''; \r\n\r\n    const allImages = [product.imagemPrincipal, ...product.imagens.filter(img => img !== product.imagemPrincipal)];\r\n\r\n    allImages.forEach(imgSrc => {\r\n        const thumb = document.createElement('img');\r\n        thumb.src = `${API_CONFIG.SERVER_URL}${imgSrc}`;\r\n        thumb.className = 'w-full h-20 object-contain rounded-md cursor-pointer border-2 border-transparent hover:border-primary transition-all p-1';\r\n        \r\n        if (imgSrc === product.imagemPrincipal) {\r\n            thumb.classList.add('border-primary');\r\n            thumb.classList.remove('border-transparent');\r\n        }\r\n\r\n        thumb.addEventListener('click', () => {\r\n            mainImage.src = thumb.src;\r\n            thumbnailGallery.querySelectorAll('img').forEach(el => el.classList.remove('border-primary'));\r\n            thumb.classList.add('border-primary');\r\n        });\r\n        thumbnailGallery.appendChild(thumb);\r\n    });\r\n}\r\n\r\n/**\r\n * Renderiza o caminho de navegação (breadcrumb) na página do produto.\r\n * (VERSÃO FINAL E CORRIGIDA)\r\n * @param {Array} breadcrumbPath - O array com o caminho das categorias vindo da API.\r\n */\r\nfunction renderBreadcrumb(breadcrumbPath) {\r\n    const container = document.getElementById('breadcrumb-container');\r\n    if (!container || !breadcrumbPath || breadcrumbPath.length === 0) {\r\n        // Se não houver caminho, esconde a navegação inteira para um visual mais limpo\r\n        if (container.parentElement) container.parentElement.style.display = 'none';\r\n        return;\r\n    }\r\n\r\n    // Limpa qualquer conteúdo anterior, exceto o link \"Início\"\r\n    while (container.children.length > 1) {\r\n        container.removeChild(container.lastChild);\r\n    }\r\n\r\n    breadcrumbPath.forEach((category, index) => {\r\n        // Adiciona o separador \">\"\r\n        const separatorLi = document.createElement('li');\r\n        separatorLi.innerHTML = '<span class=\"text-gray-400\">&gt;</span>';\r\n        container.appendChild(separatorLi);\r\n\r\n        const categoryLi = document.createElement('li');\r\n        const isLastItem = index === breadcrumbPath.length - 1;\r\n\r\n        if (isLastItem) {\r\n            // O último item é a categoria atual, então não é um link\r\n            categoryLi.className = 'font-semibold text-gray-800';\r\n            categoryLi.textContent = category.nome;\r\n        } else {\r\n            // Os itens anteriores são links para as categorias pai\r\n            const link = document.createElement('a');\r\n            link.href = category.href; // Usa o href que o back-end já preparou\r\n            link.className = 'hover:text-primary hover:underline';\r\n            link.textContent = category.nome;\r\n            categoryLi.appendChild(link);\r\n        }\r\n        container.appendChild(categoryLi);\r\n    });\r\n}\r\n\r\n/**\r\n * Analisa as promoções de um produto e renderiza o painel de vantagens.\r\n * @param {object} product - O objeto completo do produto vindo da API.\r\n */\r\nfunction renderPromotionsPanel(product) {\r\n    const panel = document.getElementById('product-promotions-panel');\r\n    if (!panel) return;\r\n\r\n    panel.innerHTML = ''; // Limpa o painel\r\n\r\n    let hasAnyBenefit = false;\r\n    let subscriberPrice = null;\r\n\r\n    // 1. Verifica o preço da Promoção Individual\r\n    if (product.promocao && product.promocao.ativa && product.promocao.porcentagem > 0) {\r\n        subscriberPrice = product.venda * (1 - product.promocao.porcentagem / 100);\r\n    }\r\n\r\n    // 2. Compara com o Preço Club e pega no menor valor\r\n    if (product.precoClube && product.precoClube < product.venda) {\r\n        // Se já tínhamos um preço de promoção, pega no menor dos dois. Senão, usa o do clube.\r\n        subscriberPrice = subscriberPrice ? Math.min(subscriberPrice, product.precoClube) : product.precoClube;\r\n    }\r\n\r\n    // Se encontrámos um preço vantajoso para assinantes, cria o HTML\r\n    if (subscriberPrice) {\r\n        hasAnyBenefit = true;\r\n        const subscriberPriceHtml = `\r\n            <div class=\"flex items-start text-lg\">\r\n                <i class=\"fa-solid fa-rotate text-primary w-5 text-center pt-1\"></i>\r\n                <div class=\"ml-2\">\r\n                    <p class=\"text-gray-800\">\r\n                        <span class=\"font-bold\">R$ ${subscriberPrice.toFixed(2).replace('.', ',')}</span>\r\n                        para assinantes\r\n                    </p>\r\n                </div>\r\n            </div>`;\r\n        panel.innerHTML += subscriberPriceHtml;\r\n    }\r\n\r\n    // 3. Verifica se há Promoção Condicional\r\n    if (product.promocaoCondicional && product.promocaoCondicional.ativa) {\r\n        hasAnyBenefit = true;\r\n        let promoTitle = 'Promoção Especial';\r\n        let promoDescription = 'Confira a vantagem na sacola.';\r\n\r\n        if (product.promocaoCondicional.tipo === 'leve_pague') {\r\n            promoTitle = `Leve ${product.promocaoCondicional.leve}, Pague ${product.promocaoCondicional.pague}`;\r\n            promoDescription = `Na compra de ${product.promocaoCondicional.leve} unidades, você paga apenas ${product.promocaoCondicional.pague}!`;\r\n        } else if (product.promocaoCondicional.tipo === 'acima_de') {\r\n             promoTitle = `Acima de ${product.promocaoCondicional.quantidadeMinima} unidades tem ${product.promocaoCondicional.descontoPorcentagem}% OFF`;\r\n             promoDescription = `Desconto aplicado na compra de ${product.promocaoCondicional.quantidadeMinima} ou mais unidades.`;\r\n        }\r\n\r\n        const conditionalPromoHtml = `\r\n            <div class=\"flex items-start text-sm\">\r\n                <i class=\"fas fa-tags text-primary w-5 text-center pt-1\"></i>\r\n                <div class=\"ml-2\">\r\n                    <p class=\"font-bold text-gray-800\">${promoTitle}</p>\r\n                    <p class=\"text-xs text-gray-600\">${promoDescription}</p>\r\n                </div>\r\n            </div>`;\r\n        panel.innerHTML += conditionalPromoHtml;\r\n    }\r\n\r\n    // 4. Se qualquer benefício foi encontrado, adiciona as vantagens estáticas e o fundo\r\n    if (hasAnyBenefit) {\r\n        const benefitsHtml = `\r\n            <div class=\"flex items-start text-sm\">\r\n                <i class=\"fa-solid fa-check text-primary w-5 text-center pt-1\"></i>\r\n                <div class=\"ml-2\">\r\n                    <p class=\"text-gray-800\">\r\n                        <span class=\"font-bold\">10% OFF em todas as compras no site, app e lojas físicas</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"flex items-start text-sm\">\r\n                <i class=\"fa-solid fa-check text-primary w-5 text-center pt-1\"></i>\r\n                <div class=\"ml-2\">\r\n                    <p class=\"text-gray-800\">\r\n                        <span class=\"font-bold\">Sem custos ou mensalidade, cancele ou pause quando quiser</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"flex items-start text-sm\">\r\n                <i class=\"fa-solid fa-check text-primary w-5 text-center pt-1\"></i>\r\n                <div class=\"ml-2\">\r\n                    <p class=\"text-gray-800\">\r\n                        <span class=\"font-bold\">Assine os produtos na sacola e garanta os benefícios</span>\r\n                    </p>\r\n                </div>\r\n            </div>`;\r\n        panel.innerHTML += benefitsHtml;\r\n        panel.className = 'bg-green-50 my-6 space-y-4 p-4 rounded-lg'; // Adiciona o estilo ao painel\r\n    } else {\r\n        panel.style.display = 'none'; // Esconde o painel se não houver nenhuma vantagem\r\n    }\r\n}\r\n\r\n/**\r\n * Renderiza a lista de Especificações do produto.\r\n * Mostra apenas os campos preenchidos/selecionados.\r\n * Campos: Idade[], Pet[], Porte[], Apresentação (texto), EAN (codbarras)\r\n */\r\nfunction renderProductSpecifications(product) {\r\n  const section = document.getElementById('product-specs-section');\r\n  const list = document.getElementById('product-specs-list');\r\n  if (!section || !list) return;\r\n\r\n  const espec = product?.especificacoes || {};\r\n  const uniq = (arr) => [...new Set((Array.isArray(arr) ? arr : []).map(v => String(v || '').trim()).filter(Boolean))];\r\n\r\n  const rows = [];\r\n\r\n  const pushIf = (rotulo, valor) => {\r\n    let show = false;\r\n    let texto = '';\r\n\r\n    if (Array.isArray(valor)) {\r\n      const arr = uniq(valor);\r\n      if (arr.length) {\r\n        show = true;\r\n        texto = arr.join(', ');\r\n      }\r\n    } else if (typeof valor === 'string') {\r\n      const v = valor.trim();\r\n      if (v) {\r\n        show = true;\r\n        texto = v;\r\n      }\r\n    }\r\n\r\n    if (show) {\r\n      rows.push(\r\n        `<li class=\"flex items-start\">\r\n          <span class=\"w-28 min-w-28 text-gray-500\">${rotulo}</span>\r\n          <span class=\"flex-1 font-medium\">${texto}</span>\r\n        </li>`\r\n      );\r\n    }\r\n  };\r\n\r\n  // Campos vindos do admin\r\n  pushIf('Idade', espec.idade);\r\n  pushIf('Pet', espec.pet);\r\n  pushIf('Porte', espec.porteRaca);\r\n  pushIf('Apresentação', espec.apresentacao);\r\n\r\n  // EAN (do próprio produto)\r\n  if (product?.codbarras && String(product.codbarras).trim()) {\r\n    pushIf('EAN', String(product.codbarras).trim());\r\n  }\r\n\r\n  if (rows.length === 0) {\r\n    // sem dados → some com o bloco\r\n    section.classList.add('hidden');\r\n    list.innerHTML = '';\r\n  } else {\r\n    section.classList.remove('hidden');\r\n    list.innerHTML = rows.join('');\r\n  }\r\n}\r\n"
        }
    ]
}