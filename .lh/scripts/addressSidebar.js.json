{
    "sourceFile": "scripts/addressSidebar.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1756765585749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756765614828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,16 +289,18 @@\n   });\r\n \r\n   // ===== API =====\r\n   async function getUserAddresses(userId) {\r\n-    const res = await fetch(`${API_BASE}/addresses/${userId}`);\r\n+    const res = await fetch(`${API_BASE}/addresses/${userId}`, {\r\n+      headers: getAuthHeaders(false),\r\n+    });\r\n     if (!res.ok) throw new Error('Não foi possível carregar endereços do usuário');\r\n     return res.json();\r\n   }\r\n   async function saveUserAddress(payload) {\r\n     const res = await fetch(`${API_BASE}/addresses`, {\r\n       method: 'POST',\r\n-      headers: { 'Content-Type': 'application/json' },\r\n+      headers: getAuthHeaders(true),\r\n       body: JSON.stringify(payload)\r\n     });\r\n     if (!res.ok) {\r\n       const t = await res.text().catch(() => '');\r\n"
                }
            ],
            "date": 1756765585749,
            "name": "Commit-0",
            "content": "// scripts/addressSidebar.js\r\n// CEP editável no formulário: consulta ViaCEP ao clicar \"Buscar\" (ou Enter) e preenche os campos bloqueados.\r\n// Usa delegação global para garantir que o botão funcione mesmo com HTML injetado dinamicamente.\r\n(function() {\r\n  const API_BASE = (typeof API_CONFIG !== 'undefined' && API_CONFIG.BASE_URL) ? API_CONFIG.BASE_URL : '/api';\r\n  let lastViaCepData = null;\r\n\r\n  // ===== Utils =====\r\n  function onlyDigits(v) { return (v || '').replace(/\\D/g, ''); }\r\n  function formatCEP(v) {\r\n    const d = onlyDigits(v).slice(0, 8);\r\n    if (d.length <= 5) return d;\r\n    return d.slice(0, 5) + '-' + d.slice(5);\r\n  }\r\n  function getLoggedUserId() {\r\n    try {\r\n      const u = JSON.parse(localStorage.getItem('loggedInUser'));\r\n      return u && u.id ? u.id : null;\r\n    } catch { return null; }\r\n  }\r\n  function safeShowModal(opts) {\r\n    const hasInfo = document.getElementById('info-modal');\r\n    const hasConfirm = document.getElementById('confirm-modal');\r\n    if (typeof showModal === 'function' && (hasInfo || hasConfirm)) {\r\n      try { showModal(opts); return; } catch(e) {}\r\n    }\r\n    if (opts && opts.message) alert(opts.message);\r\n  }\r\n  function getAuthHeaders(asJson = false) {\r\n  try {\r\n    const token = JSON.parse(localStorage.getItem('loggedInUser') || 'null')?.token;\r\n    const h = {};\r\n    if (token) h['Authorization'] = `Bearer ${token}`;\r\n    if (asJson) h['Content-Type'] = 'application/json';\r\n    return h;\r\n  } catch {\r\n    return asJson ? { 'Content-Type': 'application/json' } : {};\r\n  }\r\n}\r\n\r\n  // ===== ViaCEP =====\r\n  async function fetchViaCEP(cep) {\r\n    const clean = onlyDigits(cep);\r\n    if (clean.length !== 8) throw new Error('CEP inválido');\r\n    const res = await fetch(`https://viacep.com.br/ws/${clean}/json/`);\r\n    if (!res.ok) throw new Error('Falha ao consultar ViaCEP');\r\n    const data = await res.json();\r\n    if (data.erro) throw new Error('CEP não encontrado');\r\n\r\n    return {\r\n      cep: formatCEP(clean),\r\n      logradouro: data.logradouro || '',\r\n      bairro: data.bairro || '',\r\n      cidade: data.localidade || '',\r\n      uf: data.uf || '',\r\n      ibge: data.ibge || ''\r\n    };\r\n  }\r\n\r\n  // Preenche os campos bloqueados com ViaCEP (mantém número/complemento)\r\n  function prefillAddressFromViaCep(vc) {\r\n    const setVal = (id, val) => { const el = document.getElementById(id); if (el) el.value = val || ''; };\r\n    setVal('addr_cep', vc.cep);\r\n    setVal('addr_logradouro', vc.logradouro);\r\n    setVal('addr_bairro', vc.bairro);\r\n    setVal('addr_cidade', vc.cidade);\r\n    setVal('addr_uf', vc.uf);\r\n  }\r\n\r\n  // Garante que o formulário esteja preenchido conforme o CEP digitado no próprio form\r\n  async function ensureViaCepForForm() {\r\n    const cepInput = document.getElementById('addr_cep');\r\n    if (!cepInput) throw new Error('Campo CEP não encontrado.');\r\n    const raw = cepInput.value;\r\n    const btn = document.getElementById('addr_cep_search_btn');\r\n\r\n    // feedback visual\r\n    if (btn) { btn.disabled = true; btn.textContent = 'Buscando...'; }\r\n\r\n    try {\r\n      const vc = await fetchViaCEP(raw);\r\n      prefillAddressFromViaCep(vc);\r\n      lastViaCepData = vc;\r\n      if (typeof showToast === 'function') showToast('CEP atualizado.', 'success', 1500);\r\n      return vc;\r\n    } finally {\r\n      if (btn) { btn.disabled = false; btn.textContent = 'Buscar'; }\r\n    }\r\n  }\r\n\r\n  // ===== Sidebar HTML =====\r\n  function mountSidebarHtmlIfNeeded() {\r\n    if (document.getElementById('address-panel')) return Promise.resolve();\r\n    return fetch('../components/address-sidebar.html')\r\n      .then(r => r.text())\r\n      .then(html => {\r\n        const div = document.createElement('div');\r\n        div.innerHTML = html;\r\n        document.body.appendChild(div);\r\n      });\r\n  }\r\n\r\n  // Views\r\n  function showListView() {\r\n    document.getElementById('address-title').textContent = 'Endereços';\r\n    document.getElementById('address-list-view').classList.remove('hidden');\r\n    document.getElementById('address-form-view').classList.add('hidden');\r\n    document.getElementById('address-list-footer').classList.remove('hidden');\r\n    document.getElementById('address-form-footer').classList.add('hidden');\r\n  }\r\n  function showFormView() {\r\n    document.getElementById('address-title').textContent = 'Cadastrar Endereço';\r\n    document.getElementById('address-list-view').classList.add('hidden');\r\n    document.getElementById('address-form-view').classList.remove('hidden');\r\n    document.getElementById('address-list-footer').classList.add('hidden');\r\n    document.getElementById('address-form-footer').classList.remove('hidden');\r\n  }\r\n\r\n  // Abre/fecha\r\n  function openSidebar() {\r\n    const overlay = document.getElementById('address-overlay');\r\n    const panel   = document.getElementById('address-panel');\r\n    overlay.classList.remove('hidden');\r\n    requestAnimationFrame(() => { panel.classList.remove('translate-x-full'); });\r\n  }\r\n  function closeSidebar() {\r\n    const overlay = document.getElementById('address-overlay');\r\n    const panel   = document.getElementById('address-panel');\r\n    panel.classList.add('translate-x-full');\r\n    setTimeout(() => overlay.classList.add('hidden'), 250);\r\n  }\r\n\r\n  // Inicializa o form para um novo cadastro (com ViaCEP inicial opcional)\r\n  function prefillFormWithViaCEP(vc) {\r\n    if (vc) prefillAddressFromViaCep(vc); // CEP pode ser alterado depois\r\n    const setVal = (id, val) => { const el = document.getElementById(id); if (el) el.value = val || ''; };\r\n    setVal('addr_numero', '');\r\n    setVal('addr_complemento', '');\r\n    setVal('addr_apelido', 'Principal');\r\n    const chk = document.getElementById('addr_is_default');\r\n    if (chk) chk.checked = true;\r\n  }\r\n\r\n  // Render da LISTA\r\n  function renderAddressList(addresses) {\r\n    const list = document.getElementById('address-list');\r\n    const empty = document.getElementById('address-empty-hint');\r\n    list.innerHTML = '';\r\n\r\n    if (!addresses || addresses.length === 0) {\r\n      empty.classList.remove('hidden');\r\n      return;\r\n    }\r\n    empty.classList.add('hidden');\r\n\r\n    addresses.forEach(addr => {\r\n      const div = document.createElement('div');\r\n      div.className = 'border rounded-lg p-3';\r\n      const line1 = [addr.logradouro, addr.numero].filter(Boolean).join(', ');\r\n      const line2 = [addr.bairro, addr.cidade, addr.uf].filter(Boolean).join(' - ');\r\n      const cep   = addr.cep || '';\r\n      const comp  = addr.complemento ? ` (${addr.complemento})` : '';\r\n      const badge = addr.isDefault ? '<span class=\"ml-2 text-xs bg-primary/10 text-primary px-2 py-0.5 rounded\">Principal</span>' : '';\r\n\r\n      div.innerHTML = `\r\n        <div class=\"flex justify-between items-start gap-3\">\r\n          <div class=\"text-sm text-gray-700\">\r\n            <div class=\"font-semibold\">${addr.apelido || 'Endereço' } ${badge}</div>\r\n            <div>${line1}${comp}</div>\r\n            <div>${line2}</div>\r\n            <div>CEP: ${cep}</div>\r\n          </div>\r\n          <div class=\"flex-shrink-0\">\r\n            <button data-id=\"${addr._id}\" class=\"address-use-btn px-3 py-2 rounded bg-primary text-white text-sm font-semibold hover:bg-secondary\">Usar este</button>\r\n          </div>\r\n        </div>\r\n      `;\r\n      list.appendChild(div);\r\n    });\r\n\r\n    // listeners dos itens (re-render não acumula)\r\n    list.querySelectorAll('.address-use-btn').forEach(btn => {\r\n      btn.onclick = () => {\r\n        const id = btn.getAttribute('data-id');\r\n        const chosen = addresses.find(a => String(a._id) === String(id));\r\n        if (typeof window.onAddressSelected === 'function') window.onAddressSelected(chosen);\r\n        if (window.recalculateDelivery) {\r\n          window.recalculateDelivery(chosen.cep, { bairro: chosen.bairro });\r\n        }\r\n        closeSidebar();\r\n      };\r\n    });\r\n  }\r\n\r\n  // Bind FIXO do sidebar\r\n  function bindSidebarButtonsCommon(userId) {\r\n    const overlay = document.getElementById('address-overlay');\r\n    const closeBtn = document.getElementById('address-close-btn');\r\n    const backBtn  = document.getElementById('address-cancel-btn');\r\n    const saveBtn  = document.getElementById('address-save-btn');\r\n    const createBtn= document.getElementById('address-create-btn');\r\n\r\n    if (overlay) overlay.onclick = (e) => { if (e.target === overlay) closeSidebar(); };\r\n    if (closeBtn) closeBtn.onclick = closeSidebar;\r\n\r\n    if (backBtn) backBtn.onclick = (e) => { e.preventDefault(); showListView(); };\r\n\r\n    if (saveBtn) saveBtn.onclick = async (e) => {\r\n      e.preventDefault();\r\n      try {\r\n        // Garante que o CEP exibido esteja validado/preenchido no form\r\n        const cepInput = document.getElementById('addr_cep');\r\n        if (!lastViaCepData || (cepInput && cepInput.value !== (lastViaCepData.cep || ''))) {\r\n          await ensureViaCepForForm();\r\n        }\r\n\r\n        const numero = (document.getElementById('addr_numero')?.value || '').trim();\r\n        const complemento = (document.getElementById('addr_complemento')?.value || '').trim();\r\n        const apelido = (document.getElementById('addr_apelido')?.value || 'Principal').trim();\r\n        const isDefault = !!document.getElementById('addr_is_default')?.checked;\r\n\r\n        if (!numero) {\r\n          safeShowModal({ title: 'Atenção', message: 'Informe o número do endereço.', confirmText: 'OK' });\r\n          return;\r\n        }\r\n\r\n        const payload = {\r\n          userId,\r\n          apelido,\r\n          isDefault,\r\n          cep: lastViaCepData.cep,\r\n          logradouro: lastViaCepData.logradouro,\r\n          bairro: lastViaCepData.bairro,\r\n          cidade: lastViaCepData.cidade,\r\n          uf: lastViaCepData.uf,\r\n          ibge: lastViaCepData.ibge,\r\n          numero,\r\n          complemento\r\n        };\r\n\r\n        await saveUserAddress(payload);\r\n\r\n        const addresses = await getUserAddresses(userId);\r\n        renderAddressList(addresses);\r\n        showListView();\r\n\r\n        safeShowModal({ title: 'Tudo certo!', message: 'Endereço salvo com sucesso.', confirmText: 'OK' });\r\n      } catch (err) {\r\n        console.error(err);\r\n        safeShowModal({ title: 'Erro', message: err.message || 'Erro ao salvar endereço', confirmText: 'OK' });\r\n      }\r\n    };\r\n\r\n    if (createBtn) createBtn.onclick = (e) => {\r\n      e.preventDefault();\r\n      prefillFormWithViaCEP(lastViaCepData || null);\r\n      showFormView();\r\n    };\r\n  }\r\n\r\n  // ===== Delegação GLOBAL para o botão BUSCAR e o campo CEP do FORM =====\r\n  // funciona mesmo que o HTML seja injetado depois\r\n  document.addEventListener('click', (e) => {\r\n    const target = e.target;\r\n    if (!target) return;\r\n    if (target.id === 'addr_cep_search_btn') {\r\n      e.preventDefault();\r\n      ensureViaCepForForm().catch(err =>\r\n        safeShowModal({ title: 'CEP', message: err.message || 'CEP inválido', confirmText: 'OK' })\r\n      );\r\n    }\r\n  });\r\n\r\n  document.addEventListener('input', (e) => {\r\n    const t = e.target;\r\n    if (t && t.id === 'addr_cep') {\r\n      t.value = formatCEP(t.value);\r\n    }\r\n  });\r\n\r\n  document.addEventListener('keydown', (e) => {\r\n    const t = e.target;\r\n    if (e.key === 'Enter' && t && t.id === 'addr_cep') {\r\n      e.preventDefault();\r\n      ensureViaCepForForm().catch(err =>\r\n        safeShowModal({ title: 'CEP', message: err.message || 'CEP inválido', confirmText: 'OK' })\r\n      );\r\n    }\r\n  });\r\n\r\n  // ===== API =====\r\n  async function getUserAddresses(userId) {\r\n    const res = await fetch(`${API_BASE}/addresses/${userId}`);\r\n    if (!res.ok) throw new Error('Não foi possível carregar endereços do usuário');\r\n    return res.json();\r\n  }\r\n  async function saveUserAddress(payload) {\r\n    const res = await fetch(`${API_BASE}/addresses`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(payload)\r\n    });\r\n    if (!res.ok) {\r\n      const t = await res.text().catch(() => '');\r\n      throw new Error(t || 'Erro ao salvar endereço');\r\n    }\r\n    return res.json();\r\n  }\r\n\r\n  // ===== Fluxo principal ao clicar OK do CEP no checkout =====\r\n  async function handleCepFlow() {\r\n    const userId = getLoggedUserId();\r\n    if (!userId) {\r\n      safeShowModal({ title: 'Sessão', message: 'Você precisa estar logado.', confirmText: 'OK' });\r\n      return;\r\n    }\r\n    const cepInputMain = document.getElementById('cep-input');\r\n    const raw = cepInputMain ? cepInputMain.value : '';\r\n\r\n    try {\r\n      // consulta inicial (para abrir lista com base em um CEP válido)\r\n      lastViaCepData = await fetchViaCEP(raw);\r\n      if (cepInputMain) cepInputMain.value = lastViaCepData.cep;\r\n\r\n      await mountSidebarHtmlIfNeeded();\r\n      bindSidebarButtonsCommon(userId);\r\n\r\n      const addresses = await getUserAddresses(userId);\r\n      renderAddressList(addresses);\r\n      showListView();\r\n      openSidebar();\r\n    } catch (err) {\r\n      console.error(err);\r\n      safeShowModal({ title: 'CEP inválido', message: err.message || 'Verifique o CEP informado.', confirmText: 'OK' });\r\n    }\r\n  }\r\n\r\n  // ===== Gatilhos do checkout =====\r\n  document.addEventListener('DOMContentLoaded', () => {\r\n    const cepInput = document.getElementById('cep-input');\r\n    const cepBtn   = document.getElementById('cep-ok-btn');\r\n\r\n    if (cepInput) {\r\n      cepInput.addEventListener('input', () => { cepInput.value = formatCEP(cepInput.value); });\r\n      cepInput.addEventListener('keydown', (e) => {\r\n        if (e.key === 'Enter') { e.preventDefault(); handleCepFlow(); }\r\n      });\r\n    }\r\n    if (cepBtn) {\r\n      cepBtn.addEventListener('click', (e) => { e.preventDefault(); handleCepFlow(); });\r\n    }\r\n  });\r\n\r\n  // Hooks opcionais\r\n  window.recalculateDelivery = window.recalculateDelivery || function(cep) {\r\n    console.debug('Recalcular frete para CEP:', cep);\r\n  };\r\n  window.onAddressSelected = window.onAddressSelected || function(address) {\r\n    console.debug('Endereço selecionado:', address);\r\n  };\r\n  window.openAddressSidebarForNewAddress = async function () {\r\n  const userId = (function(){\r\n    try { const u = JSON.parse(localStorage.getItem('loggedInUser')); return u && u.id ? u.id : null; }\r\n    catch { return null; }\r\n  })();\r\n\r\n  await (async function mount() {\r\n    if (document.getElementById('address-panel')) return;\r\n    const html = await fetch('../components/address-sidebar.html').then(r=>r.text());\r\n    const div = document.createElement('div'); div.innerHTML = html; document.body.appendChild(div);\r\n  })();\r\n\r\n  // reutiliza os helpers que já existem no arquivo\r\n  if (typeof bindSidebarButtonsCommon === 'function') bindSidebarButtonsCommon(userId);\r\n  if (typeof showFormView === 'function') showFormView();\r\n  if (typeof openSidebar === 'function') openSidebar();\r\n  };\r\n\r\n})();\r\n"
        }
    ]
}