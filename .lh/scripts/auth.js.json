{
    "sourceFile": "scripts/auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1756582409954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756583747346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,245 @@\n+function initializeAuth() {\r\n+    const loginForm = document.getElementById('login-form');\r\n+    const signupForm = document.getElementById('signup-form');\r\n+\r\n+    if (loginForm) {\r\n+        loginForm.addEventListener('submit', handleLoginSubmit);\r\n+    }\r\n+\r\n+    if (signupForm) {\r\n+        const radioPf = document.getElementById('radio-pf');\r\n+        const radioPj = document.getElementById('radio-pj');\r\n+        const formPf = document.getElementById('form-pf');\r\n+        const formPj = document.getElementById('form-pj');\r\n+        const ieInput = document.getElementById('ie');\r\n+        const isentoCheckbox = document.getElementById('isento_ie');\r\n+\r\n+        window.toggleForms = () => {\r\n+            if (!radioPf || !formPf || !formPj) return;\r\n+            if (radioPf.checked) {\r\n+                formPf.style.maxHeight = formPf.scrollHeight + \"px\";\r\n+                formPf.style.opacity = 1;\r\n+                formPj.style.maxHeight = 0;\r\n+                formPj.style.opacity = 0;\r\n+            } else {\r\n+                formPj.style.maxHeight = formPj.scrollHeight + \"px\";\r\n+                formPj.style.opacity = 1;\r\n+                formPf.style.maxHeight = 0;\r\n+                formPf.style.opacity = 0;\r\n+            }\r\n+        };\r\n+        \r\n+        const handleIeCheckbox = () => {\r\n+            if (!isentoCheckbox || !ieInput) return;\r\n+            if (isentoCheckbox.checked) {\r\n+                ieInput.disabled = true;\r\n+                ieInput.value = 'ISENTO';\r\n+                ieInput.classList.add('bg-gray-100');\r\n+            } else {\r\n+                ieInput.disabled = false;\r\n+                if (ieInput.value === 'ISENTO') {\r\n+                    ieInput.value = '';\r\n+                }\r\n+                ieInput.classList.remove('bg-gray-100');\r\n+            }\r\n+        };\r\n+\r\n+        radioPf.addEventListener('change', window.toggleForms);\r\n+        radioPj.addEventListener('change', window.toggleForms);\r\n+        if (isentoCheckbox) {\r\n+            isentoCheckbox.addEventListener('change', handleIeCheckbox);\r\n+            handleIeCheckbox();\r\n+        }\r\n+        \r\n+        setTimeout(window.toggleForms, 150);\r\n+\r\n+        signupForm.addEventListener('submit', handleSignupSubmit);\r\n+    }\r\n+}\r\n+\r\n+\r\n+async function handleLoginSubmit(event) {\r\n+    event.preventDefault();\r\n+    const submitButton = event.target.querySelector('button[type=\"submit\"]');\r\n+    const originalButtonHtml = submitButton.innerHTML;\r\n+    submitButton.disabled = true;\r\n+    submitButton.innerHTML = `<i class=\"fas fa-spinner fa-spin mr-2\"></i>A Entrar...`;\r\n+    const formData = new FormData(event.target);\r\n+    const data = Object.fromEntries(formData.entries());\r\n+    try {\r\n+        const response = await fetch(`${API_CONFIG.BASE_URL}/auth/login`, {\r\n+            method: 'POST',\r\n+            headers: { 'Content-Type': 'application/json' },\r\n+            body: JSON.stringify(data),\r\n+        });\r\n+        const result = await response.json();\r\n+        if (!response.ok) {\r\n+            throw new Error(result.message || 'Erro desconhecido');\r\n+        }\r\n+        localStorage.setItem('loggedInUser', JSON.stringify({\r\n+        id: result.user._id,\r\n+        token: result.token,\r\n+        ...result.user\r\n+        }));\r\n+        const modal = document.getElementById('login-success-modal');\r\n+        if (modal) {\r\n+            modal.classList.remove('hidden');\r\n+            let countdown = 3;\r\n+            const timerSpan = document.getElementById('login-redirect-timer');\r\n+            timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n+            const interval = setInterval(() => {\r\n+                countdown--;\r\n+                timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n+                if (countdown <= 0) {\r\n+                    clearInterval(interval);\r\n+                    window.location.href = '/index.html';\r\n+                }\r\n+            }, 1000);\r\n+        }\r\n+    } catch (error) {\r\n+        showModal({ title: 'Erro de Login', message: error.message, confirmText: 'Tentar Novamente' });\r\n+    } finally {\r\n+        submitButton.disabled = false;\r\n+        submitButton.innerHTML = originalButtonHtml;\r\n+    }\r\n+}\r\n+\r\n+function clearValidationErrors() {\r\n+    const signupForm = document.getElementById('signup-form');\r\n+    const formPf = document.getElementById('form-pf');\r\n+    const formPj = document.getElementById('form-pj');\r\n+\r\n+    if (formPf) formPf.style.maxHeight = 'none';\r\n+    if (formPj) formPj.style.maxHeight = 'none';\r\n+\r\n+    signupForm.querySelectorAll('.error-message').forEach(el => {\r\n+        el.textContent = '';\r\n+        el.classList.remove('show');\r\n+    });\r\n+    signupForm.querySelectorAll('.input-error').forEach(el => {\r\n+        el.classList.remove('input-error');\r\n+    });\r\n+\r\n+    if (window.toggleForms) {\r\n+      setTimeout(window.toggleForms, 50);\r\n+    }\r\n+}\r\n+\r\n+function displayValidationError(fieldName, message) {\r\n+    const signupForm = document.getElementById('signup-form');\r\n+    let field;\r\n+\r\n+    if (fieldName === 'senha' || fieldName === 'confirm_password' || fieldName === 'terms') {\r\n+        field = signupForm.querySelector(`[name=\"${fieldName}\"]`);\r\n+    } else {\r\n+        const radioPf = document.getElementById('radio-pf');\r\n+        const formPf = document.getElementById('form-pf');\r\n+        const formPj = document.getElementById('form-pj');\r\n+        const activeForm = radioPf.checked ? formPf : formPj;\r\n+        field = activeForm.querySelector(`[name=\"${fieldName}\"]`);\r\n+    }\r\n+    \r\n+    if (field) {\r\n+        field.classList.add('input-error');\r\n+        const container = field.closest('div');\r\n+        let errorElement = container.querySelector('.error-message');\r\n+        if (!errorElement) {\r\n+            errorElement = container.parentElement.querySelector('.error-message');\r\n+        }\r\n+\r\n+        if (errorElement) {\r\n+            errorElement.textContent = message;\r\n+            errorElement.classList.add('show');\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+\r\n+async function handleSignupSubmit(event) {\r\n+    event.preventDefault();\r\n+    const signupForm = document.getElementById('signup-form');\r\n+    const submitButton = signupForm.querySelector('button[type=\"submit\"]');\r\n+    const originalButtonHtml = submitButton.innerHTML;\r\n+    \r\n+    clearValidationErrors();\r\n+\r\n+    submitButton.disabled = true;\r\n+    submitButton.innerHTML = `<i class=\"fas fa-spinner fa-spin mr-2\"></i>A Registar...`;\r\n+    \r\n+    const formData = new FormData(signupForm);\r\n+    const data = Object.fromEntries(formData.entries());\r\n+    data.tipoConta = document.getElementById('radio-pf').checked ? 'pessoa_fisica' : 'pessoa_juridica';\r\n+    \r\n+    if (data.tipoConta === 'pessoa_fisica') {\r\n+        ['razaoSocial', 'cnpj', 'nomeContato', 'inscricaoEstadual', 'estadoIE', 'isentoIE'].forEach(key => delete data[key]);\r\n+        data.email = document.getElementById('email-pf').value;\r\n+        data.celular = document.getElementById('celular-pf').value;\r\n+        data.telefone = document.getElementById('telefone-pf').value;\r\n+    } else { // Pessoa Jurídica\r\n+        ['nomeCompleto', 'cpf', 'genero', 'dataNascimento'].forEach(key => delete data[key]);\r\n+        data.email = document.getElementById('email-pj').value;\r\n+        data.celular = document.getElementById('celular-pj').value;\r\n+        data.telefone = document.getElementById('telefone-pj').value;\r\n+    }\r\n+\r\n+    try {\r\n+        const response = await fetch(`${API_CONFIG.BASE_URL}/auth/register`, {\r\n+            method: 'POST',\r\n+            headers: { 'Content-Type': 'application/json' },\r\n+            body: JSON.stringify(data),\r\n+        });\r\n+        const result = await response.json();\r\n+        if (!response.ok) {\r\n+            const error = new Error('Falha na validação ou erro do servidor');\r\n+            error.result = result;\r\n+            throw error;\r\n+        }\r\n+        showSuccessModal(result.message);\r\n+    } catch (error) {\r\n+        if (error.result && error.result.errors) {\r\n+            const formPf = document.getElementById('form-pf');\r\n+            const formPj = document.getElementById('form-pj');\r\n+           \r\n+            if (formPf) formPf.style.maxHeight = 'none';\r\n+            if (formPj) formPj.style.maxHeight = 'none';\r\n+            \r\n+            error.result.errors.forEach(err => {\r\n+                displayValidationError(err.path, err.msg);\r\n+            });\r\n+            \r\n+            setTimeout(() => {\r\n+                if (window.toggleForms) {\r\n+                    window.toggleForms();\r\n+                }\r\n+            }, 100);\r\n+\r\n+            showModal({ title: 'Atenção', message: 'Por favor, corrija os erros indicados no formulário.', confirmText: 'OK' });\r\n+        } else if (error.result && error.result.message) {\r\n+             showModal({ title: 'Erro no Registo', message: error.result.message, confirmText: 'Tentar Novamente' });\r\n+        } else {\r\n+            console.error('Erro de registo:', error);\r\n+            showModal({ title: 'Erro Inesperado', message: 'Não foi possível conectar ao servidor. Verifique a sua conexão.', confirmText: 'OK' });\r\n+        }\r\n+    } finally {\r\n+        submitButton.disabled = false;\r\n+        submitButton.innerHTML = originalButtonHtml;\r\n+    }\r\n+}\r\n+\r\n+function showSuccessModal(message) {\r\n+    const modal = document.getElementById('success-modal');\r\n+    if (!modal) return;\r\n+    document.getElementById('modal-message').textContent = message;\r\n+    modal.classList.remove('hidden');\r\n+    let countdown = 3;\r\n+    const timerSpan = document.getElementById('redirect-timer');\r\n+    timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n+    const interval = setInterval(() => {\r\n+        countdown--;\r\n+        timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n+        if (countdown <= 0) {\r\n+            clearInterval(interval);\r\n+            window.location.href = '/pages/login.html';\r\n+        }\r\n+    }, 1000);\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756826000549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,250 +1,30 @@\n function initializeAuth() {\r\n-    const loginForm = document.getElementById('login-form');\r\n-    const signupForm = document.getElementById('signup-form');\r\n \r\n-    if (loginForm) {\r\n-        loginForm.addEventListener('submit', handleLoginSubmit);\r\n-    }\r\n+    // --- Remember Me helpers ---\r\n+    const REMEMBER_KEY = 'rememberLogin'; // { identifier: '...' }\r\n \r\n-    if (signupForm) {\r\n-        const radioPf = document.getElementById('radio-pf');\r\n-        const radioPj = document.getElementById('radio-pj');\r\n-        const formPf = document.getElementById('form-pf');\r\n-        const formPj = document.getElementById('form-pj');\r\n-        const ieInput = document.getElementById('ie');\r\n-        const isentoCheckbox = document.getElementById('isento_ie');\r\n-\r\n-        window.toggleForms = () => {\r\n-            if (!radioPf || !formPf || !formPj) return;\r\n-            if (radioPf.checked) {\r\n-                formPf.style.maxHeight = formPf.scrollHeight + \"px\";\r\n-                formPf.style.opacity = 1;\r\n-                formPj.style.maxHeight = 0;\r\n-                formPj.style.opacity = 0;\r\n-            } else {\r\n-                formPj.style.maxHeight = formPj.scrollHeight + \"px\";\r\n-                formPj.style.opacity = 1;\r\n-                formPf.style.maxHeight = 0;\r\n-                formPf.style.opacity = 0;\r\n-            }\r\n-        };\r\n-        \r\n-        const handleIeCheckbox = () => {\r\n-            if (!isentoCheckbox || !ieInput) return;\r\n-            if (isentoCheckbox.checked) {\r\n-                ieInput.disabled = true;\r\n-                ieInput.value = 'ISENTO';\r\n-                ieInput.classList.add('bg-gray-100');\r\n-            } else {\r\n-                ieInput.disabled = false;\r\n-                if (ieInput.value === 'ISENTO') {\r\n-                    ieInput.value = '';\r\n-                }\r\n-                ieInput.classList.remove('bg-gray-100');\r\n-            }\r\n-        };\r\n-\r\n-        radioPf.addEventListener('change', window.toggleForms);\r\n-        radioPj.addEventListener('change', window.toggleForms);\r\n-        if (isentoCheckbox) {\r\n-            isentoCheckbox.addEventListener('change', handleIeCheckbox);\r\n-            handleIeCheckbox();\r\n-        }\r\n-        \r\n-        setTimeout(window.toggleForms, 150);\r\n-\r\n-        signupForm.addEventListener('submit', handleSignupSubmit);\r\n-    }\r\n-}\r\n-\r\n-\r\n-async function handleLoginSubmit(event) {\r\n-    event.preventDefault();\r\n-    const submitButton = event.target.querySelector('button[type=\"submit\"]');\r\n-    const originalButtonHtml = submitButton.innerHTML;\r\n-    submitButton.disabled = true;\r\n-    submitButton.innerHTML = `<i class=\"fas fa-spinner fa-spin mr-2\"></i>A Entrar...`;\r\n-    const formData = new FormData(event.target);\r\n-    const data = Object.fromEntries(formData.entries());\r\n+    function hydrateRememberedIdentifier() {\r\n+    // Preenche o campo de login com o identificador salvo e marca o checkbox\r\n     try {\r\n-        const response = await fetch(`${API_CONFIG.BASE_URL}/auth/login`, {\r\n-            method: 'POST',\r\n-            headers: { 'Content-Type': 'application/json' },\r\n-            body: JSON.stringify(data),\r\n-        });\r\n-        const result = await response.json();\r\n-        if (!response.ok) {\r\n-            throw new Error(result.message || 'Erro desconhecido');\r\n+        const saved = JSON.parse(localStorage.getItem(REMEMBER_KEY) || 'null');\r\n+        if (saved?.identifier) {\r\n+        const idInput = document.getElementById('identifier');\r\n+        if (idInput) idInput.value = saved.identifier;\r\n+        const rememberEl = document.getElementById('remember-me');\r\n+        if (rememberEl) rememberEl.checked = true;\r\n         }\r\n-        localStorage.setItem('loggedInUser', JSON.stringify({\r\n-        id: result.user._id,\r\n-        token: result.token,\r\n-        ...result.user\r\n-        }));\r\n-        const modal = document.getElementById('login-success-modal');\r\n-        if (modal) {\r\n-            modal.classList.remove('hidden');\r\n-            let countdown = 3;\r\n-            const timerSpan = document.getElementById('login-redirect-timer');\r\n-            timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n-            const interval = setInterval(() => {\r\n-                countdown--;\r\n-                timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n-                if (countdown <= 0) {\r\n-                    clearInterval(interval);\r\n-                    window.location.href = '/index.html';\r\n-                }\r\n-            }, 1000);\r\n-        }\r\n-    } catch (error) {\r\n-        showModal({ title: 'Erro de Login', message: error.message, confirmText: 'Tentar Novamente' });\r\n-    } finally {\r\n-        submitButton.disabled = false;\r\n-        submitButton.innerHTML = originalButtonHtml;\r\n+    } catch { /* ignore */ }\r\n     }\r\n-}\r\n \r\n-function clearValidationErrors() {\r\n-    const signupForm = document.getElementById('signup-form');\r\n-    const formPf = document.getElementById('form-pf');\r\n-    const formPj = document.getElementById('form-pj');\r\n-\r\n-    if (formPf) formPf.style.maxHeight = 'none';\r\n-    if (formPj) formPj.style.maxHeight = 'none';\r\n-\r\n-    signupForm.querySelectorAll('.error-message').forEach(el => {\r\n-        el.textContent = '';\r\n-        el.classList.remove('show');\r\n-    });\r\n-    signupForm.querySelectorAll('.input-error').forEach(el => {\r\n-        el.classList.remove('input-error');\r\n-    });\r\n-\r\n-    if (window.toggleForms) {\r\n-      setTimeout(window.toggleForms, 50);\r\n-    }\r\n-}\r\n-\r\n-function displayValidationError(fieldName, message) {\r\n-    const signupForm = document.getElementById('signup-form');\r\n-    let field;\r\n-\r\n-    if (fieldName === 'senha' || fieldName === 'confirm_password' || fieldName === 'terms') {\r\n-        field = signupForm.querySelector(`[name=\"${fieldName}\"]`);\r\n+    function saveRememberIdentifier(identifier, checked) {\r\n+    if (checked && identifier) {\r\n+        localStorage.setItem(REMEMBER_KEY, JSON.stringify({ identifier }));\r\n     } else {\r\n-        const radioPf = document.getElementById('radio-pf');\r\n-        const formPf = document.getElementById('form-pf');\r\n-        const formPj = document.getElementById('form-pj');\r\n-        const activeForm = radioPf.checked ? formPf : formPj;\r\n-        field = activeForm.querySelector(`[name=\"${fieldName}\"]`);\r\n+        localStorage.removeItem(REMEMBER_KEY);\r\n     }\r\n-    \r\n-    if (field) {\r\n-        field.classList.add('input-error');\r\n-        const container = field.closest('div');\r\n-        let errorElement = container.querySelector('.error-message');\r\n-        if (!errorElement) {\r\n-            errorElement = container.parentElement.querySelector('.error-message');\r\n-        }\r\n-\r\n-        if (errorElement) {\r\n-            errorElement.textContent = message;\r\n-            errorElement.classList.add('show');\r\n-        }\r\n     }\r\n-}\r\n \r\n-\r\n-async function handleSignupSubmit(event) {\r\n-    event.preventDefault();\r\n-    const signupForm = document.getElementById('signup-form');\r\n-    const submitButton = signupForm.querySelector('button[type=\"submit\"]');\r\n-    const originalButtonHtml = submitButton.innerHTML;\r\n-    \r\n-    clearValidationErrors();\r\n-\r\n-    submitButton.disabled = true;\r\n-    submitButton.innerHTML = `<i class=\"fas fa-spinner fa-spin mr-2\"></i>A Registar...`;\r\n-    \r\n-    const formData = new FormData(signupForm);\r\n-    const data = Object.fromEntries(formData.entries());\r\n-    data.tipoConta = document.getElementById('radio-pf').checked ? 'pessoa_fisica' : 'pessoa_juridica';\r\n-    \r\n-    if (data.tipoConta === 'pessoa_fisica') {\r\n-        ['razaoSocial', 'cnpj', 'nomeContato', 'inscricaoEstadual', 'estadoIE', 'isentoIE'].forEach(key => delete data[key]);\r\n-        data.email = document.getElementById('email-pf').value;\r\n-        data.celular = document.getElementById('celular-pf').value;\r\n-        data.telefone = document.getElementById('telefone-pf').value;\r\n-    } else { // Pessoa Jurídica\r\n-        ['nomeCompleto', 'cpf', 'genero', 'dataNascimento'].forEach(key => delete data[key]);\r\n-        data.email = document.getElementById('email-pj').value;\r\n-        data.celular = document.getElementById('celular-pj').value;\r\n-        data.telefone = document.getElementById('telefone-pj').value;\r\n-    }\r\n-\r\n-    try {\r\n-        const response = await fetch(`${API_CONFIG.BASE_URL}/auth/register`, {\r\n-            method: 'POST',\r\n-            headers: { 'Content-Type': 'application/json' },\r\n-            body: JSON.stringify(data),\r\n-        });\r\n-        const result = await response.json();\r\n-        if (!response.ok) {\r\n-            const error = new Error('Falha na validação ou erro do servidor');\r\n-            error.result = result;\r\n-            throw error;\r\n-        }\r\n-        showSuccessModal(result.message);\r\n-    } catch (error) {\r\n-        if (error.result && error.result.errors) {\r\n-            const formPf = document.getElementById('form-pf');\r\n-            const formPj = document.getElementById('form-pj');\r\n-           \r\n-            if (formPf) formPf.style.maxHeight = 'none';\r\n-            if (formPj) formPj.style.maxHeight = 'none';\r\n-            \r\n-            error.result.errors.forEach(err => {\r\n-                displayValidationError(err.path, err.msg);\r\n-            });\r\n-            \r\n-            setTimeout(() => {\r\n-                if (window.toggleForms) {\r\n-                    window.toggleForms();\r\n-                }\r\n-            }, 100);\r\n-\r\n-            showModal({ title: 'Atenção', message: 'Por favor, corrija os erros indicados no formulário.', confirmText: 'OK' });\r\n-        } else if (error.result && error.result.message) {\r\n-             showModal({ title: 'Erro no Registo', message: error.result.message, confirmText: 'Tentar Novamente' });\r\n-        } else {\r\n-            console.error('Erro de registo:', error);\r\n-            showModal({ title: 'Erro Inesperado', message: 'Não foi possível conectar ao servidor. Verifique a sua conexão.', confirmText: 'OK' });\r\n-        }\r\n-    } finally {\r\n-        submitButton.disabled = false;\r\n-        submitButton.innerHTML = originalButtonHtml;\r\n-    }\r\n-}\r\n-\r\n-function showSuccessModal(message) {\r\n-    const modal = document.getElementById('success-modal');\r\n-    if (!modal) return;\r\n-    document.getElementById('modal-message').textContent = message;\r\n-    modal.classList.remove('hidden');\r\n-    let countdown = 3;\r\n-    const timerSpan = document.getElementById('redirect-timer');\r\n-    timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n-    const interval = setInterval(() => {\r\n-        countdown--;\r\n-        timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n-        if (countdown <= 0) {\r\n-            clearInterval(interval);\r\n-            window.location.href = '/pages/login.html';\r\n-        }\r\n-    }, 1000);\r\n-}\n-function initializeAuth() {\r\n     const loginForm = document.getElementById('login-form');\r\n     const signupForm = document.getElementById('signup-form');\r\n \r\n     if (loginForm) {\r\n@@ -320,10 +100,13 @@\n         const result = await response.json();\r\n         if (!response.ok) {\r\n             throw new Error(result.message || 'Erro desconhecido');\r\n         }\r\n-        localStorage.setItem('authToken', result.token);\r\n-        localStorage.setItem('loggedInUser', JSON.stringify(result.user));\r\n+        localStorage.setItem('loggedInUser', JSON.stringify({\r\n+        id: result.user._id,\r\n+        token: result.token,\r\n+        ...result.user\r\n+        }));\r\n         const modal = document.getElementById('login-success-modal');\r\n         if (modal) {\r\n             modal.classList.remove('hidden');\r\n             let countdown = 3;\r\n"
                },
                {
                    "date": 1756826190305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,39 @@\n-function initializeAuth() {\r\n+// --- Remember Me helpers ---\r\n+const REMEMBER_KEY = 'rememberLogin'; // { identifier: '...' }\r\n \r\n-    // --- Remember Me helpers ---\r\n-    const REMEMBER_KEY = 'rememberLogin'; // { identifier: '...' }\r\n-\r\n-    function hydrateRememberedIdentifier() {\r\n-    // Preenche o campo de login com o identificador salvo e marca o checkbox\r\n-    try {\r\n-        const saved = JSON.parse(localStorage.getItem(REMEMBER_KEY) || 'null');\r\n-        if (saved?.identifier) {\r\n-        const idInput = document.getElementById('identifier');\r\n-        if (idInput) idInput.value = saved.identifier;\r\n-        const rememberEl = document.getElementById('remember-me');\r\n-        if (rememberEl) rememberEl.checked = true;\r\n-        }\r\n-    } catch { /* ignore */ }\r\n+function hydrateRememberedIdentifier() {\r\n+  // Preenche o campo de login com o identificador salvo e marca o checkbox\r\n+  try {\r\n+    const saved = JSON.parse(localStorage.getItem(REMEMBER_KEY) || 'null');\r\n+    if (saved?.identifier) {\r\n+      const idInput = document.getElementById('identifier');\r\n+      if (idInput) idInput.value = saved.identifier;\r\n+      const rememberEl = document.getElementById('remember-me');\r\n+      if (rememberEl) rememberEl.checked = true;\r\n     }\r\n+  } catch { /* ignore */ }\r\n+}\r\n \r\n-    function saveRememberIdentifier(identifier, checked) {\r\n-    if (checked && identifier) {\r\n-        localStorage.setItem(REMEMBER_KEY, JSON.stringify({ identifier }));\r\n-    } else {\r\n-        localStorage.removeItem(REMEMBER_KEY);\r\n-    }\r\n-    }\r\n+function saveRememberIdentifier(identifier, checked) {\r\n+  if (checked && identifier) {\r\n+    localStorage.setItem(REMEMBER_KEY, JSON.stringify({ identifier }));\r\n+  } else {\r\n+    localStorage.removeItem(REMEMBER_KEY);\r\n+  }\r\n+}\r\n \r\n+function initializeAuth() {\r\n     const loginForm = document.getElementById('login-form');\r\n     const signupForm = document.getElementById('signup-form');\r\n \r\n     if (loginForm) {\r\n+        hydrateRememberedIdentifier();\r\n+        const rememberEl = document.getElementById('remember-me');\r\n+        rememberEl?.addEventListener('change', () => {\r\n+        if (!rememberEl.checked) localStorage.removeItem(REMEMBER_KEY);\r\n+        });\r\n+\r\n         loginForm.addEventListener('submit', handleLoginSubmit);\r\n     }\r\n \r\n     if (signupForm) {\r\n@@ -83,51 +88,63 @@\n }\r\n \r\n \r\n async function handleLoginSubmit(event) {\r\n-    event.preventDefault();\r\n-    const submitButton = event.target.querySelector('button[type=\"submit\"]');\r\n-    const originalButtonHtml = submitButton.innerHTML;\r\n-    submitButton.disabled = true;\r\n-    submitButton.innerHTML = `<i class=\"fas fa-spinner fa-spin mr-2\"></i>A Entrar...`;\r\n-    const formData = new FormData(event.target);\r\n-    const data = Object.fromEntries(formData.entries());\r\n-    try {\r\n-        const response = await fetch(`${API_CONFIG.BASE_URL}/auth/login`, {\r\n-            method: 'POST',\r\n-            headers: { 'Content-Type': 'application/json' },\r\n-            body: JSON.stringify(data),\r\n-        });\r\n-        const result = await response.json();\r\n-        if (!response.ok) {\r\n-            throw new Error(result.message || 'Erro desconhecido');\r\n+  event.preventDefault();\r\n+  const submitButton = event.target.querySelector('button[type=\"submit\"]');\r\n+  const originalButtonHtml = submitButton.innerHTML;\r\n+  submitButton.disabled = true;\r\n+  submitButton.innerHTML = `<i class=\"fas fa-spinner fa-spin mr-2\"></i>A Entrar...`;\r\n+\r\n+  const formData = new FormData(event.target);\r\n+  const data = Object.fromEntries(formData.entries()); // { identifier, senha }\r\n+\r\n+  try {\r\n+    const response = await fetch(`${API_CONFIG.BASE_URL}/auth/login`, {\r\n+      method: 'POST',\r\n+      headers: { 'Content-Type': 'application/json' },\r\n+      body: JSON.stringify(data),\r\n+    });\r\n+    const result = await response.json();\r\n+    if (!response.ok) {\r\n+      throw new Error(result.message || 'Erro desconhecido');\r\n+    }\r\n+\r\n+    // salva a sessão como o site já usa\r\n+    localStorage.setItem('loggedInUser', JSON.stringify({\r\n+      id: result.user._id,\r\n+      token: result.token,\r\n+      ...result.user\r\n+    }));\r\n+\r\n+    // >>> ADIÇÃO: lembrar (ou apagar) o identificador\r\n+    const rememberEl = document.getElementById('remember-me');\r\n+    const identifierNow = data.identifier ?? document.getElementById('identifier')?.value ?? '';\r\n+    saveRememberIdentifier(identifierNow, !!rememberEl?.checked);\r\n+    // <<<\r\n+\r\n+    // modal de sucesso + redirecionamento (seu comportamento atual)\r\n+    const modal = document.getElementById('login-success-modal');\r\n+    if (modal) {\r\n+      modal.classList.remove('hidden');\r\n+      let countdown = 3;\r\n+      const timerSpan = document.getElementById('login-redirect-timer');\r\n+      timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n+      const interval = setInterval(() => {\r\n+        countdown--;\r\n+        timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n+        if (countdown <= 0) {\r\n+          clearInterval(interval);\r\n+          window.location.href = '/index.html';\r\n         }\r\n-        localStorage.setItem('loggedInUser', JSON.stringify({\r\n-        id: result.user._id,\r\n-        token: result.token,\r\n-        ...result.user\r\n-        }));\r\n-        const modal = document.getElementById('login-success-modal');\r\n-        if (modal) {\r\n-            modal.classList.remove('hidden');\r\n-            let countdown = 3;\r\n-            const timerSpan = document.getElementById('login-redirect-timer');\r\n-            timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n-            const interval = setInterval(() => {\r\n-                countdown--;\r\n-                timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n-                if (countdown <= 0) {\r\n-                    clearInterval(interval);\r\n-                    window.location.href = '/index.html';\r\n-                }\r\n-            }, 1000);\r\n-        }\r\n-    } catch (error) {\r\n-        showModal({ title: 'Erro de Login', message: error.message, confirmText: 'Tentar Novamente' });\r\n-    } finally {\r\n-        submitButton.disabled = false;\r\n-        submitButton.innerHTML = originalButtonHtml;\r\n+      }, 1000);\r\n     }\r\n+  } catch (error) {\r\n+    showModal({ title: 'Erro de Login', message: error.message, confirmText: 'Tentar Novamente' });\r\n+  } finally {\r\n+    submitButton.disabled = false;\r\n+    submitButton.innerHTML = originalButtonHtml;\r\n+  }\r\n }\r\n \r\n function clearValidationErrors() {\r\n     const signupForm = document.getElementById('signup-form');\r\n"
                }
            ],
            "date": 1756582409954,
            "name": "Commit-0",
            "content": "function initializeAuth() {\r\n    const loginForm = document.getElementById('login-form');\r\n    const signupForm = document.getElementById('signup-form');\r\n\r\n    if (loginForm) {\r\n        loginForm.addEventListener('submit', handleLoginSubmit);\r\n    }\r\n\r\n    if (signupForm) {\r\n        const radioPf = document.getElementById('radio-pf');\r\n        const radioPj = document.getElementById('radio-pj');\r\n        const formPf = document.getElementById('form-pf');\r\n        const formPj = document.getElementById('form-pj');\r\n        const ieInput = document.getElementById('ie');\r\n        const isentoCheckbox = document.getElementById('isento_ie');\r\n\r\n        window.toggleForms = () => {\r\n            if (!radioPf || !formPf || !formPj) return;\r\n            if (radioPf.checked) {\r\n                formPf.style.maxHeight = formPf.scrollHeight + \"px\";\r\n                formPf.style.opacity = 1;\r\n                formPj.style.maxHeight = 0;\r\n                formPj.style.opacity = 0;\r\n            } else {\r\n                formPj.style.maxHeight = formPj.scrollHeight + \"px\";\r\n                formPj.style.opacity = 1;\r\n                formPf.style.maxHeight = 0;\r\n                formPf.style.opacity = 0;\r\n            }\r\n        };\r\n        \r\n        const handleIeCheckbox = () => {\r\n            if (!isentoCheckbox || !ieInput) return;\r\n            if (isentoCheckbox.checked) {\r\n                ieInput.disabled = true;\r\n                ieInput.value = 'ISENTO';\r\n                ieInput.classList.add('bg-gray-100');\r\n            } else {\r\n                ieInput.disabled = false;\r\n                if (ieInput.value === 'ISENTO') {\r\n                    ieInput.value = '';\r\n                }\r\n                ieInput.classList.remove('bg-gray-100');\r\n            }\r\n        };\r\n\r\n        radioPf.addEventListener('change', window.toggleForms);\r\n        radioPj.addEventListener('change', window.toggleForms);\r\n        if (isentoCheckbox) {\r\n            isentoCheckbox.addEventListener('change', handleIeCheckbox);\r\n            handleIeCheckbox();\r\n        }\r\n        \r\n        setTimeout(window.toggleForms, 150);\r\n\r\n        signupForm.addEventListener('submit', handleSignupSubmit);\r\n    }\r\n}\r\n\r\n\r\nasync function handleLoginSubmit(event) {\r\n    event.preventDefault();\r\n    const submitButton = event.target.querySelector('button[type=\"submit\"]');\r\n    const originalButtonHtml = submitButton.innerHTML;\r\n    submitButton.disabled = true;\r\n    submitButton.innerHTML = `<i class=\"fas fa-spinner fa-spin mr-2\"></i>A Entrar...`;\r\n    const formData = new FormData(event.target);\r\n    const data = Object.fromEntries(formData.entries());\r\n    try {\r\n        const response = await fetch(`${API_CONFIG.BASE_URL}/auth/login`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(data),\r\n        });\r\n        const result = await response.json();\r\n        if (!response.ok) {\r\n            throw new Error(result.message || 'Erro desconhecido');\r\n        }\r\n        localStorage.setItem('authToken', result.token);\r\n        localStorage.setItem('loggedInUser', JSON.stringify(result.user));\r\n        const modal = document.getElementById('login-success-modal');\r\n        if (modal) {\r\n            modal.classList.remove('hidden');\r\n            let countdown = 3;\r\n            const timerSpan = document.getElementById('login-redirect-timer');\r\n            timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n            const interval = setInterval(() => {\r\n                countdown--;\r\n                timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n                if (countdown <= 0) {\r\n                    clearInterval(interval);\r\n                    window.location.href = '/index.html';\r\n                }\r\n            }, 1000);\r\n        }\r\n    } catch (error) {\r\n        showModal({ title: 'Erro de Login', message: error.message, confirmText: 'Tentar Novamente' });\r\n    } finally {\r\n        submitButton.disabled = false;\r\n        submitButton.innerHTML = originalButtonHtml;\r\n    }\r\n}\r\n\r\nfunction clearValidationErrors() {\r\n    const signupForm = document.getElementById('signup-form');\r\n    const formPf = document.getElementById('form-pf');\r\n    const formPj = document.getElementById('form-pj');\r\n\r\n    if (formPf) formPf.style.maxHeight = 'none';\r\n    if (formPj) formPj.style.maxHeight = 'none';\r\n\r\n    signupForm.querySelectorAll('.error-message').forEach(el => {\r\n        el.textContent = '';\r\n        el.classList.remove('show');\r\n    });\r\n    signupForm.querySelectorAll('.input-error').forEach(el => {\r\n        el.classList.remove('input-error');\r\n    });\r\n\r\n    if (window.toggleForms) {\r\n      setTimeout(window.toggleForms, 50);\r\n    }\r\n}\r\n\r\nfunction displayValidationError(fieldName, message) {\r\n    const signupForm = document.getElementById('signup-form');\r\n    let field;\r\n\r\n    if (fieldName === 'senha' || fieldName === 'confirm_password' || fieldName === 'terms') {\r\n        field = signupForm.querySelector(`[name=\"${fieldName}\"]`);\r\n    } else {\r\n        const radioPf = document.getElementById('radio-pf');\r\n        const formPf = document.getElementById('form-pf');\r\n        const formPj = document.getElementById('form-pj');\r\n        const activeForm = radioPf.checked ? formPf : formPj;\r\n        field = activeForm.querySelector(`[name=\"${fieldName}\"]`);\r\n    }\r\n    \r\n    if (field) {\r\n        field.classList.add('input-error');\r\n        const container = field.closest('div');\r\n        let errorElement = container.querySelector('.error-message');\r\n        if (!errorElement) {\r\n            errorElement = container.parentElement.querySelector('.error-message');\r\n        }\r\n\r\n        if (errorElement) {\r\n            errorElement.textContent = message;\r\n            errorElement.classList.add('show');\r\n        }\r\n    }\r\n}\r\n\r\n\r\nasync function handleSignupSubmit(event) {\r\n    event.preventDefault();\r\n    const signupForm = document.getElementById('signup-form');\r\n    const submitButton = signupForm.querySelector('button[type=\"submit\"]');\r\n    const originalButtonHtml = submitButton.innerHTML;\r\n    \r\n    clearValidationErrors();\r\n\r\n    submitButton.disabled = true;\r\n    submitButton.innerHTML = `<i class=\"fas fa-spinner fa-spin mr-2\"></i>A Registar...`;\r\n    \r\n    const formData = new FormData(signupForm);\r\n    const data = Object.fromEntries(formData.entries());\r\n    data.tipoConta = document.getElementById('radio-pf').checked ? 'pessoa_fisica' : 'pessoa_juridica';\r\n    \r\n    if (data.tipoConta === 'pessoa_fisica') {\r\n        ['razaoSocial', 'cnpj', 'nomeContato', 'inscricaoEstadual', 'estadoIE', 'isentoIE'].forEach(key => delete data[key]);\r\n        data.email = document.getElementById('email-pf').value;\r\n        data.celular = document.getElementById('celular-pf').value;\r\n        data.telefone = document.getElementById('telefone-pf').value;\r\n    } else { // Pessoa Jurídica\r\n        ['nomeCompleto', 'cpf', 'genero', 'dataNascimento'].forEach(key => delete data[key]);\r\n        data.email = document.getElementById('email-pj').value;\r\n        data.celular = document.getElementById('celular-pj').value;\r\n        data.telefone = document.getElementById('telefone-pj').value;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`${API_CONFIG.BASE_URL}/auth/register`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(data),\r\n        });\r\n        const result = await response.json();\r\n        if (!response.ok) {\r\n            const error = new Error('Falha na validação ou erro do servidor');\r\n            error.result = result;\r\n            throw error;\r\n        }\r\n        showSuccessModal(result.message);\r\n    } catch (error) {\r\n        if (error.result && error.result.errors) {\r\n            const formPf = document.getElementById('form-pf');\r\n            const formPj = document.getElementById('form-pj');\r\n           \r\n            if (formPf) formPf.style.maxHeight = 'none';\r\n            if (formPj) formPj.style.maxHeight = 'none';\r\n            \r\n            error.result.errors.forEach(err => {\r\n                displayValidationError(err.path, err.msg);\r\n            });\r\n            \r\n            setTimeout(() => {\r\n                if (window.toggleForms) {\r\n                    window.toggleForms();\r\n                }\r\n            }, 100);\r\n\r\n            showModal({ title: 'Atenção', message: 'Por favor, corrija os erros indicados no formulário.', confirmText: 'OK' });\r\n        } else if (error.result && error.result.message) {\r\n             showModal({ title: 'Erro no Registo', message: error.result.message, confirmText: 'Tentar Novamente' });\r\n        } else {\r\n            console.error('Erro de registo:', error);\r\n            showModal({ title: 'Erro Inesperado', message: 'Não foi possível conectar ao servidor. Verifique a sua conexão.', confirmText: 'OK' });\r\n        }\r\n    } finally {\r\n        submitButton.disabled = false;\r\n        submitButton.innerHTML = originalButtonHtml;\r\n    }\r\n}\r\n\r\nfunction showSuccessModal(message) {\r\n    const modal = document.getElementById('success-modal');\r\n    if (!modal) return;\r\n    document.getElementById('modal-message').textContent = message;\r\n    modal.classList.remove('hidden');\r\n    let countdown = 3;\r\n    const timerSpan = document.getElementById('redirect-timer');\r\n    timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n    const interval = setInterval(() => {\r\n        countdown--;\r\n        timerSpan.textContent = `A redirecionar em ${countdown}...`;\r\n        if (countdown <= 0) {\r\n            clearInterval(interval);\r\n            window.location.href = '/pages/login.html';\r\n        }\r\n    }, 1000);\r\n}"
        }
    ]
}